/*
    artifact generator: /wizzi/lib/artifacts/js/module/gen/main.js
    primary source IttfDocument: C:\My\wizzi\wizzi-npm\node_modules\wizzi\examples\js\ittf\hello.js.ittf
    utc time: Mon, 13 Mar 2017 12:40:15 GMT
*/
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

/**
     test var
*/
var x = 1;
var y = {
    name: 'stefi'
};
var alpha = 0,
    sum = function(a,b) {
        return a + b;
    };
/**
     test objects
*/
var obj_1 = {
    numbers: [
        1, 
        2
    ], 
    letters: [
        'a', 
        'b'
    ], 
    numbers_letters: [
        {
            num: 1, 
            letter: 'a'
        }, 
        {
            num: 2, 
            letter: 'b'
        }
    ], 
    start: 0, 
    state: {
        value: null, 
        add: function(b) {
            this.value = value + b;
        }
    }
};
/**
     test functions
*/
function setNumLet(num,letter,mode) {
    if (mode === 'object') {
        return {
                num: num, 
                letter: letter
            };
    }
    else {
        return alpha + beta;
    }
}

/**
     test class
*/
var animal = (function () {
    function animal(kind,numlegs) {
        _classCallCheck(this, animal);
        this.kind = kind;
        this.numlegs = numlegs;
    }
    return animal;
})();


var cat = (function (animal) {
    _inherits(cat, animal);
    function cat(name) {
        _get(Object.getPrototypeOf(cat.prototype), 'constructor', this).call(this, 'cat',4);
        _classCallCheck(this, cat);
    }
    return cat;
})(animal);


var miao = new cat('miao', getLegs('cat'));
/**
     test call
*/
exec(argument, {
    property: 'hello'
}, [
    arrayItem1, 
    arrayItem2
], function() {
    // ... statements ...
}, retrieveValue(argument)
);
/**
     test iife
*/
(function($) {
    function high(element) {
        $(element).addClass('highlight');
    }
})(jQuery);
/**
     test if
*/
if (a) {
    a();
}
else if (b) {
    b();
}
else {
    c();
}
/**
     test switch
*/
switch (alpha) {
    case 0: {
        beta(0);
    }
    case 10: {
        beta(1);
    }
    default: {
        beta(null);
    }
}
/**
     test loops
*/
var j = 0;
while (j < 10) {
    console.log(j);
    j++;
}
do {
    console.log(j);
    j--;
} while (j > 0)
for (k in miao) {
    console.log(k, miao[k]);
}
var i, i_len=[1,2,3].length, a;
for (i=0; i<i_len; i++) {
    a = [1,2,3][i];
    console.log(a);
}
/**
     test debug
*/
console.log('hello', miao);
console.log("miao" + " " + util.inspect(miao, { depth: null}));
console.log(chalk.red(miao));
