// generator: /wizzi-labs/wizzi-lab-site/ittf/lib/artifacts/js/module/gen/main.js, utc time: Thu, 23 Mar 2017 19:48:48 GMT
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');

var md = module.exports = {};

var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row,col,sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();


md.wzSourceLineInfo = wzSourceLineInfo;
var noolsBase = (function () {
    function noolsBase(name,sourceLineInfo) {
        _classCallCheck(this, noolsBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    noolsBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    noolsBase.prototype.wzSourceFilepath = function(sourceKey) {
        return this.wzRoot().loadContext.getIttfDocumentUri(sourceKey);
    }
    noolsBase.prototype.wzVerify = function() {
    }
    noolsBase.prototype.wzInitialize = function() {
    }
    noolsBase.prototype.wzInitializeAsync = function(ctx,callback) {
        callback(null);
    }
    noolsBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    noolsBase.prototype.wzLoadToChildColl = function(child,type,coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    noolsBase.prototype.wzLoadToChildren = function(child,type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    noolsBase.prototype.wzLoadOneToOne = function(child,type,fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    noolsBase.prototype.error = function(message,node) {
        throw new md.noolsException(message, node, this);
    }
    return noolsBase;
})();


md.noolsBase = noolsBase;

/**
    element nools
     The root tag of the nools schema.
     A nools IttfDocument defines one Flow.
     A Flow is a container of Rule(s).
     In a Flow you declare Fact types and Rule(s).
     Instances of Flow(s) are called Session(s).
     In a Session instances of Facts are matched against Rule(s).
*/
var nools = (function (noolsBase) {
    _inherits(nools, noolsBase);
    function nools(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(nools.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, nools);
        this.wzElement = "nools";
        // relation global
        this.globals = [];
        // relation fact
        this.facts = [];
        // relation rule
        this.rules = [];
        // relation agendaGroup
        this.agendaGroups = [];
        // relation xfunction
        this.functions = [];
    }
    nools.prototype.addGlobal = function(name,sourceLineInfo) {
        var retval = new md.global(name, sourceLineInfo);
        retval.wzParent = this;
        this.globals.push(retval);
        return retval;
    }
    nools.prototype.getGlobal = function(name) {
        var found = null;
        this.globals.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    nools.prototype.addFact = function(name,sourceLineInfo) {
        var retval = new md.fact(name, sourceLineInfo);
        retval.wzParent = this;
        this.facts.push(retval);
        return retval;
    }
    nools.prototype.getFact = function(name) {
        var found = null;
        this.facts.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    nools.prototype.addRule = function(name,sourceLineInfo) {
        var retval = new md.rule(name, sourceLineInfo);
        retval.wzParent = this;
        this.rules.push(retval);
        return retval;
    }
    nools.prototype.getRule = function(name) {
        var found = null;
        this.rules.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    nools.prototype.addAgendaGroup = function(name,sourceLineInfo) {
        var retval = new md.agendaGroup(name, sourceLineInfo);
        retval.wzParent = this;
        this.agendaGroups.push(retval);
        return retval;
    }
    nools.prototype.getAgendaGroup = function(name) {
        var found = null;
        this.agendaGroups.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    nools.prototype.addXfunction = function(name,sourceLineInfo) {
        var retval = new md.xfunction(name, sourceLineInfo);
        retval.wzParent = this;
        this.functions.push(retval);
        return retval;
    }
    nools.prototype.getXfunction = function(name) {
        var found = null;
        this.functions.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    nools.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'd') {
            if (name === 'def') {
                return this.wzLoadToChildColl(child, md.fact, this.facts);
            }
        }
        if (_l == 4 && _ch == 'r') {
            if (name === 'rule') {
                return this.wzLoadToChildColl(child, md.rule, this.rules);
            }
        }
        if (_l == 5 && _ch == 'g') {
            if (name === 'group') {
                return this.wzLoadToChildColl(child, md.agendaGroup, this.agendaGroups);
            }
        }
        if (_l == 6 && _ch == 'g') {
            if (name === 'global') {
                return this.wzLoadToChildColl(child, md.global, this.globals);
            }
        }
        if (_l == 8 && _ch == 'f') {
            if (name === 'function') {
                return this.wzLoadToChildColl(child, md.xfunction, this.functions);
            }
        }
        return ok;
    }
    nools.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.noolsException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    nools.prototype.wzVerify = function(ctx) {
        var i, i_len=this.globals.length, item;
        for (i=0; i<i_len; i++) {
            item = this.globals[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.facts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.facts[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.rules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.rules[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.agendaGroups.length, item;
        for (i=0; i<i_len; i++) {
            item = this.agendaGroups[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.functions.length, item;
        for (i=0; i<i_len; i++) {
            item = this.functions[i];
            item.wzVerify(ctx);
        }
        md.noolsBase.prototype.wzVerify.call(this, ctx);
    }
    nools.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.globals.length, item;
        for (i=0; i<i_len; i++) {
            item = this.globals[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.facts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.facts[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.rules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.rules[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.agendaGroups.length, item;
        for (i=0; i<i_len; i++) {
            item = this.agendaGroups[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.functions.length, item;
        for (i=0; i<i_len; i++) {
            item = this.functions[i];
            item.wzInitialize(ctx);
        }
        md.noolsBase.prototype.wzInitialize.call(this, ctx);
    }
    return nools;
})(noolsBase);


md.nools = nools;
/**
    element global
     Globals are accessible through the current working scope of rule facts in a dsl,
     very similar to using the scope option when compiling.
     Note: globals are not part of the working memory and therefore are not accessible
     in the LHS (when) of your rule.
*/
var global = (function (noolsBase) {
    _inherits(global, noolsBase);
    function global(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(global.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, global);
        this.wzElement = "global";
    }
    return global;
})(noolsBase);


md.global = global;
/**
    element fact
     Declares a Fact type.
     A Fact type must be a String or a javascript Function.
     dsl > define 'type-name' {
     In a Session (an istance of a Flow) instances of Fact(s) can be:
     . asserted
     . retracted
     . modified
     . retrivied (all or by Type)
*/
var fact = (function (noolsBase) {
    _inherits(fact, noolsBase);
    function fact(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(fact.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, fact);
        this.wzElement = "fact";
        // relation property
        this.properties = [];
        // relation ctor
        this.ctor = null;
        // relation xfunction
        this.functions = [];
    }
    fact.prototype.addProperty = function(name,sourceLineInfo) {
        var retval = new md.property(name, sourceLineInfo);
        retval.wzParent = this;
        this.properties.push(retval);
        return retval;
    }
    fact.prototype.getProperty = function(name) {
        var found = null;
        this.properties.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    fact.prototype.addXfunction = function(name,sourceLineInfo) {
        var retval = new md.xfunction(name, sourceLineInfo);
        retval.wzParent = this;
        this.functions.push(retval);
        return retval;
    }
    fact.prototype.getXfunction = function(name) {
        var found = null;
        this.functions.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    fact.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, md.property, this.properties);
            }
        }
        if (_l == 4 && _ch == 'c') {
            if (name === 'ctor') {
                return this.wzLoadOneToOne(child, md.ctor, 'ctor');
            }
        }
        if (_l == 8 && _ch == 'f') {
            if (name === 'function') {
                return this.wzLoadToChildColl(child, md.xfunction, this.functions);
            }
        }
        return ok;
    }
    fact.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.noolsException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    fact.prototype.wzVerify = function(ctx) {
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzVerify(ctx);
        }
        if (this.ctor != null) {
            this.ctor.wzVerify(ctx);
        }
        var i, i_len=this.functions.length, item;
        for (i=0; i<i_len; i++) {
            item = this.functions[i];
            item.wzVerify(ctx);
        }
        md.noolsBase.prototype.wzVerify.call(this, ctx);
    }
    fact.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzInitialize(ctx);
        }
        if (this.ctor != null) {
            this.ctor.wzInitialize(ctx);
        }
        var i, i_len=this.functions.length, item;
        for (i=0; i<i_len; i++) {
            item = this.functions[i];
            item.wzInitialize(ctx);
        }
        md.noolsBase.prototype.wzInitialize.call(this, ctx);
    }
    return fact;
})(noolsBase);


md.fact = fact;
/**
    element ctor
     Fact type constructor
*/
var ctor = (function (noolsBase) {
    _inherits(ctor, noolsBase);
    function ctor(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(ctor.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ctor);
        this.wzElement = "ctor";
        // relation param
        this.params = [];
        // relation codeline
        this.codelines = [];
    }
    ctor.prototype.addParam = function(name,sourceLineInfo) {
        var retval = new md.param(name, sourceLineInfo);
        retval.wzParent = this;
        this.params.push(retval);
        return retval;
    }
    ctor.prototype.getParam = function(name) {
        var found = null;
        this.params.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    ctor.prototype.addCodeline = function(name,sourceLineInfo) {
        var retval = new md.codeline(name, sourceLineInfo);
        retval.wzParent = this;
        this.codelines.push(retval);
        return retval;
    }
    ctor.prototype.getCodeline = function(name) {
        var found = null;
        this.codelines.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    ctor.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '+') {
            if (name === '+') {
                return this.wzLoadToChildColl(child, md.codeline, this.codelines);
            }
        }
        if (_l == 5 && _ch == 'p') {
            if (name === 'param') {
                return this.wzLoadToChildColl(child, md.param, this.params);
            }
        }
        return ok;
    }
    ctor.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.noolsException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    ctor.prototype.wzVerify = function(ctx) {
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.codelines.length, item;
        for (i=0; i<i_len; i++) {
            item = this.codelines[i];
            item.wzVerify(ctx);
        }
        md.noolsBase.prototype.wzVerify.call(this, ctx);
    }
    ctor.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.codelines.length, item;
        for (i=0; i<i_len; i++) {
            item = this.codelines[i];
            item.wzInitialize(ctx);
        }
        md.noolsBase.prototype.wzInitialize.call(this, ctx);
    }
    ctor.prototype.getParams = function() {
        var ret = [];
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            ret.push(item.wzName);
        }
        return ret;
    }
    return ctor;
})(noolsBase);


md.ctor = ctor;
// element property
var property = (function (noolsBase) {
    _inherits(property, noolsBase);
    function property(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(property.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, property);
        this.wzElement = "property";
        // relation xfunction
        this.functions = [];
    }
    property.prototype.addXfunction = function(name,sourceLineInfo) {
        var retval = new md.xfunction(name, sourceLineInfo);
        retval.wzParent = this;
        this.functions.push(retval);
        return retval;
    }
    property.prototype.getXfunction = function(name) {
        var found = null;
        this.functions.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    property.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 8 && _ch == 'f') {
            if (name === 'function') {
                return this.wzLoadToChildColl(child, md.xfunction, this.functions);
            }
        }
        return ok;
    }
    property.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.noolsException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    property.prototype.wzVerify = function(ctx) {
        var i, i_len=this.functions.length, item;
        for (i=0; i<i_len; i++) {
            item = this.functions[i];
            item.wzVerify(ctx);
        }
        md.noolsBase.prototype.wzVerify.call(this, ctx);
    }
    property.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.functions.length, item;
        for (i=0; i<i_len; i++) {
            item = this.functions[i];
            item.wzInitialize(ctx);
        }
        md.noolsBase.prototype.wzInitialize.call(this, ctx);
    }
    return property;
})(noolsBase);


md.property = property;
/**
    element agendaGroup
     Agenda groups allow for logical groups of rules within a flow.
     Rule(s) that do not have an agenda-group specified are placed into
     the main agenda-group.
*/
var agendaGroup = (function (noolsBase) {
    _inherits(agendaGroup, noolsBase);
    function agendaGroup(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(agendaGroup.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, agendaGroup);
        this.wzElement = "agendaGroup";
        // relation rule
        this.rules = [];
    }
    agendaGroup.prototype.addRule = function(name,sourceLineInfo) {
        var retval = new md.rule(name, sourceLineInfo);
        retval.wzParent = this;
        this.rules.push(retval);
        return retval;
    }
    agendaGroup.prototype.getRule = function(name) {
        var found = null;
        this.rules.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    agendaGroup.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'r') {
            if (name === 'rule') {
                return this.wzLoadToChildColl(child, md.rule, this.rules);
            }
        }
        return ok;
    }
    agendaGroup.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.noolsException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    agendaGroup.prototype.wzVerify = function(ctx) {
        var i, i_len=this.rules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.rules[i];
            item.wzVerify(ctx);
        }
        md.noolsBase.prototype.wzVerify.call(this, ctx);
    }
    agendaGroup.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.rules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.rules[i];
            item.wzInitialize(ctx);
        }
        md.noolsBase.prototype.wzInitialize.call(this, ctx);
    }
    return agendaGroup;
})(noolsBase);


md.agendaGroup = agendaGroup;
/**
    element rule
     A Rule
     . applyies to a Fact type
     . has one or many Constraint(s)
     . describe an Action that is execute when the Fact instance
     matches the Constraint(s)
*/
var rule = (function (noolsBase) {
    _inherits(rule, noolsBase);
    function rule(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(rule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, rule);
        this.wzElement = "rule";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        this.agendaGroup = null;
        // TODO avoid this declaration, attributes should be tested for undefined not null
        this.autoFocus = null;
        /**
             Salience is an option that can be specified on a rule
             giving it a priority and allowing the developer some control
             over conflict resolution of activations.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        this.salience = null;
        // relation option
        this.options = [];
        // relation constraint
        this.constraints = [];
        // relation action
        this.actions = [];
    }
    rule.prototype.addOption = function(name,sourceLineInfo) {
        var retval = new md.option(name, sourceLineInfo);
        retval.wzParent = this;
        this.options.push(retval);
        return retval;
    }
    rule.prototype.getOption = function(name) {
        var found = null;
        this.options.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    rule.prototype.getConstraint = function(name) {
        var found = null;
        this.constraints.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    rule.prototype.addAction = function(name,sourceLineInfo) {
        var retval = new md.action(name, sourceLineInfo);
        retval.wzParent = this;
        this.actions.push(retval);
        return retval;
    }
    rule.prototype.getAction = function(name) {
        var found = null;
        this.actions.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    rule.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 2 && _ch == 'i') {
            if (name === 'is') {
                return this.wzLoadToChildColl(child, md.is, this.constraints);
            }
        }
        if (_l == 2 && _ch == 'o') {
            if (name === 'or') {
                return this.wzLoadToChildColl(child, md.or, this.constraints);
            }
        }
        if (_l == 3 && _ch == 'a') {
            if (name === 'and') {
                return this.wzLoadToChildColl(child, md.and, this.constraints);
            }
        }
        if (_l == 3 && _ch == 'f') {
            if (name === 'for') {
                return this.wzLoadToChildColl(child, md.xfor, this.constraints);
            }
        }
        if (_l == 3 && _ch == 'n') {
            if (name === 'not') {
                return this.wzLoadToChildColl(child, md.not, this.constraints);
            }
        }
        if (_l == 3 && _ch == 'o') {
            if (name === 'opt') {
                return this.wzLoadToChildColl(child, md.option, this.options);
            }
        }
        if (_l == 3 && _ch == 's') {
            if (name === 'set') {
                return this.wzLoadToChildColl(child, md.set, this.constraints);
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'from') {
                return this.wzLoadToChildColl(child, md.from, this.constraints);
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'then') {
                return this.wzLoadToChildColl(child, md.action, this.actions);
            }
        }
        if (_l == 4 && _ch == 'w') {
            if (name === 'when') {
                return this.wzLoadToChildColl(child, md.when, this.constraints);
            }
        }
        if (_l == 6 && _ch == 'e') {
            if (name === 'exists') {
                return this.wzLoadToChildColl(child, md.exists, this.constraints);
            }
        }
        if (_l == 8 && _ch == 's') {
            if (name === 'salience') {
                this.salience = parseinteger(child.v, null, child); return true;
            }
        }
        if (_l == 10 && _ch == 'a') {
            if (name === 'auto-focus') {
                this.autoFocus = child.v; return true;
            }
            else if (name === 'auto_focus') {
                this.autoFocus = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 'a') {
            if (name === 'agenda-group') {
                this.agendaGroup = child.v; return true;
            }
            else if (name === 'agenda_group') {
                this.agendaGroup = child.v; return true;
            }
        }
        return ok;
    }
    rule.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.noolsException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    rule.prototype.wzVerify = function(ctx) {
        var i, i_len=this.options.length, item;
        for (i=0; i<i_len; i++) {
            item = this.options[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.constraints.length, item;
        for (i=0; i<i_len; i++) {
            item = this.constraints[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.actions.length, item;
        for (i=0; i<i_len; i++) {
            item = this.actions[i];
            item.wzVerify(ctx);
        }
        md.noolsBase.prototype.wzVerify.call(this, ctx);
    }
    rule.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.options.length, item;
        for (i=0; i<i_len; i++) {
            item = this.options[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.constraints.length, item;
        for (i=0; i<i_len; i++) {
            item = this.constraints[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.actions.length, item;
        for (i=0; i<i_len; i++) {
            item = this.actions[i];
            item.wzInitialize(ctx);
        }
        md.noolsBase.prototype.wzInitialize.call(this, ctx);
    }
    return rule;
})(noolsBase);


md.rule = rule;
// element option
var option = (function (noolsBase) {
    _inherits(option, noolsBase);
    function option(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(option.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, option);
        this.wzElement = "option";
    }
    return option;
})(noolsBase);


md.option = option;
/**
    element constraint
     Constraints define how a Rule should match Fact instances.
     A rule should have an array of at least one or many constraints.
*/
var constraint = (function (noolsBase) {
    _inherits(constraint, noolsBase);
    function constraint(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(constraint.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, constraint);
        this.wzElement = "constraint";
        // relation constraint
        this.constraints = [];
    }
    constraint.prototype.getConstraint = function(name) {
        var found = null;
        this.constraints.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    constraint.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 2 && _ch == 'i') {
            if (name === 'is') {
                return this.wzLoadToChildColl(child, md.is, this.constraints);
            }
        }
        if (_l == 2 && _ch == 'o') {
            if (name === 'or') {
                return this.wzLoadToChildColl(child, md.or, this.constraints);
            }
        }
        if (_l == 3 && _ch == 'a') {
            if (name === 'and') {
                return this.wzLoadToChildColl(child, md.and, this.constraints);
            }
        }
        if (_l == 3 && _ch == 'f') {
            if (name === 'for') {
                return this.wzLoadToChildColl(child, md.xfor, this.constraints);
            }
        }
        if (_l == 3 && _ch == 'n') {
            if (name === 'not') {
                return this.wzLoadToChildColl(child, md.not, this.constraints);
            }
        }
        if (_l == 3 && _ch == 's') {
            if (name === 'set') {
                return this.wzLoadToChildColl(child, md.set, this.constraints);
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'from') {
                return this.wzLoadToChildColl(child, md.from, this.constraints);
            }
        }
        if (_l == 4 && _ch == 'w') {
            if (name === 'when') {
                return this.wzLoadToChildColl(child, md.when, this.constraints);
            }
        }
        if (_l == 6 && _ch == 'e') {
            if (name === 'exists') {
                return this.wzLoadToChildColl(child, md.exists, this.constraints);
            }
        }
        return ok;
    }
    constraint.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.noolsException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    constraint.prototype.wzVerify = function(ctx) {
        var i, i_len=this.constraints.length, item;
        for (i=0; i<i_len; i++) {
            item = this.constraints[i];
            item.wzVerify(ctx);
        }
        md.noolsBase.prototype.wzVerify.call(this, ctx);
    }
    constraint.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.constraints.length, item;
        for (i=0; i<i_len; i++) {
            item = this.constraints[i];
            item.wzInitialize(ctx);
        }
        md.noolsBase.prototype.wzInitialize.call(this, ctx);
    }
    return constraint;
})(noolsBase);


md.constraint = constraint;
// element when
var when = (function (constraint) {
    _inherits(when, constraint);
    function when(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(when.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, when);
        this.wzElement = "when";
    }
    return when;
})(constraint);


md.when = when;
// element xfor
var xfor = (function (constraint) {
    _inherits(xfor, constraint);
    function xfor(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(xfor.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xfor);
        this.wzElement = "xfor";
    }
    return xfor;
})(constraint);


md.xfor = xfor;
// element and
var and = (function (constraint) {
    _inherits(and, constraint);
    function and(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(and.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, and);
        this.wzElement = "and";
    }
    return and;
})(constraint);


md.and = and;
/**
    element or
     The or constraint can be used to check for the existence of multiple facts.
*/
var or = (function (constraint) {
    _inherits(or, constraint);
    function or(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(or.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, or);
        this.wzElement = "or";
    }
    return or;
})(constraint);


md.or = or;
// element not
var not = (function (constraint) {
    _inherits(not, constraint);
    function not(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(not.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, not);
        this.wzElement = "not";
    }
    return not;
})(constraint);


md.not = not;
// element is
var is = (function (constraint) {
    _inherits(is, constraint);
    function is(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(is.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, is);
        this.wzElement = "is";
    }
    return is;
})(constraint);


md.is = is;
/**
    element set
     example
     ittf: set name = value
     dsl : { name: value}
*/
var set = (function (constraint) {
    _inherits(set, constraint);
    function set(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(set.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, set);
        this.wzElement = "set";
    }
    return set;
})(constraint);


md.set = set;
/**
    element exists
     exists is the logical inversion of a not constraint.
     It checks for the existence of a fact in memory.
*/
var exists = (function (constraint) {
    _inherits(exists, constraint);
    function exists(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(exists.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, exists);
        this.wzElement = "exists";
    }
    return exists;
})(constraint);


md.exists = exists;
/**
    element from
     The from modifier allows for the checking of facts that are not necessarily in the workingMemory.
     The from modifier can be used to access properties on a fact in workingMemory or you can use javascript expressions.
*/
var from = (function (constraint) {
    _inherits(from, constraint);
    function from(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(from.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, from);
        this.wzElement = "from";
    }
    return from;
})(constraint);


md.from = from;
/**
    element action
     Defines the code of the Action of a Rule.
     An Action is a function that should be fired when all constraints in the rule match.
     The tag 'then' is for readability of the nools dsl source.
*/
var action = (function (noolsBase) {
    _inherits(action, noolsBase);
    function action(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(action.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, action);
        this.wzElement = "action";
        // relation codeline
        this.codelines = [];
    }
    action.prototype.addCodeline = function(name,sourceLineInfo) {
        var retval = new md.codeline(name, sourceLineInfo);
        retval.wzParent = this;
        this.codelines.push(retval);
        return retval;
    }
    action.prototype.getCodeline = function(name) {
        var found = null;
        this.codelines.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    action.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '+') {
            if (name === '+') {
                return this.wzLoadToChildColl(child, md.codeline, this.codelines);
            }
        }
        return ok;
    }
    action.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.noolsException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    action.prototype.wzVerify = function(ctx) {
        var i, i_len=this.codelines.length, item;
        for (i=0; i<i_len; i++) {
            item = this.codelines[i];
            item.wzVerify(ctx);
        }
        md.noolsBase.prototype.wzVerify.call(this, ctx);
    }
    action.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.codelines.length, item;
        for (i=0; i<i_len; i++) {
            item = this.codelines[i];
            item.wzInitialize(ctx);
        }
        md.noolsBase.prototype.wzInitialize.call(this, ctx);
    }
    return action;
})(noolsBase);


md.action = action;
/**
    element xfunction
     You may define Function(s) that can be used (are in scope)
     inside a Rule.
*/
var xfunction = (function (noolsBase) {
    _inherits(xfunction, noolsBase);
    function xfunction(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(xfunction.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xfunction);
        this.wzElement = "xfunction";
        // relation param
        this.params = [];
        // relation codeline
        this.codelines = [];
    }
    xfunction.prototype.addParam = function(name,sourceLineInfo) {
        var retval = new md.param(name, sourceLineInfo);
        retval.wzParent = this;
        this.params.push(retval);
        return retval;
    }
    xfunction.prototype.getParam = function(name) {
        var found = null;
        this.params.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xfunction.prototype.addCodeline = function(name,sourceLineInfo) {
        var retval = new md.codeline(name, sourceLineInfo);
        retval.wzParent = this;
        this.codelines.push(retval);
        return retval;
    }
    xfunction.prototype.getCodeline = function(name) {
        var found = null;
        this.codelines.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xfunction.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '+') {
            if (name === '+') {
                return this.wzLoadToChildColl(child, md.codeline, this.codelines);
            }
        }
        if (_l == 5 && _ch == 'p') {
            if (name === 'param') {
                return this.wzLoadToChildColl(child, md.param, this.params);
            }
        }
        return ok;
    }
    xfunction.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.noolsException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    xfunction.prototype.wzVerify = function(ctx) {
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.codelines.length, item;
        for (i=0; i<i_len; i++) {
            item = this.codelines[i];
            item.wzVerify(ctx);
        }
        md.noolsBase.prototype.wzVerify.call(this, ctx);
    }
    xfunction.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.codelines.length, item;
        for (i=0; i<i_len; i++) {
            item = this.codelines[i];
            item.wzInitialize(ctx);
        }
        md.noolsBase.prototype.wzInitialize.call(this, ctx);
    }
    xfunction.prototype.getParams = function() {
        var ret = [];
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            ret.push(item.wzName);
        }
        return ret;
    }
    return xfunction;
})(noolsBase);


md.xfunction = xfunction;
/**
    element param
     The parameter of a Function
*/
var param = (function (noolsBase) {
    _inherits(param, noolsBase);
    function param(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(param.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, param);
        this.wzElement = "param";
    }
    return param;
})(noolsBase);


md.param = param;
// element codeline
var codeline = (function (noolsBase) {
    _inherits(codeline, noolsBase);
    function codeline(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(codeline.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, codeline);
        this.wzElement = "codeline";
    }
    return codeline;
})(noolsBase);


md.codeline = codeline;
// element conflictResolution
var conflictResolution = (function (noolsBase) {
    _inherits(conflictResolution, noolsBase);
    function conflictResolution(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(conflictResolution.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, conflictResolution);
        this.wzElement = "conflictResolution";
        // relation resolutionStrategy
        this.resolutionStrategies = [];
    }
    conflictResolution.prototype.addResolutionStrategy = function(name,sourceLineInfo) {
        var retval = new md.resolutionStrategy(name, sourceLineInfo);
        retval.wzParent = this;
        this.resolutionStrategies.push(retval);
        return retval;
    }
    conflictResolution.prototype.getResolutionStrategy = function(name) {
        var found = null;
        this.resolutionStrategies.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    conflictResolution.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 8 && _ch == 's') {
            if (name === 'strategy') {
                return this.wzLoadToChildColl(child, md.resolutionStrategy, this.resolutionStrategies);
            }
        }
        return ok;
    }
    conflictResolution.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.noolsException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    conflictResolution.prototype.wzVerify = function(ctx) {
        var i, i_len=this.resolutionStrategies.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resolutionStrategies[i];
            item.wzVerify(ctx);
        }
        md.noolsBase.prototype.wzVerify.call(this, ctx);
    }
    conflictResolution.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.resolutionStrategies.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resolutionStrategies[i];
            item.wzInitialize(ctx);
        }
        md.noolsBase.prototype.wzInitialize.call(this, ctx);
    }
    return conflictResolution;
})(noolsBase);


md.conflictResolution = conflictResolution;
// element resolutionStrategy
var resolutionStrategy = (function (noolsBase) {
    _inherits(resolutionStrategy, noolsBase);
    function resolutionStrategy(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(resolutionStrategy.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, resolutionStrategy);
        this.allowedNames = [ "salience", "activationRecency", "factRecency", "bucketCounter"];
        this.wzElement = "resolutionStrategy";
    }
    resolutionStrategy.NAME_SALIENCE = "salience";
    resolutionStrategy.NAME_ACTIVATIONRECENCY = "activationRecency";
    resolutionStrategy.NAME_FACTRECENCY = "factRecency";
    resolutionStrategy.NAME_BUCKETCOUNTER = "bucketCounter";
    resolutionStrategy.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("resolutionStrategy", "Name", this.wzName, this.allowedNames, this);
        md.noolsBase.prototype.wzVerify.call(this, ctx);
    }
    return resolutionStrategy;
})(noolsBase);


md.resolutionStrategy = resolutionStrategy;
md.__tagElementMapping = { 'def': 'fact', 'group': 'agendaGroup', 'function': 'xfunction', '@': 'property', '+': 'codeline', 'opt': 'option', 'for': 'xfor', 'then': 'action', 'strategy': 'resolutionStrategy' };
var noolsException = (function () {
    function noolsException(message,node,instance) {
        _classCallCheck(this, noolsException);
        // TODO node seems superflous
        if (node && instance) {
            this.message = message + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        this.stack = new Error().stack;
        this.node = node;
    }
    return noolsException;
})();


md.noolsException = noolsException;
var noolsContext = (function () {
    function noolsContext() {
        _classCallCheck(this, noolsContext);
        this.validationErrors = [];
    }
    noolsContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    noolsContext.prototype.addError = function(message,node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at);
    }
    noolsContext.prototype.verifyEnum = function(valueType,valueName,value,allowed,node) {
        if (value && allowed.indexOf(value) < 0) {
            var allowedStr = 'allowed: ' + allowed.join(', ');
            this.validationErrors.push(valueType + ' ' + valueName + ' has an invalid value: ' + value + ' ' + allowedStr + '. At ' + (node.wzSourceLineInfo ? node.wzSourceLineInfo.toString(node) : 'location unavailable'));
        }
    }
    return noolsContext;
})();


md.noolsContext = noolsContext;
function parsestring(value,defaultValue,node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}

function parseint(value,defaultValue,node) {
    if (isEmpty(value)) {
        return defaultValue;
    }
    if (!isInt(value)) {
        throw new nodeException('Must be an int value, got:' + value, node);
    }
    return parseInt(value, 10);
}

function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}

function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}

function isBoolean(value) {
    return value === 'true' || value === 'false';
}


