// 23/3/2017:20:48:47  by C:\My\wizzi\current\wizzi-npm\node_modules\wizzi\lib\ittf\evaluator.js
$.n(); // set the context state to NodeContext first
var $0 = {}; // the root node of the IttfModel buildup
var $1 = { n: "wizzischema", v: "wizzischema", r: 1, c: 1, s: "f1", u: "f1",  }; //27
$.a($0, $1, 5);
var $2 = { n: "e", v: "wizzischema", r: 3, c: 5, s: "f1", u: "f1",  }; //28
$.a($1, $2, 7);
var $3 = { n: "#", v: "The root element of a wizzi schema.", r: 4, c: 9, s: "f1", u: "f1",  }; //29
$.a($2, $3, 9);
var $4 = { n: "a", v: $.ip("f2", "${name}", "string", 10), r: 1, c: 1, s: "f2", u: "f8",  }; //427
$.a($2, $4, 11);
var $5 = { n: "tag", v: $.ip("f2", "${tag}", "string", 12), r: 3, c: 5, s: "f2", u: "f8",  }; //428
$.a($4, $5, 13);
var $6 = { n: "type", v: "boolean", r: 4, c: 5, s: "f2", u: "f8",  }; //429
$.a($4, $6, 15);
var $7 = { n: "default", v: $.ip("f2", "${defaultValue}", "string", 16), r: 5, c: 5, s: "f2", u: "f8",  }; //430
$.a($4, $7, 17);
var $8 = { n: "default-when-declared", v: "true", r: 6, c: 5, s: "f2", u: "f8",  }; //431
$.a($4, $8, 19);
var $9 = { n: "#", v: "If declared, the WizziModelLoader will preserve, in the loaded WizziModelInstance,", r: 7, c: 13, s: "f1", u: "f1",  }; //31
$.a($4, $9, 21);
var $10 = { n: "#", v: "the tags used in the source IttfDocuments.", r: 8, c: 13, s: "f1", u: "f1",  }; //32
$.a($4, $10, 23);
var $11 = { n: "r", v: "element/s", r: 9, c: 9, s: "f1", u: "f1",  }; //33
$.a($2, $11, 25);
var $12 = { n: "r", v: "include/s", r: 10, c: 9, s: "f1", u: "f1",  }; //34
$.a($2, $12, 27);
var $13 = { n: "r", v: "exportTo/s", r: 12, c: 9, s: "f1", u: "f1",  }; //35
$.a($2, $13, 29);
var $14 = { n: "r", v: "require/s", r: 13, c: 9, s: "f1", u: "f1",  }; //36
$.a($2, $14, 31);
var $15 = { n: "r", v: "method/s", r: 14, c: 9, s: "f1", u: "f1",  }; //37
$.a($2, $15, 33);
var $16 = { n: "r", v: "comment/s", r: 15, c: 9, s: "f1", u: "f1",  }; //38
$.a($2, $16, 35);
var $17 = { n: "e", v: "schemaitem", r: 16, c: 5, s: "f1", u: "f1",  }; //39
$.a($1, $17, 37);
var $18 = { n: "r", v: "comment/s", r: 17, c: 9, s: "f1", u: "f1",  }; //40
$.a($17, $18, 39);
var $19 = { n: "e", v: "include : schemaitem", r: 18, c: 5, s: "f1", u: "f1",  }; //41
$.a($1, $19, 41);
var $20 = { n: "#", v: "The parent element may include the nodes of another external schema.", r: 19, c: 9, s: "f1", u: "f1",  }; //42
$.a($19, $20, 43);
var $21 = { n: "#", v: "The IttfNodeValue of this element is the name of the external schema.", r: 20, c: 9, s: "f1", u: "f1",  }; //43
$.a($19, $21, 45);
var $22 = { n: "e", v: "comment", r: 22, c: 5, s: "f1", u: "f1",  }; //44
$.a($1, $22, 47);
var $23 = { n: "#", v: "A comment line for describing entities.", r: 23, c: 9, s: "f1", u: "f1",  }; //45
$.a($22, $23, 49);
var $24 = { n: "tag", v: "#", r: 25, c: 9, s: "f1", u: "f1",  }; //46
$.a($22, $24, 51);
var $25 = { n: "e", v: "element : schemaitem", r: 2, c: 5, s: "f1", u: "f2",  }; //93
$.a($1, $25, 53);
var $26 = { n: "#", v: "A schema element. A classifier model element that may have attributes and relations.", r: 3, c: 9, s: "f1", u: "f2",  }; //94
$.a($25, $26, 55);
var $27 = { n: "tag", v: "e", r: 5, c: 9, s: "f1", u: "f2",  }; //95
$.a($25, $27, 57);
var $28 = { n: "a", v: "super", r: 7, c: 9, s: "f1", u: "f2",  }; //96
$.a($25, $28, 59);
var $29 = { n: "#", v: "The base (super) element from which this element derives.", r: 8, c: 13, s: "f1", u: "f2",  }; //97
$.a($28, $29, 61);
var $30 = { n: "#", v: "Attributes and relations of the base element are inherited.", r: 9, c: 13, s: "f1", u: "f2",  }; //98
$.a($28, $30, 63);
var $31 = { n: "a", v: $.ip("f3", "${name}", "string", 64), r: 1, c: 1, s: "f3", u: "f8",  }; //432
$.a($25, $31, 65);
var $32 = { n: "tag", v: $.ip("f3", "${tag}", "string", 66), r: 3, c: 5, s: "f3", u: "f8",  }; //433
$.a($31, $32, 67);
var $33 = { n: "type", v: "boolean", r: 4, c: 5, s: "f3", u: "f8",  }; //434
$.a($31, $33, 69);
var $34 = { n: "default", v: $.ip("f3", "${defaultValue}", "string", 70), r: 5, c: 5, s: "f3", u: "f8",  }; //435
$.a($31, $34, 71);
var $35 = { n: "default-when-declared", v: "true", r: 6, c: 5, s: "f3", u: "f8",  }; //436
$.a($31, $35, 73);
var $36 = { n: "#", v: "This element is abstract and cannot be declared in Ittf documents.", r: 12, c: 13, s: "f1", u: "f2",  }; //100
$.a($31, $36, 75);
var $37 = { n: "a", v: $.ip("f4", "${name}", "string", 76), r: 1, c: 1, s: "f4", u: "f8",  }; //437
$.a($25, $37, 77);
var $38 = { n: "tag", v: $.ip("f4", "${tag}", "string", 78), r: 3, c: 5, s: "f4", u: "f8",  }; //438
$.a($37, $38, 79);
var $39 = { n: "type", v: "boolean", r: 4, c: 5, s: "f4", u: "f8",  }; //439
$.a($37, $39, 81);
var $40 = { n: "default", v: $.ip("f4", "${defaultValue}", "string", 82), r: 5, c: 5, s: "f4", u: "f8",  }; //440
$.a($37, $40, 83);
var $41 = { n: "default-when-declared", v: "true", r: 6, c: 5, s: "f4", u: "f8",  }; //441
$.a($37, $41, 85);
var $42 = { n: "#", v: "Mark the element as the root element of the schema.", r: 15, c: 13, s: "f1", u: "f2",  }; //102
$.a($37, $42, 87);
var $43 = { n: "#", v: "If not explicit, the root element is inferred,", r: 16, c: 13, s: "f1", u: "f2",  }; //103
$.a($37, $43, 89);
var $44 = { n: "#", v: "and the first element declared in the schema is assumed as the root.", r: 17, c: 13, s: "f1", u: "f2",  }; //104
$.a($37, $44, 91);
var $45 = { n: "a", v: "tagInternal", r: 18, c: 9, s: "f1", u: "f2",  }; //105
$.a($25, $45, 93);
var $46 = { n: "tag", v: "tag", r: 19, c: 13, s: "f1", u: "f2",  }; //106
$.a($45, $46, 95);
var $47 = { n: "#", v: "The tag used to declare this element in Ittf documents.", r: 20, c: 13, s: "f1", u: "f2",  }; //107
$.a($45, $47, 97);
var $48 = { n: "#", v: "Optional. The default is the element IttfNodeValue", r: 21, c: 13, s: "f1", u: "f2",  }; //108
$.a($45, $48, 99);
var $49 = { n: "a", v: "xmlTagInternal", r: 23, c: 9, s: "f1", u: "f2",  }; //109
$.a($25, $49, 101);
var $50 = { n: "tag", v: "xml-tag", r: 24, c: 13, s: "f1", u: "f2",  }; //110
$.a($49, $50, 103);
var $51 = { n: "#", v: "The Xml tag used for this element when persisted in Xml Format.", r: 25, c: 13, s: "f1", u: "f2",  }; //111
$.a($49, $51, 105);
var $52 = { n: "a", v: "acceptAnyTag", r: 27, c: 9, s: "f1", u: "f2",  }; //112
$.a($25, $52, 107);
var $53 = { n: "tag", v: "any", r: 28, c: 13, s: "f1", u: "f2",  }; //113
$.a($52, $53, 109);
var $54 = { n: "#", v: "This element can have any text as a child element.", r: 29, c: 13, s: "f1", u: "f2",  }; //114
$.a($52, $54, 111);
var $55 = { n: "#", v: "The IttfNodeValue of this attribute must be the name of the element collection", r: 30, c: 13, s: "f1", u: "f2",  }; //115
$.a($52, $55, 113);
var $56 = { n: "#", v: "to which child text nodes will be appended.", r: 31, c: 13, s: "f1", u: "f2",  }; //116
$.a($52, $56, 115);
var $57 = { n: "#", v: "Any child node produces an internal ANY element that is appended to this collection.", r: 32, c: 13, s: "f1", u: "f2",  }; //117
$.a($52, $57, 117);
var $58 = { n: "#", v: "TODO example", r: 33, c: 13, s: "f1", u: "f2",  }; //118
$.a($52, $58, 119);
var $59 = { n: "a", v: $.ip("f5", "${name}", "string", 120), r: 1, c: 1, s: "f5", u: "f8",  }; //442
$.a($25, $59, 121);
var $60 = { n: "tag", v: $.ip("f5", "${tag}", "string", 122), r: 3, c: 5, s: "f5", u: "f8",  }; //443
$.a($59, $60, 123);
var $61 = { n: "type", v: "boolean", r: 4, c: 5, s: "f5", u: "f8",  }; //444
$.a($59, $61, 125);
var $62 = { n: "default", v: $.ip("f5", "${defaultValue}", "string", 126), r: 5, c: 5, s: "f5", u: "f8",  }; //445
$.a($59, $62, 127);
var $63 = { n: "default-when-declared", v: "true", r: 6, c: 5, s: "f5", u: "f8",  }; //446
$.a($59, $63, 129);
var $64 = { n: "#", v: "This element must have a not empty IttfNodeValue", r: 36, c: 13, s: "f1", u: "f2",  }; //120
$.a($59, $64, 131);
var $65 = { n: "a", v: $.ip("f6", "${name}", "string", 132), r: 1, c: 1, s: "f6", u: "f8",  }; //447
$.a($25, $65, 133);
var $66 = { n: "tag", v: $.ip("f6", "${tag}", "string", 134), r: 3, c: 5, s: "f6", u: "f8",  }; //448
$.a($65, $66, 135);
var $67 = { n: "type", v: "boolean", r: 4, c: 5, s: "f6", u: "f8",  }; //449
$.a($65, $67, 137);
var $68 = { n: "default", v: $.ip("f6", "${defaultValue}", "string", 138), r: 5, c: 5, s: "f6", u: "f8",  }; //450
$.a($65, $68, 139);
var $69 = { n: "default-when-declared", v: "true", r: 6, c: 5, s: "f6", u: "f8",  }; //451
$.a($65, $69, 141);
var $70 = { n: "#", v: "Every child node of this element will be added to the wzChildren collection.", r: 39, c: 13, s: "f1", u: "f2",  }; //122
$.a($65, $70, 143);
var $71 = { n: "#", v: "Artifact generators will use the wzElement attribute to distinguish child elements.", r: 40, c: 13, s: "f1", u: "f2",  }; //123
$.a($65, $71, 145);
var $72 = { n: "a", v: $.ip("f7", "${name}", "string", 146), r: 1, c: 1, s: "f7", u: "f8",  }; //452
$.a($25, $72, 147);
var $73 = { n: "tag", v: $.ip("f7", "${tag}", "string", 148), r: 3, c: 5, s: "f7", u: "f8",  }; //453
$.a($72, $73, 149);
var $74 = { n: "type", v: "boolean", r: 4, c: 5, s: "f7", u: "f8",  }; //454
$.a($72, $74, 151);
var $75 = { n: "default", v: $.ip("f7", "${defaultValue}", "string", 152), r: 5, c: 5, s: "f7", u: "f8",  }; //455
$.a($72, $75, 153);
var $76 = { n: "default-when-declared", v: "true", r: 6, c: 5, s: "f7", u: "f8",  }; //456
$.a($72, $76, 155);
var $77 = { n: "#", v: "TODO ???", r: 43, c: 13, s: "f1", u: "f2",  }; //125
$.a($72, $77, 157);
var $78 = { n: "r", v: "attribute/s", r: 45, c: 9, s: "f1", u: "f2",  }; //126
$.a($25, $78, 159);
var $79 = { n: "r", v: "relation/s", r: 46, c: 9, s: "f1", u: "f2",  }; //127
$.a($25, $79, 161);
var $80 = { n: "r", v: "restrict/s", r: 47, c: 9, s: "f1", u: "f2",  }; //128
$.a($25, $80, 163);
var $81 = { n: "r", v: "method/s", r: 48, c: 9, s: "f1", u: "f2",  }; //129
$.a($25, $81, 165);
var $82 = { n: "r", v: "include/s", r: 49, c: 9, s: "f1", u: "f2",  }; //130
$.a($25, $82, 167);
var $83 = { n: "e", v: "attribute : schemaitem", r: 2, c: 5, s: "f1", u: "f3",  }; //160
$.a($1, $83, 169);
var $84 = { n: "#", v: "An element attribute.", r: 3, c: 9, s: "f1", u: "f3",  }; //161
$.a($83, $84, 171);
var $85 = { n: "tag", v: "a", r: 4, c: 9, s: "f1", u: "f3",  }; //162
$.a($83, $85, 173);
var $86 = { n: "a", v: "tagInternal", r: 6, c: 9, s: "f1", u: "f3",  }; //163
$.a($83, $86, 175);
var $87 = { n: "tag", v: "tag", r: 7, c: 13, s: "f1", u: "f3",  }; //164
$.a($86, $87, 177);
var $88 = { n: "#", v: "The tag used to declare the attribute in IttfDocuments.", r: 8, c: 13, s: "f1", u: "f3",  }; //165
$.a($86, $88, 179);
var $89 = { n: "#", v: "Optional. The default is the attribute IttfNodeValue", r: 9, c: 13, s: "f1", u: "f3",  }; //166
$.a($86, $89, 181);
var $90 = { n: "a", v: "type", r: 11, c: 9, s: "f1", u: "f3",  }; //167
$.a($83, $90, 183);
var $91 = { n: "#", v: "The attribute data type", r: 12, c: 13, s: "f1", u: "f3",  }; //168
$.a($90, $91, 185);
var $92 = { n: "default", v: "string", r: 13, c: 13, s: "f1", u: "f3",  }; //169
$.a($90, $92, 187);
var $93 = { n: "restrict", v: "", r: 14, c: 13, s: "f1", u: "f3",  }; //170
$.a($90, $93, 189);
var $94 = { n: "enum", v: "string", r: 15, c: 17, s: "f1", u: "f3",  }; //171
$.a($93, $94, 191);
var $95 = { n: "enum", v: "boolean", r: 16, c: 17, s: "f1", u: "f3",  }; //172
$.a($93, $95, 193);
var $96 = { n: "enum", v: "integer", r: 17, c: 17, s: "f1", u: "f3",  }; //173
$.a($93, $96, 195);
var $97 = { n: "enum", v: "float", r: 18, c: 17, s: "f1", u: "f3",  }; //174
$.a($93, $97, 197);
var $98 = { n: "enum", v: "date", r: 19, c: 17, s: "f1", u: "f3",  }; //175
$.a($93, $98, 199);
var $99 = { n: "enum", v: "regexp", r: 20, c: 17, s: "f1", u: "f3",  }; //176
$.a($93, $99, 201);
var $100 = { n: "enum", v: "code", r: 21, c: 17, s: "f1", u: "f3",  }; //177
$.a($93, $100, 203);
var $101 = { n: "a", v: "default", r: 23, c: 9, s: "f1", u: "f3",  }; //178
$.a($83, $101, 205);
var $102 = { n: "#", v: "The attribute default value", r: 24, c: 13, s: "f1", u: "f3",  }; //179
$.a($101, $102, 207);
var $103 = { n: "a", v: $.ip("f8", "${name}", "string", 208), r: 1, c: 1, s: "f8", u: "f8",  }; //457
$.a($83, $103, 209);
var $104 = { n: "tag", v: $.ip("f8", "${tag}", "string", 210), r: 3, c: 5, s: "f8", u: "f8",  }; //458
$.a($103, $104, 211);
var $105 = { n: "type", v: "boolean", r: 4, c: 5, s: "f8", u: "f8",  }; //459
$.a($103, $105, 213);
var $106 = { n: "default", v: $.ip("f8", "${defaultValue}", "string", 214), r: 5, c: 5, s: "f8", u: "f8",  }; //460
$.a($103, $106, 215);
var $107 = { n: "default-when-declared", v: "true", r: 6, c: 5, s: "f8", u: "f8",  }; //461
$.a($103, $107, 217);
var $108 = { n: "#", v: "If true the attribute must be declared.", r: 27, c: 13, s: "f1", u: "f3",  }; //181
$.a($103, $108, 219);
var $109 = { n: "a", v: $.ip("f9", "${name}", "string", 220), r: 1, c: 1, s: "f9", u: "f8",  }; //462
$.a($83, $109, 221);
var $110 = { n: "tag", v: $.ip("f9", "${tag}", "string", 222), r: 3, c: 5, s: "f9", u: "f8",  }; //463
$.a($109, $110, 223);
var $111 = { n: "type", v: "boolean", r: 4, c: 5, s: "f9", u: "f8",  }; //464
$.a($109, $111, 225);
var $112 = { n: "default", v: $.ip("f9", "${defaultValue}", "string", 226), r: 5, c: 5, s: "f9", u: "f8",  }; //465
$.a($109, $112, 227);
var $113 = { n: "default-when-declared", v: "true", r: 6, c: 5, s: "f9", u: "f8",  }; //466
$.a($109, $113, 229);
var $114 = { n: "#", v: "This attribute is a datatype attribute and type services will be available to artifact generators.", r: 30, c: 13, s: "f1", u: "f3",  }; //183
$.a($109, $114, 231);
var $115 = { n: "a", v: $.ip("f10", "${name}", "string", 232), r: 1, c: 1, s: "f10", u: "f9",  }; //472
$.a($83, $115, 233);
var $116 = { n: "tag", v: $.ip("f10", "${tag}", "string", 234), r: 3, c: 5, s: "f10", u: "f9",  }; //473
$.a($115, $116, 235);
$.s("f10");
if (defaultValue) { //474
    $.n();
    var $118 = { n: "default", v: $.ip("f10", "${defaultValue}", "string", 239), r: 5, c: 9, s: "f10", u: "f9",  }; //475
    $.a($115, $118, 240);
}
$.n();
var $119 = { n: "#", v: "When the attribute is declared without a IttfNodeValue, this will be its value.", r: 33, c: 13, s: "f1", u: "f3",  }; //185
$.a($115, $119, 244);
var $120 = { n: "r", v: "restrict/s", r: 35, c: 9, s: "f1", u: "f3",  }; //186
$.a($83, $120, 246);
var $121 = { n: "e", v: "relation : schemaitem", r: 2, c: 5, s: "f1", u: "f4",  }; //197
$.a($1, $121, 248);
var $122 = { n: "#", v: "A relation to a child element.", r: 3, c: 9, s: "f1", u: "f4",  }; //198
$.a($121, $122, 250);
var $123 = { n: "#", v: "By default is a one-to-many relation.", r: 4, c: 9, s: "f1", u: "f4",  }; //199
$.a($121, $123, 252);
var $124 = { n: "#", v: "Can be set to a one-to-one, declaring the attribute isOneToOne.", r: 5, c: 9, s: "f1", u: "f4",  }; //200
$.a($121, $124, 254);
var $125 = { n: "tag", v: "r", r: 7, c: 9, s: "f1", u: "f4",  }; //201
$.a($121, $125, 256);
var $126 = { n: "a", v: $.ip("f11", "${name}", "string", 257), r: 1, c: 1, s: "f11", u: "f8",  }; //476
$.a($121, $126, 258);
var $127 = { n: "tag", v: $.ip("f11", "${tag}", "string", 259), r: 3, c: 5, s: "f11", u: "f8",  }; //477
$.a($126, $127, 260);
var $128 = { n: "type", v: "boolean", r: 4, c: 5, s: "f11", u: "f8",  }; //478
$.a($126, $128, 262);
var $129 = { n: "default", v: $.ip("f11", "${defaultValue}", "string", 263), r: 5, c: 5, s: "f11", u: "f8",  }; //479
$.a($126, $129, 264);
var $130 = { n: "default-when-declared", v: "true", r: 6, c: 5, s: "f11", u: "f8",  }; //480
$.a($126, $130, 266);
var $131 = { n: "a", v: $.ip("f12", "${name}", "string", 267), r: 1, c: 1, s: "f12", u: "f8",  }; //481
$.a($121, $131, 268);
var $132 = { n: "tag", v: $.ip("f12", "${tag}", "string", 269), r: 3, c: 5, s: "f12", u: "f8",  }; //482
$.a($131, $132, 270);
var $133 = { n: "type", v: "boolean", r: 4, c: 5, s: "f12", u: "f8",  }; //483
$.a($131, $133, 272);
var $134 = { n: "default", v: $.ip("f12", "${defaultValue}", "string", 273), r: 5, c: 5, s: "f12", u: "f8",  }; //484
$.a($131, $134, 274);
var $135 = { n: "default-when-declared", v: "true", r: 6, c: 5, s: "f12", u: "f8",  }; //485
$.a($131, $135, 276);
var $136 = { n: "a", v: $.ip("f13", "${name}", "string", 277), r: 1, c: 1, s: "f13", u: "f8",  }; //486
$.a($121, $136, 278);
var $137 = { n: "tag", v: $.ip("f13", "${tag}", "string", 279), r: 3, c: 5, s: "f13", u: "f8",  }; //487
$.a($136, $137, 280);
var $138 = { n: "type", v: "boolean", r: 4, c: 5, s: "f13", u: "f8",  }; //488
$.a($136, $138, 282);
var $139 = { n: "default", v: $.ip("f13", "${defaultValue}", "string", 283), r: 5, c: 5, s: "f13", u: "f8",  }; //489
$.a($136, $139, 284);
var $140 = { n: "default-when-declared", v: "true", r: 6, c: 5, s: "f13", u: "f8",  }; //490
$.a($136, $140, 286);
var $141 = { n: "e", v: "restrict : schemaitem", r: 2, c: 5, s: "f1", u: "f5",  }; //234
$.a($1, $141, 288);
var $142 = { n: "#", v: "Group of restrictions to the element or attribute values", r: 3, c: 9, s: "f1", u: "f5",  }; //235
$.a($141, $142, 290);
var $143 = { n: "r", v: "facet/s", r: 4, c: 9, s: "f1", u: "f5",  }; //236
$.a($141, $143, 292);
var $144 = { n: "e", v: "facet : schemaitem", r: 6, c: 5, s: "f1", u: "f5",  }; //237
$.a($1, $144, 294);
var $145 = { n: "#", v: "The abstract base class for facet restrictions", r: 7, c: 9, s: "f1", u: "f5",  }; //238
$.a($144, $145, 296);
var $146 = { n: "is-abstract", v: "", r: 8, c: 9, s: "f1", u: "f5",  }; //239
$.a($144, $146, 298);
var $147 = { n: "e", v: "enumFacet : facet", r: 10, c: 5, s: "f1", u: "f5",  }; //240
$.a($1, $147, 300);
var $148 = { n: "#", v: "A restriction of type enumeration applied to an attribute.", r: 11, c: 9, s: "f1", u: "f5",  }; //241
$.a($147, $148, 302);
var $149 = { n: "tag", v: "enum", r: 12, c: 9, s: "f1", u: "f5",  }; //242
$.a($147, $149, 304);
var $150 = { n: "e", v: "maxLengthFacet : facet", r: 14, c: 5, s: "f1", u: "f5",  }; //243
$.a($1, $150, 306);
var $151 = { n: "#", v: "A restriction of type maximum length applied to an attribute.", r: 15, c: 9, s: "f1", u: "f5",  }; //244
$.a($150, $151, 308);
var $152 = { n: "tag", v: "max-length", r: 16, c: 9, s: "f1", u: "f5",  }; //245
$.a($150, $152, 310);
var $153 = { n: "e", v: "minLengthFacet : facet", r: 18, c: 5, s: "f1", u: "f5",  }; //246
$.a($1, $153, 312);
var $154 = { n: "#", v: "A restriction of type minimum length applied to an attribute.", r: 19, c: 9, s: "f1", u: "f5",  }; //247
$.a($153, $154, 314);
var $155 = { n: "tag", v: "min-length", r: 20, c: 9, s: "f1", u: "f5",  }; //248
$.a($153, $155, 316);
var $156 = { n: "e", v: "maxValueFacet : facet", r: 22, c: 5, s: "f1", u: "f5",  }; //249
$.a($1, $156, 318);
var $157 = { n: "#", v: "A restriction of type maximum value applied to an attribute.", r: 23, c: 9, s: "f1", u: "f5",  }; //250
$.a($156, $157, 320);
var $158 = { n: "tag", v: "max-value", r: 24, c: 9, s: "f1", u: "f5",  }; //251
$.a($156, $158, 322);
var $159 = { n: "e", v: "minValueFacet : facet", r: 26, c: 5, s: "f1", u: "f5",  }; //252
$.a($1, $159, 324);
var $160 = { n: "#", v: "A restriction of type minimum value applied to an attribute.", r: 27, c: 9, s: "f1", u: "f5",  }; //253
$.a($159, $160, 326);
var $161 = { n: "tag", v: "min-value", r: 28, c: 9, s: "f1", u: "f5",  }; //254
$.a($159, $161, 328);
var $162 = { n: "e", v: "regexpFacet : facet", r: 29, c: 5, s: "f1", u: "f5",  }; //255
$.a($1, $162, 330);
var $163 = { n: "#", v: "A restriction of type regexp test applied to an attribute.", r: 30, c: 9, s: "f1", u: "f5",  }; //256
$.a($162, $163, 332);
var $164 = { n: "tag", v: "regexp", r: 31, c: 9, s: "f1", u: "f5",  }; //257
$.a($162, $164, 334);
var $165 = { n: "e", v: "elementFacet : facet", r: 32, c: 5, s: "f1", u: "f5",  }; //258
$.a($1, $165, 336);
var $166 = { n: "#", v: "A restriction of type allowed child element applied to an element.", r: 33, c: 9, s: "f1", u: "f5",  }; //259
$.a($165, $166, 338);
var $167 = { n: "tag", v: "element", r: 34, c: 9, s: "f1", u: "f5",  }; //260
$.a($165, $167, 340);
var $168 = { n: "e", v: "exportTo : schemaitem", r: 2, c: 5, s: "f1", u: "f6",  }; //295
$.a($1, $168, 342);
var $169 = { n: "#", v: "Require the emission, in the WizziModelType of the schema, of a function", r: 3, c: 9, s: "f1", u: "f6",  }; //296
$.a($168, $169, 344);
var $170 = { n: "#", v: "for exporting the model instance to a different format.", r: 4, c: 9, s: "f1", u: "f6",  }; //297
$.a($168, $170, 346);
var $171 = { n: "#", v: "There are a few built-in ExportTo functions. New export formats may be created", r: 5, c: 9, s: "f1", u: "f6",  }; //298
$.a($168, $171, 348);
var $172 = { n: "#", v: "by WizziPackage developers using methods.", r: 6, c: 9, s: "f1", u: "f6",  }; //299
$.a($168, $172, 350);
var $173 = { n: "tag", v: "export-to", r: 7, c: 9, s: "f1", u: "f6",  }; //300
$.a($168, $173, 352);
var $174 = { n: "restrict", v: "", r: 8, c: 9, s: "f1", u: "f6",  }; //301
$.a($168, $174, 354);
var $175 = { n: "enum", v: "json", r: 9, c: 13, s: "f1", u: "f6",  }; //302
$.a($174, $175, 356);
var $176 = { n: "enum", v: "xml", r: 10, c: 13, s: "f1", u: "f6",  }; //303
$.a($174, $176, 358);
var $177 = { n: "enum", v: "prettify", r: 11, c: 13, s: "f1", u: "f6",  }; //304
$.a($174, $177, 360);
var $178 = { n: "e", v: "require : schemaitem", r: 12, c: 5, s: "f1", u: "f6",  }; //305
$.a($1, $178, 362);
var $179 = { n: "#", v: "A node-js require statement that is emitted in the WizziModelType of the schema.", r: 13, c: 9, s: "f1", u: "f6",  }; //306
$.a($178, $179, 364);
var $180 = { n: "#", v: "The IttfNodeValue is the package name. It is also the variable name of the required package", r: 14, c: 9, s: "f1", u: "f6",  }; //307
$.a($178, $180, 366);
var $181 = { n: "#", v: "unless a declare-var attribute is present.", r: 15, c: 9, s: "f1", u: "f6",  }; //308
$.a($178, $181, 368);
var $182 = { n: "a", v: "kind", r: 17, c: 9, s: "f1", u: "f6",  }; //309
$.a($178, $182, 370);
var $183 = { n: "restrict", v: "", r: 18, c: 13, s: "f1", u: "f6",  }; //310
$.a($182, $183, 372);
var $184 = { n: "enum", v: "function", r: 19, c: 17, s: "f1", u: "f6",  }; //311
$.a($183, $184, 374);
var $185 = { n: "enum", v: "module", r: 20, c: 17, s: "f1", u: "f6",  }; //312
$.a($183, $185, 376);
var $186 = { n: "enum", v: "context-method", r: 21, c: 17, s: "f1", u: "f6",  }; //313
$.a($183, $186, 378);
var $187 = { n: "a", v: "declareVar", r: 23, c: 9, s: "f1", u: "f6",  }; //314
$.a($178, $187, 380);
var $188 = { n: "tag", v: "declare-var", r: 24, c: 13, s: "f1", u: "f6",  }; //315
$.a($187, $188, 382);
var $189 = { n: "e", v: "method : schemaitem", r: 25, c: 5, s: "f1", u: "f6",  }; //316
$.a($1, $189, 384);
var $190 = { n: "#", v: "A method of an element element pseudo-class generated in the WizziModelType.", r: 26, c: 9, s: "f1", u: "f6",  }; //317
$.a($189, $190, 386);
var $191 = { n: "tag", v: "m", r: 27, c: 9, s: "f1", u: "f6",  }; //318
$.a($189, $191, 388);
var $192 = { n: "a", v: "emitkey", r: 28, c: 9, s: "f1", u: "f6",  }; //319
$.a($189, $192, 390);
var $193 = { n: "#", v: "The emit key of the artifact which should insert this method.", r: 29, c: 13, s: "f1", u: "f6",  }; //320
$.a($192, $193, 392);
var $194 = { n: "#", v: "Can be any string that artifact generators will filter.", r: 30, c: 13, s: "f1", u: "f6",  }; //321
$.a($192, $194, 394);
var $195 = { n: "r", v: "param/s", r: 31, c: 9, s: "f1", u: "f6",  }; //322
$.a($189, $195, 396);
var $196 = { n: "r", v: "require/s", r: 32, c: 9, s: "f1", u: "f6",  }; //323
$.a($189, $196, 398);
var $197 = { n: "r", v: "statement/s", r: 33, c: 9, s: "f1", u: "f6",  }; //324
$.a($189, $197, 400);
var $198 = { n: "e", v: "param : schemaitem", r: 35, c: 5, s: "f1", u: "f6",  }; //325
$.a($1, $198, 402);
var $199 = { n: "#", v: "A parameter of a method or function element.", r: 36, c: 9, s: "f1", u: "f6",  }; //326
$.a($198, $199, 404);
var $200 = { n: "e", v: "statement : schemaitem", r: 2, c: 5, s: "f1", u: "f7",  }; //375
$.a($1, $200, 406);
var $201 = { n: "r", v: "statement/s", r: 3, c: 9, s: "f1", u: "f7",  }; //376
$.a($200, $201, 408);
var $202 = { n: "e", v: "var : statement", r: 5, c: 5, s: "f1", u: "f7",  }; //377
$.a($1, $202, 410);
var $203 = { n: "tag", v: "var", r: 6, c: 9, s: "f1", u: "f7",  }; //378
$.a($202, $203, 412);
var $204 = { n: "e", v: "decl : statement", r: 8, c: 5, s: "f1", u: "f7",  }; //379
$.a($1, $204, 414);
var $205 = { n: "e", v: "if : statement", r: 10, c: 5, s: "f1", u: "f7",  }; //380
$.a($1, $205, 416);
var $206 = { n: "tag", v: "if", r: 11, c: 9, s: "f1", u: "f7",  }; //381
$.a($205, $206, 418);
var $207 = { n: "e", v: "elif : statement", r: 13, c: 5, s: "f1", u: "f7",  }; //382
$.a($1, $207, 420);
var $208 = { n: "e", v: "else : statement", r: 15, c: 5, s: "f1", u: "f7",  }; //383
$.a($1, $208, 422);
var $209 = { n: "tag", v: "else", r: 16, c: 9, s: "f1", u: "f7",  }; //384
$.a($208, $209, 424);
var $210 = { n: "e", v: "switch : statement", r: 18, c: 5, s: "f1", u: "f7",  }; //385
$.a($1, $210, 426);
var $211 = { n: "e", v: "case : statement", r: 19, c: 5, s: "f1", u: "f7",  }; //386
$.a($1, $211, 428);
var $212 = { n: "e", v: "for : statement", r: 20, c: 5, s: "f1", u: "f7",  }; //387
$.a($1, $212, 430);
var $213 = { n: "tag", v: "for", r: 21, c: 9, s: "f1", u: "f7",  }; //388
$.a($212, $213, 432);
var $214 = { n: "e", v: "foreach : statement", r: 23, c: 5, s: "f1", u: "f7",  }; //389
$.a($1, $214, 434);
var $215 = { n: "e", v: "break : statement", r: 24, c: 5, s: "f1", u: "f7",  }; //390
$.a($1, $215, 436);
var $216 = { n: "e", v: "continue : statement", r: 25, c: 5, s: "f1", u: "f7",  }; //391
$.a($1, $216, 438);
var $217 = { n: "e", v: "while : statement", r: 27, c: 5, s: "f1", u: "f7",  }; //392
$.a($1, $217, 440);
var $218 = { n: "tag", v: "while", r: 28, c: 9, s: "f1", u: "f7",  }; //393
$.a($217, $218, 442);
var $219 = { n: "e", v: "do : statement", r: 30, c: 5, s: "f1", u: "f7",  }; //394
$.a($1, $219, 444);
var $220 = { n: "tag", v: "do", r: 31, c: 9, s: "f1", u: "f7",  }; //395
$.a($219, $220, 446);
var $221 = { n: "e", v: "try : statement", r: 33, c: 5, s: "f1", u: "f7",  }; //396
$.a($1, $221, 448);
var $222 = { n: "tag", v: "try", r: 34, c: 9, s: "f1", u: "f7",  }; //397
$.a($221, $222, 450);
var $223 = { n: "e", v: "catch : statement", r: 36, c: 5, s: "f1", u: "f7",  }; //398
$.a($1, $223, 452);
var $224 = { n: "tag", v: "catch", r: 37, c: 9, s: "f1", u: "f7",  }; //399
$.a($223, $224, 454);
var $225 = { n: "e", v: "finally : statement", r: 39, c: 5, s: "f1", u: "f7",  }; //400
$.a($1, $225, 456);
var $226 = { n: "tag", v: "finally", r: 40, c: 9, s: "f1", u: "f7",  }; //401
$.a($225, $226, 458);
var $227 = { n: "e", v: "throw : statement", r: 42, c: 5, s: "f1", u: "f7",  }; //402
$.a($1, $227, 460);
var $228 = { n: "tag", v: "throw", r: 43, c: 9, s: "f1", u: "f7",  }; //403
$.a($227, $228, 462);
var $229 = { n: "e", v: "return : statement", r: 44, c: 5, s: "f1", u: "f7",  }; //404
$.a($1, $229, 464);
var $230 = { n: "tag", v: "return", r: 45, c: 9, s: "f1", u: "f7",  }; //405
$.a($229, $230, 466);
var $231 = { n: "e", v: "set : statement", r: 47, c: 5, s: "f1", u: "f7",  }; //406
$.a($1, $231, 468);
var $232 = { n: "e", v: "log : statement", r: 48, c: 5, s: "f1", u: "f7",  }; //407
$.a($1, $232, 470);
var $233 = { n: "e", v: "call : statement", r: 50, c: 5, s: "f1", u: "f7",  }; //408
$.a($1, $233, 472);
var $234 = { n: "tag", v: "_", r: 51, c: 9, s: "f1", u: "f7",  }; //409
$.a($233, $234, 474);
var $235 = { n: "e", v: "jsObject : statement", r: 53, c: 5, s: "f1", u: "f7",  }; //410
$.a($1, $235, 476);
var $236 = { n: "tag", v: "{", r: 54, c: 9, s: "f1", u: "f7",  }; //411
$.a($235, $236, 478);
var $237 = { n: "e", v: "jsArray : statement", r: 56, c: 5, s: "f1", u: "f7",  }; //412
$.a($1, $237, 480);
var $238 = { n: "tag", v: "[", r: 57, c: 9, s: "f1", u: "f7",  }; //413
$.a($237, $238, 482);
var $239 = { n: "e", v: "jsPropertyOrValue : statement", r: 59, c: 5, s: "f1", u: "f7",  }; //414
$.a($1, $239, 484);
var $240 = { n: "tag", v: "@", r: 60, c: 9, s: "f1", u: "f7",  }; //415
$.a($239, $240, 486);
var $241 = { n: "e", v: "function : statement", r: 61, c: 5, s: "f1", u: "f7",  }; //416
$.a($1, $241, 488);
var $242 = { n: "e", v: "new : statement", r: 62, c: 5, s: "f1", u: "f7",  }; //417
$.a($1, $242, 490);
var $243 = { n: "e", v: "codeline : statement", r: 63, c: 5, s: "f1", u: "f7",  }; //418
$.a($1, $243, 492);
var $244 = { n: "tag", v: "+", r: 64, c: 9, s: "f1", u: "f7",  }; //419
$.a($243, $244, 494);
var $245 = { n: "e", v: "param : statement", r: 65, c: 5, s: "f1", u: "f7",  }; //420
$.a($1, $245, 496);