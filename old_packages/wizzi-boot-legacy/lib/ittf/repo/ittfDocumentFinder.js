// generator: /wizzi-labs/wizzi-lab-site/ittf/lib/artifacts/js/module/gen/main.js, utc time: Thu, 23 Mar 2017 19:48:43 GMT
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var path = require('path');
var errors = require('./errors');
function isString(obj) {
    return toString.call(obj) === '[object String]';
}

var IttfDocumentFinder = (function () {
    function IttfDocumentFinder(store,schema) {
        _classCallCheck(this, IttfDocumentFinder);
        this.store = store;
        this.schema = schema;
    }
    /**
         param options {
         ittfDocumentUri:String
         |
         basedir:String
         relpath:String
         }
    */
    IttfDocumentFinder.prototype.resolvePath = function(options,callback) {
        var ittfDocumentUri = options.ittfDocumentUri,
            relpath = options.relpath;
        if (isString(ittfDocumentUri) === false) {
            if ((isString(relpath) === false) || (relpath[0] === '/')) {
                var error = new errors.InvalidRequestError('ittf.repo.IttfDocumentFinder.resolvePath. A "relpath" options with a relative path is required to load an ITTF document, or use the "ittfDocumentUri" option', 'InvalidPath');
                return callback(error)
                ;
            }
            var basedir = options.basedir;
            if (isString (basedir) === false) {
                var error = new errors.InvalidRequestError('ittf.repo.IttfDocumentFinder. A "basedir" option is required to load an ITTF document using a relative path', 'InvalidPath');
                return callback(error)
                ;
            }
            if (isString (relpath) === false) {
                var error = new errors.InvalidRequestError('ittf.repo.IttfDocumentFinder. A "relpath" option is required to load an ITTF document using a relative path', 'InvalidPath');
                return callback(error)
                ;
            }
            ittfDocumentUri = path.join(basedir, relpath);
        }
        var self = this;
        this.tryExists(ittfDocumentUri, this.schema, function(err,result) {
            if (err) {
                return callback(err)
                ;
            }
            if (result.found) {
                return callback(null, result.ittfDocumentUri)
                ;
            }
            else {
                if (isString (relpath) === false) {
                    var error = new errors.IttfNotFoundError('IttfDocument', ittfDocumentUri);
                    return callback(error);
                }
                self.resolvePathInTFolders(path.dirname(ittfDocumentUri), relpath, function(err,tresult) {
                    if (err) {
                        return callback(err)
                        ;
                    }
                    if (tresult.found) {
                        return callback(null, tresult.ittfDocumentUri)
                        ;
                    }
                    else {
                        console.log('IttfDocumentFinder.resolvePath options', options, self.schema);
                        var error = new errors.IttfNotFoundError('IttfDocument', ittfDocumentUri);
                        return callback(error);
                    }
                });
            }
        });
    }
    IttfDocumentFinder.prototype.resolvePathInTFolders = function(basePath,relPath,callback) {
        var ittfDocumentUri = path.join(basePath, 't', relPath);
        var self = this;
        this.tryExists(ittfDocumentUri, this.schema, function(err,result) {
            if (err) {
                return callback(err)
                ;
            }
            if (result.found) {
                return callback(null, result);
            }
            else {
                basePath = path.dirname(basePath);
                if (basePath.length > 3) {
                    return self.resolvePathInTFolders(basePath, relPath, callback);
                }
                else {
                    return callback(null, {
                            found: false
                        })
                    ;
                }
            }
        });
    }
    IttfDocumentFinder.prototype.tryExists = function(test,schema,callback) {
        var self = this;
        this.store.documentExists(test, function(err,result) {
            if (err) {
                return callback(err)
                ;
            }
            if (result) {
                return callback(null, {
                        found: true, 
                        ittfDocumentUri: test
                    })
                ;
            }
            else {
                if (test.toLowerCase().substr(-5, 5) !== '.ittf') {
                    if (schema) {
                        self.store.documentExists(test + '.' + schema + '.ittf', function(err,result) {
                            if (err) {
                                return callback(err)
                                ;
                            }
                            if (result) {
                                return callback(null, {
                                        found: true, 
                                        ittfDocumentUri: test + '.' + schema + '.ittf'
                                    })
                                ;
                            }
                            else {
                                self.store.documentExists(test + '.ittf', function(err,result) {
                                    if (err) {
                                        return callback(err)
                                        ;
                                    }
                                    if (result) {
                                        return callback(null, {
                                                found: true, 
                                                ittfDocumentUri: test + '.ittf'
                                            })
                                        ;
                                    }
                                    else {
                                        return callback(null, {
                                                found: false
                                            })
                                        ;
                                    }
                                });
                            }
                        });
                    }
                    else {
                        return callback(null, {
                                found: false
                            })
                        ;
                    }
                }
                else {
                    return callback(null, {
                            found: false
                        })
                    ;
                }
            }
        });
    }
    return IttfDocumentFinder;
})();


module.exports = IttfDocumentFinder;
