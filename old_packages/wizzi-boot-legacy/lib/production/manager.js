// generator: /wizzi-labs/wizzi-lab-site/ittf/lib/artifacts/js/module/gen/main.js, utc time: Thu, 23 Mar 2017 19:48:44 GMT
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var path = require('path');
var util = require('util');
var async = require('async');
var verify = require('../util/verify');
var file = require('../util/file');
var fail = require('../util/fail');
var ittf = require('../ittf/ittf');
var GenWriter = require('../artifact/GenWriter');
var StringWriter = require('../util/stringwriter');
var log = require('../util/log')(module);
var options = require('./options');
var ProductionContext = require("./context");
var ArtifactInfo = require('../artifact/artifactinfo');
var pkgLoader = require('./wfpackageloader');
var Runner = require('./runner');
var WfJob = require('./wfjob');
var ArtifactPersister = require('./persister');
var thisWizziPackage = require('../../index');
// var legacy = require('../../legacy')
var Repository = require('../services/repository');
// var Logger = require('../services/logger')
/**
     registerWizziFactoryPackage(wizziModule)
     addArtifactInfo(artifactInfo)
     addWfJob(wfJobConfig)
     getWizziModelFactory(schemaName)
     getWizziSchemaObject(schemaName)
     getModelTransformer(transName)
     getArtifactGenerator(artifactName)
     run:AsyncMethod
     persistToFile:AsyncMethod
    
     You execute a production
     first registering wizzi packages
     then adding wfjobs and/or artifact infos
     finally executing the run and persistToFile async methods
    
*/
var ProductionManager = (function () {
    function ProductionManager(options) {
        _classCallCheck(this, ProductionManager);
        this.options = options;
        this.artifactInfos = [];
        this.wfJobArtifactInfos = [];
        this.wfJobConfigs = [];
        this.repository = new Repository();
        this.repository.registerWizziFactoryPackage(thisWizziPackage);
        // _ this.repository.registerWizziFactoryPackage(legacy)
        this.productionContext = new ProductionContext();
        log.setLevel(options.verbose || 0);
        this.___state = {
            models: {}, 
            pman: this, 
            pcx: this.productionContext
        };
        // set this.logger = new Logger()
        this.productionName = 'production';
    }
    /**
         param options {
         varbose:Boolean
         basedir:String // uri
         }
    */
    /**
         Add an artifact info declared in a "artifact" element of a "wfjob" WizziModel.
         It may also be built programmatically.
    */
    ProductionManager.prototype.addArtifactInfo = function(artifactInfoConfig) {
        if (ArtifactInfo.isArtifactConfig(artifactInfoConfig)) {
            this.artifactInfos.push(new ArtifactInfo(artifactInfoConfig));
        }
        else if (ArtifactInfo.isArtifactInstance(artifactInfoConfig)) {
            this.artifactInfos.push(artifactInfoConfig);
        }
        else {
            throw new Error('ProductionManager.addArtifactInfo is not an artifact info: ' + util.inspect(artifactInfoConfig));
        }
    }
    /**
         Add a WfJob request declared in an "artifact" element of a "wfjob" WizziModel.
    */
    ProductionManager.prototype.addWfJobArtifactInfo = function(artifactInfoConfig) {
        this.wfJobArtifactInfos.push(new ArtifactInfo(artifactInfoConfig));
    }
    ProductionManager.prototype.addWfJob = function(wfJobConfig) {
        this.wfJobConfigs.push(wfJobConfig);
    }
    ProductionManager.prototype.registerWizziFactoryPackage = function(wizziModule) {
        this.repository.registerWizziFactoryPackage(wizziModule);
    }
    ProductionManager.prototype.getWizziModelFactory = function(schemaName) {
        if (schemaName === 'ittf') {
            return function(ittfDocument,context,callback) {
                    ittf.load(ittfDocument, context, function(err,ittfModel) {
                        if (err) {
                            return callback(err);
                        }
                        return callback(null, ittfModel.nodes[0]);
                    });
                };
        }
        else {
            return this.repository.getWizziModelFactory(schemaName);
        }
    }
    ProductionManager.prototype.getWizziSchemaObject = function(schemaName) {
        return this.repository.getWizziSchemaObject(schemaName);
    }
    ProductionManager.prototype.getModelTransformer = function(transName) {
        return this.repository.getModelTransformer(transName);
    }
    ProductionManager.prototype.getArtifactGenerator = function(artifactName) {
        return this.repository.getArtifactGenerator(artifactName);
    }
    ProductionManager.prototype.initialize = function(callback) {
        log.info('Initialize');
        this.___state = {
            models: {}, 
            pman: this, 
            pcx: this.productionContext
        };
        var i, i_len=this.wfJobConfigs.length, jobConfig;
        for (i=0; i<i_len; i++) {
            jobConfig = this.wfJobConfigs[i];
            var wfjobSrc = jobConfig.wfjob.src;
            // log 'this.productionName, wfjobSrc', this.productionName, wfjobSrc
            this.productionName += '_' + path.basename(wfjobSrc);
            // log 'this.productionName formatted', this.productionName
            var job = new WfJob(this, jobConfig);
            var self = this;
            job.getArtifactInfoConfigs(function(err,result) {
                if (err) {
                    return callback(err);
                }
                var requires = result[0];
                // log 'requires', requires
                var j, j_len=requires.length, r;
                for (j=0; j<j_len; j++) {
                    r = requires[j];
                    var factoryPackage = pkgLoader.load(r, path.dirname(wfjobSrc));
                    self.registerWizziFactoryPackage(factoryPackage);
                }
                var artifactInfoConfigs = result[1];
                var j, j_len=artifactInfoConfigs.length, artifactInfoConfig;
                for (j=0; j<j_len; j++) {
                    artifactInfoConfig = artifactInfoConfigs[j];
                    // log 'ProductionManager.initialize.artifactInfoConfig', util.inspect(artifactInfoConfig, { depth: 2 })
                    artifactInfoConfig.wfjob = wfjobSrc;
                    if (artifactInfoConfig.isWfJob) {
                        console.log('ProductionManager.initialize.artifactInfoConfig', "isWfJob", inspect(artifactInfoConfig, { depth: 2 }));
                        self.addWfJobArtifactInfo(artifactInfoConfig);
                    }
                    else {
                        self.addArtifactInfo(artifactInfoConfig);
                    }
                }
                var j, j_len=self.wfJobArtifactInfos.length, artifactInfo;
                for (j=0; j<j_len; j++) {
                    artifactInfo = self.wfJobArtifactInfos[j];
                    artifactInfo.initialize(self);
                }
                var j, j_len=self.artifactInfos.length, artifactInfo;
                for (j=0; j<j_len; j++) {
                    artifactInfo = self.artifactInfos[j];
                    artifactInfo.initialize(self);
                }
                callback(null, null);
            });
        }
    }
    ProductionManager.prototype.run = function(callback) {
        log.info('Start run');
        var self = this;
        this.initialize(function(err,result) {
            if (err) {
                return callback(err);
            }
            // _ self.logger.start(self.productionName);
            async.map(self.wfJobArtifactInfos, AsyncRunner.run, function(err,result) {
                if (err) {
                    return callback(err);
                }
                async.map(self.artifactInfos, AsyncRunner.run, function(err,result) {
                    if (err) {
                        return callback(err);
                    }
                    self.artifactInfos = result;
                    self.terminate();
                    log.info('End run');
                    callback(null, result);
                });
            });
        });
    }
    ProductionManager.prototype.terminate = function() {
        log.info('Terminate');
    }
    ProductionManager.prototype.persistToFile = function(callback) {
        log.info('Start persistToFile');
        var self = this;
        async.map(self.artifactInfos, AsyncPersisterToFile.run, function(err,result) {
            if (err) {
                return callback(err);
            }
            // log 'ProductionManager.persistToFile.persisted artifacts', util.inspect(result, { depth: 1 })
            var i, i_len=self.artifactInfos.length, ai;
            for (i=0; i<i_len; i++) {
                ai = self.artifactInfos[i];
                ai.terminate();
            }
            // _ self.logger.addItem('pman_state', self.getLogState())
            // _ self.logger.addItem('wfJobConfigs', self.wfJobConfigs)
            // _ self.logger.addItem('artifactInfos', self.artifactInfos)
            // _ self.logger.terminate()
            log.info('End persistToFile');
            callback(null, result);
        });
    }
    ProductionManager.prototype.relPath = function(filepath) {
        return filepath.substr(this.options.basedir.length + 1);
    }
    ProductionManager.prototype.getLogState = function() {
        delete this.___state.pman
        var logState = {
            models: {}
        };
        // log 'wizzi-factory/productionManager/state models length', this.___state.models.length
        for (var m in this.___state.models) {
            var mo = this.___state.models[m];
            var modelState = {};
            logState[m] = modelState;
            for (var k in mo) {
                // log 'wizzi-factory/productionManager/state model prop', k
                if (mo.loadContext) {
                    modelState.ittfSources = mo.loadContext.getIttfDocuments();
                    var i, i_len=mo.loadContext.ittfDocumentDatas.length, idm;
                    for (i=0; i<i_len; i++) {
                        idm = mo.loadContext.ittfDocumentDatas[i];
                        var idm_o = mo.loadContext.ittfDocumentDatas[idm];
                        delete idm_o.ittfModel
                        for (var idm_k in idm_o) {
                            // log 'wizzi-factory/productionManager/state model loadContext ittfDocumentData prop', idm_k
                        }
                    }
                    // set modelState.ittfDocumentDatas = mo.loadContext.ittfDocumentDatas
                    for (var z in mo.loadContext) {
                        // log 'wizzi-factory/productionManager/state model loadContext prop', z
                    }
                    if (mo.loadContext.ittfSources) {
                        for (var z in mo.loadContext.ittfSources) {
                            // log 'wizzi-factory/productionManager/state model ittfSources prop', z
                        }
                    }
                }
            }
        }
        return logState;
    }
    ProductionManager.prototype.go_generateArtifact = function(artifactName,artifactContext,wizziModelInstance,callback) {
        var self = this;
        var generator = this.getArtifactGenerator(artifactName);
        if (generator == null) {
            var msg = 'ProductionManager.go_generateArtifact cannot find generator for artifact: ' + artifactName;
            fail.warn(msg);
            throw new Error(msg);
        }
        var genWriter = new GenWriter({ options: options(null, { data: artifactContext.__data }) });
        new generator.gen(wizziModelInstance, genWriter, function(err) {
            if (err) {
                var msg = util.inspect(err, { depth: null});
                fail.warn(msg);
                throw new Error(msg);
            }
            var sw = new StringWriter();
            genWriter.toStream(sw);
            callback(null, sw.toString());
        });
    }
    ProductionManager.prototype.generateArtifact = function(schemaName,artifactName,ittfDocumentUri,modelContext,artifactContext,callback) {
        var self = this;
        var factory = this.getWizziModelFactory(schemaName);
        if (factory == null) {
            var msg = 'ProductionManager.generateArtifact cannot find factory for schema: ' + schemaName + ' for artifact ' + ittfDocumentUri;
            fail.warn(msg);
            throw new Error(msg);
        }
        if (!factory.load) {
            if (schemaName == 'ittf') {
                factory(ittfDocumentUri, modelContext, function(err,wizziModelInstance) {
                    if (err) {
                        var msg = 'Error loading IttfDocument: ' + ittfDocumentUri + '\n' + util.inspect(err, { depth: null});
                        fail.warn(msg);
                        throw new Error(msg);
                    }
                    self.go_generateArtifact(artifactName, artifactContext, wizziModelInstance, callback);
                });
                return ;
            }
            else {
                var msg = 'ProductionManager.generateArtifact. Missing load method in factory for schema: ' + schemaName + ' for artifact ' + ittfDocumentUri;
                fail.warn(msg);
                throw new Error(msg);
            }
        }
        else {
            factory.load(ittfDocumentUri, modelContext, function(err,wizziModelInstance) {
                // log 'ProductionManager.generateArtifact', err
                if (err) {
                    var msg = 'Error loading IttfDocument: ' + ittfDocumentUri + '\n' + util.inspect(err, { depth: null});
                    fail.warn(msg);
                    throw new Error(msg);
                }
                self.go_generateArtifact(artifactName, artifactContext, wizziModelInstance, callback);
            });
        }
    }
    return ProductionManager;
})();


var AsyncRunner = {
    run: function(artifactInfo,callback) {
        log.info('Started async run artifact: ' + artifactInfo.name);
        var runner = new Runner(artifactInfo);
        runner.run(function(err,result) {
            if (err) {
                return callback(err);
            }
            log.info('Ended async run artifact: ' + artifactInfo.name);
            callback(null, result);
        });
    }
};
var AsyncPersisterToFile = {
    run: function(artifactInfo,callback) {
        log.info('Started async persist to file artifact: ' + artifactInfo.name);
        var persister = new ArtifactPersister(artifactInfo);
        persister.toFile(function(err,result) {
            if (err) {
                return callback(err);
            }
            log.info('Ended async persist to file artifact: ' + artifactInfo.name);
            callback(null, result);
        });
    }
};
module.exports = ProductionManager;
