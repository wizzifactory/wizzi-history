$group

	#
		# params
		#   { options
		#     { repo
		#       string storeKind
		#         oneOf 'filesystem', 'mongodb', 'localstorage'
		#       string storeUri
		#         # when storeKind == mongodb
		#       string storeBaseFolder
		#         # when storeKind == mongodb
		#     { plugins
		#         [ items
		#           string pluginName
		#         string pluginsBaseFolder
		#     { test
		#         string testOnlyMockBaseDir
		#       { dumps
		#         string dumpsBaseFolder
		# 	      { mTreeBuildupJsWizziScript
		#           boolean dump
		#           string dumpsBaseFolder

	m initialize
		{ options
			{ repo
			{ plugins
				optional
			{ globalContext
				optional
			{ test
				optional
		callback

		if options.test
			set this.__is_test = true
			set this.testOptions
				{
					@ dumps options.test.dumps
			set this.testOnlyMockBaseDir = options.test.testOnlyMockBaseDir

		if options.globalContext
			set this.globalContext
				_ Object.assign
					{
					@ this.globalContext
					@ options.globalContext
		
		log 'wizzi.wizziFactory.initialize.globalContext', this.globalContext

		var repoOptions = options.repo
		var pluginsOptions = options.plugins
		if verify.isObject(pluginsOptions) == false
			set pluginsOptions = {}

		set this.storeKind = repoOptions.storeKind || 'filesystem'

		var that = this
		_ this.storePool.initialize
			@ repoOptions
			f_cb( pool )
				set that.fileService = pool.fileService
				set that.createStore = pool.createStore
				checked_call_set( that.__loadMTree )
					_ mtree.createLoadMTree
						@ that.createStore
				checked_call_set( that.__loadMTreeRaw )
					_ mtree.createLoadMTree
						@ that.createStore
						{
							@ raw true
				_ that.createStore
					f_cb( store )
						set that.store = store
						_ PluginsManager.createManager
							@ pluginsOptions
							f_cb( pluginsManager )
								set that.pluginsManager = pluginsManager
								# log 'pluginsManager', pluginsManager
								return
									_ callback(null, that)

