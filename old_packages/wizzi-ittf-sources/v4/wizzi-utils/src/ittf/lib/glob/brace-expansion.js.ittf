module 
    kind jsfile

	# FROM
	# Copyright (c) 2013 Julian Gruber <julian@juliangruber.com>
	# source https://github.com/juliangruber/brace-expansion/blob/master/index.js
	# license (MIT) https://github.com/juliangruber/brace-expansion

    var concatMap = require('./concat-map')
    var balanced = require('./balanced-match')
    set module.exports = expandTop
    var escSlash = ((('\0SLASH' + Math.random())) + '\0')
    var escOpen = ((('\0OPEN' + Math.random())) + '\0')
    var escClose = ((('\0CLOSE' + Math.random())) + '\0')
    var escComma = ((('\0COMMA' + Math.random())) + '\0')
    var escPeriod = ((('\0PERIOD' + Math.random())) + '\0')
    
	function numeric
        param str
        return 
            iif parseInt(str, 10) == str
                then 
                    _ parseInt(str, 10)
                else 
                    _ str.charCodeAt(0)
    
	function escapeBraces
        param str
        return 
            _ str.split('\\\\')
                ._ join(escSlash)
                    ._ split('\\{')
                        ._ join(escOpen)
                            ._ split('\\}')
                                ._ join(escClose)
                                    ._ split('\\,')
                                        ._ join(escComma)
                                            ._ split('\\.')
                                                ._ join(escPeriod)
    function unescapeBraces
        param str
        return 
            _ str.split(escSlash)
                ._ join('\\')
                    ._ split(escOpen)
                        ._ join('{')
                            ._ split(escClose)
                                ._ join('}')
                                    ._ split(escComma)
                                        ._ join(',')
                                            ._ split(escPeriod)
                                                ._ join('.')
    function parseCommaParts
        param str
        if ! (str)
            return 
                [ 
                    @ ''
        var parts
            [ 
        var m = balanced('{', '}', str)
        if ! (m)
            return str.split(',')
        var pre = m.pre
        var body = m.body
        var post = m.post
        var p = pre.split(',')
        set p[(p.length - 1)] += ((('{' + body)) + '}')
        var postParts = parseCommaParts(post)
        if post.length
            set p[(p.length - 1)] += postParts.shift()
            _ p.push.apply(p, postParts)
        _ parts.push.apply(parts, p)
        return parts
    function expandTop
        param str
        if ! (str)
            return 
                [ 
        if str.substr(0, 2) === '{}'
            set str = ('\\{\\}' + str.substr(2))
        return 
            _ expand
                _ escapeBraces(str)
                @ true
                ._ map(unescapeBraces)
    function identity
        param e
        return e
    function embrace
        param str
        return ((('{' + str)) + '}')
    function isPadded
        param el
        return /^-?0\d/.test(el)
    function lte
        param i
        param y
        return i <= y
    function gte
        param i
        param y
        return i >= y
    function expand
        param str
        param isTop
        var expansions
            [ 
        var m = balanced('{', '}', str)
        if (! (m) || /\$
			\ $/.test(m.pre))
            return 
                [ 
                    @ str
        var isNumericSequence
            _ /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test
                @ m.body
        var isAlphaSequence
            _ /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test
                @ m.body
        var isSequence = (isNumericSequence || isAlphaSequence)
        var isOptions = m.body.indexOf(',') >= 0
        if ! (isSequence) && ! (isOptions)
            if m.post.match(/,.*\}/)
                set str = (((((((m.pre + '{')) + m.body)) + escClose)) + m.post)
                return expand(str)
            return 
                [ 
                    @ str
        var n
        if isSequence
            set n = m.body.split(/\.\./)
        else 
            set n = parseCommaParts(m.body)
            if n.length === 1
                set n = expand(n[0], false).map(embrace)
                if n.length === 1
                    var post
                        iif m.post.length
                            then 
                                _ expand
                                    @ m.post
                                    @ false
                            else 
                                [ 
                                    @ ''
                    return 
                        _ post.map
                            function 
                                param p
                                return (((m.pre + n[0])) + p)
        var pre = m.pre
        var post
            iif m.post.length
                then 
                    _ expand
                        @ m.post
                        @ false
                else 
                    [ 
                        @ ''
        var N
        if isSequence
            var x
                _ numeric
                    @ n[0]
            var y
                _ numeric
                    @ n[1]
            var width
                _ Math.max
                    @ n[0].length
                    @ n[1].length
            var incr
                iif n.length == 3
                    then 
                        _ Math.abs
                            _ numeric
                                @ n[2]
                    else 1
            var test = lte
            var reverse = y < x
            if reverse
                set incr *= - (1)
                set test = gte
            var pad = n.some(isPadded)
            set N = []
            for var i = x; test(i, y); i += incr
                var c
                if isAlphaSequence
                    set c = String.fromCharCode(i)
                    if c === '\\'
                        set c = ''
                else 
                    set c = String(i)
                    if pad
                        var need = (width - c.length)
                        if need > 0
                            var z
                                new Array((need + 1))
                                    ._ join('0')
                            if i < 0
                                set c = ((('-' + z)) + c.slice(1))
                            else 
                                set c = (z + c)
                _ N.push(c)
        else 
            set N =
                _ concatMap
                    @ n
                    function 
                        param el
                        return expand(el, false)
        for var j = 0; j < N.length; j++
            for var k = 0; k < post.length; k++
                var expansion = (((pre + N[j])) + post[k])
                if (((! (isTop) || isSequence)) || expansion)
                    _ expansions.push(expansion)
        return expansions
