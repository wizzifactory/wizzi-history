$group

	class wzError
		super Error

		ctor
			param name
			param inner
			param shortmessage
			param message
			param info
			set this.name =  name
			set this.inner =  inner
			set this.shortmessage =  shortmessage
			set this.message =  message
			set this.info =  info
			set this.__is_error = true

		m toString
			var ret 
				[
					@ (this.hasOwnProperty('name') && this.name ||
						\b this.constructor.name || 
						\b this.constructor.prototype.name)
						\b + ': ' + ( this.message || 'message unavailable')
			if this.info
				for var k in this.info
					if md.isPrimitive(this.info[k])
						_ ret.push( '-> ' + k + ': ' + this.info[k] )
			for var k in this
				if md.isPrimitive(this[k])
					_ ret.push( '-> ' + k + ': ' + this[k] )
			_ printInner(ret, this.inner, 2)
			return ret.join('\n')

		m toInfo
			var ret
				[
					@ '\n'
					@ '== error =================='
			for var k in this.info
				if md.isPrimitive(this.info[k])
					_ ret.push( '-> ' + k + ': ' + this.info[k] )
			_ ret.push('---------------------------')
			return ret.join('\n')

	function printInner
		param ret
		param inner
		param level
		
		if inner
			var indent0 = new Array(1 + (level-1) * 4).join(' ')
			var indent = new Array(1 + level * 4).join(' ')
			_ ret.push( indent0 + '::> inner')
			for var k in inner.info
				if md.isPrimitive(inner.info[k])
					_ ret.push( indent + '-> ' + k + ': ' + inner.info[k] )
			for var k in inner
				if md.isPrimitive(inner[k])
					_ ret.push( indent + '-> ' + k + ': ' + inner[k] )
			var stack = inner.stack
			if md.isNotEmpty(stack)
				_ ret.push( indent + '-> inner.stack :')
				foreach line in stack.split('\n')
					_ ret.push( indent + '    ' + line)
			_ printInner(ret, inner.inner, level+1)

	set wzError.prototype.name = 'wzError'