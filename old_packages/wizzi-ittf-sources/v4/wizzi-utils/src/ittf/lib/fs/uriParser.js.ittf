module wizzi-utils.fs.uriParser
	kind jsfile

	import path
	import url
	var verify = require('../verify')

	#
		# params
		#   string uri
		# returns
		#   {
		#     string originalUri
		#     string protocol
		#        one-of 'db', 'ls', drive letter
		#     string storeKind
		#        one-of 'mongodb', 'localstorage', 'filesystem'
		#     string userId
		#        # if storeKind === 'mongodb'
		#     string projectId
		#        # if storeKind === 'mongodb'
		#     string path
		#     boolean isIttfDocument
		#     string basename
		#     string schema
		#        # if isIttfDocument === true
		#     string extension
		#        # if isIttfDocument === false
		#

	set module.exports
		function parse
			param uri

			set uri = uri.toLowerCase()
			
			var ret
				{
					@ originalUri uri

            var parsedUri = url.parse(uri)
            if typeof(parsedUri.protocol) !== 'string'
				r_wz_err( InvalidArgument, parse )
					@ 'Uri must have a protocol (must be an absolute url). Received: ' + uri
            
			var protocol
                iif parsedUri.protocol.substr(-1, 1) === ':'
                    then 
                        _ parsedUri.protocol.substr(0, (parsedUri.protocol.length - 1))
                    else 
                        set parsedUri.protocol
            
			set ret.protocol = protocol
			set ret.storeKind = 'filesystem'
			if protocol === 'db'
				set ret.storeKind = 'mongodb'
			elif protocol === 'ls'
				set ret.storeKind = 'localstorage'

			# log 'parseuri.parsedUri', parsedUri
			var
				decl name
				decl parts = parsedUri.pathname ? parsedUri.pathname.split('/') : []

			if parsedUri.pathname && parsedUri.pathname.length > 0 && parsedUri.pathname[0] == '/'
				_ parts.shift()
			
			set name = parts[parts.length-1]
			set ret.basename = name
			
			var nameparts = name.split('.')
			if nameparts.length > 2 && nameparts[nameparts.length -1] === 'ittf'
				set ret.isIttfDocument = true
				set ret.schema = nameparts[nameparts.length -2]
			else
				set ret.isIttfDocument = false
				set ret.extension = nameparts[nameparts.length -1]

			if parts.length < 2
                
			# log 'wizzi-utils.fs.uriParser.parsedUri.parts', parts
			# log 'wizzi-utils.fs.uriParser.parsedUri', parsedUri
			
            set ret.userId = parsedUri.host
			if parts.length > 0
				set ret.projectId = parts[0]
				_ parts.shift();
			set ret.path = parts.join('/')

			# log 'parseuri.ret', ret

			return  ret