/*
    artifact generator: C:\My\wizzi\v4\node_modules\v4-wizzi-js\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\v4\kernel\wizzi-repo\src\ittf\lib\repo\fragmentsfinder.js.ittf
    utc time: Tue, 10 Oct 2017 15:38:08 GMT
*/
'use strict';
// generated by wizzi.codegen.js.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var path = require('path');
var verify = require('../util/verify');
var config = require('../../config');
var errors = require('./errors');
var IttfDocumentStore = require('./ittfDocumentStore');
var FragmentsFinder = (function () {
    function FragmentsFinder(store, schema) {
        _classCallCheck(this, FragmentsFinder);
        if (verify.isObject(store) === false) {
            throw new Error(error(
                'InvalidArgument', 'ctor', { parameter: 'store', message: 'The store parameter must be an object. Received: ' + store }
            ));
        }
        if (verify.isNotEmpty(schema) === false) {
            throw new Error(error(
                'InvalidArgument', 'ctor', { parameter: 'schema', message: 'The schema parameter must be a string. Received: ' + schema }
            ));
        }
        this.store = store;
        this.schema = schema;
        this.ext = '.' + schema + '.ittf';
        this.baseFolder = config.get('wfBaseFolder');
    }
    FragmentsFinder.prototype.getFragmentsInScope = function(ittfDocumentUri) {
        if (verify.isNotEmpty(ittfDocumentUri) === false) {
            return error(
                'InvalidArgument', 'getFragmentsInScope', { parameter: 'ittfDocumentUri', message: 'The ittfDocumentUri parameter must be a string. Received: ' + ittfDocumentUri }
            );
        }
        var folderUri = path.dirname(ittfDocumentUri);
        var ret = [];
        this._search_up(folderUri, ret);
        this._search_down(folderUri, ret);
        return ret;
    }
    FragmentsFinder.prototype._search_down = function(folderUri, resultByRef) {
        if (verify.isNotEmpty(folderUri) === false) {
            return error(
                'InvalidArgument', '_search_down', { parameter: 'folderUri', message: 'The folderUri parameter must be a string. Received: ' + folderUri }
            );
        }
        if (verify.isObject(resultByRef) === false) {
            return error(
                'InvalidArgument', '_search_down', { parameter: 'resultByRef', message: 'The resultByRef parameter must be an object. Received: ' + resultByRef }
            );
        }
        if (verify.isArray(resultByRef.folders) === false) {
            return error(
                'InvalidArgument', '_search_down', { parameter: 'resultByRef.folders', message: 'The resultByRef.folders parameter must be an array. Received: ' + resultByRef.folders }
            );
        }
        var folders = this.store.getFoldersSync(folderUri, {
            deep: true, 
            tFoldersOnly: true, 
            documentNames: true
        })
        ;
        var i, i_len=folders.length, item;
        for (i=0; i<i_len; i++) {
            item = folders[i];
            resultByRef.folders.push(item);
        }
    }
    FragmentsFinder.prototype._search_up = function(folderUri, resultByRef) {
        if (verify.isNotEmpty(folderUri) === false) {
            return error(
                'InvalidArgument', '_search_up', { parameter: 'folderUri', message: 'The folderUri parameter must be a string. Received: ' + folderUri }
            );
        }
        if (verify.isObject(resultByRef) === false) {
            return error(
                'InvalidArgument', '_search_up', { parameter: 'resultByRef', message: 'The resultByRef parameter must be an object. Received: ' + resultByRef }
            );
        }
        if (verify.isArray(resultByRef.folders) === false) {
            return error(
                'InvalidArgument', '_search_up', { parameter: 'resultByRef.folders', message: 'The resultByRef.folders parameter must be an array. Received: ' + resultByRef.folders }
            );
        }
        parentUri = path.dirname(folderUri);
        if (!verify.startsWith(parentUri, this.baseFolder)) {
            return ;
        }
        var folders = this.store.getFoldersSync(parentUri, {
            deep: false, 
            tFoldersOnly: true, 
            documentNames: true
        })
        ;
        var i, i_len=folders.length, item;
        for (i=0; i<i_len; i++) {
            item = folders[i];
            resultByRef.folders.push(item);
        }
    }
    FragmentsFinder.createFileSystemFragmentFinder = function(schema) {
        if (verify.isNotEmpty(schema) === false) {
            return error(
                'InvalidArgument', 'createFileSystemFragmentFinder', { parameter: 'schema', message: 'The schema parameter must be a string. Received: ' + schema }
            );
        }
        var store = IttfDocumentStore.createFileSystemDocumentStore();
        var ret = new FragmentsFinder(store, schema);
        return ret;
    }
    return FragmentsFinder;
})();

module.exports = FragmentsFinder;
/**
  params
    string code
      # the error name or number
    string method
    string message
      # optional
    { innerError
      # optional
*/
function error(code, method, message, innerError) {
    var parameter = null;
    if (verify.isObject(message)) {
        parameter = message.parameter;
        message = message.message;
    }
    return verify.error(innerError, {
        name: ( verify.isNumber(code) ? 'Err-' + code : code ),
        method: 'wizzi-repo.fragmentsFinder.' + method,
        parameter: parameter,
        sourcePath: __filename
    }, message || 'Error message unavailable');
}
