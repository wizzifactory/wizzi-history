module
	kind jsfile

    import fs
	import path
	var iconv = require('iconv-lite')

	var md
        set module.exports =
            { 
    
	var pathSeparatorRe = /[\/\\]/g
	set md.defaultEncoding = 'utf8'
	set md.preserveBOM = false

	var getFilesDefaults
        { 
            @ deep true
            @ extension null
            @ documentContent false
    
	set md.getFiles
        function 
            param path_string
            param options
            set options = Object.assign({}, getFilesDefaults, (options || {}))
            var result
            if md.isDirectory(path_string)
                var files
                    [ 
                _ md._appendFiles(path_string, files, options)
                set result = files
            elif md.isFile(path_string)
                set result = [normalize(path_string)]
            else 
                set result = []
            if options.documentContent
                var 
                    decl newResult
                        [ 
                    decl content
                foreach item in result
                    set content = md.read(item)
                    _ newResult.push
                        { 
                            @ file item
                            @ content content
                return newResult
            return result
    
	set md._appendFiles
        function 
            param path_string
            param files
            param options
            var dir = fs.readdirSync(String(path_string))
			var folders = []
            foreach item in dir
				var filePath = path.join(path_string, item)
				log 'wizzi-repo.mongodb.file._appendFiles found item', filePath
                if md.isDirectory(filePath)
					if options.deep
						_ folders.push(item)
                else 
                    if !options.extension || item.substr(-options.extension.length) === options.extension
						log 'wizzi-repo.mongodb.filemd._appendFiles added file', filePath
                        _ files.push
							_ normalize
								_ path.join
									@ path_string
									@ item
			foreach item in folders
				var folderPath = path.join(path_string, item)
                _ md._appendFiles(folderPath, files, options)
    
	var getFoldersDefaults
        { 
            @ deep true
            @ tFoldersOnly false
            @ documentNames false
            @ documentContents false
    
	set md.getFolders
        function 
            param path_string
            param options
            set options = Object.assign({}, getFoldersDefaults, options)
            var result
            if md.isDirectory(path_string)
                var folders
                    [ 
                _ md._appendFolders(path_string, folders, options)
                set result = folders
            elif md.isDirectory(path_string)
                set result = [normalize(path_string)]
            else 
                set result = []
            
			if options.documentNames
                var 
                    decl newResult
                        [ 
                    decl files
                foreach item in result
                    var filePath = path.join(path_string, item)
					if options.tFoldersOnly
						set files = md.getFiles(filePath, {deep: true, filesOnly: true})
					else
						set files = md.getFiles(filePath, {deep: false, filesOnly: true})
                    _ newResult.push
                        { 
                            @ folder item
                            @ documents files
                return newResult
            return result
    
	set md._appendFolders
        function 
            param path_string
            param folders
            param options
            var dir = fs.readdirSync(String(path_string))
            foreach item in dir
                var filePath = path.join(path_string, item)
                if md.isDirectory(filePath)
                    if options.tFoldersOnly
                        if item.toLowerCase() === 't'
                            _ folders.push
								_ normalize
									_ path.join
										@ path_string
										@ item
                            return 
                    else 
                        _ folders.push
							_ normalize
								_ path.join
									@ path_string
									@ item
                    if options.deep
                        _ md._appendFolders(filePath, folders, options)

	set md.read
        function 
            param path_string
            param options
            if !(options)
                set options =
                    { 
            var contents = fs.readFileSync(String(path_string))
            if options.encoding !== null
                set contents = iconv.decode(contents, (options.encoding || md.defaultEncoding))
                if !md.preserveBOM && contents.charCodeAt(0) === 0xFEFF
                    set contents = contents.substring(1)
            return contents

	set md.writeBuffer
        function 
            param path
            param content
            param overwrite
            param attr
            if fs.existsSync(path)
                if !(overwrite)
                    return false
                var stat = fs.statSync(path)
                if stat.isDirectory()
                    return false
			else
                _ md.mkpath(path)
            var fd
            try 
                set fd = fs.openSync(path, 'w', 438)
            catch e
                _ fs.chmodSync(path, 438)
                set fd = fs.openSync(path, 'w', 438)
            if fd
                _ fs.writeSync
                    @ fd
                    @ content
                    @ 0
                    @ content.length
                    @ 0
                _ fs.closeSync(fd)
            _ fs.chmodSync(path, (attr || 438))
            return true

	set md.write
        function 
            param path_string
            param contents
            param options
            if !options
                set options =
                    { 
            _ md.mkpath(path_string)
            try 
                if !Buffer.isBuffer(contents)
                    set contents = iconv.encode(contents, (options.encoding || md.defaultEncoding))
                _ fs.writeFileSync(path_string, contents)
                return true
            catch ex
                set ex.message = 'Writing file ' + path_string + '.\n' + ex.message
                throw ex

	set md.mkpath
        function 
            param path_string
            var dir = path.dirname(path_string)
            _ md.mkdir(dir)
    
	set md.mkdir
        function 
            param dirpath
            param mode
            if mode == null
                set mode = parseInt('0777', 8) & ~ (process.umask())
            _ dirpath.split(pathSeparatorRe)
                ._ reduce
                    function 
                        param parts
                        param part
                        set parts += part + '/'
                        var subpath = path.resolve(parts)
                        if !md.exists(subpath)
                            try 
                                _ fs.mkdirSync(subpath, mode)
                            catch ex
								throw 
									new errors.FileError
										@ 'Unable to create directory "' + subpath + '" (Error code: ' + e.code + ').'
										@ ex
                        return parts
                    @ ''

	set md.exists
        function
            param path_string
            try 
				var stat = fs.lstatSync(String(path_string))
                return stat.isFile() || stat.isDirectory()
            catch ex
            return false
    
	set md.isDirectory =
        function 
            param path_string
            try 
                return 
                    _ fs.lstatSync(String(path_string))
                        ._ isDirectory()
            catch ex
            return false
    
	set md.isFile
        function 
            param path_string
            try 
                return 
                    _ fs.lstatSync(String(path_string))
                        ._ isFile()
            catch ex
            return false

	function normalize
		param path
		return path.trim().replace(/\\/g,'/').toLowerCase()
