loader( objects )

    $append requires
		var lineParser = require('../util/lineParser')
		var jstparser = require('./jsonStatementTree')

    stm( jsonStatementTree
        var statements = jstparser.getStatements(model)
        _ cnt.genItems
            @ statements
            @ ctx
            { 
                @ indent false
			@ callback
    
	stm( jsPropertyOrValue
		if model.__templateChild
			_ ctx.write('${' + (model.wzName || ''))
			_ cnt.genItems
				@ model.statements
				@ ctx
				{ 
					@ indent false
				f_cb()
					_ ctx.write('}')
					r_cb()
		else
			if u.hasStatementChildren(model)
				_ jsPropertyOrValue_with_stm_children
					@ model
					@ ctx
					@ callback
			else
				_ jsPropertyOrValue_no_stm_children
					@ model
					@ ctx
					@ callback
    
	fn( jsPropertyOrValue_with_stm_children
		var colon = (ctx.isGraphql && !ctx.isNamedCallParam) ? ' ' : ': '
		if u.parentIsHtmlElement(model)
			# Attributes have been already processed
			r_cb()
        elif model.isDslCall
			_ ctx.write(model.wzName + '(')
            _ cnt.genItems
                @ model.statements
                @ ctx
                { 
                    @ indent true
				f_cb()
					_ ctx.write(')')
					r_cb()
        elif u.isObjectProperty(model) || u.isParamValue(model) || u.isValue(model)
            _ ctx.write(model.wzName + colon)
            _ cnt.genItems
                @ model.statements
                @ ctx
                { 
                    @ indent false
				@ callback
        elif ctx.__ecma === 'es6'
			_ ctx.w('@' + model.wzName + '(')
            _ cnt.genItems
                @ model.statements
                @ ctx
                { 
                    @ indent true
				f_cb()
					_ ctx.w(')')
					r_cb()
        else 
            throw ctx.error(myname + '. Invalid jsPropertyOrValue: ' + model.wzName, model)

	fn( jsPropertyOrValue_no_stm_children
		var colon = (ctx.isGraphql && !ctx.isNamedCallParam) ? ' ' : ': '
        if u.isParamValue(model) || u.isValue(model)
            _ ctx.write
                @ model.wzName
			r_cb()
        elif u.isObjectProperty(model)
            var 
                decl tk
                decl p
                    _ lineParser.parseNameValueRaw
                        @ model.wzName
                        @ model
						{
							@ objectProperty true
            if p.hasValue()
                _ ctx.write(p.name() + colon)
                _ ctx.write
                    _ p.value()
            else 
                if ctx.__ecma === 'es5'
                    _ console.log
                        _ ctx.error(myname + '. Invalid object property: ' + model.wzName, model)
                    throw ctx.error(myname + '. Invalid object property: ' + model.wzName, model)
                else 
                    _ ctx.write
                        _ p.name()
            _ cnt.genItems
                @ model.statements
                @ ctx
                { 
                    @ indent false
				@ callback
        elif u.parentIsHtmlElement(model)
			r_cb()
        else 
            if ctx.__ecma === 'es6'
                _ ctx.w('@' + model.wzName)
			elif ctx.__artifact === 'xittf/document'
				_ ctx.write
					@ model.wzName
            else 
                throw ctx.error(myname + '. Invalid jsPropertyOrValue: ' + model.wzName, model)
			r_cb()

	stm( jsObject
		var 
			decl colon = (ctx.isGraphql && !ctx.isNamedCallParam) ? ' ' : ': '

		if model.isDslCall
			_ jsObject_is_dslCall
				@ model
				@ ctx
				f_cb()
					_ jsObject_close
						@ model
						@ ctx
						@ callback
		else
			if model.wzName && model.wzName.length > 0
				# is an object property
				_ ctx.w(model.wzName + colon + '{')
			else
				if model.statements.length == 0
					_ ctx.write('{}')
					r_cb()
				_ ctx.w('{')
			_ ctx.indent()
			if ctx.__ecma === 'es6'
				set ctx.__is_react_class = true
			_ jsObject_close
				@ model
				@ ctx
				f_cb()
					if ctx.__ecma === 'es6'
						set ctx.__is_react_class = false
					r_cb()
    
	fn( jsObject_is_dslCall
		var
			decl first = true
			decl comma = true
		_ ctx.w(model.wzName + '(')
		_ ctx.indent()
		repeater(1, model.statements)
			if item_1.wzElement == 'namedCallParam'
				if comma && !first
					_ ctx.w(', ')
				set first = false
				_ cnt.genItem
					@ item_1
					@ ctx
					f_cb()
						repeater_increment(1)
			else
				repeater_increment(1)
			$append next
				_ ctx.w('')
				_ ctx.deindent()
				_ ctx.w(')')
				_ ctx.w('{')
				_ ctx.indent()
				r_cb()
	
	fn( jsObject_close
		
		var
			decl first = true
			decl comma = true
		
		repeater(1, model.statements)
			if model.isDslCall && item_1.wzElement == 'namedCallParam'
				# skip
				repeater_increment(1)
            else
				if u.isMemberAccessOrCall(item_1)
					_ ctx.w('')
					_ ctx.deindent()
					_ ctx.write('}')
					_ cnt.genItem
						@ item_1
						@ ctx
						f_cb()
							repeater(2, model.statements, index_1 + 1)
								if u.isCallArgument(item_2)
									_ ctx.write('.')
								_ cnt.genItem
									@ item_2
									@ ctx
									f_cb()
										repeater_increment(2)
								$append next
									r_cb()
				if comma && !first
					_ ctx.w(', ')
				set first = false
				_ cnt.genItem
					@ item_1
					@ ctx
					f_cb()
						set comma = item_1.wzElement !== 'comment'
						repeater_increment(1)
			$append next
				+ ;
				_ ctx.w('')
				_ ctx.deindent()
				_ ctx.write('}')
				r_cb()

	stm( jsArray
		var colon = (ctx.isGraphql && !ctx.isNamedCallParam) ? ' ' : ': '
		# log '600 jsArray'
		if model.wzName && model.wzName.length > 0
			# is an array property
			_ ctx.w(model.wzName + colon + '[')
		else
			if model.statements.length == 0
				_ ctx.write('[' + (model.wzName || '') + ']')
				# log '601 jsArray'
				r_cb() 
			_ ctx.w('[')
        _ ctx.indent()
        var first = true
		# log '602 jsArray'
        repeater(1, model.statements)
			# log '607 jsArray'
            if u.isMemberAccessOrCall(item_1)
                _ ctx.w('')
                _ ctx.deindent()
                _ ctx.write(']')
				# log '605 jsArray'
				return
					_ cnt.genItem
						@ item_1
						@ ctx
						f_cb()
							# log '603 jsArray'
							repeater(2, model.statements, index_1 + 1)
								if u.isCallArgument(item_2)
									_ ctx.write('.')
								_ cnt.genItem
									@ item_2
									@ ctx
									f_cb()
										repeater_increment(2)
								$append next
									r_cb()
            # log '606 jsArray'
			if !first
                _ ctx.w(', ')
            set first = false
            _ cnt.genItem
				@ item_1
				@ ctx
				f_cb()
					# log '604 jsArray'
					repeater_increment(1)
			$append next
				+ ;
				_ ctx.w('')
				_ ctx.deindent()
				_ ctx.write(']')
				r_cb()

	stm( get
		_ ctx.w('get ' + model.wzName + '() {')
        _ ctx.indent()
		_ cnt.genItems
			@ model.statements
			@ ctx
			f_cb()
				_ ctx.deindent()
				_ ctx.write('}')
				r_cb()