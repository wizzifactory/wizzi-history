$group

	set md.isDefined
        function 
            param test
            return !(typeof(test) === 'undefined')

	set md.isUndefined
        function 
            param test
            return typeof(test) === 'undefined'

	set md.isNullOrUndefined
        function 
            param test
            return test === null || (typeof(test) === 'undefined')
    
	set md.isString
        function 
            param test
            return test !== null && typeof(test) === 'string'
    
	set md.isEmpty
        function 
            param test
            return md.isString(test) == false || test.length == 0
    
	set md.isNotEmpty
        function 
            param test
			return md.isString(test) && test.length > 0
    
	set md.isNumber
        function 
            param test
            if test === null || typeof(test) === 'undefined'
                return false
            return !md.isArray(test) && (test - parseFloat(test) + 1) >= 0
    
	set md.isBoolean
        function 
            param test
            return typeof(test) === 'boolean'

	set md.isDate
        function 
            param test
            if test === null || typeof(test) === 'undefined'
                return false
			return Object.prototype.toString.call(test) === '[object Date]'

	set md.isPrimitive
        function 
            param test
            return md.isString(test) ||
				\b md.isNumber(test) ||
				\b md.isBoolean(test) ||
				\b md.isDate(test)

	set md.isObject
        function 
            param test
            if test === null || typeof(test) === 'undefined'
                return false
            return {}.toString.call(test) === '[object Object]'
    
	set md.isArray
        function 
            param test
            if test === null || typeof(test) === 'undefined'
                return false
			if Array.isArray
				return Array.isArray(test);
			return {}.toString.call(test) === '[object Array]'

	set md.isFunction
        function 
            param test
            if test === null || typeof(test) === 'undefined'
                return false
            return {}.toString.call(test) === '[object Function]'
    
	set md.isRegExp
		function
			param test
            if test === null || typeof(test) === 'undefined'
                return false
			return {}.toString.call(test) === '[object RegExp]'
	
	set md.isError
		function
			param test
            if test === null || typeof(test) === 'undefined'
                return false
			return ({}.toString.call(test) === '[object Error]') || (test instanceof Error)

	set md.isAbsolutePath
        function 
            param test
            if test === null || typeof(test) === 'undefined'
                return false
			if test.substr(0,3) === 'db:' || test.substr(0,3) === 'ls:'
				return true
            return path.resolve(test) == path.normalize(test)

	set md.isIttfMacro
		function
			param test
			if md.isEmpty(test)
				return false
			set test = test.trim()
			return test.substr(0, 2) === '${' && test.substr(-1, 1) === '}'



