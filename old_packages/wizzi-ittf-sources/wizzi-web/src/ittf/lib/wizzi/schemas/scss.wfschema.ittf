wfschema scss

	# A schema modeling a scss stylesheet document.

	e_tag( commentable, /*
		r commentable/s
	
	e scss : commentable
		# The root element
		is-root
		r rule/s

	e rule : commentable
		r rule/s
		m wzinitialize
			if isRuleSelector(this.wzElement)
				var acc = []
				var selectors = []
				var selectorNames = []
				var seenProp = false
				foreach item in this.rules
					if seenProp == false && isRuleSelector(item.wzElement)
						_ selectors.push(item)
						_ selectorNames.push(getSelectorName(item))
					else
						_ acc.push(item)
						set seenProp = true
				set this.rules = acc
				set this.addedSelectors = selectors
				set this.addedSelectorNames = selectorNames

	e_tag( typeRule, <, rule
	
	e_tag( classRule, ., rule
	
	e_tag( idRule, #, rule
	
	e_tag( propertyRule, @, rule

	e_tag( combinator, >, rule
		m wzinitialize
			_ _md.rule.prototype.wzInitialize.call(this, ctx);
			log 'wzinitialize.combinator', this.wzName
			var acc = []
			var pseudoClasses = []
			var seenProp = false
			foreach item in this.rules
				if seenProp == false && item.wzElement === 'pseudoClass'
					_ pseudoClasses.push(item)
				else
					_ acc.push(item)
					set seenProp = true
			set this.rules = acc
			set this.pseudoClasses = pseudoClasses

	e_tag( parentRule, &, rule
		
		m wzinitialize
			log 'wzinitialize.parentRule', this.wzName
			var acc = []
			var selectorNames = []
			var seenProp = false
			foreach item in this.rules
				if seenProp
					_ acc.push(item)
				elif item.wzElement === 'pseudoClass'
					_ item.wzInitialize(ctx)
					_ selectorNames.push(item)
				elif item.wzElement === 'parentRule'
					_ acc.push(item)
					set seenProp = true
				else
					var temp = getSelectorName(item)
					if temp
						_ selectorNames.push(temp)
					else
						_ acc.push(item)
						set seenProp = true
			set this.selectorNames = selectorNames
			set this.rules = acc
		
		m getValue
			var acc = [ '&' ]
			_ acc.push( this.wzName || '' )
			foreach item in this.selectorNames
				if item.getValue
					_ acc.push(item.getValue())
				else
					_ acc.push(item)
			return acc.join('')

	e_tag( pseudoClass, :, rule
		
		m wzinitialize
			log 'wzinitialize.pseudoClass', this.wzName
			var paramSelectorNames = []
			foreach item in this.rules
				_ paramSelectorNames.push(getSelectorName(item))
			set this.paramSelectorNames = paramSelectorNames
		
		m getValue
			var acc = [ ':' ]
			_ acc.push( this.wzName )
			if this.paramSelectorNames.length > 0
				_ acc.push( '(' + this.paramSelectorNames.join(', ') + ')' )
			return acc.join('')

	e_tag( mixinRule, @mixin, rule
		r param/s
		m wzinitialize
			var paramNames = []
			foreach item in this.params
				_ paramNames.push(item.wzName)
			set this.paramNames = paramNames

	e_tag( includeRule, @include, rule
		r block
			one-to-one
	
	e_tag( extendRule, @extend, rule
	
	e_tag( importRule, @import, rule

	e_tag( forRule, @for, rule

	e_tag( eachRule, @each, rule

	e_tag( whileRule, @while, rule

	e_tag( callRule, _, rule

	e_tag( functionRule, @function, rule
		r param/s
		m wzinitialize
			var paramNames = []
			foreach item in this.params
				_ paramNames.push(item.wzName)
			set this.paramNames = paramNames

	e_tag( returnRule, @return, rule

	e_tag( setRule, set, rule

	e param : commentable

	e_tag( block, {, commentable
		r rule/s

	declare
		
		var ruleSelectors 
			[
				@ 'typeRule'
				@ 'classRule'
				@ 'idRule'
				@ 'parentRule'
				@ 'combinator'
		
		function isRuleSelector
			param el
			return ruleSelectors.indexOf(el) > -1
		
		function getSelectorName
			param model
			if model.wzElement === 'typeRule'
				return model.wzName
			elif model.wzElement === 'classRule'
				return '.' + model.wzName
			elif model.wzElement === 'idRule'
				return '#' + model.wzName
			elif model.wzElement === 'combinator'
				return '>'
			elif model.wzElement === 'parentRule'
				return '&'	
			elif model.wzElement === 'pseudoClass'
				return ':' + model.wzName