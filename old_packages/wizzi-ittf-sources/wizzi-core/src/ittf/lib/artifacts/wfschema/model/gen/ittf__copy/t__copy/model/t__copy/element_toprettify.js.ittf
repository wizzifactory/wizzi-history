$group
	
	$if request.toPrettify

		m toPrettify
			param ctx

			var start = false
			if typeof ctx.state === 'undefined'
				_ startPrettify(ctx)
				set start = true

			_ ctx.hb.openTag('li')
			_ ctx.hb.writeAttribute('class', 'L' + ('' + ctx.state.line).substr(-1,1))

			_ ctx.hb.openTag('span', { inline: true })
			_ ctx.hb.writeAttribute('class', 'pnl')
			_ ctx.hb.writeSpaces(ctx.state.level * 4)
			_ ctx.hb.closeTag('span', { inline: true })

			_ ctx.hb.openTag('span', { inline: true })
			_ ctx.hb.writeAttribute('class', 'el-tag')
			_ ctx.hb.writeText('${element.tag}')
			_ ctx.hb.closeTag('span', { inline: true })

			$if element.wzName
				_ ctx.hb.openTag('span', { inline: true })
				_ ctx.hb.writeAttribute('class', 'el-value')
				_ ctx.hb.writeText(' ' + this.wzName)
				_ ctx.hb.closeTag('span', { inline: true })

			_ ctx.hb.closeTag('li')
			set ctx.state.line++
			
			set ctx.state.level++
			_ this.toPrettifyProperties(ctx)
			_ this.toPrettifyChildren(ctx)
			set ctx.state.level--

			if start
				_ endPrettify(ctx)

		m toPrettifyProperties
			param ctx
			_ _md.${element.superType}.prototype.toPrettifyProperties.call(this, ctx)

			$foreach attribute in element.attributes

				_ ctx.hb.openTag('li')
				_ ctx.hb.writeAttribute('class', 'L' + ('' + ctx.state.line).substr(-1,1))

				_ ctx.hb.writePrettySpaces(ctx.state.level * 4)
				_ ctx.hb.writePrettySpan('${element.tag}', 'attr-tag')

				$if element.wzName
					_ ctx.hb.writePrettySpan(' ' + this.${attribute.wzName}, 'attr-value')

				_ ctx.hb.closeTag('li')
				set ctx.state.line++

		m toPrettifyChildren
			param ctx
			_ _md.${element.superType}.prototype.toPrettifyChildren.call(this, ctx)
			
			$foreach relation in element.relations
				$if relation.isOneToOne
					if this.${relation.wzName} != null
						_ this.${relation.wzName}.toPrettify(ctx)
				$else
					foreach item in this.${relation.wzIdPlural}
						_ item.toPrettify(ctx)