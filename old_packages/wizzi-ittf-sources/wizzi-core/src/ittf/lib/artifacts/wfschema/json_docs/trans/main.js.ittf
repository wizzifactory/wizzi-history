module
	kind jsfile

	var util = require('util')
	var _ = require('lodash')
	var errors = require('../../../../../lib/errors')
	var verify = require('../../../../../lib/util/verify')
	var jsModelType = require('../../../../../legacy').jsModelType

	var md = module.exports = {}
	var myname = 'model.transformation.wfschema.html.docs.main'

	set md.trans
		function
			param model
			param ctx
			param callback
			if model.wzElement != 'wfschema'
				_ errors.NodeError(myname + '.trans. Model wzElement must be wfschema. Found: ' + model.wzElement, model);
			set ctx.result
				{
					@ name model.wzName
					@ preserveTags model.preserveTags
			_ md.wfschema(model, ctx)
			_ callback(null, ctx.result)

	tagoper( wfschema )
		set ctx.result.requires = []
		set ctx.result.exportTos = []
		set ctx.result.elements = []
		foreach exportTo in model.exportTos
			_ md.exportTo(exportTo, ctx, ctx.result)
		foreach element in model.elements
			_ md.element(element, ctx, ctx.result)

	tagoper( exportTo )
		_ parent.exportTos.push(model.wzName)

	tagoper( element )
		var flags = ''
		set flags += model.isAbstract ? 'is-abstract ' : ''
		set flags += model.addToChildren ? 'add-to-children ' : ''
		var node
			{
				@ name model.wzId
				@ super model.superId
				@ isRoot model.isRoot
				@ tags model.tagName.split('|')
				@ flags flags
				@ attributes
					[
				@ relations
					[
				@ derived
					[
				@ restricts
					[
				@ methods
					[
				@ comments
					[
		var flatAttributes = model.getFlatAttributes()
		foreach attr in flatAttributes
			_ node.attributes.push(attr)

		var flatRelations = model.getFlatRelations()
		foreach r in flatRelations
			_ node.relations.push(r)

		foreach d in model.derived
			_ node.derived.push
				{
					@ name d.wzId
					@ tags d.tagName.split('|')

		foreach m in model.methods
			var methodNode 
				{
					@ name m.wzName
					@ emitKey m.emitKey
					@ isStatic m.isStatic
					@ isKnownMethod m.isKnownMethod
					@ params
						[
					@ statements
						[
					@ comments
						[

			foreach param in m.params
				_ methodNode.params.push(param.wzName)

			foreach stm in m.statements
				foreach item in normalizeJST(stm.wzName)
					_ methodNode.statements.push(item)
			
			foreach comment in m.comments
				_ methodNode.comments.push(comment.wzName)

			_ node.methods.push(methodNode)

		foreach restrict in model.restricts
			_ node.restricts.push(getRestrictFill(restrict))

		foreach comment in model.comments
			_ node.comments.push(comment.wzName)

		_ parent.elements.push(node)

	function getRestrictFill
		param model
		var restrictCloned
			{
				@ facets
					[
				@ comments
					[
		foreach facet in model.facets
			var facetCloned
				{
					@ type facet.wzElement
					@ value facet.wzName
					@ comments
						[
			foreach comment in facet.comments
				_ facetCloned.comments.push(comment.wzName)

			_ restrictCloned.facets.push(facetCloned)

		foreach comment in model.comments
			_ restrictCloned.comments.push(comment.wzName)

		return restrictCloned

	function normalizeJST
		param stm
		var json = JSON.parse(stm)
		var ret = []
		if verify.isArray(json)
			foreach item in json
				_ ret.push(normalizeJSTNode(item))
		else
			_ ret.push(normalizeJSTNode(json))
		return ret

	function normalizeJSTNode
		param jstnode
		var node
			{
				@ tag jstnode.n
				@ name jstnode.n
				@ value jstnode.v
				@ statements
					[
		
		if jsModelType.__tagElementMapping[jstnode.n]
			set node.name = jsModelType.__tagElementMapping[jstnode.n]
		
		if jstnode.children
			foreach item in jstnode.children
				_ node.statements.push(normalizeJSTNode(item))
		
		return node

