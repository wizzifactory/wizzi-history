$group
	
	e transformer
		# A model transformer .
		# The ittf node value is the transformer name {wizzischema}/{transformer}
		# to be found in {wizziPackage}/artifacts/{wizzischema}/{transformer}/trans/main.js

		a_tag( dumpFile, dump-file )
			# A filepath where the transformed model must be dumped for test.
			# When declared the transformed model is JSON.stringyfied and written
			# to the "dumpFile" filepath.

		r comment/s
	
	e artifact
		
		# Describe an artifact to be generated.
		# It is a child element of a "line" element.
		#
		# Can be one of:
		# . A Wizzi model instance, acting as a template, which WizziSchema targets a code language technology.
		# . A swig template.
		# . A code write generation that takes in input a context of one or more WizziModels.
		# . A final artifact to be copied to a destination folder without transformations.
		# . A reference to another WfJob, to be executed before the current WfJob where the artifact is declared.
		#
		# Context value objects for template transformations are declared in the "model" element, child of the "wfjob" root element
		# and may be referenced in the elements "modelRef", children of the "artifact" element.
		# 
		# The "src" or "destPath" attributes of an "artifact" element may contain tokens enclosed in graph parens.
		# When one of the "modelRef@" is a collection model, the artifact generation is repeated
		# for each item of the collection and the "src" or "destPath" attributes become the template of the destination path.
		# See the "pathTemplateValues" child elements of the "modelRef" for the values that will replace the tokens.
		#
		# Example
		#
		# artifact
		#     dest-path app/db/{table}Datalayer.js.ittf
		#     ...
		#     model-ref rdbms
		#         model-coll tables
		#             item-name table
		#             path-template-value
		#                 attribute tableName
		#                 token table
		#
		# model rdbms
		#     ...
		#
		# the Wizzi model instance after loading rdbms: {
		#     ....
		#     tables: [{
		#         tableName: 'user',
		#         ...
		#     },{
		#        ...
		#     }]
		# }
		#
		# will produce an artifact of path .../app/db/userDatalayer.js, and as many as the items in the tables collection.
		#
				
		a src
			# The path to the primary ittf source document of the artifact, in case of a wizzi model, or
			# to a native source in case of a POJO.
			# TODO explain why this:
			# Or it may contain the literal 'context' if the artifact generator require a context object only
			# and not a primary model. 
			# If relative, the base path is the cwdFolder of the parent line.
			# Can be a glob pattern.
			# If the artifact is a code write artifact the 'src' attribute must be omitted.
		
		a ignore
			# File returned by the src pattern that must be ignored.
			# Can be a glob pattern.

		a schema
			# When the artifact source is a schemed ittf document, is the schema that will load and 
			# validate the wizzi model instance.
			# May be null (absent) if the artifact is a final artifact or the artifact source is a POJO;
			# in this case the 'format' attribute must be declared.

		a format
			# When the artifact source is a POJO model is the native format of the source file.
			# Is alternative to the attribute 'schema'.
			restrict
				enum json
					# Native JSON file.
				enum xml
					# Native Xml file.
				enum js
					# Native javascript module file that may export object properties or 
					# a function named 'toModel'.

		a_flag( isCompile, is-compile )
			# Indicator that the mTree buildup script must be 'compiled' for javascript
			# and loaded with a 'require-from-string' function instead of 
			# being submitted to js-wizzi.

		a_flag( isWfJob, is-wf-job )
			# Indicator that the artifact source is a wizzi factory job, alias a wizzi model of schema 'wfjob'.
			# The job will be executed before any other artifact production of the current wfjob.
			# This could be autodected from the schema, but autodetection would forbid other uses or transformations
			# of a "wfjob" model, so the indicator is required.

		a_flag( isWfModelType, is-wf-model-type )
			# Indicator that the artifact source is a wizzi schema, alias a wizzi model of schema 'wfschema'
			# and that the generation of the artifacts for the wizzi model described by the wfschema is requested.
			# This could be autodected from the schema, but autodetection would forbid other uses or transformations
			# of a "wfschema" model, so the indicator is required.

		a generator
			# When the artifact source is a wizzi model instance or a POJO, acting as a context, is the name of 
			# the artifact generator that will transform the context into a software artifact.
			# When the artifact is a code write generation or a final artifact must be omitted.
		
		a_tag( destPath, dest-path )
			# The artifact source file path, 'src', is the default relative destination path
			# of the generated artifact. When set, this attribute overrides the default.
			# It can be an absolute or relative path.
			# If the artifact is a code write generation the 'destPath' attribute is required.
		
		a extension
			# The document path extension of the generated artifact. Optional. The default is the 'src' extension
			# without the ending '.ittf' string, if present.
		
		r transformer/s
			# When the artifact source is an Ittf document, the loaded WizziModel may need
			# one or more transformations before being passed to the artifact generator.
			# Transformers are chained and the output of a transformation
			# is the input for the next one.
		
		r modelRef/s
			# References to 'model/s' acting as context objects.
			# In case of a final artifact must not be declared.

		r comment/s

