module
	kind jsfile

	#
		# Pseudo schema json
	var util = require('util')
	var verify = require('wizzi-utils').verify
	+
    set module.exports
		function
			param mTree
			param ittfDocumentUri
			param request
			param callback

			if !(mTree.nodes && mTree.nodes.length == 1)
				return
					_ callback
						_ error
							@ 'Malformed mTree must have one root node. Found mTree.nodes: ' + mTree.nodes

			var root = mTree.nodes[0]
			if root.n !== "{" && root.n !== "["
				return
					_ callback
						_ error
							@ 'The root node of a json ittf document must be : "{" or "[". Found: ' + root.n + ' ' + root.v
							@ root

			if root.n === "{" 
				checked_call( json )
					_ toJsonObject
						@ root.children
			else
				checked_call( json )
					_ toJsonArray
						@ root.children
			
			return
				_ callback
					@ null
					@ json

	function toJsonObject
		param mTreeNodeChilds
		var ret = {}, value
		if mTreeNodeChilds
			foreach node in mTreeNodeChilds
				if node.n === '#'
					# skip comment
				elif node.n === '{' || node.n === '['
					if !node.v || node.v.length == 0
						return
							_ error
								@ 'A json object must contain property items. Found: ' + node.n + ' ' + node.v
								@ node
					else
						if node.n === '{'
							checked_call_return_set( value )
								_ toJsonObject(node.children)
						else
							checked_call_return_set( value )
								_ toJsonArray(node.children)
						set ret[node.v] = value
				elif node.v && node.v.length > 0
					checked_call_return( value )
						_ jsonValue(node.v)
					set ret[node.n] = value
					if node.children && node.children.length > 0
						return
							_ error
								@ 'A json property node cannot have children nodes. Found: ' + node.n + ' ' + node.v + ' children.length: ' + node.children.length
								@ node
				else
					if !node.children || node.children.length == 0
						return
							_ error
								@ 'A json property must have a value or a child object or array. Found: ' + node.n + ' ' + node.v
								@ node
					if node.children[0].n === '{'
						checked_call_return( value )
							_ toJsonObject(node.children[0].children)
						set ret[node.n] = value
					elif node.children[0].n === '['
						checked_call_return( value )
							_ toJsonArray(node.children[0].children)
						set ret[node.n] = value
					else
						return
							_ error
								@ 'A json property must have a value or a child object or array. Found: ' + node.n + ' ' + node.v + ' first child: ' + node.children[0].n + ' ' + node.children[0].v
								@ node
		return ret

	function toJsonArray
		param mTreeNodeChilds
		var ret = []
		if mTreeNodeChilds
			foreach node in mTreeNodeChilds
				if node.n === '#'
					# skip comment
				elif node.n === '{'
					checked_call_return( value )
						_ toJsonObject
							@ node.children
					_ ret.push
						@ value
				elif node.n === '['
					checked_call_return( value )
						_ toJsonArray
							@ node.children
					_ ret.push
						@ value
				elif node.v && node.v.length
					return
						_ error
							@ 'A json array item must be an object, an array or a value not a property. Found: ' + node.n + ' ' + node.v
							@ node
				else
					checked_call_return( value )
						_ jsonValue
							@ node.n
					_ ret.push
						@ value
		return ret

	function jsonValue
		param value
		var jsonString = "{ \"value\": " + check(value) + "}"
		var json = JSON.parse(jsonString)
		return json.value

	function check
		param value
		if (value.length > 1 && value[0] === "'" && value[value.length-1] === "'") ||
			\b (value.length > 1 && value[0] === '"' && value[value.length-1] === '"')
			return "\"" + verify.replaceAll(verify.replaceAll(unquote(value), "\\", "\\\\"), '"', '\\"') + "\""
		elif value.indexOf('"') > -1 && value.indexOf("'") > -1
			return "\"" + verify.replaceAll(verify.replaceAll(value, "\\", "\\\\"), '"', '\\"') + "\""
		else
			return value
	
	function unquote
		param str
		return str.substr(1, str.length -2)

	function error
		param message
		param node
		return
			{
				@ __is_error true
				@ source 'wizzi-core/lib/wizzi/models/json-model.g'
				@ node node.n + ' ' + node.v + ' pos: ' + node.r + ', ' + node.c
				@ message message