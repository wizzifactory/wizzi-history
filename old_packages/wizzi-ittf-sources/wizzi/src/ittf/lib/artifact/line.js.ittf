module
    kind jsfile
    
	var verify = require('wizzi-utils').verify
	var file = require('wizzi-utils').file
    
	class Line
        ctor
            param textOrPath
            param indentValue
            param options
            param isFilePath
            
			set this.containsFilePath = isFilePath
            set this.text = []
            if isFilePath
                _ this.text.push
                    { 
                        @ k 0
                        @ t textOrPath
            else 
                _ this.text.push(textOrPath)
            set this.indentValue = indentValue
            set this.options = options
    
		m add
            param text
            if this.containsFilePath
                _ this.text.push
                    { 
                        @ k 1
                        @ t text
            else 
                _ this.text.push(text)
    
		m addFile
            param filePath

            if this.containsFilePath
                _ this.text.push
                    { 
                        @ k 0
                        @ t filePath
            else 
                for var i = 0; i < text.length; i++
                    set text[i] =
                        { 
                            @ k 1
                            @ t text[i]
                _ this.text.push
                    { 
                        @ k 0
                        @ t filePath
    
		m toStream
            param stream
            param ctx
            if this.options.isDebugLine && !ctx.isDebug
                return 
			var seen_tokens = false
            if this.containsFilePath
                var 
                    decl i
                    decl t
                    decl len = this.text.length
                for i = 0; i < len; i++
                    var t = this.text[i]
                    if t.k === 1
                        _ stream.write
                            @ t.t
						set seen_tokens = true
                    else 
                        _ this._fileToStream
							@ seen_tokens
                            @ stream
                            @ t.t
                            @ ctx
                    if i == len - 1
                        _ stream.write
                            @ this.options.CRLF
            else 
                _ stream.write
					@ spaces(this.indentValue * this.options.indentSpaces) + this.text.join('') + this.options.CRLF
    
		m _fileToStream
            param seen_tokens
			param stream
            param filePath
            param ctx
            var lines = file.readLines(filePath)
            var indent = spaces(this.indentValue * this.options.indentSpaces)
            var 
                decl i
                decl t
                decl len = lines.length
				decl tabspaces = spaces(this.options.indentSpaces)
				decl line
            for i = 0; i < len; i++
				set line = verify.replaceAll(lines[i], '\t', tabspaces)
				if line.length > 0
					if i > 0 || seen_tokens == false
						_ stream.write(indent)
					_ stream.write
						@ line
                if i < len - 1
                    _ stream.write
                        @ this.options.CRLF
    
		m terminate
            set delete (this.options)
    
		m hydrate
            param item
            set this.text = item.text
            set this.indentValue = item.indentValue
    
	function spaces
        param num
        return 
            _ Array(num + 1)
                ._ join(" ")
    
	set module.exports = Line
