$group

	m processWfjobModel
		param wfjobModel
		#
			# There are four types of artifacts
			# .1 Wizzi model artifact
			# .2 Wizzi model collection artifact
			# .3 Code write artifact
			# .4 Wfjob artifact
			# Production structure
			# { wfjob
			#   [ productions
			#     { production
			#       string destFolder 
			#       [ lines
			#         { line
			#            string cwdFolder
			#            string destFolder 
			#            [ artifacts
			#              { artifact
			#                string src
			#                  The path to the primary source document of the artifact.
			#                  If relative, the base path is the "cwdFolder" of the parent line.
			#                  If the artifact is a code write artifact the "src" attribute must not be declared.
			#                string destPath
			#                  The artifact source file path "src" is the default relative destination path
			#                  of the generated artifact. When set, this attribute overrides the default.
			#                  It may be an absolute path.
			#                  If the artifact is a code write generation the "destPath" attribute must be declared.
					
		var artifactInfoConfig

		foreach wfjobProductionElement in wfjobModel.productions
			# log 'wizzi.wfjobLoader.processWfjobModel.production', wfjobProductionElement.wzName, util.inspect(wfjobProductionElement, { depth: 2 })
						
			foreach wfjobLineElement in wfjobProductionElement.lines
				# log 'wizzi.wfjobLoader.processWfjobModel.line', wfjobLineElement.wzName, util.inspect(wfjobLineElement, { depth: null })
							
				foreach wfjobArtifactElement in wfjobLineElement.artifacts
					# log 'wizzi.wfjobLoader.processWfjobModel.artifact', util.inspect(wfjobArtifactElement, { depth: 1 })
								
					if verify.isEmpty(wfjobArtifactElement.src)
						#
							# THIS IS A CODEWRITE artifact
							# this artifact is generated by a code write generation
						set artifactInfoConfig
							{
								@ name wfjobArtifactElement.wzName
								@ options 
									{
								@ contexts
									[
								@ gen
									{
										@ generator wfjobArtifactElement.generator
								@ dest
									{
										@ baseFolder wfjobModel.destBaseFolder
										@ folder wfjobLineElement.destFolder || wfjobProductionElement.destFolder
										@ path wfjobArtifactElement.destPath
										@ extension wfjobArtifactElement.extension
								@ toString
									function
										return 'Artifact info config: ' + this.name + '/' + this.gen.generator

								
						foreach modelRef in wfjobArtifactElement.modelRefs
							# log 'WizziJob.getArtifactInfoConfigs.modelRef', modelRef.wzName, modelRef.collName, modelRef.modelCollections.length, util.inspect(modelRef, { depth: 2 })
							var modelInfoConfig
								_ this._createContextModelInfoConfig
									@ wfjobModel
									@ modelRef
							_ artifactInfoConfig.contexts.push(modelInfoConfig)

					else
									
						# This is a WIZZIMODEL artifact or WFJOB artifact
						set artifactInfoConfig
							{
								@ name wfjobArtifactElement.wzName
								@ options
									{
								@ model
									{
										@ cwd wfjobLineElement.cwdFolder
										@ src wfjobArtifactElement.src
										@ ignore wfjobArtifactElement.ignore
										@ schema wfjobArtifactElement.schema
										@ format wfjobArtifactElement.format
										@ isCompile wfjobArtifactElement.isCompile
										@ contexts
											[
										@ transformers this._getTransformerList(wfjobArtifactElement.transformers)
								@ isWfJob wfjobArtifactElement.isWfJob
								@ isWfModelType wfjobArtifactElement.isWfModelType
								@ gen
									{
										@ generator wfjobArtifactElement.generator
								@ dest
									{
										@ baseFolder wfjobModel.destBaseFolder
										@ folder wfjobLineElement.destFolder || wfjobProductionElement.destFolder
										@ path wfjobArtifactElement.destPath
										@ extension wfjobArtifactElement.extension
								@ toString
									function
										return 'Artifact info config: ' + this.name + '/' + this.model.src + '/' + this.model.schema

								
						# log 'WizziJob.getArtifactInfoConfigs.art', wfjobArtifactElement.wzName, wfjobLineElement.srcFolder, wfjobArtifactElement.src, wfjobArtifactElement.schema

						foreach modelRef in wfjobArtifactElement.modelRefs
							# log 'WizziJob.getArtifactInfoConfigs.modelRef', modelRef.wzName, modelRef.collName, modelRef.modelCollections.length, util.inspect(modelRef, { depth: 2 })
							var modelInfoConfig
								_ this._createContextModelInfoConfig
									@ wfjobModel
									@ modelRef
							_ artifactInfoConfig.model.contexts.push(modelInfoConfig);
								
					# log 'WizziJob.artifactInfoConfig', util.inspect(artifactInfoConfig, { depth: 1 })
					if wfjobArtifactElement.isWfJob
						_ this.addPendingWfjobRequest(artifactInfoConfig)
					else
						_ this.addArtifactInfoConfig(artifactInfoConfig)
					
	#
		# params
		# { wfjobModelRefElement
		#   string wzName
		#     is the key for the wfjobModelElement
		#   string collName
		#   string collItemName
		#   [ collPathTemplateValues
		#     { collPathTemplateValue
	m _createContextModelInfoConfig
		param wfjobModel
		param wfjobModelRefElement
		# model existence has already been verified loading the wfjobModel
		var wfjobModelElement = wfjobModel.getModel(wfjobModelRefElement.wzName)
		var modelInfoConfig
			{
				@ exportName wfjobModelRefElement.exportName
				@ src 
					_ this._getModelSrc
						@ wfjobModel
						@ wfjobModelElement.src
						@ wfjobModelElement
				@ schema wfjobModelElement.schema
				@ format wfjobModelElement.format
				@ isCompile wfjobModelElement.isCompile
				@ contexts []
				@ transformers this._getTransformerList(wfjobModelRefElement.transformers)
				@ coll null
			
		if wfjobModelRefElement.collName
			# Single items of a collection contained in a WizziModelInstance may act as data contexts
			# of artifacts where each collection item generates a separate artifact.
			# The coll property specifies:
			# . name                the collection name
			# . itemName            the export name of the collection item when acting as a data context
			# . pathTemplateValues  the property names of the collection item that will be used to build 
			#                       the destination path of the artifact
			set modelInfoConfig.coll
				{
					@ name wfjobModelRefElement.collName
					@ itemName wfjobModelRefElement.collItemName
					@ pathTemplateValues wfjobModelRefElement.collPathTemplateValues
			
		# recurse creation of context modelInfos
		foreach modelRef in wfjobModelElement.modelRefs
			_ modelInfoConfig.contexts.push
				_ this._createContextModelInfoConfig
					@ wfjobModel
					@ modelRef

		return modelInfoConfig

	m _getArtifactModelSrc
		param cwd
		param src
		param node
		#
			# When 'src' is relative, the base path is the 'cwd' attribute
			# declared on the wfjobLine element.
		if verify.isAbsolutePath(src)
			return src
		else
			if verify.isString(cwd)
				return
					_ path.join
						@ cwd
						@ src
			else
				return 
					_ error
						@ 'PathError'
						@ "The src attribute of the artifact element: " + src + ' is a relative path. A cwd attribute is required on the line element.'
						@ node

	m _getModelSrc
		param wfjobModel
		param src
		param node
		#
			# When 'src' is relative, the base path is the 'modelsBaseFolder'
			# declared on the 'wfjob' element.
		if verify.isAbsolutePath(src)
			return src;
		else
			if verify.isString(wfjobModel.modelsBaseFolder)
				return
					_ path.join
						@ wfjobModel.modelsBaseFolder
						@ src
			else
				return 
					_ error
						@ 'PathError'
						@ "The src attribute of the model element: " + src + ' is a relative path. A models-base-folder attribute is required on the wfjob element.'
						@ node

	m _getTransformerList
		param transformers
		var ret = []
		foreach item in transformers
			_ ret.push
				{
					@ name item.wzName
					@ dumpFile item.dumpFile
		return ret

