module
	kind jsfile

	var file = require('../../fs/file')
	var liner = require('./liner')
	var nodifier = require('./nodifier')

	function AsisLoader
		param ittfDocumentUri
		param options
		param callback

		var reader = options.file || file
		var content 
			_ reader.read
				@ ittfDocumentUri
			
		var lines
			_ liner
				@ content
				{

		var count = 0
		var asisMTree
			{
				@ loadHistory
					{
						@ getNewNodeId
							function
								return ++count
				@ uri ittfDocumentUri

		set asisMTree.nodes
			_ nodifier
				@ lines
				@ asisMTree

		if asisMTree.nodes.__is_error
			set asisMTree.nodes
				[
					{
						@ name 'Cannot load this ittf document: ' + asisMTree.nodes.message
		else
			# log 'asis.loader.asisMTree.nodes.length', asisMTree.nodes.length, asisMTree.nodes.length != 1
			if asisMTree.nodes.length != 1
				var message = 'wizzi-utils.asIsLoader.error. The ittf source document must have one node. Found: ' + asisMTree.nodes.length +
					\b ' in document: ' + ittfDocumentUri
				if callback
					return
						_ callback
							{
								@ __is_error true
								@ message message
				else
					throw new Error(message)

		if asisMTree.nodes && asisMTree.nodes.length > 0
			if options.clean
				_ clean
					@ asisMTree.nodes[0]
			elif options.clean_remove
				set asisMTree
					_ clean
						@ asisMTree.nodes[0]

		if callback
			_ callback
				@ null
				@ asisMTree
		else
			return asisMTree

	function clean
		param node
		delete node.parent
		delete node.model
		delete node.hasMacro
		delete node.id
		if node.children
			foreach item in node.children
				_ clean(item)
		return node

	set AsisLoader.createFromString
		function
			param text
			param options
			set options = options || {}
			set options.file
				{
					@ read
						function
							return text
			return
				_ AsisLoader
					@ 'dummy'
					@ options

	set module.exports = AsisLoader
