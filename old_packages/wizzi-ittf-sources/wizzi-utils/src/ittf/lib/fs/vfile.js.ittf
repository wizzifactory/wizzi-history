module wizzi-utils.fs.vfile
	kind jsfile
	#
		# virtual file manager
		# WORK IN PROGRESS

    var path = require('path')
    var iconv = require('iconv-lite')
	var async = require('async')
	var _ = require('lodash')
    var glob = require('../glob')
    var verify = require('../verify')
	var errors = require('../errors')
	var uriParser = require('./uriParser')
	+
    var PATH_SEPARATOR_RE = /[\/\\]/g
	var DEFAULT_DECODING = 'utf8'
    var PRESERVE_BOM = false
	var win32 = process.platform === 'win32'
	+
	var GET_FILES_DEFAULTS
        { 
            @ deep true
            @ extension null
            @ documentContent false
	var GET_FOLDERS_DEFAULTS
        { 
            @ deep true
            @ tFoldersOnly false
            @ documentNames false
	+
	set module.exports
		function
			param fsimpl
			if typeof(fsimpl) === 'undefined'
				set fsimpl = default_fs()
			return
				new VFile
					@ fsimpl

	class VFile
		
		ctor
			param fsimpl
			set this.fsimpl = fsimpl
		
		m close
			if this.fsimpl.close
				_ this.fsimpl.close
		m stat
			param path_string
			param callback
			return this.fsimpl.stat(path_string, callback)
		
		m statSync
			param path_string
			return this.fsimpl.statSync(path_string)

		m lstat
			param path_string
			param callback
			# lstat() is identical to stat(), 
			# except that if path is a symbolic link, 
			# then the link itself is stat-ed, 
			# not the file that it refers to.
			return this.fsimpl.lstat(path_string, callback)
		
		m lstatSync
			param path_string
			# lstat() is identical to stat(), 
			# except that if path is a symbolic link, 
			# then the link itself is stat-ed, 
			# not the file that it refers to.
			return this.fsimpl.lstatSync(path_string)

		m readdir
			param path_string
			param options
			param callback
			return this.fsimpl.readdir(path_string, options, callback)

		m readdirSync
			param path_string
			param options
			return this.fsimpl.readdirSync(path_string, options)

		vfile/m( read, readFileSync, options )
			if !options
				set options
					{
						@ encoding DEFAULT_DECODING
			$append async
				var parsedUri = uriParser(path_string)
				# read buffer (no options)
				_ this.fsimpl.readFile
					@ path_string
					f_cb( contents )
						if parsedUri.storeKind === 'filesystem'
							if options.encoding !== null
								set contents = iconv.decode(contents, (options.encoding || DEFAULT_DECODING))
								if !PRESERVE_BOM && contents.charCodeAt(0) === 0xFEFF
									set contents = contents.substring(1)
						return
							_ callback
								@ null
								@ contents
			$append sync
				# read buffer (no options)
				var contents = this.fsimpl.readFileSync(path_string)
				if options.encoding !== null
					set contents = iconv.decode(contents, (options.encoding || DEFAULT_DECODING))
					if !PRESERVE_BOM && contents.charCodeAt(0) === 0xFEFF
						set contents = contents.substring(1)
				return contents

		vfile/m( write, writeFileSync, contents, options )
			var parsedUri = uriParser(path_string)
			if !options
				set options = {}
			if parsedUri.storeKind === 'filesystem'
				if !Buffer.isBuffer(contents)
					set contents = iconv.encode(contents, (options.encoding || DEFAULT_DECODING))
			
			$append async
				var that = this
				_ this.mkpath
					@ path_string
					f_cb( notUsed )
						return
							_ that.fsimpl.writeFile
								@ path_string
								@ contents
								@ callback
			$append sync
				_ this.mkpath(path_string)
				try
					_ this.fsimpl.writeFileSync(path_string, contents)
				catch ex
					set ex.message = 'Writing file ' + path_string + '.\n' + ex.message
					throw ex

		m openWrite
            param path_string
			param callback
			var stream
			var that = this
			_ this.isDirectoryAsync
				@ path_string
				f_cb( isDirectory )
					if isDirectory
						return
							_ callback
								_ error
									@ 'VFileError'
									@ 'openWrite'
									@ 'Write path already exists and is a directory path : ' + path_string
					_ that.isFileAsync
						@ path_string
						f_cb( isFile )
							if isFile
								_ that.fsimpl.unlink
									@ path_string
									f_cb( notUsed )
										checked_call( stream )
											_ that.fsimpl.createWriteStream(path_string)
										_ callback(null, stream)
							else 
								_ that.mkpath
									@ path_string
									f_cb( notUsed )
										checked_call( stream )
											_ that.fsimpl.createWriteStream(path_string)
										_ callback(null, stream)

		m mkpath
            param path_string
			param callback
            var dir = path.dirname(path_string)
			return
				_ this.mkdir
					@ dir
					@ callback

		vfile/m( mkdir, mkdirSync )

			$append async
				var curpath, subpath, parts, len
				var parsedUri = uriParser(path_string)
				if parsedUri.protocol === 'db'
					set curpath = parsedUri.protocol + '://' + parsedUri.userId
					if parsedUri.projectId
						set curpath += '/' + parsedUri.projectId
					set parts = parsedUri.path.split(PATH_SEPARATOR_RE)
				else
					set curpath = ''
					set parts = path_string.split(PATH_SEPARATOR_RE)
				set len = parts.length
				var that = this
				function repeater
					param index
					if index === len
						return callback(null)
					var part = parts[index]
					if parsedUri.protocol === 'db'
						set curpath += '/' + part
						set subpath = curpath
					else
						set curpath += part + '/'
						set subpath = path.resolve(curpath)
					_ that.exists
						@ subpath
						f_cb( exists )
							if !exists
								_ that.fsimpl.mkdir
									@ subpath
									f_cb( notUsed )
										return 
											_ process.nextTick
												function 
													_ repeater(index + 1)
							else
								return 
									_ process.nextTick
										function 
											_ repeater(index + 1)

				_ repeater(0)

			$append sync
				var that = this
				_ path_string.split(PATH_SEPARATOR_RE)
					._ reduce
						function 
							param parts
							param part
							set parts += part + '/'
							var subpath = path.resolve(parts)
							if !that.exists(subpath)
								try 
									_ that.fsimpl.mkdirSync(subpath)
								catch ex
									throw 
										new errors.FileError
											@ 'Unable to create directory "' + subpath + '" (Error code: ' + ex.code + ').'
											@ ex
							return parts
						@ ''

		vfile/m( exists, statSync )

			$append async
				_ this.fsimpl.stat
					@ path_string
					f_cb_no_err( stats )
						if err
							if err.code === 'ENOENT'
								return
									_ callback
										@ null
										@ false
							else
								return
									_ callback(err)
						return
							_ callback
								@ null
								@ stats.isDirectory() || stats.isFile()

			$append sync
				try
					var stats = this.fsimpl.statSync(path_string)
					return stats.isDirectory() || stats.isFile()
				catch ex
					if ex.code === 'ENOENT'
						return false
					else
						throw ex
				return false

		vfile/m( isDirectory, statSync )

			$append async
				_ this.fsimpl.stat
					@ path_string
					f_cb_no_err( stats )
						if err
							if err.code === 'ENOENT'
								return
									_ callback
										@ null
										@ false
							else
								return
									_ callback(err)
						else
							r_cb( stats.isDirectory() )

			$append sync
				try
					var stat = this.fsimpl.statSync(path_string)
					return stat.isDirectory()
				catch ex
					if ex.code === 'ENOENT'
						return false
					else
						throw ex
				return false
    
		vfile/m( isFile, statSync )

			$append async
				_ this.fsimpl.stat
					@ path_string
					function
						param err
						param stats
						if err
							if err.code === 'ENOENT'
								return
									_ callback
										@ null
										@ false
							else
								return
									_ callback(err)
						return
							_ callback
								@ null
								@ stats.isFile()

			$append sync
				try
					var stat = this.fsimpl.statSync(path_string)
					return stat.isFile()
				catch ex
					if ex.code === 'ENOENT'
						return false
					else
						throw ex
				return false
		
		$include vfile/json
		$include vfile/getFiles
		$include vfile/getFolders
		$include vfile/glob

    function unixifyPath
        param path_string
        if win32
            return path_string.replace(/\\/g, '/')
        else 
            return path_string
	
	$include vfile/json_f
	$include vfile/default_fs

	wzerror( wizzi-utils.fs.vfile )