module 
    kind jsfile
    
	var MACHINE_ID = parseInt(Math.random() * 0xffffff, 10)
    
	var checkForHexRegExp
        new RegExp('^[0-9a-fA-F]{24}$')
    
	try 
        if Buffer && Buffer.from
            var hasBufferType = true
    catch err
        set hasBufferType = false
    
	var ObjectID
        function ObjectID
            param id
            if id instanceof ObjectID
                return id
            if ! (this instanceof ObjectID)
                return 
                    new ObjectID(id)
            set this._bsontype = 'ObjectID'
            if (id == null) || (typeof (id) === 'number')
                set this.id = this.generate(id)
                if ObjectID.cacheHexString
                    set this.__id = this.toString('hex')
                return 
            var valid = ObjectID.isValid(id)
            if (! (valid) && (id != null))
                throw 
                    new Error('Argument passed in must be a single String of 12 bytes or a string of 24 hex characters')
            elif valid && (typeof (id) === 'string') && id.length === 24 && hasBufferType
                return 
                    new ObjectID
                        new Buffer(id, 'hex')
            elif valid && (typeof (id) === 'string') && id.length === 24
                return ObjectID.createFromHexString(id)
            elif id != null && id.length === 12
                set this.id = id
            elif id != null && id.toHexString
                return id
            else 
                throw 
                    new Error('Argument passed in must be a single String of 12 bytes or a string of 24 hex characters')
            if ObjectID.cacheHexString
                set this.__id = this.toString('hex')
    var hexTable
        [ 
    for var i = 0; i < 256; i++
        set hexTable[i] = ((i <= 15 ? '0' : '') + i.toString(16))
    set ObjectID.prototype.toHexString =
        function 
            if ObjectID.cacheHexString && this.__id
                return this.__id
            var hexString = ''
            if (! (this.id) || ! (this.id.length))
                throw 
                    new Error(((('invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is [' + JSON.stringify(this.id))) + ']'))
            if this.id instanceof _Buffer
                set hexString = convertToHex(this.id)
                if ObjectID.cacheHexString
                    set this.__id = hexString
                return hexString
            for var i = 0; i < this.id.length; i++
                set hexString += hexTable[this.id.charCodeAt(i)]
            if ObjectID.cacheHexString
                set this.__id = hexString
            return hexString
    
	set ObjectID.prototype.get_inc =
        function 
            return ObjectID.index = (ObjectID.index + 1) % 0xffffff
    
	set ObjectID.prototype.getInc =
        function 
            return this.get_inc()
    
	set ObjectID.prototype.generate =
        function 
            param time
            if 'number' !== typeof (time)
                set time = ~ (~ (Date.now() / 1000))
            var pid = (((typeof (process) === 'undefined') || (process.pid === 1)) ? Math.floor(Math.random() * 100000) : process.pid) % 0xffff
            var inc = this.get_inc()
            var buffer
                new Buffer(12)
            set buffer[3] = time & 0xff
            set buffer[2] = (((time >> 8)) & 0xff)
            set buffer[1] = (((time >> 16)) & 0xff)
            set buffer[0] = (((time >> 24)) & 0xff)
            set buffer[6] = MACHINE_ID & 0xff
            set buffer[5] = (((MACHINE_ID >> 8)) & 0xff)
            set buffer[4] = (((MACHINE_ID >> 16)) & 0xff)
            set buffer[8] = pid & 0xff
            set buffer[7] = (((pid >> 8)) & 0xff)
            set buffer[11] = inc & 0xff
            set buffer[10] = (((inc >> 8)) & 0xff)
            set buffer[9] = (((inc >> 16)) & 0xff)
            return buffer
    
	set ObjectID.prototype.toString =
        function 
            param format
            if this.id && this.id.copy
                return this.id.toString(typeof (format) === 'string' ? format : 'hex')
            return this.toHexString()
    
	set ObjectID.prototype.inspect = ObjectID.prototype.toString
    
	set ObjectID.prototype.toJSON =
        function 
            return this.toHexString()
    
	set ObjectID.prototype.equals =
        function equals
            param otherId
            if otherId instanceof ObjectID
                return this.toString() === otherId.toString()
            elif typeof (otherId) === 'string' && ObjectID.isValid(otherId) && otherId.length === 12 && (this.id instanceof _Buffer)
                return otherId === this.id.toString('binary')
            elif typeof (otherId) === 'string' && ObjectID.isValid(otherId) && otherId.length === 24
                return otherId.toLowerCase() === this.toHexString()
            elif typeof (otherId) === 'string' && ObjectID.isValid(otherId) && otherId.length === 12
                return otherId === this.id
            elif otherId != null && (otherId instanceof ObjectID || otherId.toHexString)
                return otherId.toHexString() === this.toHexString()
            else 
                return false
    set ObjectID.prototype.getTimestamp =
        function 
            var timestamp
                new Date()
            var time = (((this.id[3] | (this.id[2] << 8)) | (this.id[1] << 16))) | (this.id[0] << 24)
            _ timestamp.setTime(Math.floor(time) * 1000)
            return timestamp
    
	set ObjectID.index = ~ (~ (Math.random() * 0xffffff))
    
	set ObjectID.createPk =
        function createPk
            return 
                new ObjectID()
    
	set ObjectID.createFromTime =
        function createFromTime
            param time
            var buffer
                new Buffer
                    [ 
                        @ 0
                        @ 0
                        @ 0
                        @ 0
                        @ 0
                        @ 0
                        @ 0
                        @ 0
                        @ 0
                        @ 0
                        @ 0
                        @ 0
            set buffer[3] = time & 0xff
            set buffer[2] = (((time >> 8)) & 0xff)
            set buffer[1] = (((time >> 16)) & 0xff)
            set buffer[0] = (((time >> 24)) & 0xff)
            return 
                new ObjectID(buffer)
    
	var decodeLookup
        [ 
    
	set i = 0
    while i < 10
        set decodeLookup[(0x30 + i)] = i++
    while i < 16
        set decodeLookup[(((0x41 - 10)) + i)] = decodeLookup[(((0x61 - 10)) + i)] = i++
    
	var _Buffer = Buffer
    
	var convertToHex
        function 
            param bytes
            return bytes.toString('hex')
    
	set ObjectID.createFromHexString =
        function createFromHexString
            param string
            if typeof(string) === 'undefined' || (string != null && string.length !== 24)
                throw 
                    new Error('Argument passed in must be a single String of 12 bytes or a string of 24 hex characters')
            if hasBufferType
                return 
                    new ObjectID
                        new Buffer(string, 'hex')
            var array
                new _Buffer(12)
            var n = 0
            var i = 0
            while i < 24
                set array[n++] = ((decodeLookup[string.charCodeAt(i++)] << 4) | decodeLookup[string.charCodeAt(i++)])
            return 
                new ObjectID(array)
    
	set ObjectID.isValid =
        function isValid
            param id
            if id == null
                return false
            if typeof (id) === 'number'
                return true
            if typeof (id) === 'string'
                return ((id.length === 12) || (((id.length === 24) && checkForHexRegExp.test(id))))
            if id instanceof ObjectID
                return true
            if id instanceof _Buffer
                return true
            if id.toHexString
                return ((id.id.length === 12) || (((id.id.length === 24) && checkForHexRegExp.test(id.id))))
            return false
    
	_ Object.defineProperty
        @ ObjectID.prototype
        @ 'generationTime'
        { 
            @ enumerable true
            @ get
                function 
                    return (((((this.id[3] | (this.id[2] << 8))) | (this.id[1] << 16))) | (this.id[0] << 24))
            @ set
                function 
                    param value
                    set this.id[3] = value & 0xff
                    set this.id[2] = (((value >> 8)) & 0xff)
                    set this.id[1] = (((value >> 16)) & 0xff)
                    set this.id[0] = (((value >> 24)) & 0xff)
    set module.exports = ObjectID
    set module.exports.ObjectID = ObjectID
    set module.exports.ObjectId = ObjectID
