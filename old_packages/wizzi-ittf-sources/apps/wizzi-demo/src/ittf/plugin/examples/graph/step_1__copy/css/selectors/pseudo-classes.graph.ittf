$group

	cat pseudo-class
		# Pseudo-classes allow the selection of elements based on state information that is not contained in the document tree.
		# Example: a:visited will match all <a> elements that have been visited by the user.
		cat css-selector
		tag :

	e :active
		# The :active CSS pseudo-class represents an element (such as a button) that is being activated by the user. 
		# When using a mouse, "activation" typically starts when the user presses down the primary mouse button 
		# and ends when it is released. 
		# The :active pseudo-class is commonly used on <a> and <button> elements, but may be used on other elements, too.
		# WARNING respect the LVHA-order: :link — :visited — :hover — :active.
		cat pseudo-class
	
	e :any
		is experimental
		cat pseudo-class

	e :any-link
		is experimental
		cat pseudo-class
	
	e :checked
		# The :checked CSS pseudo-class selector represents any radio (<input type="radio">), 
		# checkbox (<input type="checkbox">), or option (<option> in a <select>) element 
		# that is checked or toggled to an on state.
		cat pseudo-class
	
	e :default
		# The :default CSS pseudo-class represents any form element that is the default among a group of related elements.
		# This selector may be used on the <button>, <input type="checkbox">, <input type="radio">, and <option> elements.
		# Grouped elements that permit multiple selections may also have multiple defaults, i.e., 
		# they may have multiple items initially selected. 
		# In this case, all defaults are represented using the :default pseudo-class. 
		# For example, you can style the default checkboxes among a group of checkboxes.
		cat pseudo-class 
	
	e :dir()
		is experimental
		is function
		cat pseudo-class 
	
	e :disabled
		# The :disabled CSS pseudo-class represents any disabled element. An element is disabled if it can't be activated 
		# (selected, clicked on, typed into, etc.) or accept focus. 
		# The element also has an enabled state, in which it can be activated or accept focus.
		cat pseudo-class 
	
	e :empty
		# The :empty CSS pseudo-class represents any element that has no children. 
		# Children can be either element nodes or text (including whitespace). 
		# Comments or processing instructions do not affect whether an element is considered empty or not.
		cat pseudo-class 
	
	e :enabled
		# The :enabled CSS pseudo-class represents any enabled element. An element is enabled if it 
		# can be activated (selected, clicked on, typed into, etc.) or accept focus. 
		# The element also has a disabled state, in which it can't be activated or accept focus.
		cat pseudo-class 
	
	e :first
		# The :first CSS pseudo-class, used with the  @page at-rule, represents the first page of a printed document.
		cat pseudo-class 

	e :first-child
		# The :first-child CSS pseudo-class represents the first element among a group of sibling elements.
		cat pseudo-class 
	
	e :first-of-type
		# The :first-of-type CSS pseudo-class represents the first element of its type among a group of sibling elements.
		cat pseudo-class 
	
	e :fullscreen
		is experimental
		cat pseudo-class 
	
	e :focus
		# The :focus CSS pseudo-class represents an element (such as a form input) that has received focus. 
		# It is generally triggered when the user clicks or taps on an element or selects it with the keyboard's "tab" key.
		cat pseudo-class 
	
	e :focus-within
		# The :focus-within CSS pseudo-class represents an element that has received focus or contains 
		# an element that has received focus. 
		# In other words, it represents an element that is itself matched by the :focus pseudo-class or 
		# has a descendant that is matched by :focus. (This includes descendants in shadow trees.)
		cat pseudo-class 

	e :hover
		# The :hover CSS pseudo-class matches when the user interacts with an element with a pointing device, 
		# but does not necessarily activate it. It is generally triggered when the user hovers over 
		# an element with the cursor (mouse pointer).
		# WARNING respect the LVHA-order: :link — :visited — :hover — :active.
		cat pseudo-class 
	
	e :indeterminate
		# The :indeterminate CSS pseudo-class represents any form element whose state is indeterminate.
		cat pseudo-class 
	
	e :in-range
		# The :in-range CSS pseudo-class represents an <input> element whose current value is within the range limits specified by the min and max attributes.
		cat pseudo-class 
	
	e :invalid
		# The :invalid CSS pseudo-class represents any <input> or other <form> element whose contents fail to validate.
		cat pseudo-class 
	
	e :lang()
		# The :lang() CSS pseudo-class matches elements based on the language they are determined to be in.
		is[ arg
			: <language-code> 
		is function
		cat pseudo-class 
	
	e :last-child
		# The :last-child CSS pseudo-class represents the last element among a group of sibling elements.
		
		cat pseudo-class 
	
	e :last-of-type
		# The :last-of-type CSS pseudo-class represents the last element of its type among a group of sibling elements.
		cat pseudo-class 
	
	e :left
		# The :left CSS pseudo-class, used with the  @page at-rule, represents all left-hand pages of a printed document.
		cat pseudo-class 
	
	e :link
		# The :link CSS pseudo-class represents an element that has not yet been visited. 
		# It matches every unvisited <a>, <area>, or <link> element that has an href attribute.
		# WARNING respect the LVHA-order: :link — :visited — :hover — :active.
		cat pseudo-class 
	
	e :not()
		# The :not() CSS pseudo-class represents elements that do not match a list of selectors. 
		# Since it prevents specific items from being selected, it is known as the negation pseudo-class.
		is[ arg
			[#
				: <selector>
		# Synthax: The :not() pseudo-class requires a comma-separated list of one or more selectors as its argument. 
		#          The list must not contain another negation selector or a pseudo-element.
		is function
		cat pseudo-class 
	
	e :nth-child()
		# The :nth-child() CSS pseudo-class matches one or more elements based on their position among a group of siblings.
		is[ arg
			|
				[
					: <integer>
					: n
					[?
						: +
						: <integer>
				: even
				: odd

		: :nth-child( <nth> ) 
		#   where <nth> = <An+B> | even | odd
		#   A,B = integers
		is function
		cat pseudo-class 
	
	e :nth-last-child()
		# The :nth-last-child() CSS pseudo-class matches one or more elements based on their position 
		# among a group of siblings, counting from the end.
		# Synthax: :nth-last-child( <nth> )
		is function
		cat pseudo-class 
	
	e :nth-last-of-type()
		# The :nth-last-of-type() CSS pseudo-class matches one or more elements of a given type, 
		# based on their position among a group of siblings, counting from the end.
		# Synthax: :nth-last-of-type( <nth> )
		is function
		cat pseudo-class 
	
	e :nth-of-type()
		# The :nth-of-type() CSS pseudo-class matches one or more elements of a given type, based on their position among a group of siblings.
		# Synthax: :nth-of-type( <nth> )
		is function
		cat pseudo-class 
	
	e :only-child
		# The :only-child CSS pseudo-class represents an element without any siblings. 
		# This is the same as :first-child:last-child or :nth-child(1):nth-last-child(1), but with a lower specificity.
		cat pseudo-class 
	
	e :only-of-type
		# The :only-of-type CSS pseudo-class represents an element that has no siblings of the same type.
		cat pseudo-class 
	
	e :optional
		# The :optional CSS pseudo-class represents any <input>, <select>, or <textarea> element that does not have the required attribute set on it.
		cat pseudo-class 
	
	e :out-of-range
		# The :out-of-range CSS pseudo-class represents an <input> element whose current value is outside the range limits 
		# specified by the min and max attributes.
		cat pseudo-class 
	
	e :placeholder-shown
		is experimental
		cat pseudo-class 

	e :read-only
		# The :read-only CSS pseudo-class represents an element (such as a locked text input) that is not editable by the user.
		cat pseudo-class 
	
	e :read-write
		# The :read-write CSS pseudo-class represents an element (such as a text input) that is editable by the user.
		cat pseudo-class 
	
	e :required
		# The :required CSS pseudo-class represents any <input>, <select>, or <textarea> element that has 
		# the required attribute set on it.
		cat pseudo-class 
	
	e :right
		# The :right CSS pseudo-class, used with the  @page at-rule, represents all right-hand pages of a printed document.
		cat pseudo-class 
	
	e :root
		# The :root CSS pseudo-class matches the root element of a tree representing the document. 
		# In HTML, :root represents the <html> element and is identical to the selector html, 
		# except that its specificity is higher.
		cat pseudo-class 
	
	e :scope
		is experimental
		cat pseudo-class 
	
	e :target
		# The :target CSS pseudo-class represents a unique element (the target element) with an id matching the URL's fragment.
		cat pseudo-class 
	
	e :valid
		# The :valid CSS pseudo-class represents any <input> or other <form> element whose contents validate successfully. 
		# This allows to easily make valid fields adopt an appearance that helps the user confirm that their data is formatted properly.
		cat pseudo-class 
	
	e :visited
		# The :visited CSS pseudo-class represents links that the user has already visited. 
		# For privacy reasons, the styles that can be modified using this selector are very limited.
		# WARNING respect the LVHA-order: :link — :visited — :hover — :active.
		cat pseudo-class

