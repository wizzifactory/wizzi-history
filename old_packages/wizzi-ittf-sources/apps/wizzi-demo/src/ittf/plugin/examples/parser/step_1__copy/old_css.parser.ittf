(function cssExample() {
  // Based on the specs in:
  // https://www.w3.org/TR/CSS21/grammar.html

  // A little mini DSL for easier lexer definition using xRegExp.
  const fragments = {};

  function FRAGMENT(name, def) {
    fragments[name] = XRegExp.build(def, fragments)
  }

  function MAKE_PATTERN(def, flags) {
    return XRegExp.build(def, fragments, flags)
  }

  // ----------------- Lexer -----------------
  const Lexer = chevrotain.Lexer;

  // A Little wrapper to save us the trouble of manually building the
  // array of cssTokens
  const cssTokens = [];
  const createToken = () => {
    const newToken = chevrotain.createToken.apply(null, arguments);
    cssTokens.push(newToken);
    return newToken;
  };

  // The order of fragments definitions is important
  FRAGMENT('nl', '\\n|\\r|\\f');
  FRAGMENT('h', '[0-9a-f]');
  FRAGMENT('nonascii', '[\\u0240-\\uffff]');
  FRAGMENT('unicode', '\\{{h}}{1,6}');
  FRAGMENT('escape', '{{unicode}}|\\\\[^\\r\\n\\f0-9a-f]');
  FRAGMENT('nmstart', '[_a-zA-Z]|{{nonascii}}|{{escape}}');
  FRAGMENT('nmchar', '[_a-zA-Z0-9-]|{{nonascii}}|{{escape}}');
  FRAGMENT('string1', '\\"([^\\n\\r\\f\\"]|\\{{nl}}|{{escape}})*\\"');
  FRAGMENT('string2', "\\'([^\\n\\r\\f\\']|\\{{nl}}|{{escape}})*\\'");
  FRAGMENT('comment', '\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\/');
  FRAGMENT("name", "({{nmchar}})+");
  FRAGMENT("url", "([!#\\$%&*-~]|{{nonascii}}|{{escape}})*");
  FRAGMENT("spaces", "[ \\t\\r\\n\\f]+");
  FRAGMENT("ident", "-?{{nmstart}}{{nmchar}}*");
  FRAGMENT("num", "[0-9]+|[0-9]*\\.[0-9]+");

  const Whitespace = createToken({
    name: 'Whitespace',
    pattern: MAKE_PATTERN('{{spaces}}'),
    group: Lexer.SKIPPED,
    line_breaks: true
  });
  const Comment = createToken({
    name: 'Comment',
    pattern: /\/\*[^*]*\*+([^/*][^*]*\*+)*\//,
    // the W3C specs are are defined in a whitespace sensitive manner.
    // but this grammar is not
    // TODO: there is actually one place in the CSS grammar where whitespace is meaningful.
    group: Lexer.SKIPPED,
    line_breaks: true
  });

  // This group has to be defined BEFORE Ident as their prefix is a valid Ident
  const Uri = createToken({name: 'Uri', pattern: Lexer.NA});
  const UriString = createToken({
    name: 'UriString',
    pattern: MAKE_PATTERN('url\\((:?{{spaces}})?({{string1}}|{{string2}})(:?{{spaces}})?\\)')
  });
  const UriUrl = createToken({
    name: 'UriUrl',
    pattern: MAKE_PATTERN('url\\((:?{{spaces}})?{{url}}(:?{{spaces}})?\\)')
  });
  const Func = createToken({name: 'Func', pattern: MAKE_PATTERN('{{ident}}\\(')});


  const Cdo = createToken({name: 'Cdo', pattern: /<!--/});
  // Cdc must be before Minus
  const Cdc = createToken({name: 'Cdc', pattern: /-->/});
  const Includes = createToken({name: 'Includes', pattern: /~=/});
  const Dasmatch = createToken({name: 'Dasmatch', pattern: /\|=/});
  const Exclamation = createToken({name: 'Exclamation', pattern: /!/});
  const Dot = createToken({name: 'Dot', pattern: /\./});
  const LCurly = createToken({name: 'LCurly', pattern: /{/});
  const RCurly = createToken({name: 'RCurly', pattern: /}/});
  const LSquare = createToken({name: 'LSquare', pattern: /\[/});
  const RSquare = createToken({name: 'RSquare', pattern: /]/});
  const LParen = createToken({name: 'LParen', pattern: /\(/});
  const RParen = createToken({name: 'RParen', pattern: /\)/});
  const Comma = createToken({name: 'Comma', pattern: /,/});
  const Colon = createToken({name: 'Colon', pattern: /:/});
  const SemiColon = createToken({name: 'SemiColon', pattern: /;/});
  const Equals = createToken({name: 'Equals', pattern: /=/});
  const Star = createToken({name: 'Star', pattern: /\*/});
  const Plus = createToken({name: 'Plus', pattern: /\+/});
  const GreaterThan = createToken({name: 'GreaterThan', pattern: />/});
  const Slash = createToken({name: 'Slash', pattern: /\//});

  const StringLiteral = createToken({name: 'StringLiteral', pattern: MAKE_PATTERN('{{string1}}|{{string2}}')});
  const Hash = createToken({name: 'Hash', pattern: MAKE_PATTERN('#{{name}}')});

  // note that the spec defines import as : @{I}{M}{P}{O}{R}{T}
  // Where every letter is defined in this pattern:
  // i|\\0{0,4}(49|69)(\r\n|[ \t\r\n\f])?|\\i
  // Lets count the number of ways to write the letter 'i'
  // i // 2 options due to case insensitivity
  // |
  // \\0{0,4} // 5 options for number of spaces
  // (49|69) // 2 options for asci value
  // (\r\n|[ \t\r\n\f])? // 7 options, so the total for this alternative is 5 * 2 * 7 = 70 (!!!)
  // |
  // \\i // 1 option.
  // so there are a total of 73 options to write the letter 'i'
  // This gives us 73^6 options to write the word "import" which is a number with 12 digits...
  // This implementation does not bother with this crap :) and instead settles for
  // "just" 64 option to write "impPorT" (case due to case insensitivity)
  const ImportSym = createToken({name: 'ImportSym', pattern: /@import/i});
  const PageSym = createToken({name: 'PageSym', pattern: /@page/i});
  const MediaSym = createToken({name: 'MediaSym', pattern: /@media/i});
  const CharsetSym = createToken({name: 'CharsetSym', pattern: /@charset/i});
  const ImportantSym = createToken({name: 'ImportantSym', pattern: /important/i});


  const Ems = createToken({name: 'Ems', pattern: MAKE_PATTERN('{{num}}em', 'i')});
  const Exs = createToken({name: 'Exs', pattern: MAKE_PATTERN('{{num}}ex', 'i')});

  const Length = createToken({name: 'Length', pattern: Lexer.NA});
  const Px = createToken({name: 'Px', pattern: MAKE_PATTERN('{{num}}px', 'i'), parent: Length});
  const Cm = createToken({name: 'Cm', pattern: MAKE_PATTERN('{{num}}cm', 'i'), parent: Length});
  const Mm = createToken({name: 'Mm', pattern: MAKE_PATTERN('{{num}}mm', 'i'), parent: Length});
  const In = createToken({name: 'In', pattern: MAKE_PATTERN('{{num}}in', 'i'), parent: Length});
  const Pt = createToken({name: 'Pt', pattern: MAKE_PATTERN('{{num}}pt', 'i'), parent: Length});
  const Pc = createToken({name: 'Pc', pattern: MAKE_PATTERN('{{num}}pc', 'i'), parent: Length});

  const Angle = createToken({name: 'Angle', pattern: Lexer.NA});
  const Deg = createToken({name: 'Deg', pattern: MAKE_PATTERN('{{num}}deg', 'i'), parent: Angle});
  const Rad = createToken({name: 'Rad', pattern: MAKE_PATTERN('{{num}}rad', 'i'), parent: Angle});
  const Grad = createToken({name: 'Grad', pattern: MAKE_PATTERN('{{num}}grad', 'i'), parent: Angle});

  const Time = createToken({name: 'Time', pattern: Lexer.NA});
  const Ms = createToken({name: 'Ms', pattern: MAKE_PATTERN('{{num}}ms', 'i'), parent: Time});
  const Sec = createToken({name: 'Sec', pattern: MAKE_PATTERN('{{num}}sec', 'i'), parent: Time});

  const Freq = createToken({name: 'Freq', pattern: Lexer.NA});
  const Hz = createToken({name: 'Hz', pattern: MAKE_PATTERN('{{num}}hz', 'i'), parent: Freq});
  const Khz = createToken({name: 'Khz', pattern: MAKE_PATTERN('{{num}}khz', 'i'), parent: Freq});

  const Percentage = createToken({name: 'Percentage', pattern: MAKE_PATTERN('{{num}}%', 'i')});

  // Num must appear after all the num forms with a suffix
  const Num = createToken({name: 'Num', pattern: MAKE_PATTERN('{{num}}')});

  // Ident must be before Minus
  const Ident = createToken({name: 'Ident', pattern: MAKE_PATTERN('{{ident}}')});
  const Minus = createToken({name: 'Minus', pattern: /-/});

  const CssLexer = new Lexer(cssTokens, {
    // Less position info tracked, reduces verbosity of the playground output.
    positionTracking: "onlyStart",
    // Adds tokenClassName property to the output for easier debugging in the playground
    // Do not use this flag in a productive env, as it will hurt performance.
    debug: true
  });

  // ----------------- parser -----------------
  const Parser = chevrotain.Parser;

  class CssParser extends Parser {
    constructor(input){
      super(input, cssTokens, {
        recoveryEnabled: true,
        maxLookahead: 3
      });

      const $ = this;

      $.RULE('stylesheet', () => {

        // [ CHARSET_SYM STRING ';' ]?
        $.OPTION(() => {
          $.SUBRULE($.charsetHeader)
        })

        // [S|CDO|CDC]*
        $.SUBRULE($.cdcCdo)

        // [ import [ CDO S* | CDC S* ]* ]*
        $.MANY(() => {
          $.SUBRULE($.cssImport)
          $.SUBRULE2($.cdcCdo)
        })

        // [ [ ruleset | media | page ] [ CDO S* | CDC S* ]* ]*
        $.MANY2(() => {
          $.SUBRULE($.contents)
        })
      });

      $.RULE('charsetHeader', () => {
        $.CONSUME(CharsetSym)
        $.CONSUME(StringLiteral)
        $.CONSUME(SemiColon)
      })

      $.RULE('contents', () => {
        $.OR([
          {ALT: () => { $.SUBRULE($.ruleset)}},
          {ALT: () => { $.SUBRULE($.media)}},
          {ALT: () => { $.SUBRULE($.page)}}
        ]);
        $.SUBRULE3($.cdcCdo)
      })

      // factor out repeating pattern for cdc/cdo
      $.RULE('cdcCdo', () => {
        $.MANY(() => {
          $.OR([
            {ALT: () => { $.CONSUME(Cdo)}},
            {ALT: () => { $.CONSUME(Cdc)}}
          ]);
        })
      })

      // IMPORT_SYM S*
      // [STRING|URI] S* media_list? ';' S*
      $.RULE('cssImport', () => {
        $.CONSUME(ImportSym)
        $.OR([
          {ALT: () => { $.CONSUME(StringLiteral)}},
          {ALT: () => { $.CONSUME(Uri)}}
        ]);

        $.OPTION(() => {
          $.SUBRULE($.media_list)
        })

        $.CONSUME(SemiColon)
      });

      // MEDIA_SYM S* media_list '{' S* ruleset* '}' S*
      $.RULE('media', () => {
        $.CONSUME(MediaSym)
        $.SUBRULE($.media_list)
        $.CONSUME(LCurly)
        $.SUBRULE($.ruleset)
        $.CONSUME(RCurly)
      });

      // medium [ COMMA S* medium]*
      $.RULE('media_list', () => {
        $.MANY_SEP({
          SEP: Comma, DEF: () => {
            $.SUBRULE($.medium)
          }
        })
      });

      // IDENT S*
      $.RULE('medium', () => {
        $.CONSUME(Ident)
      });

      // PAGE_SYM S* pseudo_page?
      // '{' S* declaration? [ ';' S* declaration? ]* '}' S*
      $.RULE('page', () => {
        $.CONSUME(PageSym)
        $.OPTION(() => {
          $.SUBRULE($.pseudo_page)
        })

        $.SUBRULE($.declarationsGroup)
      });

      // '{' S* declaration? [ ';' S* declaration? ]* '}' S*
      // factored out repeating grammar pattern
      $.RULE('declarationsGroup', () => {
        $.CONSUME(LCurly)
        $.OPTION(() => {
          $.SUBRULE($.declaration)
        })

        $.MANY(() => {
          $.CONSUME(SemiColon)
          $.OPTION2(() => {
            $.SUBRULE2($.declaration)
          })
        })
        $.CONSUME(RCurly)
      });

      // ':' IDENT S*
      $.RULE('pseudo_page', () => {
        $.CONSUME(Colon)
        $.CONSUME(Ident)
      });

      // '/' S* | ',' S*
      $.RULE('operator', () => {
        $.OR([
          {ALT: () => { $.CONSUME(Slash)}},
          {ALT: () => { $.CONSUME(Comma)}}
        ]);
      });

      // '+' S* | '>' S*
      $.RULE('combinator', () => {
        $.OR([
          {ALT: () => { $.CONSUME(Plus)}},
          {ALT: () => { $.CONSUME(GreaterThan)}}
        ]);
      });

      // '-' | '+'
      $.RULE('unary_operator', () => {
        $.OR([
          {ALT: () => { $.CONSUME(Minus)}},
          {ALT: () => { $.CONSUME(Plus)}}
        ]);
      });

      // IDENT S*
      $.RULE('property', () => {
        $.CONSUME(Ident)
      });

      // selector [ ',' S* selector ]*
      // '{' S* declaration? [ ';' S* declaration? ]* '}' S*
      $.RULE('ruleset', () => {
        $.MANY_SEP({
          SEP: Comma, DEF: () => {
            $.SUBRULE($.selector)
          }
        })

        $.SUBRULE($.declarationsGroup)
      });

      // simple_selector [ combinator selector | S+ [ combinator? selector ]? ]?
      $.RULE('selector', () => {
        $.SUBRULE($.simple_selector)
        $.OPTION(() => {
          $.OPTION2(() => {
            $.SUBRULE($.combinator)
          })
          $.SUBRULE($.selector)
        })
      });

      // element_name [ HASH | class | attrib | pseudo ]*
      // | [ HASH | class | attrib | pseudo ]+
      $.RULE('simple_selector', () => {
      $.OR([
        {ALT: () => {
          $.SUBRULE($.element_name)
          $.MANY(() => {
            $.SUBRULE($.simple_selector_suffix)
          })

        }},
        {ALT: () => {
          $.AT_LEAST_ONE(() => {
            $.SUBRULE2($.simple_selector_suffix)
          })
        }}
      ]);
      });

      // helper grammar rule to avoid repetition
      // [ HASH | class | attrib | pseudo ]+
      $.RULE('simple_selector_suffix', () => {
        $.OR([
          {ALT: () => { $.CONSUME(Hash) }},
          {ALT: () => { $.SUBRULE($.class) }},
          {ALT: () => { $.SUBRULE($.attrib) }},
          {ALT: () => { $.SUBRULE($.pseudo) }}
        ]);
      })

      // '.' IDENT
      $.RULE('class', () => {
        $.CONSUME(Dot)
        $.CONSUME(Ident)
      });

      // IDENT | '*'
      $.RULE('element_name', () => {
        $.OR([
          {ALT: () => { $.CONSUME(Ident) }},
          {ALT: () => { $.CONSUME(Star) }}
        ]);
      });

      // '[' S* IDENT S* [ [ '=' | INCLUDES | DASHMATCH ] S* [ IDENT | STRING ] S* ]? ']'
      $.RULE('attrib', function () {
        $.CONSUME(LSquare)
        $.CONSUME(Ident)

        this.OPTION(() => {
          $.OR([
            {ALT: () => { $.CONSUME(Equals) }},
            {ALT: () => { $.CONSUME(Includes) }},
            {ALT: () => { $.CONSUME(Dasmatch) }}
          ]);

          $.OR2([
            {ALT: () => { $.CONSUME2(Ident) }},
            {ALT: () => { $.CONSUME(StringLiteral) }}
          ]);
        })
        $.CONSUME(RSquare)
      });

      // ':' [ IDENT | FUNCTION S* [IDENT S*]? ')' ]
      $.RULE('pseudo', () => {
        $.CONSUME(Colon)
        $.OR([
          {ALT: () => {$.CONSUME(Ident)}},
          {ALT: () => {
            $.CONSUME(Func)
            $.OPTION(() => {
              $.CONSUME2(Ident)
            })
            $.CONSUME(RParen)
          }}
        ]);
      });

      // property ':' S* expr prio?
      $.RULE('declaration', () => {
        $.SUBRULE($.property)
        $.CONSUME(Colon)
        $.SUBRULE($.expr)

        $.OPTION(() => {
          $.SUBRULE($.prio)
        })
      });

      // IMPORTANT_SYM S*
      $.RULE('prio', () => {
        $.CONSUME(ImportantSym)
      });

      // term [ operator? term ]*
      $.RULE('expr', () => {
        $.SUBRULE($.term)
        $.MANY(() => {
          $.OPTION(() => {
            $.SUBRULE($.operator)
          })
          $.SUBRULE2($.term)
        })
      });

      // unary_operator?
      // [ NUMBER S* | PERCENTAGE S* | LENGTH S* | EMS S* | EXS S* | ANGLE S* |
      // TIME S* | FREQ S* ]
      // | STRING S* | IDENT S* | URI S* | hexcolor | function
      $.RULE('term', () => {
        $.OPTION(() => {
          $.SUBRULE($.unary_operator)
        })

        $.OR([
          {ALT: () => { $.CONSUME(Num) }},
          {ALT: () => { $.CONSUME(Percentage) }},
          {ALT: () => { $.CONSUME(Length) }},
          {ALT: () => { $.CONSUME(Ems) }},
          {ALT: () => { $.CONSUME(Exs) }},
          {ALT: () => { $.CONSUME(Angle) }},
          {ALT: () => { $.CONSUME(Time) }},
          {ALT: () => { $.CONSUME(Freq) }},
          {ALT: () => { $.CONSUME(StringLiteral) }},
          {ALT: () => { $.CONSUME(Ident) }},
          {ALT: () => { $.CONSUME(Uri) }},
          {ALT: () => { $.SUBRULE($.hexcolor) }},
          {ALT: () => { $.SUBRULE($.cssFunction) }}
        ]);
      });

      // FUNCTION S* expr ')' S*
      $.RULE('cssFunction', () => {
        $.CONSUME(Func)
        $.SUBRULE($.expr)
        $.CONSUME(RParen)
      });

      $.RULE('hexcolor', () => {
        $.CONSUME(Hash)
      });


      // very important to call this after all the rules have been setup.
      // otherwise the parser may not work correctly as it will lack information
      // derived from the self analysis.
      Parser.performSelfAnalysis(this);
    }
  }

  // for the playground to work the returned object must contain these fields
  return {
    lexer: CssLexer,
    parser: CssParser,
    defaultRule: "stylesheet"
  };
}())