module 
    kind jsfile
    
	var path = require('path')
    
	var md
        set module.exports =
            { 
    
	set md.isDefined
        function 
            param test
            return !(typeof(test) === 'undefined')
    
	set md.isObject
        function 
            param test
            if test === null || typeof(test) === 'undefined'
                return false
            return {}.toString.call(test) === '[object Object]'
    
	set md.isArray
        function 
            param test
            if test === null || typeof(test) === 'undefined'
                return false
            return {}.toString.call(test) === '[object Array]'
    
	set md.isString
        function 
            param test
            return test !== null && typeof(test) === 'string'
    
	set md.isEmpty
        function 
            param test
            return test == null || typeof(test) !== 'string' || test.length == 0
    
	set md.isNotEmpty
        function 
            param test
            return test != null && typeof(test) === 'string' && test.length > 0
    
	set md.isNumber
        function 
            param test
            return !md.isArray(test) && (test - parseFloat(test) + 1) >= 0
    
	set md.isFunction
        function 
            param functionToCheck
            if functionToCheck === null || typeof(functionToCheck) === 'undefined'
                return false
            return {}.toString.call(functionToCheck) === '[object Function]'
    
	set md.isAbsolutePath
        function 
            param test
            return path.resolve(test) == path.normalize(test)
    
	set md.isArtifact
        function 
            param test
            if !md.isDefined(test) || test === null
                return false
            if !md.isFunction(test.generate)
                return false
            if !md.isFunction(test.toFile)
                return false
            if !md.isFunction(test.generateToFile)
                return false
            return true
    
	set md.getInterfaceMessage
        function 
            return "generate(...), toFile(...), generateToFile(...)"
    
	set md.startsWith
        function 
            param str
            param prefix
			if md.isEmpty(str) || md.isEmpty(prefix)
				return false
            else
				return str.indexOf(prefix) === 0
    
	set md.endsWith
        function 
            param str
            param suffix
			if md.isEmpty(str) || md.isEmpty(suffix)
				return false
            else
				return str.indexOf(suffix, str.length - suffix.length) !== -1
    
	set md.unquote
        function 
            param str
            if md.isString(str) === false
                return str
            if str.length < 2
                return str
            if (str.substr(0, 1) === "'" && str.substr(-1, 1) === "'") ||
				\b (str.substr(0, 1) === "\"" && str.substr(-1, 1) === "\"")
                return str.substr(1, str.length -2)
            else 
                return str
    
	set md.capitalize
        function 
            param str
            if md.isEmpty(str)
                return str
            return str.substr(0, 1).toUpperCase() + str.substr(1)
    

	set md.replaceAll =
        function 
            param text
            param find
            param replace
            if md.isEmpty(text)
                return text
            return 
                _ text.replace
                    new RegExp
                        _ escapeRegExp(find)
                        @ 'g'
                    @ replace
    
	function escapeRegExp
        param text
        return text.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1")
    
	set md.htmlEscape
        function escape
            param value
            if md.isEmpty(value)
                return value
            set value = md.replaceAll(value, '<', '&lt;')
            set value = md.replaceAll(value, '>', '&gt;')
            return value
