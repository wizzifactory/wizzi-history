module 
    kind react
	+
	import_rsf_actions( GET_FRAGMENTS )
	import_rsf_actions( CREATE_FRAGMENT )
	import_rsf_actions( SELECT_FRAGMENT )
	import_rsf_actions( UPDATE_FRAGMENT )
	import
		@ FRAGMENT_CHANGED
		from '../actions'
	+
	const fragmentInitialState
		{
			@ userItems []
			@ projectItems []
	+
	r( fragment, fragmentInitialState )
	
		c( GET_FRAGMENTS_REQUEST
			{
				@ ...state
				@ isLoading true
		
		c( GET_FRAGMENTS_SUCCESS
			{
				@ userItems Object.values(action.payload.fragments.user)
				@ projectItems Object.values(action.payload.fragments.project)
				@ isLoading false
				@ error null

		c( GET_FRAGMENTS_FAILURE
			{
				@ userItems []
				@ projectItems []
				@ isLoading false
				@ error action.payload.error

		c( CREATE_FRAGMENT_SUCCESS
			{
				@ items
					[
						@ ...state.items
						@ action.payload
				@ isLoading false
				@ error null

		c( SELECT_FRAGMENT
			{
				@ ...state
				@ selectedFragment
					_ state.items.map
						=>
							param item
							if item.uri = action.uri
								return item

		c( SELECT_FRAGMENT_SUCCESS
			{
				@ ...state
				@ selectedFragmentIttfContent action.payload
				@ selectedFragmentUri action.uri
				@ selectedFragmentSchema action.schema
		
		c( UPDATE_FRAGMENT_SUCCESS
			{
				@ ...state
				@ generatedArtifact null

		c( FRAGMENT_CHANGED
			{
				@ ...state
				@ selectedFragmentIttfContent action.newContent

	export default fragmentReducer