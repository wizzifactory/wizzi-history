/*
    artifact generator: C:\My\wizzi\v5\apps\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\v5\apps\wizzi-studio\wizzi-studio-express\dist\server\data\repo\stefi\my-demo\wizzijob\level_0\step_1\ittf\lib\step_1.js.ittf
    utc time: Thu, 23 Aug 2018 16:28:41 GMT
*/
'use strict';
// generated by v5-wizzi-js.artifacts.js.module.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var Animal = (function () {
    function Animal() {
        _classCallCheck(this, Animal);
    }
    Animal.prototype.sayHello = function() {
        console.log(this.cry, ', I am ', this.name);
    }
    return Animal;
})();

var Horse = (function (Animal) {
    _inherits(Horse, Animal);
    function Horse(name) {
        _get(Object.getPrototypeOf(Horse.prototype), 'constructor', this).call(this);
        _classCallCheck(this, Horse);
        this.name = name;
        this.cry = 'Hiii';
    }
    return Horse;
})(Animal);

var horse = new Horse('Varenne');
horse.sayHello();
