class DirtyChecker

	ctor
		param scope
		param modelName
		param controls

		set this.scope = scope
		set this.modelName = modelName
		set this.controls = controls || []

	m addControl
		param ctrl
		_ this.controls.push(ctrl)

	m startDirtyCheck
		_ this.validChecker = new ValidChecker
			@ this.scope
			@ this.modelName
			@ this.controls
		foreach ctrl in this.controls
			_ this.setWatch(ctrl, this.validChecker)
		_ this.resetDirty()
		_ this.validChecker.start()
		_ this.validChecker.validate()

	m resetDirty
		var scope = this.scope
		set scope.original = angular.copy(scope[this.modelName]);
		set scope.isDirty = false;
		set scope.isDirtyTooltip = 'No changes'

	m setWatch
		param ctrl
		param validChecker
		var scope = this.scope
		var modelName = this.modelName
		_ scope['$watch']
			@ ctrl.ngModel
			function
				param newValue
				param oldValue
				log 'DirtyChecker.newValue.oldValue', newValue, oldValue
				if newValue != oldValue
					set scope.isDirty = angular.equals(scope[modelName], scope.original) === false;
					if !scope.isDirty
						set scope.isDirtyTooltip = 'No changes'
					else
						set scope.isDirtyTooltip = 'Click to save'
					_ validChecker.validate()
			@ true

		$*
		module
			kind jsfile
			iife (window, document)
				function 
					param window
					param document
					param undefined
					var
						decl defaults
							{
								@ messages
									{
										@ required 'The %s field is required.'
										@ matches 'The %s field does not match the %s field.'
										@ "default" 'The %s field is still set to default, please change.'
										@ valid_email 'The %s field must contain a valid email address.'
										@ valid_emails 'The %s field must contain all valid email addresses.'
										@ min_length 'The %s field must be at least %s characters in length.'
										@ max_length 'The %s field must not exceed %s characters in length.'
										@ exact_length 'The %s field must be exactly %s characters in length.'
										@ greater_than 'The %s field must contain a number greater than %s.'
										@ less_than 'The %s field must contain a number less than %s.'
										@ alpha 'The %s field must only contain alphabetical characters.'
										@ alpha_numeric 'The %s field must only contain alpha-numeric characters.'
										@ alpha_dash 'The %s field must only contain alpha-numeric characters, underscores, and dashes.'
										@ numeric 'The %s field must contain only numbers.'
										@ integer 'The %s field must contain an integer.'
										@ decimal 'The %s field must contain a decimal number.'
										@ is_natural 'The %s field must contain only positive numbers.'
										@ is_natural_no_zero 'The %s field must contain a number greater than zero.'
										@ valid_ip 'The %s field must contain a valid IP.'
										@ valid_base64 'The %s field must contain a base64 string.'
										@ valid_credit_card 'The %s field must contain a valid credit card number.'
										@ is_file_type 'The %s field must contain only %s files.'
										@ valid_url 'The %s field must contain a valid URL.'
										@ greater_than_date 'The %s field must contain a more recent date than %s.'
										@ less_than_date 'The %s field must contain an older date than %s.'
										@ greater_than_or_equal_date 'The %s field must contain a date that\'s at least as recent as %s.'
										@ less_than_or_equal_date 'The %s field must contain a date that\'s %s or older.'
								@ callback
									function 
										param errors
					var
						decl ruleRegex = /^(.+?)\[(.+)\]$/
						decl numericRegex = /^[0-9]+$/
						decl integerRegex = /^\-?[0-9]+$/
						decl decimalRegex = /^\-?[0-9]*\.?[0-9]+$/
						decl emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/
						decl alphaRegex = /^[a-z]+$/i
						decl alphaNumericRegex = /^[a-z0-9]+$/i
						decl alphaDashRegex = /^[a-z0-9_\-]+$/i
						decl naturalRegex = /^[0-9]+$/i
						decl naturalNoZeroRegex = /^[1-9][0-9]*$/i
						decl ipRegex = /^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})$/i
						decl base64Regex = /[^a-zA-Z0-9\/\+=]/i
						decl numericDashRegex = /^[\d\-\s]+$/
						decl urlRegex = /^((http|https):\/\/(\w+:{0,1}\w*@)?(\S+)|)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/
						decl dateRegex = /\d{4}-\d{1,2}-\d{1,2}/
					var
						decl
							decl FormValidator
								function 
									param formNameOrNode
									param fields
									param callback
									set this.callback = (callback || defaults.callback)
									set this.errors = []
									set this.fields =
										{
									set this.form =
										op||
											@ this._formByNameOrNode(formNameOrNode)
											{
									set this.messages =
										{
									set this.handlers =
										{
									set this.conditionals =
										{
									for var i = 0, fieldLength = fields.length; i < fieldLength; i++
										var field = fields[i]
										if (! (field.name) && ! (field.names) || ! (field.rules))
											set console.warn('validate.js: The following field is being skipped due to a misconfiguration:')
											set console.warn(field)
											set console.warn('Check to ensure you have properly configured a name and rules for this field')
											continue 
										if field.names
											for var j = 0, fieldNamesLength = field.names.length; j < fieldNamesLength; j++
												set this._addField(field, field.names[j])
										else
											set this._addField(field, field.name)
									var _onsubmit = this.form.onsubmit
									iife (this)
										function 
											param that
											return
												function 
													param evt
													try
														return that._validateForm(evt) && (_onsubmit === undefined || _onsubmit())
													catch e
						decl
							decl attributeValue
								function 
									param element
									param attributeName
									var i
									if element.length > 0 && (element[0].type === 'radio' || element[0].type === 'checkbox')
										for undefined; i < elementLength; i++
											if element[i].checked
												return element[i][attributeName]
										return
									return element[attributeName]
					set FormValidator.prototype.setMessage =
						function 
							param rule
							param message
							set this.messages[rule] = message
							return this
					set FormValidator.prototype.registerCallback =
						function 
							param name
							param handler
							if name && typeof (name) === 'string' && handler && typeof (handler) === 'function'
								set this.handlers[name] = handler
							return this
					set FormValidator.prototype.registerConditional =
						function 
							param name
							param conditional
							if name && typeof (name) === 'string' && conditional && typeof (conditional) === 'function'
								set this.conditionals[name] = conditional
							return this
					set FormValidator.prototype._formByNameOrNode =
						function 
							param formNameOrNode
							return typeof (formNameOrNode) === 'object' ? formNameOrNode : document.forms[formNameOrNode]
					set FormValidator.prototype._addField =
						function 
							param field
							param nameValue
							set this.fields[nameValue] =
								{
									@ name nameValue
									@ display (field.display || nameValue)
									@ rules field.rules
									@ depends field.depends
									@ id null
									@ element null
									@ type null
									@ value null
									@ checked null
					set FormValidator.prototype._validateForm =
						function 
							param evt
							set this.errors = []
							for var key  in this.fields
								if this.fields.hasOwnProperty(key)
									var
										decl
											decl field
												op||
													@ this.fields[key]
													{
										decl element = this.form[field.name]
									if element && element !== undefined
										set field.id = attributeValue(element, 'id')
										set field.element = element
										set field.type = element.length > 0 ? element[0].type : element.type
										set field.value = attributeValue(element, 'value')
										set field.checked = attributeValue(element, 'checked')
										if field.depends && typeof (field.depends) === "function"
											if field.depends.call(this, field)
												set this._validateField(field)
										elif field.depends && typeof (field.depends) === "string" && this.conditionals[field.depends]
											if this.conditionals[field.depends].call(this, field)
												set this._validateField(field)
										else
											set this._validateField(field)
							if typeof (this.callback) === 'function'
								set this.callback(this.errors, evt)
							if this.errors.length > 0
								if evt && evt.preventDefault
									set evt.preventDefault()
								elif event
									set event.returnValue = false
							return true
					set FormValidator.prototype._validateField =
						function 
							param field
							var
								decl rules = field.rules.split('|')
								decl indexOfRequired = field.rules.indexOf('required')
								decl isEmpty = ((! (field.value) || field.value === '') || field.value === undefined)
							for var i = 0, ruleLength = rules.length; i < ruleLength; i++
								var
									decl m = rules[i]
									decl param = null
									decl failed = false
									decl parts = ruleRegex.exec(m)
								if indexOfRequired === - (1) && m.indexOf('!callback_') === - (1) && isEmpty
									continue 
								if parts
									set m = parts[1]
									set param = parts[2]
								if m.charAt(0) === '!'
									set m = m.substring(1, m.length)
								if typeof (this._hooks[m]) === 'function'
									if ! (this._hooks[m].apply(this, [field, param]))
										set failed = true
								elif m.substring(0, 9) === 'callback_'
									set m = m.substring(9, m.length)
									if typeof (this.handlers[m]) === 'function'
										if this.handlers[m].apply(this, [field.value, param, field]) === false
											set failed = true
								if failed
									var
										decl source = ((this.messages[field.name + '.' + m] || this.messages[m]) || defaults.messages[m])
										decl message = 'An error has occurred with the ' + field.display + ' field.'
									if source
										set message = source.replace('%s', field.display)
										if param
											set message = message.replace('%s', this.fields[param] ? this.fields[param].display : param)
									_ this.errors.push
										{
											@ id field.id
											@ display field.display
											@ element field.element
											@ name field.name
											@ message message
											@ rule m
									break 
					set FormValidator.prototype._getValidDate =
						function 
							param date
							if ! (date.match('today')) && ! (date.match(dateRegex))
								return false
							var
								decl
									decl validDate
										new Date ()
								decl validDateArray
							if ! (date.match('today'))
								set validDateArray = date.split('-')
								set validDate.setFullYear(validDateArray[0])
								set validDate.setMonth(validDateArray[1] - 1)
								set validDate.setDate(validDateArray[2])
							return validDate
					set FormValidator.prototype._hooks =
						{
							@ required
								function 
									param field
									var value = field.value
									if (field.type === 'checkbox' || field.type === 'radio')
										return field.checked === true
									return value !== null && value !== ''
							@ "default"
								function 
									param field
									param defaultName
									return field.value !== defaultName
							@ matches
								function 
									param field
									param matchName
									var el = this.form[matchName]
									if el
										return field.value === el.value
									return false
							@ valid_email
								function 
									param field
									return emailRegex.test(field.value)
							@ valid_emails
								function 
									param field
									var result = field.value.split(/\s*,\s*/g)
									for var i = 0, resultLength = result.length; i < resultLength; i++
										if ! (emailRegex.test(result[i]))
											return false
									return true
							@ min_length
								function 
									param field
									param length
									if ! (numericRegex.test(length))
										return false
									return field.value.length >= parseInt(length, 10)
							@ max_length
								function 
									param field
									param length
									if ! (numericRegex.test(length))
										return false
									return field.value.length <= parseInt(length, 10)
							@ exact_length
								function 
									param field
									param length
									if ! (numericRegex.test(length))
										return false
									return field.value.length === parseInt(length, 10)
							@ greater_than
								function 
									param field
									param param
									if ! (decimalRegex.test(field.value))
										return false
									return parseFloat(field.value) > parseFloat(param)
							@ less_than
								function 
									param field
									param param
									if ! (decimalRegex.test(field.value))
										return false
									return parseFloat(field.value) < parseFloat(param)
							@ alpha
								function 
									param field
									return alphaRegex.test(field.value)
							@ alpha_numeric
								function 
									param field
									return alphaNumericRegex.test(field.value)
							@ alpha_dash
								function 
									param field
									return alphaDashRegex.test(field.value)
							@ numeric
								function 
									param field
									return numericRegex.test(field.value)
							@ integer
								function 
									param field
									return integerRegex.test(field.value)
							@ decimal
								function 
									param field
									return decimalRegex.test(field.value)
							@ is_natural
								function 
									param field
									return naturalRegex.test(field.value)
							@ is_natural_no_zero
								function 
									param field
									return naturalNoZeroRegex.test(field.value)
							@ valid_ip
								function 
									param field
									return ipRegex.test(field.value)
							@ valid_base64
								function 
									param field
									return base64Regex.test(field.value)
							@ valid_url
								function 
									param field
									return urlRegex.test(field.value)
							@ valid_credit_card
								function 
									param field
									if ! (numericDashRegex.test(field.value))
										return false
									var
										decl nCheck = 0
										decl nDigit = 0
										decl bEven = false
									var strippedField = field.value.replace(/\D/g, "")
									for var n = strippedField.length - 1 ; n >= 0; n--
										var cDigit = strippedField.charAt(n)
										set nDigit = parseInt(cDigit, 10)
										if bEven
											if nDigit *= 2 > 9
												set nDigit -= 9
										set nCheck += nDigit
										set bEven = ! (bEven)
									return nCheck % 10 === 0
							@ is_file_type
								function 
									param field
									param type
									if field.type !== 'file'
										return true
									var
										decl ext = field.value.substr(field.value.lastIndexOf('.') + 1)
										decl typeArray = type.split(',')
										decl inArray = false
										decl i = 0
										decl len = typeArray.length
									for i; i < len; i++
										if ext == typeArray[i]
											set inArray = true
									return inArray
							@ greater_than_date
								function 
									param field
									param date
									var
										decl enteredDate = this._getValidDate(field.value)
										decl validDate = this._getValidDate(date)
									if (! (validDate) || ! (enteredDate))
										return false
									return enteredDate > validDate
							@ less_than_date
								function 
									param field
									param date
									var
										decl enteredDate = this._getValidDate(field.value)
										decl validDate = this._getValidDate(date)
									if (! (validDate) || ! (enteredDate))
										return false
									return enteredDate < validDate
							@ greater_than_or_equal_date
								function 
									param field
									param date
									var
										decl enteredDate = this._getValidDate(field.value)
										decl validDate = this._getValidDate(date)
									if (! (validDate) || ! (enteredDate))
										return false
									return enteredDate >= validDate
							@ less_than_or_equal_date
								function 
									param field
									param date
									var
										decl enteredDate = this._getValidDate(field.value)
										decl validDate = this._getValidDate(date)
									if (! (validDate) || ! (enteredDate))
										return false
									return enteredDate <= validDate
					set window.FormValidator = FormValidator
			if typeof (module) !== 'undefined' && module.exports
				set module.exports = FormValidator
		*$