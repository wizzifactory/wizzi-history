$group
	$params &app

	import { createStore, combineReducers, applyMiddleware, compose } from 'redux'
	import themeReducer from 'docs/src/modules/redux/themeReducer'

	# Get the Redux DevTools extension and fallback to a no-op function
	let devtools = x => x;

	if process.env.NODE_ENV !== 'production' &&
		\b process.browser &&
		\b window.__REDUX_DEVTOOLS_EXTENSION__
		set devtools = window.__REDUX_DEVTOOLS_EXTENSION__()

	function create
		param initialState
		
		let middlewares = []

		if process.env.NODE_ENV !== 'production' &&
			\b process.browser &&
			\b !window.__REDUX_DEVTOOLS_EXTENSION__ &&
			\b Object.assign
			# eslint-disable-next-line global-require
			const createLogger = require('redux-logger').createLogger
			set middlewares
				[
					@ ...middlewares
					@ createLogger()

		return
			_ createStore
				_ combineReducers
					{
						@ theme themeReducer
				initialState
				_ compose
					_ applyMiddleware
						@ ...middlewares
						@ devtools

		export default
			function initRedux
				param initialState
				# Make sure to create a new store for every server-side request so that data
				# isn't shared between connections (which would be bad)
				if !process.browser
					return create(initialState)
				# Reuse store on the client-side
				if !global.__INIT_REDUX_STORE__
					set global.__INIT_REDUX_STORE__ = create(initialState)
				return global.__INIT_REDUX_STORE__