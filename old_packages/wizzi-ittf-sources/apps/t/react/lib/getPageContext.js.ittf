$group
	$params &app

	import { SheetsRegistry } from 'jss'
	import { createMuiTheme, createGenerateClassName } from '@material-ui/core/styles'
	import ${app.primaryColor} from '@material-ui/core/colors/${app.primaryColor}'
	import ${app.secondaryColor} from '@material-ui/core/colors/${app.secondaryColor}'

	# A theme with custom primary and secondary color. It's optional.
	const theme
		_ createMuiTheme
			{
				{ palette
					{ primary
						@ light ${app.primaryColor}[300]
						@ main ${app.primaryColor}[500]
						@ dark ${app.primaryColor}[700]
					{ secondary
						@ light ${app.secondaryColor}[300]
						@ main ${app.secondaryColor}[500]
						@ dark ${app.secondaryColor}[700]
					@ type 'dark'

	function createPageContext
		return
			{
				@ theme
				
				# This is needed in order to deduplicate the injection of CSS in the page.
				@ sheetsManager new Map()
				
				# This is needed in order to inject the critical CSS.
				@ sheetsRegistry new SheetsRegistry()
				
				# The standard class name generator.
				@ generateClassName createGenerateClassName()
  
	export default
		function getPageContext
			# Make sure to create a new context for every server-side request so that data
			# isn't shared between connections (which would be bad).
			if !process.browser
				return createPageContext()
			
			# Reuse context on the client-side.
			if !global.__INIT_MATERIAL_UI__
				set global.__INIT_MATERIAL_UI__ = createPageContext()
			return global.__INIT_MATERIAL_UI__