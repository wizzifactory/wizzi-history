// generator: /wizzi-labs/wizzi-lab-site/ittf/lib/artifacts/js/module/gen/main.js, utc time: Wed, 01 Feb 2017 14:56:33 GMT
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var fs = require('fs');
var path = require('path');
var _ = require('./utils');
var ERR = {};
ERR.generateError = function(code,message) {
    return {
            code: code, 
            message: message
        };
};
ERR.jsonParseError = function() {
    return ERR.generateError("404", "The JSON.parse failed.");
};
ERR.jsonStringifyError = function() {
    return ERR.generateError("400", "The JSON.stringify failed.");
};
var fsJsonDb = (function () {
    function fsJsonDb(path) {
        _classCallCheck(this, fsJsonDb);
        this.path = path;
    }
    fsJsonDb.prototype.writeToFile = function(savePath,listArray,callback) {
        if (_.isUndefined(callback)) {
            callback = listArray;
            listArray = null;
        }
        if (!(listArray)) {
            listArray = [];
        }
        var json;
        try {
            json = JSON.stringify(listArray, undefined, 2);
        } catch (err) {
            return callback(ERR.jsonStringifyError())
            ;
        }
        fs.writeFile(savePath, json, function(err) {
            console.log('fsJsonDb. writeFile. err : ', err);
            if (err) {
                return callback(err);
            }
            callback(null);
        });
    }
    fsJsonDb.prototype.readFromFile = function(srcPath,callback) {
        fs.readFile(srcPath, 'utf8', function(err,data) {
            console.log('fsJsonDb. readFromFile. err : ', err);
            if (err) {
                return callback(err);
            }
            callback(null, data);
        });
    }
    fsJsonDb.prototype.removeFile = function(filePath) {
        fs.unlink(filePath, function(err) {
            if (err) {
                return callback(err);
            }
            callback(null);
        });
    }
    fsJsonDb.prototype.readParse = function(srcPath,callback) {
        this.readFromFile(srcPath, function(err,data) {
            if (err) {
                return callback(err);
            }
            var obj;
            try {
                obj = JSON.parse(data);
            } catch (err) {
                return callback(ERR.jsonParseError())
                ;
            }
            console.log('fsJsonDb. readParse. err : ', err);
            callback(null, obj);
        });
    }
    fsJsonDb.prototype.load = function(collectionName,callback) {
        var self = this;
        var filePath = path.join(this.path, collectionName + '.json')
        ;
        _.isValidPath(filePath, function(err) {
            console.log('fsJsonDb. isValidPath. err : ', err);
            if (err) {
                self.writeToFile(filePath, function(err2) {
                    console.log('fsJsonDb. isValidPath. err2 : ', err2);
                    if (err2) {
                        return callback(err2);
                    }
                    return self.readParse(filePath, callback)
                    ;
                });
                return ;
            }
            self.readParse(filePath, callback);
        });
    }
    fsJsonDb.prototype.save = function(collectionName,obj,callback) {
        var self = this;
        var filePath = path.join(this.path, collectionName + '.json')
        ;
        self.writeToFile(filePath, obj, function(err) {
            console.log('fsJsonDb. save. err : ', err);
            if (err) {
                return callback(err);
            }
            callback(null);
        });
    }
    return fsJsonDb;
})();


module.exports = fsJsonDb;
