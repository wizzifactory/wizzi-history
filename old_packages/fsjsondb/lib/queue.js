// generator: /wizzi-labs/wizzi-lab-site/ittf/lib/artifacts/js/module/gen/main.js, utc time: Wed, 01 Feb 2017 14:56:33 GMT
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var Queue = (function () {
    function Queue() {
        _classCallCheck(this, Queue);
        this.queue = [];
    }
    Queue.prototype.next = function() {
        if (this.queue.length === 0) {
            return ;
        }
        var job = this.queue[0];
        job.f.apply(job.ctx, job.args);
    }
    Queue.prototype.add = function() {
        var self = this;
        var job = {
            f: arguments[0], 
            ctx: arguments[1], 
            cb: arguments[2]
        };
        var len = arguments.length - 3;
        job.args = new Array(len + 1);
        for (var i = 0; i < len; ++i) {
            job.args[i] = arguments[i+3];
        }
        job.args[len] = function(err,ok) {
            self.queue.splice(0, 1);
            self.next();
            job.cb(err, ok);
        };
        self.queue.push(job);
        if (self.queue.length === 1) {
            self.next();
        }
    }
    return Queue;
})();


module.exports = Queue;
