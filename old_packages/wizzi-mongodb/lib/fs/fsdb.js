/*
    artifact generator: /wizzi/lib/artifacts/js/module/gen/main.js
    primary source IttfDocument: c:\my\wizzi\v3\sources\kernel\v3-wizzi-mongodb\ittf\lib\fs\fsdb.js.ittf
    utc time: Tue, 18 Jul 2017 17:11:07 GMT
*/
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var assert = require('assert');
var path = require('path');
var FSITEMS = 'fsitems';
var DOCUMENTS = 'documents';
var FsDb = (function () {
    function FsDb(db) {
        _classCallCheck(this, FsDb);
        this.db = db;
    }
    FsDb.prototype.getItem = function(key,callback) {
        this.db.collection(FSITEMS).find(key).toArray(function(err, r) {
            if (err) {
                return callback(err)
                ;
            }
            // log 'getItem.r', key, r
            if (r.length == 1) {
                callback(null, r[0]);
            }
            else {
                callback(null, null);
            }
        })
        ;
    }
    FsDb.prototype.getItemById = function(id,callback) {
        this.getItem({
            _id: id
        }, callback);
    }
    FsDb.prototype.getItemByPath = function(path,callback) {
        this.getItem({
            path: path
        }, callback);
    }
    FsDb.prototype.getItemByNameAndParent = function(basename,parentId,callback) {
        this.getItem({
            basename: basename, 
            parentId: parentId
        }, callback);
    }
    FsDb.prototype.getItemChildren = function(parentId,callback) {
        this.db.collection(FSITEMS).find({
            parentId: parentId
        }).toArray(function(err, r) {
            if (err) {
                return callback(err)
                ;
            }
            // log 'getItemChildren.r', parentId, r
            callback( null, r );
        })
        
        ;
    }
    FsDb.prototype.insertItem = function(fsItem,callback) {
        // log 'FsDb.insertItem.fsItem', fsItem
        var basename = fsItem.basename;
        if (!basename || basename.length == 0) {
            return callback({
                    __is_error: true, 
                    code: 'MISSING_REQUIRED', 
                    message: 'basename'
                })
            ;
        }
        var dirname = fsItem.dirname;
        var parentId = fsItem.parentId;
        fsItem.path = dirname ? normalize(path.join(dirname, basename)) : basename;
        const that = this;
        this.getItemByNameAndParent(basename, parentId, function(err, item) {
            if (err) {
                return callback(err)
                ;
            }
            if (item == null) {
                that.db.collection(FSITEMS).insertOne(fsItem, function(err, r) {
                    if (err) {
                        return callback(err)
                        ;
                    }
                    // log 'insertFsItem.r', r
                    assert.equal(1, r.insertedCount);
                    assert.equal(1, r.ops.length);
                    callback(null, {
                        code: 'FSITEM_INSERTED', 
                        insertedId: r.insertedId, 
                        insertedCount: r.insertedCount, 
                        item: r.ops[0]
                    });
                })
                ;
            }
            else {
                callback(null, {
                    code: 'FSITEM_EXISTS', 
                    item: item
                });
            }
        });
    }
    FsDb.prototype.updateItem = function(fsitem,callback) {
        this.db.collection(FSITEMS).replaceOne({
            _id: fsitem._id
        }, fsitem, function(err, r_upd) {
            if (err) {
                return callback(err)
                ;
            }
            // log 'updateItem', r_upd.result
            if (r_upd.result.nModified == 1) {
                callback(null, {
                    code: 'FSITEM_UPDATED', 
                    updatedCount: r_upd.result.nModified, 
                    item: r_upd.ops[0]
                });
            }
            else {
                callback(null, {
                    __is_error: true, 
                    code: 'FSITEM_UPDATE_FAILED', 
                    result: r_upd.result
                });
            }
        })
        ;
    }
    FsDb.prototype.updateItemLastModified = function(id,lastModified,callback) {
        var that = this;
        this.getItemById(id, function(err, r) {
            if (err) {
                return callback(err)
                ;
            }
            if (r != null) {
                r.lastModified = lastModified;
                that.db.collection(FSITEMS).replaceOne({
                    _id: id
                }, r, function(err, r_upd) {
                    if (err) {
                        return callback(err)
                        ;
                    }
                    // log 'updateItemLastModified', r_upd.result
                    if (r_upd.result.nModified == 1) {
                        callback(null, {
                            code: 'FSITEM_LASTMODIFIED_UPDATED', 
                            updatedCount: r_upd.result.nModified, 
                            item: r_upd.ops[0]
                        });
                    }
                    else {
                        callback(null, {
                            __is_error: true, 
                            code: 'FSITEM_LASTMODIFIED_UPDATE_FAILED', 
                            result: r_upd.result
                        });
                    }
                })
                ;
            }
            else {
                callback({
                    __is_error: true, 
                    code: 'FSITEM_NOT_FOUND', 
                    id: id
                });
            }
        });
    }
    FsDb.prototype.deleteItem = function(id,callback) {
        var that = this;
        that.getItemById(id, function(err, fsitem) {
            if (err) {
                return callback(err)
                ;
            }
            if (fsitem == null) {
                return callback(error('deleteItem', 'FS item not found: ' + id)
                    )
                ;
            }
            that.db.collection(FSITEMS).remove({
                _id: id
            }, function(err, r) {
                if (err) {
                    return callback(err)
                    ;
                }
                console.log('FsDb.deleteItem,r', r.result.n, r.result.ok);
                return callback(null, {
                        deleted: r.result.n == 1 && r.result.ok == 1, 
                        n: r.result.n, 
                        ok: r.result.ok
                    })
                ;
            });
        });
    }
    FsDb.prototype.readFile = function(id,callback) {
        this.db.collection(DOCUMENTS).find({
            _id: id
        }).toArray(function(err, r) {
            if (err) {
                return callback(err)
                ;
            }
            console.log('getDocument.r', id, r);
            if (r.length == 1) {
                return callback(null, r[0].content);
            }
            else {
                return callback(null, null);
            }
        })
        
        ;
    }
    FsDb.prototype.writeFile = function(id,content,callback) {
        var that = this;
        this.readFile(id, function(err, f) {
            if (err) {
                return callback(err)
                ;
            }
            // log 'readFile.f', id, f, content === f
            if (f === content) {
                console.log('FsDb.writeFile not modified', f);
                return callback(null, {
                        code: 'FILE_NOT_MODIFIED'
                    })
                ;
            }
            // log 'readFile.upsert', id, content, lastModified
            var lastModified = new Date();
            that.db.collection(DOCUMENTS).replaceOne({
                _id: id
            }, {
                _id: id, 
                content: content, 
                lastModified: lastModified
            }, {
                upsert: true
            }, function(err, r) {
                if (err) {
                    return callback(err)
                    ;
                }
                console.log('FsDb.writeFile', r.result);
                assert.equal(1, r.result.n);
                that.updateItemLastModified(id, lastModified, function(err, rUpd) {
                    if (err) {
                        return callback(err)
                        ;
                    }
                    console.log('FsDb.writeFile upd', rUpd);
                    callback(null, {
                        code: 'FILE_WRITTEN', 
                        item: r.ops[0]
                    });
                });
            })
            ;
        });
    }
    return FsDb;
})();


function error(method,message) {
    return {
            __is_error: true, 
            method: 'Mongo.FsDb.' + method, 
            message: message
        };
}

function normalize(path) {
    return path.trim().replace(/\\/g,'/').toLowerCase();
}

module.exports = FsDb;
