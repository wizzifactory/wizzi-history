/*
    artifact generator: /wizzi/lib/artifacts/js/module/gen/main.js
    primary source IttfDocument: c:\my\wizzi\v3\sources\kernel\v3-wizzi-mongodb\ittf\lib\filesystem.js.ittf
    utc time: Tue, 18 Jul 2017 17:11:07 GMT
*/
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var MongoClient = require('mongodb').MongoClient
,
    FsDb = require('./fs/fsdb'),
    Document = require('./fs/document'),
    glob = require('./glob/glob');

var isMounted = false,
    dburi = null,
    mounted_db = null,
    fsBaseFolderPath = null,
    fsdb = null,
    fsDoc = null;
var FsStat = (function () {
    function FsStat(fsitem) {
        _classCallCheck(this, FsStat);
        this.fsitem = fsitem;
    }
    FsStat.prototype.isDirectory = function() {
        return this.fsitem.kind == 0;
    }
    FsStat.prototype.isFile = function() {
        return this.fsitem.kind == 1;
    }
    return FsStat;
})();


var md = module.exports = {};
md.isMounted = function() {
    return isMounted;
};
md.mount = function(mongoDbUri, baseFolderPath, callback) {
    MongoClient.connect(mongoDbUri, function(err, db) {
        if (err) {
            return callback(err)
            ;
        }
        mounted_db = db;
        dburi = mongoDbUri;
        fsBaseFolderPath = baseFolderPath;
        fsdb = new FsDb(db);
        fsDoc = new Document(fsdb);
        isMounted = true;
        // log 'wizzi-mongo.filesystem mounted. Uri: ' + mongoDbUri
        return callback(null);
    });
};
md.unmount = function(callback) {
    mounted_db.close();
    isMounted = false;
    fsdb = null;
    fsDoc = null;
    callback(null);
};
md.exists = function(userId, projectId, path_string, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'Mongodb wizzi repository not mounted. Review your start procedure'
            })
        ;
    }
    var fsPath = normalize(path.join(fsBaseFolderPath, userId, projectId, path_string)
    )
    ;
    console.log('wizzi-mongo.filesystem.exists.fsPath', fsPath);
    fsDoc.exists(fsPath, function(err, exists) {
        if (err) {
            return callback(err)
            ;
        }
        console.log('wizzi-mongo.filesystem.exists.fsPath', fsPath, 'exists', exists);
        return callback(null, exists);
    });
};
md.isFile = function(userId, projectId, path_string, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'Mongodb wizzi repository not mounted. Review your start procedure'
            })
        ;
    }
    var fsPath = normalize(path.join(fsBaseFolderPath, userId, projectId, path_string)
    )
    ;
    console.log('wizzi-mongo.filesystem.isFile.fsPath', fsPath);
    fsDoc.isFile(fsPath, function(err, exists) {
        if (err) {
            return callback(err)
            ;
        }
        console.log('wizzi-mongo.filesystem.isFile.fsPath', fsPath, 'exists', exists);
        return callback(null, exists);
    });
};
md.isFolder = function(userId, projectId, path_string, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'Mongodb wizzi repository not mounted. Review your start procedure'
            })
        ;
    }
    var fsPath = normalize(path.join(fsBaseFolderPath, userId, projectId, path_string)
    )
    ;
    console.log('wizzi-mongo.filesystem.isFolder.fsPath', fsPath);
    fsDoc.isFolder(fsPath, function(err, exists) {
        if (err) {
            return callback(err)
            ;
        }
        console.log('wizzi-mongo.filesystem.isFolder.fsPath', fsPath, 'exists', exists);
        return callback(null, exists);
    });
};
md.readFile = function(userId, projectId, path_string, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'Mongodb wizzi repository not mounted. Review your start procedure'
            })
        ;
    }
    var fsPath = normalize(path.join(fsBaseFolderPath, userId, projectId, path_string)
    )
    ;
    console.log('wizzi-mongo.filesystem.readFile.fsPath', fsPath);
    fsDoc.readFile(fsPath, function(err, content) {
        if (err) {
            return callback(err)
            ;
        }
        console.log('wizzi-mongo.filesystem.readFile.fsPath', fsPath, 'content', content);
        return callback(null, content);
    });
};
md.writeFile = function(userId, projectId, path_string, content, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'Mongodb wizzi repository not mounted. Review your start procedure'
            })
        ;
    }
    var fsPath = normalize(path.join(fsBaseFolderPath, userId, projectId, path_string)
    )
    ;
    console.log('wizzi-mongo.filesystem.writeFile.fsPath', fsPath);
    fsDoc.writeFile(fsPath, content, function(err, result) {
        if (err) {
            return callback(err)
            ;
        }
        console.log('wizzi-mongo.filesystem.writeFile.fsPath', fsPath, 'result', result);
        return callback(null, result);
    });
};
md.mkdir = function(userId, projectId, path_string, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'Mongodb wizzi repository not mounted. Review your start procedure'
            })
        ;
    }
    var fsPath = normalize(path.join(fsBaseFolderPath, userId, projectId, path_string)
    )
    ;
    console.log('wizzi-mongo.filesystem.mkdir.fsPath', fsPath);
    fsDoc.createFolder(fsPath, function(err, lastInserted) {
        if (err) {
            return callback(err)
            ;
        }
        console.log('wizzi-mongo.filesystem.createFolder.fsPath', fsPath, 'lastInserted', lastInserted);
        return callback(null, lastInserted);
    });
};
/**
     return arrayOf fsitem [
    
     ]
*/
md.readDir = function(userId, projectId, dirPath, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'Mongodb wizzi repository not mounted. Review your start procedure'
            })
        ;
    }
    var fsPath = path.join(fsBaseFolderPath, userId)
    ;
    if (projectId != null) {
        fsPath = path.join(fsPath, projectId);
    }
    if (dirPath != null) {
        fsPath = path.join(fsPath, dirPath);
    }
    fsPath = normalize(fsPath);
    console.log('wizzi-mongo.filesystem.readDir.fsPath', fsPath);
    fsDoc.getDir(fsPath, function(err, fsitems) {
        if (err) {
            return callback(err)
            ;
        }
        console.log('wizzi-mongo.filesystem.readDir.fsPath', fsPath, 'fsitems', fsitems);
        return callback(null, fsitems);
    });
};
md._readDir = function(dirPath, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'Mongodb wizzi repository not mounted. Review your start procedure'
            })
        ;
    }
    var fsPath = normalize(dirPath)
    ;
    console.log('wizzi-mongo.filesystem.readDir.fsPath', fsPath);
    fsDoc.getDir(fsPath, function(err, fsitems) {
        if (err) {
            return callback(err)
            ;
        }
        console.log('wizzi-mongo.filesystem.readDir.fsPath', fsPath, 'fsitems', fsitems);
        return callback(null, fsitems);
    });
};
md.stat = function(userId, projectId, filePath, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'Mongodb wizzi repository not mounted. Review your start procedure'
            })
        ;
    }
    var fsPath = normalize(path.join(fsBaseFolderPath, userId, projectId, filePath)
    )
    ;
    console.log('wizzi-mongo.filesystem.stat.fsPath', fsPath);
    fsdb.getItemByPath(fsPath, function(err, fsitem) {
        if (err) {
            return callback(err)
            ;
        }
        console.log('wizzi-mongo.filesystem.stat.fsPath', fsPath, 'fsitem', fsitem);
        if (fsitem == null) {
            return callback({
                    err: {
                        code: 'ENOENT'
                    }
                })
            ;
        }
        else {
            return callback(null, new FsStat(fsitem))
            ;
        }
    });
};
md._stat = function(filePath, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'Mongodb wizzi repository not mounted. Review your start procedure'
            })
        ;
    }
    var fsPath = normalize(filePath)
    ;
    console.log('wizzi-mongo.filesystem.stat.fsPath', fsPath);
    fsdb.getItemByPath(fsPath, function(err, fsitem) {
        if (err) {
            return callback(err)
            ;
        }
        console.log('wizzi-mongo.filesystem.stat.fsPath', fsPath, 'fsitem', fsitem);
        if (fsitem == null) {
            return callback({
                    er: {
                        code: 'ENOENT'
                    }
                })
            ;
        }
        else {
            return callback(null, new FsStat(fsitem))
            ;
        }
    });
};
md.glob = function(userId, projectId, pattern, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'Mongodb wizzi repository not mounted. Review your start procedure'
            })
        ;
    }
    var fsPattern = normalize(path.join(fsBaseFolderPath, userId, projectId, pattern)
    )
    ;
    console.log('wizzi-mongo.filesystem.glob.fsPattern', fsPattern);
    glob(fsPattern, this, {}, function(err, fsitems) {
        if (err) {
            return callback(err)
            ;
        }
        console.log('wizzi-mongo.filesystem.glob.fsPattern', fsPattern, 'fsitems', fsitems);
        return callback(null, fsitems);
    });
};
md.copyFile = function(userId, source_projectId, source_path_string, dest_projectId, dest_path_string, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'Mongodb wizzi repository not mounted. Review your start procedure'
            })
        ;
    }
    var sourceFsPath = normalize(path.join(fsBaseFolderPath, userId, source_projectId, source_path_string)
    )
    ;
    var destFsPath = normalize(path.join(fsBaseFolderPath, userId, dest_projectId, dest_path_string)
    )
    ;
    console.log('wizzi-mongo.filesystem.copyFile.sourceFsPath', sourceFsPath, 'destFsPath', destFsPath);
    fsDoc.copyFile(sourceFsPath, destFsPath, function(err, result) {
        if (err) {
            return callback(err)
            ;
        }
        console.log('wizzi-mongo.filesystem.copyFile.sourceFsPath', sourceFsPath, 'destFsPath', destFsPath, 'result', result);
        return callback(null, result);
    });
};
function normalize(path) {
    return path.trim().replace(/\\/g,'/').toLowerCase();
}

