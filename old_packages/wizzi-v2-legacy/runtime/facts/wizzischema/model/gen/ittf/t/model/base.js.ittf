$group
	class ${schema.wzId}Base
		ctor
			param name
			param sourceLineInfo
			set this.wzName = name || ''
			set this.wzParent = null
			set this.wzSourceLineInfo = sourceLineInfo
			set this.wzChildren = []
		m wzRoot
			return this.wzParent == null ? this : this.wzParent.wzRoot()
		m wzSourceFilepath
			param sourceKey
			return this.wzRoot().loadContext.getIttfDocumentUri(sourceKey)
		m wzVerify
		m wzInitialize
		m wzInitializeAsync
			param ctx
			param callback
			_ callback(null)
		m wzAddChild
			param node
			set node.wzParent = this
			set this.wzChildren.push(node)
		m wzLoadToChildColl
			param child
			param type
			param coll
			var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u))
			set item.wzTag = child.n
			set item.wzParent = this
			_ coll.push(item)
			if item.loadFromNode
				_ item.loadFromNode(child)
			return true;
		m wzLoadToChildren
			param child
			param type
			var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u))
			set item.wzTag = child.n
			set item.wzParent = this
			_ this.wzChildren.push(item)
			if item.loadFromNode
				_ item.loadFromNode(child)
			return true
		m wzLoadOneToOne
			param child
			param type
			param fieldName
			var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u))
			set item.wzParent = this
			set this[fieldName] = item
			if item.loadFromNode
				_ item.loadFromNode(child)
			return true
		m error
			param message
			param node
			throw new md.${schema.wzId}Exception(message, node, this)
		$if request.toJson
			
			m toJsonProperties
				param result
				set result.wzTag = this.wzTag
				set result.wzName = this.wzName
			m toJsonChildren
				param result
				if this.wzChildren.length > 0
					var children = []
					foreach item in this.wzChildren 
						_ children.push(item.toJson())
					set result.wzChildren = children
		$if request.toXml
			
			m toXmlProperties
				param xw
				_ xw.writeAttribute("wzTag", this.wzTag)
				_ xw.writeAttribute("wzName", this.wzName)
			m toXmlChildren
				param xw
				if this.wzChildren.length > 0
					_ xw.startElement('wzChildren')
					foreach item in this.wzChildren 
						_ item.toXml(xw)
					_ xw.endElement()
		$if request.toPrettify
			
			m toPrettifyProperties
				param ctx
			m toPrettifyChildren
				param ctx
				if this.wzChildren.length > 0
					foreach item in this.wzChildren 
						_ item.toPrettify(xw)
	set md.${schema.wzId}Base = ${schema.wzId}Base
	$if request.toPrettify
		function startPrettify
			param ctx
			set ctx.state
				{
					@ level 0
					@ line 0
			_ ctx.hb.setNoLF(true)
			_ ctx.hb.openTag('pre')
			_ ctx.hb.writeAttribute('class', 'prettyprint')
			_ ctx.hb.openTag('ol')
			_ ctx.hb.writeAttribute('class', 'linenums')
		function endPrettify
			param ctx
			_ ctx.hb.closeTag('ol')
			_ ctx.hb.closeTag('pre')
			_ ctx.hb.setNoLF(false)
