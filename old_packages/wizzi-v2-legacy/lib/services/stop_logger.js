/*
    artifact generator: /wizzi/lib/artifacts/js/module/gen/main.js
    primary source IttfDocument: C:\My\wizzi\v2\sources\wizzi-2-boot\ittf\lib\services\stop_logger.js.ittf
    utc time: Tue, 11 Jul 2017 18:50:00 GMT
*/
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var stringify = require('json-stringify-safe');
var file = require('../util/file');
var config = require('../config');
var Logger = (function () {
    function Logger(options) {
        _classCallCheck(this, Logger);
        this.options = options || {};
        this.items = {};
    }
    Logger.prototype.start = function(name) {
        // log 'production.logger', name
        this.name = name;
        this.artifactInfos = null;
    }
    Logger.prototype.addItem = function(name,value) {
        this.items[name] = value;
    }
    Logger.prototype.terminate = function() {
        var self = this;
        file.openWrite(config.wfJobsFolder + '/log/' + self.name + '.json', function(err,stream) {
            stream.write(stringify(self.items, null, 2));
            stream.end();
        });
    }
    return Logger;
})();


module.exports = Logger;
