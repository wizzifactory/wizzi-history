/*
    artifact generator: /wizzi/lib/artifacts/js/module/gen/main.js
    primary source IttfDocument: C:\My\wizzi\v2\sources\wizzi-2-boot\ittf\lib\ittf\loadContext.js.ittf
    utc time: Tue, 11 Jul 2017 18:50:00 GMT
*/
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var ModelProvider = null;
/**
     dictionaries
     ittfDocumentDatas
     key: sourceKey
     object:
     ittfDocumentUri
     content
     sourceKey
    
     ittfModelDatas
     key: modelKey
     object:
     ittfDocumentUri
     schema
     ittfModel (cloned) { // ittfModel is created by the ittfModelProvider
     $mixerModelKey:String    // key of the mixin caller ittfModelData
     // set by the lib/ittf/mixer
     $args:String             // args of the mixin call
     // set by the lib/ittf/mixer
     $params:String           // params of the mixin callee
     byRefParams:Array        // params that reference objects
     getParamValues:Function  // calculates the values
     }
     evalContext
     sourceKey
     modelKey
*/
var loadContext = (function () {
    function loadContext() {
        _classCallCheck(this, loadContext);
        this.ittfDocumentDatas = {};
        this.ittfModelDatas = {};
        this.sourceCount = 0;
        this.modelCount = 0;
        this.nodeCount = 0;
    }
    loadContext.prototype.addIttfDocument = function(ittfDocumentUri,textContent) {
        var sourceKey = 'f' + ++this.sourceCount;
        var ittfDocumentData = {
            ittfDocumentUri: ittfDocumentUri, 
            sourceKey: sourceKey, 
            content: textContent
        };
        this.ittfDocumentDatas[sourceKey] = ittfDocumentData;
        return ittfDocumentData;
    }
    loadContext.prototype.addIttfModel = function(ittfDocumentUri,schema,ittfModelCloned,options) {
        var sourceKey = this.getSourceKey(ittfDocumentUri);
        if (options.include) {
            return {
                    sourceKey: sourceKey, 
                    modelKey: options.includerModelKey
                };
        }
        var modelKey = 'f' + ++this.modelCount;
        var ittfModelData = {
            ittfDocumentUri: ittfDocumentUri, 
            schema: schema, 
            sourceKey: sourceKey, 
            modelKey: modelKey, 
            ittfModel: ittfModelCloned, 
            evalContext: null
        };
        this.ittfModelDatas[modelKey] = ittfModelData;
        return ittfModelData;
    }
    loadContext.prototype.getIttfModelData = function(modelKey) {
        return this.ittfModelDatas[modelKey];
    }
    loadContext.prototype.getIttfDocumentUri = function(sourceKey) {
        var ittfDocumentData = this.ittfDocumentDatas[sourceKey];
        return ittfDocumentData ? ittfDocumentData.ittfDocumentUri : 'Source ittfDocumentUri unknown';
    }
    loadContext.prototype.getSourceKey = function(ittfDocumentUri) {
        for (var k in this.ittfDocumentDatas) {
            if (this.ittfDocumentDatas[k].ittfDocumentUri === ittfDocumentUri) {
                return k;
            }
        }
        return null;
    }
    loadContext.prototype.getIttfDocuments = function() {
        var ret = {};
        for (var k in this.ittfDocumentDatas) {
            var ittfDocumentData = this.ittfDocumentDatas[k];
            ret[this.getIttfDocumentUri(ittfDocumentData.sourceKey)] = {
                sourceKey: ittfDocumentData.sourceKey
            };
        }
        return ret;
    }
    loadContext.prototype.getNewNodeId = function() {
        return ++this.nodeCount;
    }
    /**
        VIA
        VIA.prototype.getLoadState = function(ittfDocumentUri,requestContext) {
            if (!ModelProvider) {
                ModelProvider = require('./provider');
            }
            return {
                    requestContext: requestContext, 
                    provider: ModelProvider.createFromFilepath(ittfDocumentUri, requestContext), 
                    callChain: [], 
                    checkForLoops: function() {
                        for (var i = 0; i < this.callChain.length; i++) {
                            if (this.callChain[i].caller == this.callChain[i].callee) {
                                return true;
                            }
                            for (var j = 0; j < this.callChain.length; j++) {
                                if (this.callChain[j].caller == this.callChain[i].callee && this.callChain[j].callee == this.callChain[i].caller) {
                                    return true;
                                }
                            }
                        }
                        return false;
                    }
                };
        }
    */
    loadContext.getLoadStateAsync = function(ittfDocumentUri,requestContext,callback) {
        if (!ModelProvider) {
            ModelProvider = require('./ittfModelProvider');
        }
        ModelProvider.createFromUri(ittfDocumentUri, requestContext, function(err,createdProvider) {
            if (err) {
                return callback(err);
            }
            callback(null, {
                requestContext: requestContext, 
                provider: createdProvider, 
                getPrimaryIttfModel: function() {
                    return createdProvider.getPrimaryIttfModel();
                }, 
                callChain: [], 
                checkForLoops: function() {
                    for (var i = 0; i < this.callChain.length; i++) {
                        if (this.callChain[i].caller == this.callChain[i].callee) {
                            return true;
                        }
                        for (var j = 0; j < this.callChain.length; j++) {
                            if ((this.callChain[j].caller == this.callChain[i].callee) && (this.callChain[j].callee == this.callChain[i].caller)) {
                                return true;
                            }
                        }
                    }
                    return false;
                }
            });
        });
    }
    return loadContext;
})();

module.exports = {
    loadContext: loadContext
};
