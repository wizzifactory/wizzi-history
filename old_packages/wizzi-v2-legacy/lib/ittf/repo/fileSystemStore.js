/*
    artifact generator: /wizzi/lib/artifacts/js/module/gen/main.js
    primary source IttfDocument: C:\My\wizzi\v2\sources\wizzi-2-boot\ittf\lib\ittf\repo\fileSystemStore.js.ittf
    utc time: Tue, 11 Jul 2017 18:50:00 GMT
*/
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var errors = require('./errors');
var file = require('../../util/file');
var FileSystemStore = (function () {
    function FileSystemStore() {
        _classCallCheck(this, FileSystemStore);
        this.storeKind = 'filesystem';
    }
    FileSystemStore.prototype.documentExists = function(filepath,callback) {
        var documentExists;
        try {
            documentExists = file.isFile(filepath);
        } catch (ex) {
            var error = new errors.RepoIOError(ex.message + '\nChecking documentExists', filepath);
            return callback(error);
        }
        callback(null, documentExists);
    }
    FileSystemStore.prototype.folderExistsSync = function(folderpath) {
        var folderExists;
        try {
            folderExists = file.isDirectory(folderpath);
        } catch (ex) {
            return(this.error(ex.message, folderpath, 'folderExistsSync')
            );
        }
        return folderExists;
    }
    FileSystemStore.prototype.getFoldersSync = function(parentFolderPath,options) {
        var folders;
        try {
            folders = file.getFolders(parentFolderPath, options);
        } catch (ex) {
            return(this.error(ex.message, parentFolderPath, 'getFolders')
            );
        }
        return folders;
    }
    FileSystemStore.prototype.getModelContent = function(filepath,callback) {
        var content;
        try {
            content = file.read(filepath);
        } catch (ex) {
            var error = new errors.RepoIOError(ex.message, filepath);
            return callback(error);
        }
        return callback(null, content);
    }
    FileSystemStore.prototype.error = function(message,path,method) {
        return {
                __is_error: true, 
                message: message, 
                path: path, 
                source: '/lib/ittf/repo/' + method
            };
    }
    return FileSystemStore;
})();


module.exports = FileSystemStore;
