/*
    artifact generator: /wizzi/lib/artifacts/js/module/gen/main.js
    primary source IttfDocument: C:\My\wizzi\v2\sources\wizzi-2-boot\ittf\lib\artifact\genWriter.js.ittf
    utc time: Tue, 11 Jul 2017 18:50:00 GMT
*/
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var StringWriter = require('../util/stringwriter');
var verify = require('../util/verify');
var block = require('./block');
var interpolate = require('../util/interpolate');
var errors = require('../errors');
var GenWriter = (function () {
    function GenWriter(genconfig) {
        _classCallCheck(this, GenWriter);
        if (!verify.isObject(genconfig)) {
            throw new Error('GenWriter: genconfig argument must be an Object');
        }
        if (!verify.isObject(genconfig.options)) {
            throw new Error('GenWriter: genconfig.options argument must be an Object');
        }
        this.genconfig = genconfig;
        this.model = genconfig.model;
        this.srcPath = genconfig.srcPath;
        this.pman = genconfig.pman;
        this.block = new block(this.genconfig.options);
        this.values = this.genconfig.options.data || {};
    }
    GenWriter.prototype.forceIndent = function(value) {
        return this.block.forceIndent(value);
    }
    GenWriter.prototype.indent = function(value) {
        this.block.indent(value);
    }
    GenWriter.prototype.deindent = function(value) {
        this.block.deindent(value);
    }
    GenWriter.prototype.a = function(name,value) {
        this.values[name] = value;
    }
    GenWriter.prototype.g = function(name) {
        return this.values[name];
    }
    GenWriter.prototype.r = function(name) {
        if (this.values[name]) {
            delete (this.values[name]);
        }
    }
    GenWriter.prototype.w = function(text) {
        if (verify.isString(text)) {
            this.block.w(text.indexOf('{') > - (1) ? interpolate(text, this.values)
             : text);
        }
        else {
            this.block.w('');
        }
    }
    GenWriter.prototype.write = function(text) {
        if (!verify.isString(text)) {
            return ;
        }
        this.block.write(interpolate(text, this.values)
        );
    }
    GenWriter.prototype.writeFile = function(filePath) {
        this.block.writeFile(interpolate(filePath, this.values)
        );
    }
    GenWriter.prototype.toStream = function(stream) {
        this.block.toStream(stream);
    }
    GenWriter.prototype.getContent = function() {
        var sw = new StringWriter();
        this.block.toStream(sw);
        return sw.toString();
    }
    GenWriter.prototype.getContentInLine = function() {
        return verify.replaceAll(this.getContent(), '\n', '__1_2_3__')
        ;
    }
    GenWriter.prototype.error = function(message,node) {
        return new errors.NodeError(message, node);
    }
    GenWriter.prototype.artifactGenerationError = function(message,location,node) {
        errors.ArtifactGenerationError(message, location, node);
    }
    GenWriter.prototype.terminate = function() {
        delete this.pman;
        delete this.genconfig.pman;
        this.block.terminate();
    }
    GenWriter.prototype.hydrate = function(block,options) {
        this.block = new block(options);
        this.block.hydrate(block.lines, options);
    }
    GenWriter.prototype.toStringFromJSON = function(block,options) {
        if (!block || !block.lines) {
            return 'NO TEXT';
        }
        var gw = new GenWriter({
            options: options
        });
        gw.block.hydrate(block.lines, options);
        return gw.getContent();
    }
    return GenWriter;
})();


module.exports = GenWriter;
