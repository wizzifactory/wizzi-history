/*
    artifact generator: /wizzi/lib/artifacts/js/module/gen/main.js
    primary source IttfDocument: C:\My\wizzi\v2\sources\wizzi-2-boot\ittf\lib\production\context.js.ittf
    utc time: Tue, 11 Jul 2017 18:50:00 GMT
*/
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var path = require('path');
var util = require('util');
var file = require('../util/file');
var fail = require('../util/fail');
var ProductionContext = (function () {
    function ProductionContext() {
        _classCallCheck(this, ProductionContext);
        this.dump = false;
        this.ittfDocuments = {};
        this.ittfEvaluationScripts = {};
        this.ittfModels = {};
        this.evaluatedIttfModels = {};
        this.wizziModels = {};
        this.artifacts = [];
    }
    ProductionContext.prototype.setAclStat = function(aclstat) {
        this.aclstat = aclstat;
    }
    ProductionContext.prototype.addIttfDocument = function(uri,content) {
        if (this.ittfDocuments[uri]) {
            this.ittfDocuments[uri].cacheCount++;
        }
        else {
            this.ittfDocuments[uri] = {
                uri: uri, 
                content: content, 
                cacheCount: 0
            };
        }
    }
    ProductionContext.prototype.addIttfModelBuildUpScript = function(uri,ittfEvalScript) {
        this.ittfEvaluationScripts[uri] = {
            uri: uri, 
            ittfEvalScript: ittfEvalScript
        };
        if (this.dump) {
            file.write(path.join(path.dirname(uri), '_debug', path.basename(uri) + '.js.dump')
            , ittfEvalScript.toCode());
        }
    }
    ProductionContext.prototype.addMixedIttfModel = function(uri,ittfModel) {
        if (this.dump) {
            file.write(path.join(path.dirname(uri), '_debug', (path.basename(uri) + '.mixed.ittfModel.dump'))
            , ittfModel.dump());
        }
    }
    ProductionContext.prototype.addEvaluatedIttfModel = function(uri,ittfModel) {
        this.evaluatedIttfModels[uri] = ittfModel.dump(true);
        if (this.dump) {
            file.write(path.join(path.dirname(uri), '_debug', path.basename(uri) + '.evaluated.ittfModel.dump')
            , this.evaluatedIttfModels[uri]);
        }
    }
    ProductionContext.prototype.addIttfModel = function(uri,loadContext) {
        this.ittfModels[uri] = {
            uri: uri, 
            loadContext: loadContext
        };
    }
    ProductionContext.prototype.addWizziModel = function(uri,wizziModel) {
        this.wizziModels[uri] = {
            uri: uri, 
            wizziModel: wizziModel
        };
    }
    ProductionContext.prototype.addArtifact = function(artifact) {
        this.artifacts.push(artifact);
    }
    ProductionContext.prototype.raiseIttfEvaluationScriptError = function(uri,exception) {
        var script = this.ittfEvaluationScripts[uri];
        if (script && script.ittfEvalScript && exception && exception.lineNumber) {
            var lines = script.ittfEvalScript.getErrorLines(exception).join('\n')
            ;
            exception.message = '\nError evaluating ittf in uri: ' + uri + '\n' + lines + '\n';
        }
        else {
            exception.message = '\nError evaluating ittf in uri: ' + uri + '\n' + exception.message + '\n';
        }
        fail.warn(exception);
        throw exception;
    }
    return ProductionContext;
})();

module.exports = {
    ProductionContext: ProductionContext
};
