/*
    artifact generator: /wizzi/lib/artifacts/js/module/gen/main.js
    primary source IttfDocument: C:\My\wizzi\v2\packages\wizzi\lib\artifacts\wizzischema\model\gen\ittf\wizzischema-model.js.ittf
    utc time: Tue, 11 Jul 2017 18:44:19 GMT
*/
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');

var md = module.exports = {};

var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row,col,sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();


md.wzSourceLineInfo = wzSourceLineInfo;
var wfjobBase = (function () {
    function wfjobBase(name,sourceLineInfo) {
        _classCallCheck(this, wfjobBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    wfjobBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    wfjobBase.prototype.wzSourceFilepath = function(sourceKey) {
        return this.wzRoot().loadContext.getIttfDocumentUri(sourceKey);
    }
    wfjobBase.prototype.wzVerify = function() {
    }
    wfjobBase.prototype.wzInitialize = function() {
    }
    wfjobBase.prototype.wzInitializeAsync = function(ctx,callback) {
        callback(null);
    }
    wfjobBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    wfjobBase.prototype.wzLoadToChildColl = function(child,type,coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    wfjobBase.prototype.wzLoadToChildren = function(child,type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    wfjobBase.prototype.wzLoadOneToOne = function(child,type,fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    wfjobBase.prototype.error = function(message,node) {
        throw new md.wfjobException(message, node, this);
    }
    wfjobBase.prototype.toJsonProperties = function(result) {
        result.wzTag = this.wzTag;
        result.wzName = this.wzName;
    }
    wfjobBase.prototype.toJsonChildren = function(result) {
        if (this.wzChildren.length > 0) {
            var children = [];
            var i, i_len=this.wzChildren.length, item;
            for (i=0; i<i_len; i++) {
                item = this.wzChildren[i];
                children.push(item.toJson());
            }
            result.wzChildren = children;
        }
    }
    return wfjobBase;
})();


md.wfjobBase = wfjobBase;

/**
    element wfjob
     The root element of the wfjob schema.
*/
var wfjob = (function (wfjobBase) {
    _inherits(wfjob, wfjobBase);
    function wfjob(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(wfjob.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, wfjob);
        this.wzElement = "wfjob";
        // The base path for the source models used by this "wfjob".
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.modelsBaseFolder = null
        // The base folder path for the generated artifacts.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.destBaseFolder = null
        // relation require
        this.requires = [];
        // relation model
        this.models = [];
        // relation line
        this.lines = [];
        // relation production
        this.productions = [];
    }
    wfjob.prototype.addRequire = function(name,sourceLineInfo) {
        var retval = new md.require(name, sourceLineInfo);
        retval.wzParent = this;
        this.requires.push(retval);
        return retval;
    }
    wfjob.prototype.getRequire = function(name) {
        var found = null;
        this.requires.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    wfjob.prototype.addModel = function(name,sourceLineInfo) {
        var retval = new md.model(name, sourceLineInfo);
        retval.wzParent = this;
        this.models.push(retval);
        return retval;
    }
    wfjob.prototype.getModel = function(name) {
        var found = null;
        this.models.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    wfjob.prototype.addLine = function(name,sourceLineInfo) {
        var retval = new md.line(name, sourceLineInfo);
        retval.wzParent = this;
        this.lines.push(retval);
        return retval;
    }
    wfjob.prototype.getLine = function(name) {
        var found = null;
        this.lines.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    wfjob.prototype.addProduction = function(name,sourceLineInfo) {
        var retval = new md.production(name, sourceLineInfo);
        retval.wzParent = this;
        this.productions.push(retval);
        return retval;
    }
    wfjob.prototype.getProduction = function(name) {
        var found = null;
        this.productions.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    wfjob.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    wfjob.prototype.toJsonProperties = function(result) {
        md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.modelsBaseFolder)) {
            result["modelsBaseFolder"] = this.modelsBaseFolder;
        }
        if (!isEmpty(this.destBaseFolder)) {
            result["destBaseFolder"] = this.destBaseFolder;
        }
    }
    wfjob.prototype.toJsonChildren = function(result) {
        md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.requires.length, item;
        for (i=0; i<i_len; i++) {
            item = this.requires[i];
            items.push(item.toJson());
        }
        result['requires'] = items;
        items = [];
        var i, i_len=this.models.length, item;
        for (i=0; i<i_len; i++) {
            item = this.models[i];
            items.push(item.toJson());
        }
        result['models'] = items;
        items = [];
        var i, i_len=this.lines.length, item;
        for (i=0; i<i_len; i++) {
            item = this.lines[i];
            items.push(item.toJson());
        }
        result['lines'] = items;
        items = [];
        var i, i_len=this.productions.length, item;
        for (i=0; i<i_len; i++) {
            item = this.productions[i];
            items.push(item.toJson());
        }
        result['productions'] = items;
    }
    wfjob.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'l') {
            if (name === 'line') {
                return this.wzLoadToChildColl(child, md.line, this.lines);
            }
        }
        if (_l == 5 && _ch == 'm') {
            if (name === 'model') {
                return this.wzLoadToChildColl(child, md.model, this.models);
            }
        }
        if (_l == 7 && _ch == 'r') {
            if (name === 'require') {
                return this.wzLoadToChildColl(child, md.require, this.requires);
            }
        }
        if (_l == 10 && _ch == 'p') {
            if (name === 'production') {
                return this.wzLoadToChildColl(child, md.production, this.productions);
            }
        }
        if (_l == 16 && _ch == 'd') {
            if (name === 'dest-base-folder') {
                this.destBaseFolder = child.v; return true;
            }
            else if (name === 'dest_base_folder') {
                this.destBaseFolder = child.v; return true;
            }
        }
        if (_l == 18 && _ch == 'm') {
            if (name === 'models-base-folder') {
                this.modelsBaseFolder = child.v; return true;
            }
            else if (name === 'models_base_folder') {
                this.modelsBaseFolder = child.v; return true;
            }
        }
        return ok;
    }
    wfjob.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.wfjobException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    wfjob.prototype.wzVerify = function(ctx) {
        var i, i_len=this.requires.length, item;
        for (i=0; i<i_len; i++) {
            item = this.requires[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.models.length, item;
        for (i=0; i<i_len; i++) {
            item = this.models[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.lines.length, item;
        for (i=0; i<i_len; i++) {
            item = this.lines[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.productions.length, item;
        for (i=0; i<i_len; i++) {
            item = this.productions[i];
            item.wzVerify(ctx);
        }
        md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    wfjob.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.requires.length, item;
        for (i=0; i<i_len; i++) {
            item = this.requires[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.models.length, item;
        for (i=0; i<i_len; i++) {
            item = this.models[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.lines.length, item;
        for (i=0; i<i_len; i++) {
            item = this.lines[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.productions.length, item;
        for (i=0; i<i_len; i++) {
            item = this.productions[i];
            item.wzInitialize(ctx);
        }
        md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return wfjob;
})(wfjobBase);


md.wfjob = wfjob;
/**
    element require
     Requires a WizziFactoryPackage.
     The IttfNodeValue is the package name.
     If the package is not globally installed must be a fully qualified path.
*/
var require = (function (wfjobBase) {
    _inherits(require, wfjobBase);
    function require(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(require.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, require);
        this.wzElement = "require";
    }
    require.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    require.prototype.toJsonProperties = function(result) {
        md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    require.prototype.toJsonChildren = function(result) {
        md.wfjobBase.prototype.toJsonChildren.call(this, result);
    }
    return require;
})(wfjobBase);


md.require = require;
/**
    element model
     A Wizzi model instance acting as a data context during the evaluation of another "model"
     or during an artifact generation.
     The IttfNodeValue is the name of the model.
     The name of the model must be unique in a "wfjob"; it will become the default export name of the context
     value that exposes the model during evaluations.
     A "model" will be loaded once, and will be reused if
     referenced in many evaluations.
*/
var model = (function (wfjobBase) {
    _inherits(model, wfjobBase);
    function model(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(model.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, model);
        this.wzElement = "model";
        /**
             The path to the PrimaryIttfDocument of the "model".
             When relative, the base path is the "modelsBaseFolder"
             declared on the "wfjob" element.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.src = null
        // The name of the WizziSchema that will validate the "model".
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.schema = null
        /**
             A filepath where the loaded must be dumped for test.
             The model must implement the toJson method. See the "exportTo" attribute in wizzischema root nodes.
             When declared the loaded model is JSON.stringyfied and written
             to the "dumpFile" filepath.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.dumpFile = null
        // relation modelRef
        // References to "model" instances acting as data context during this "model" evaluation.
        // A "model" is referenced by its name.
        this.modelRefs = [];
    }
    model.prototype.addModelRef = function(name,sourceLineInfo) {
        var retval = new md.modelRef(name, sourceLineInfo);
        retval.wzParent = this;
        this.modelRefs.push(retval);
        return retval;
    }
    model.prototype.getModelRef = function(name) {
        var found = null;
        this.modelRefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    model.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    model.prototype.toJsonProperties = function(result) {
        md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.src)) {
            result["src"] = this.src;
        }
        if (!isEmpty(this.schema)) {
            result["schema"] = this.schema;
        }
        if (!isEmpty(this.dumpFile)) {
            result["dumpFile"] = this.dumpFile;
        }
    }
    model.prototype.toJsonChildren = function(result) {
        md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.modelRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelRefs[i];
            items.push(item.toJson());
        }
        result['modelRefs'] = items;
    }
    model.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 's') {
            if (name === 'src') {
                this.src = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'schema') {
                this.schema = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'm') {
            if (name === 'modelref') {
                return this.wzLoadToChildColl(child, md.modelRef, this.modelRefs);
            }
        }
        if (_l == 9 && _ch == 'd') {
            if (name === 'dump-file') {
                this.dumpFile = child.v; return true;
            }
            else if (name === 'dump_file') {
                this.dumpFile = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'm') {
            if (name === 'model-ref') {
                return this.wzLoadToChildColl(child, md.modelRef, this.modelRefs);
            }
        }
        return ok;
    }
    model.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.wfjobException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    model.prototype.wzVerify = function(ctx) {
        var i, i_len=this.modelRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelRefs[i];
            item.wzVerify(ctx);
        }
        md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    model.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.modelRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelRefs[i];
            item.wzInitialize(ctx);
        }
        md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return model;
})(wfjobBase);


md.model = model;
// element modelRef
var modelRef = (function (wfjobBase) {
    _inherits(modelRef, wfjobBase);
    function modelRef(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(modelRef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, modelRef);
        this.wzElement = "modelRef";
        /**
             The name of the context property that will expose the loaded model during
             an evaluation. Overrides the name of the "model" that is the default export name.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.exportName = null
        // relation transformer
        // A model may have one or more transformers.
        // Transformers are chained and the output of a transformation
        // is the input for the next one.
        this.transformers = [];
        // relation modelCollection
        // TODO This is a one-to-one relation, not yet implemented.
        // Single items of a collection contained in the "model" may act as data contexts
        // of artifacts where each collection item generates a separate artifact.
        this.modelCollections = [];
    }
    modelRef.prototype.addTransformer = function(name,sourceLineInfo) {
        var retval = new md.transformer(name, sourceLineInfo);
        retval.wzParent = this;
        this.transformers.push(retval);
        return retval;
    }
    modelRef.prototype.getTransformer = function(name) {
        var found = null;
        this.transformers.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    modelRef.prototype.addModelCollection = function(name,sourceLineInfo) {
        var retval = new md.modelCollection(name, sourceLineInfo);
        retval.wzParent = this;
        this.modelCollections.push(retval);
        return retval;
    }
    modelRef.prototype.getModelCollection = function(name) {
        var found = null;
        this.modelCollections.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    modelRef.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    modelRef.prototype.toJsonProperties = function(result) {
        md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.exportName)) {
            result["exportName"] = this.exportName;
        }
    }
    modelRef.prototype.toJsonChildren = function(result) {
        md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.transformers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.transformers[i];
            items.push(item.toJson());
        }
        result['transformers'] = items;
        items = [];
        var i, i_len=this.modelCollections.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelCollections[i];
            items.push(item.toJson());
        }
        result['modelCollections'] = items;
    }
    modelRef.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 9 && _ch == 'm') {
            if (name === 'modelcoll') {
                return this.wzLoadToChildColl(child, md.modelCollection, this.modelCollections);
            }
        }
        if (_l == 10 && _ch == 'm') {
            if (name === 'model-coll') {
                return this.wzLoadToChildColl(child, md.modelCollection, this.modelCollections);
            }
        }
        if (_l == 11 && _ch == 'e') {
            if (name === 'export-name') {
                this.exportName = child.v; return true;
            }
            else if (name === 'export_name') {
                this.exportName = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 't') {
            if (name === 'transformer') {
                return this.wzLoadToChildColl(child, md.transformer, this.transformers);
            }
        }
        return ok;
    }
    modelRef.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.wfjobException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    modelRef.prototype.wzVerify = function(ctx) {
        var i, i_len=this.transformers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.transformers[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.modelCollections.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelCollections[i];
            item.wzVerify(ctx);
        }
        md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    modelRef.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.transformers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.transformers[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.modelCollections.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelCollections[i];
            item.wzInitialize(ctx);
        }
        if (this.modelCollections.length > 0) {
            this.modelCollection = this.modelCollections[0];
            this.collName = this.modelCollection.wzName;
            this.collItemName = this.modelCollection.itemName;
            this.collPathTemplateValues = [];
            var i, i_len=this.modelCollection.pathTemplateValues.length, item;
            for (i=0; i<i_len; i++) {
                item = this.modelCollection.pathTemplateValues[i];
                this.collPathTemplateValues.push({
                    token: item.token, 
                    attribute: item.attribute, 
                    function: item.function
                });
            }
        }
        md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return modelRef;
})(wfjobBase);


md.modelRef = modelRef;
/**
    element modelCollection
     Single items of a collection contained in a "model" may act as data contexts
     of artifacts where each collection item generates a separate artifact.
     This element, contained in a "modelRef" element, specifies:
     . the collection name: the IttfNodeValue of this element
     . the export name of the collection item when acting as a data context: the "item-name" attribute
     . the property names of the collection item that will be used to build the destination path
     of the artifact: the "pathTemplateValues" child elements
*/
var modelCollection = (function (wfjobBase) {
    _inherits(modelCollection, wfjobBase);
    function modelCollection(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(modelCollection.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, modelCollection);
        this.wzElement = "modelCollection";
        // The export name of a collection item when acting as a data context.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.itemName = null
        // relation pathTemplateValue
        this.pathTemplateValues = [];
    }
    modelCollection.prototype.addPathTemplateValue = function(name,sourceLineInfo) {
        var retval = new md.pathTemplateValue(name, sourceLineInfo);
        retval.wzParent = this;
        this.pathTemplateValues.push(retval);
        return retval;
    }
    modelCollection.prototype.getPathTemplateValue = function(name) {
        var found = null;
        this.pathTemplateValues.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    modelCollection.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    modelCollection.prototype.toJsonProperties = function(result) {
        md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.itemName)) {
            result["itemName"] = this.itemName;
        }
    }
    modelCollection.prototype.toJsonChildren = function(result) {
        md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.pathTemplateValues.length, item;
        for (i=0; i<i_len; i++) {
            item = this.pathTemplateValues[i];
            items.push(item.toJson());
        }
        result['pathTemplateValues'] = items;
    }
    modelCollection.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 9 && _ch == 'i') {
            if (name === 'item-name') {
                this.itemName = child.v; return true;
            }
            else if (name === 'item_name') {
                this.itemName = child.v; return true;
            }
        }
        if (_l == 17 && _ch == 'p') {
            if (name === 'pathtemplatevalue') {
                return this.wzLoadToChildColl(child, md.pathTemplateValue, this.pathTemplateValues);
            }
        }
        if (_l == 19 && _ch == 'p') {
            if (name === 'path-template-value') {
                return this.wzLoadToChildColl(child, md.pathTemplateValue, this.pathTemplateValues);
            }
        }
        return ok;
    }
    modelCollection.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.wfjobException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    modelCollection.prototype.wzVerify = function(ctx) {
        var i, i_len=this.pathTemplateValues.length, item;
        for (i=0; i<i_len; i++) {
            item = this.pathTemplateValues[i];
            item.wzVerify(ctx);
        }
        md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    modelCollection.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.pathTemplateValues.length, item;
        for (i=0; i<i_len; i++) {
            item = this.pathTemplateValues[i];
            item.wzInitialize(ctx);
        }
        md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return modelCollection;
})(wfjobBase);


md.modelCollection = modelCollection;
// element pathTemplateValue
var pathTemplateValue = (function (wfjobBase) {
    _inherits(pathTemplateValue, wfjobBase);
    function pathTemplateValue(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(pathTemplateValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, pathTemplateValue);
        this.wzElement = "pathTemplateValue";
        /**
             The property of the context object (a collection item) containing the value which will replace
             the "token" value in the generated artifact path template.
             Is alternative to "function"
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.attribute = null
        /**
             The function of the context object (a collection item) that returns the value which will replace
             the "token" value in the generated artifact path template.
             Is alternative to "attribute"
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.function = null
        /**
             The token that will be replaced by the value returned accessing "attribute" or calling "function"
             on a context object.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.token = null
    }
    pathTemplateValue.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    pathTemplateValue.prototype.toJsonProperties = function(result) {
        md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.attribute)) {
            result["attribute"] = this.attribute;
        }
        if (!isEmpty(this.function)) {
            result["function"] = this.function;
        }
        if (!isEmpty(this.token)) {
            result["token"] = this.token;
        }
    }
    pathTemplateValue.prototype.toJsonChildren = function(result) {
        md.wfjobBase.prototype.toJsonChildren.call(this, result);
    }
    pathTemplateValue.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 't') {
            if (name === 'token') {
                this.token = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'f') {
            if (name === 'function') {
                this.function = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'a') {
            if (name === 'attribute') {
                this.attribute = child.v; return true;
            }
        }
        return ok;
    }
    pathTemplateValue.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.wfjobException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return pathTemplateValue;
})(wfjobBase);


md.pathTemplateValue = pathTemplateValue;
/**
    element transformer
     A model transformer
     The IttfNodeValue is the transformer path {wizzischema}/{transformerName}
     to be found in {wizziPackage}/artifacts/{wizzischema}/{transformerName}/trans/main.js
*/
var transformer = (function (wfjobBase) {
    _inherits(transformer, wfjobBase);
    function transformer(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(transformer.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, transformer);
        this.wzElement = "transformer";
        /**
             A filepath where the transformed model must be dumped for test.
             When declared the transformed model is JSON.stringyfied and written
             to the "dumpFile" filepath.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.dumpFile = null
    }
    transformer.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    transformer.prototype.toJsonProperties = function(result) {
        md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.dumpFile)) {
            result["dumpFile"] = this.dumpFile;
        }
    }
    transformer.prototype.toJsonChildren = function(result) {
        md.wfjobBase.prototype.toJsonChildren.call(this, result);
    }
    transformer.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 9 && _ch == 'd') {
            if (name === 'dump-file') {
                this.dumpFile = child.v; return true;
            }
            else if (name === 'dump_file') {
                this.dumpFile = child.v; return true;
            }
        }
        return ok;
    }
    transformer.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.wfjobException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return transformer;
})(wfjobBase);


md.transformer = transformer;
/**
    element artifact
     An artifact to be generated.
     It is a child element of a "line" element.
    
     Can be one of:
     . A Wizzi model instance, acting as a template, which WizziSchema targets a code language technology.
     . A swig template.
     . A code write generation that takes in input a context of one or more WizziModels.
     . A final artifact to be copied to a destination folder without transformations.
     . A reference to another WfJob, to be executed before the current WfJob where the artifact is declared.
    
     Context value objects for template transformations are declared in the "model" element, child of the "wfjob" root element
     and may be referenced in the elements "modelRef", children of the "artifact" element.
    
     The "src" or "destPath" attributes of an "artifact" element may contain tokens enclosed in graph parens.
     When one of the "modelRef@" is a collection model, the artifact generation is repeated
     for each item of the collection and the "src" or "destPath" attributes become the template of the destination path.
     See the "pathTemplateValues" child elements of the "modelRef" for the values that will replace the tokens.
    
     Example
    
     artifact
     dest-path app/db/{table}Datalayer.js.ittf
     ...
     model-ref rdbms
     model-coll tables
     item-name table
     path-template-value
     attribute tableName
     token table
    
     model rdbms
     ...
    
     the Wizzi model instance after loading rdbms: {
     ....
     tables: [{
     tableName: 'user',
     ...
     },{
     ...
     }]
     }
    
     will produce an artifact of path .../app/db/userDatalayer.js, and as many as the items in the tables collection.
    
*/
var artifact = (function (wfjobBase) {
    _inherits(artifact, wfjobBase);
    function artifact(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(artifact.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, artifact);
        this.wzElement = "artifact";
        /**
             The path to the primary source document of the artifact.
             If relative, the base path is the cwdFolder of the parent line.
             Can be a glob pattern
             If the artifact is a code write artifact the @src@ attribute must not be declared.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.src = null
        /**
             files returned by the src pattern to be ignored
             Can be a glob pattern
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.ignore = null
        /**
             When the artifact source is an Ittf document, is the schema that will load and validate the Wizzi model instance.
             May be null if the artifact is a swig template or a final artifact.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.schema = null
        /**
             Indicator that the artifact source document is a wizzi factory job (WfJob).
             The job will be executed before any other artifact production of the current WfJob.
             This could be autodected from the schema, but autodetection would forbid other uses or transformations
             of a "wfjob" model, so the indicator is required.
        */
        this.isWfJob = false;
        /**
             When the artifact is a Wizzi model instance, acting as a template is the name of
             the artifact generator that will transform the template.
             When the artifact is a 'swig template' must contain 'swig'.
             When the artifact is a code write generation or a final artifact must be omitted.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.generator = null
        /**
             The artifact source file path (@src@) is the default relative destination path
             of the generated artifact. When set, this attribute overrides the default.
             It may be an absolute path.
             If the artifact is a code write generation the @destPath@ attribute must be declared.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.destPath = null
        /**
             The document path extension of the generated artifact. Optional. The default is the #src# extension
             without the ending '.ittf' string, if present.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.extension = null
        // relation transformer
        // When the artifact source is an Ittf document, the loaded WizziModel may need
        // one or more transformations before being passed to the artifact generator.
        // Transformers are chained and the output of a transformation
        // is the input for the next one.
        this.transformers = [];
        // relation modelRef
        // References to Wizzi model instances acting as transformation contexts for both wizzi and swig templates.
        // When a final artifact must not be declared.
        this.modelRefs = [];
    }
    artifact.prototype.addTransformer = function(name,sourceLineInfo) {
        var retval = new md.transformer(name, sourceLineInfo);
        retval.wzParent = this;
        this.transformers.push(retval);
        return retval;
    }
    artifact.prototype.getTransformer = function(name) {
        var found = null;
        this.transformers.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    artifact.prototype.addModelRef = function(name,sourceLineInfo) {
        var retval = new md.modelRef(name, sourceLineInfo);
        retval.wzParent = this;
        this.modelRefs.push(retval);
        return retval;
    }
    artifact.prototype.getModelRef = function(name) {
        var found = null;
        this.modelRefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    artifact.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    artifact.prototype.toJsonProperties = function(result) {
        md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.src)) {
            result["src"] = this.src;
        }
        if (!isEmpty(this.ignore)) {
            result["ignore"] = this.ignore;
        }
        if (!isEmpty(this.schema)) {
            result["schema"] = this.schema;
        }
        result["isWfJob"] = this.isWfJob;
        if (!isEmpty(this.generator)) {
            result["generator"] = this.generator;
        }
        if (!isEmpty(this.destPath)) {
            result["destPath"] = this.destPath;
        }
        if (!isEmpty(this.extension)) {
            result["extension"] = this.extension;
        }
    }
    artifact.prototype.toJsonChildren = function(result) {
        md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.transformers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.transformers[i];
            items.push(item.toJson());
        }
        result['transformers'] = items;
        items = [];
        var i, i_len=this.modelRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelRefs[i];
            items.push(item.toJson());
        }
        result['modelRefs'] = items;
    }
    artifact.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 's') {
            if (name === 'src') {
                this.src = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'i') {
            if (name === 'ignore') {
                this.ignore = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'schema') {
                this.schema = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'm') {
            if (name === 'modelref') {
                return this.wzLoadToChildColl(child, md.modelRef, this.modelRefs);
            }
        }
        if (_l == 9 && _ch == 'd') {
            if (name === 'dest-path') {
                this.destPath = child.v; return true;
            }
            else if (name === 'dest_path') {
                this.destPath = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'e') {
            if (name === 'extension') {
                this.extension = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'g') {
            if (name === 'generator') {
                this.generator = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'i') {
            if (name === 'is-wf-job') {
                this.isWfJob = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_wf_job') {
                this.isWfJob = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 9 && _ch == 'm') {
            if (name === 'model-ref') {
                return this.wzLoadToChildColl(child, md.modelRef, this.modelRefs);
            }
        }
        if (_l == 11 && _ch == 't') {
            if (name === 'transformer') {
                return this.wzLoadToChildColl(child, md.transformer, this.transformers);
            }
        }
        return ok;
    }
    artifact.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.wfjobException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    artifact.prototype.wzVerify = function(ctx) {
        var i, i_len=this.transformers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.transformers[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.modelRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelRefs[i];
            item.wzVerify(ctx);
        }
        md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    artifact.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.transformers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.transformers[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.modelRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelRefs[i];
            item.wzInitialize(ctx);
        }
        md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return artifact;
})(wfjobBase);


md.artifact = artifact;
/**
    element line
     A line is a group of artifacts having the same "cwdFolder".
*/
var line = (function (wfjobBase) {
    _inherits(line, wfjobBase);
    function line(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(line.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, line);
        this.wzElement = "line";
        // The source folder of the artifact templates of this line.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.cwdFolder = null
        /**
             The destination folder of the generated artifacts of this line.
             Overrides the attribute "destFolder" of the "production" element.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.destFolder = null
        // relation artifact
        // The artifacts of the "line"
        this.artifacts = [];
    }
    line.prototype.addArtifact = function(name,sourceLineInfo) {
        var retval = new md.artifact(name, sourceLineInfo);
        retval.wzParent = this;
        this.artifacts.push(retval);
        return retval;
    }
    line.prototype.getArtifact = function(name) {
        var found = null;
        this.artifacts.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    line.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    line.prototype.toJsonProperties = function(result) {
        md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.cwdFolder)) {
            result["cwdFolder"] = this.cwdFolder;
        }
        if (!isEmpty(this.destFolder)) {
            result["destFolder"] = this.destFolder;
        }
    }
    line.prototype.toJsonChildren = function(result) {
        md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.artifacts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.artifacts[i];
            items.push(item.toJson());
        }
        result['artifacts'] = items;
    }
    line.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 8 && _ch == 'a') {
            if (name === 'artifact') {
                return this.wzLoadToChildColl(child, md.artifact, this.artifacts);
            }
        }
        if (_l == 10 && _ch == 'c') {
            if (name === 'cwd-folder') {
                this.cwdFolder = child.v; return true;
            }
            else if (name === 'cwd_folder') {
                this.cwdFolder = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'd') {
            if (name === 'dest-folder') {
                this.destFolder = child.v; return true;
            }
            else if (name === 'dest_folder') {
                this.destFolder = child.v; return true;
            }
        }
        return ok;
    }
    line.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.wfjobException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    line.prototype.wzVerify = function(ctx) {
        var i, i_len=this.artifacts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.artifacts[i];
            item.wzVerify(ctx);
        }
        md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    line.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.artifacts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.artifacts[i];
            item.wzInitialize(ctx);
        }
        md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return line;
})(wfjobBase);


md.line = line;
/**
    element lineRef
     A reference to a line.
*/
var lineRef = (function (wfjobBase) {
    _inherits(lineRef, wfjobBase);
    function lineRef(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(lineRef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, lineRef);
        this.wzElement = "lineRef";
    }
    lineRef.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    lineRef.prototype.toJsonProperties = function(result) {
        md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    lineRef.prototype.toJsonChildren = function(result) {
        md.wfjobBase.prototype.toJsonChildren.call(this, result);
    }
    return lineRef;
})(wfjobBase);


md.lineRef = lineRef;
/**
    element production
     A job execution unit that generates a set of Software artifacts
     into one destination folder.
*/
var production = (function (wfjobBase) {
    _inherits(production, wfjobBase);
    function production(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(production.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, production);
        this.wzElement = "production";
        // The destination folder of the generated artifacts.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.destFolder = null
        // relation modelRef
        // References to the context WizziWodels used by this "production".
        this.modelRefs = [];
        // relation lineRef
        // References to the "line(s)" to be generated.
        this.lineRefs = [];
    }
    production.prototype.addModelRef = function(name,sourceLineInfo) {
        var retval = new md.modelRef(name, sourceLineInfo);
        retval.wzParent = this;
        this.modelRefs.push(retval);
        return retval;
    }
    production.prototype.getModelRef = function(name) {
        var found = null;
        this.modelRefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    production.prototype.addLineRef = function(name,sourceLineInfo) {
        var retval = new md.lineRef(name, sourceLineInfo);
        retval.wzParent = this;
        this.lineRefs.push(retval);
        return retval;
    }
    production.prototype.getLineRef = function(name) {
        var found = null;
        this.lineRefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    production.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    production.prototype.toJsonProperties = function(result) {
        md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.destFolder)) {
            result["destFolder"] = this.destFolder;
        }
    }
    production.prototype.toJsonChildren = function(result) {
        md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.modelRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelRefs[i];
            items.push(item.toJson());
        }
        result['modelRefs'] = items;
        items = [];
        var i, i_len=this.lineRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.lineRefs[i];
            items.push(item.toJson());
        }
        result['lineRefs'] = items;
    }
    production.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 7 && _ch == 'l') {
            if (name === 'lineref') {
                return this.wzLoadToChildColl(child, md.lineRef, this.lineRefs);
            }
        }
        if (_l == 8 && _ch == 'l') {
            if (name === 'line-ref') {
                return this.wzLoadToChildColl(child, md.lineRef, this.lineRefs);
            }
        }
        if (_l == 8 && _ch == 'm') {
            if (name === 'modelref') {
                return this.wzLoadToChildColl(child, md.modelRef, this.modelRefs);
            }
        }
        if (_l == 9 && _ch == 'm') {
            if (name === 'model-ref') {
                return this.wzLoadToChildColl(child, md.modelRef, this.modelRefs);
            }
        }
        if (_l == 11 && _ch == 'd') {
            if (name === 'dest-folder') {
                this.destFolder = child.v; return true;
            }
            else if (name === 'dest_folder') {
                this.destFolder = child.v; return true;
            }
        }
        return ok;
    }
    production.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.wfjobException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    production.prototype.wzVerify = function(ctx) {
        var i, i_len=this.modelRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelRefs[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.lineRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.lineRefs[i];
            item.wzVerify(ctx);
        }
        md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    production.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.modelRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelRefs[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.lineRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.lineRefs[i];
            item.wzInitialize(ctx);
        }
        this.wfjob = this.wzParent;
        var i, i_len=this.modelRefs.length, modelRef;
        for (i=0; i<i_len; i++) {
            modelRef = this.modelRefs[i];
            var model = this.wfjob.getModel(modelRef.wzName);
            if (model == null) {
                this.error('Model ' + modelRef.wzName + ' not found.', modelRef);
            }
            modelRef.___model = model;
        }
        this.lines = [];
        var i, i_len=this.lineRefs.length, lineRef;
        for (i=0; i<i_len; i++) {
            lineRef = this.lineRefs[i];
            var line = this.wfjob.getLine(lineRef.wzName);
            if (line == null) {
                this.error('line ' + lineRef.wzName + ' not found.', lineRef);
            }
            this.lines.push(line);
            var j, j_len=line.artifacts.length, artifact;
            for (j=0; j<j_len; j++) {
                artifact = line.artifacts[j];
                var k, k_len=artifact.modelRefs.length, modelRef;
                for (k=0; k<k_len; k++) {
                    modelRef = artifact.modelRefs[k];
                    var model = this.wfjob.getModel(modelRef.wzName);
                    if (model == null) {
                        this.error('Model ' + modelRef.wzName + ' not found.', modelRef);
                    }
                    modelRef.___model = model;
                }
            }
        }
        md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return production;
})(wfjobBase);


md.production = production;
md.__tagElementMapping = { 'model-ref': 'modelRef', 'modelref': 'modelRef', 'model-coll': 'modelCollection', 'modelcoll': 'modelCollection', 'path-template-value': 'pathTemplateValue', 'pathtemplatevalue': 'pathTemplateValue', 'line-ref': 'lineRef', 'lineref': 'lineRef' };
var wfjobException = (function () {
    function wfjobException(message,node,instance) {
        _classCallCheck(this, wfjobException);
        // TODO node seems superflous
        if (node && instance) {
            this.message = message + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        this.stack = new Error().stack;
        this.node = node;
    }
    return wfjobException;
})();


md.wfjobException = wfjobException;
var wfjobContext = (function () {
    function wfjobContext() {
        _classCallCheck(this, wfjobContext);
        this.validationErrors = [];
    }
    wfjobContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    wfjobContext.prototype.addError = function(message,node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at);
    }
    return wfjobContext;
})();


md.wfjobContext = wfjobContext;
function parsestring(value,defaultValue,node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}

function parseboolean(value,defaultValue,node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    if (!isBoolean(value)) {
        throw new nodeException('Must be a boolean value (\"true\" or \"false\"), got:' + value, node);
    }
    return value === 'true' ? true : false;
}

function isBoolean(value) {
    return value === 'true' || value === 'false';
}

function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}

function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}


