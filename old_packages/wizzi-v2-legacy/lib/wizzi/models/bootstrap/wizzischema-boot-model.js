/*
    artifact generator: /wizzi/lib/artifacts/js/module/gen/main.js
    primary source IttfDocument: C:\My\wizzi\v2\sources\wizzi-2-boot\ittf\lib\wizzi\models\bootstrap\wizzischema-boot-model.js.ittf
    utc time: Tue, 11 Jul 2017 18:50:00 GMT
*/
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var _ = require('lodash');
var stringify = require('json-stringify-safe');
var schemautil = require('./util');
var md = module.exports = {};
var Node = (function () {
    function Node(wzName) {
        _classCallCheck(this, Node);
        this.wzName = wzName;
        this.wzId = schemautil.getIdentifier(wzName, true);
        this.comments = [];
    }
    Node.prototype.ensureName = function(minLength) {
        var ml = typeof minLength === 'undefined' ? 1 : minLength;
        var empty = !schemautil.isNotEmpty(this.wzName);
        return !empty && this.wzName.length >= ml;
    }
    Node.prototype.wzInitialize = function(ctx) {
    }
    Node.prototype.wzVerify = function(ctx) {
    }
    Node.prototype.importComments = function(other) {
        var i, i_len=other.comments.length, comment;
        for (i=0; i<i_len; i++) {
            comment = other.comments[i];
            this.addComment(comment.wzName);
        }
    }
    Node.prototype.addComment = function(name) {
        var item = new Comment(name);
        item.wzParent = this;
        this.comments.push(item);
        return item;
    }
    Node.prototype.importRestricts = function(other) {
        var i, i_len=other.restricts.length, restrictFrom;
        for (i=0; i<i_len; i++) {
            restrictFrom = other.restricts[i];
            var restrict = this.addRestrict(restrictFrom.wzName);
            restrict.importComments(restrictFrom);
            var j, j_len=restrictFrom.facets.length, facetFrom;
            for (j=0; j<j_len; j++) {
                facetFrom = restrictFrom.facets[j];
                if (facetFrom.wzElement === 'enumFacet') {
                    var enumFacet = restrict.addEnumFacet(facetFrom.wzName);
                    enumFacet.importComments(facetFrom);
                }
            }
        }
    }
    Node.prototype.addRestrict = function(name) {
        var item = new Restrict(name);
        item.wzParent = this;
        this.restricts.push(item);
        return item;
    }
    Node.prototype.importMethods = function(other) {
        var i, i_len=other.methods.length, methodFrom;
        for (i=0; i<i_len; i++) {
            methodFrom = other.methods[i];
            var method = this.addMethod(methodFrom.wzName);
            method.emitKey = methodFrom.emitKey;
            method.importComments(methodFrom);
            var j, j_len=methodFrom.params.length, paramFrom;
            for (j=0; j<j_len; j++) {
                paramFrom = methodFrom.params[j];
                method.addParam(paramFrom.wzName);
            }
            var j, j_len=methodFrom.requires.length, requireFrom;
            for (j=0; j<j_len; j++) {
                requireFrom = methodFrom.requires[j];
                var require = method.addRequire(requireFrom.wzName);
                require.declareVar = requireFrom.declareVar;
                require.invoke = requireFrom.invoke;
                require.kind = requireFrom.kind;
            }
            var j, j_len=methodFrom.statements.length, statementFrom;
            for (j=0; j<j_len; j++) {
                statementFrom = methodFrom.statements[j];
                method.importStatement(statementFrom);
            }
        }
    }
    Node.prototype.addMethod = function(name) {
        var item = new Method(name);
        item.wzParent = this;
        this.methods.push(item);
        return item;
    }
    return Node;
})();


md.Node = Node;
var Attribute = (function (Node) {
    _inherits(Attribute, Node);
    function Attribute(name) {
        _get(Object.getPrototypeOf(Attribute.prototype), 'constructor', this).call(this, name);
        _classCallCheck(this, Attribute);
        this.wzElement = 'attribute';
        this.restricts = [];
        this.type = 'string';
        this.isReadOnly = false;
        this.isCalculated = false;
        this.calculated = 'null';
        this.default = null;
        this.defaultWhenDeclared = null;
        this.tagInternal = null;
    }
    Attribute.prototype.wzVerify = function(ctx) {
        this.wzId = schemautil.getIdentifier(this.wzName, false);
        this.wzIdPlural = schemautil.pluralize(this.wzId);
        this.tagName = this.tagInternal || this.wzName;
        this.jsType = this.type;
    }
    Attribute.prototype.wzInitialize = function(ctx) {
    }
    Attribute.prototype.allowedDeclaration = function() {
        var enums = this.getEnumFacets();
        if (enums.length > 0) {
            var sb = [];
            sb.push("this.allowed" + this.wzIdPlural.toUpperCase() + " = [ ");
            var first = true;
            var i, i_len=enums.length, facet;
            for (i=0; i<i_len; i++) {
                facet = enums[i];
                if (!first) {
                    sb.push(", ");
                }
                sb.push('"' + schemautil.replaceAll(facet.wzName, "\"", "\\\"") + '"');
                first = false;
            }
            sb.push('];');
            return sb.join('');
        }
        else {
            return null;
        }
    }
    Attribute.prototype.getEnumFacets = function() {
        var ret = [];
        var i, i_len=this.restricts.length, restrict;
        for (i=0; i<i_len; i++) {
            restrict = this.restricts[i];
            var j, j_len=restrict.facets.length, facet;
            for (j=0; j<j_len; j++) {
                facet = restrict.facets[j];
                if (facet.wzElement === 'enumFacet') {
                    if (_.find(ret, function(item) { return item.wzName === facet.wzName; }) == null) {
                        facet.wzName = facet.wzName.trim();
                        ret.push(facet);
                    }
                }
            }
        }
        return ret;
    }
    Attribute.prototype.getTags = function() {
        var ret = [];
        var ss = this.tagName.split('|');
        var i, i_len=ss.length, s;
        for (i=0; i<i_len; i++) {
            s = ss[i];
            ret.push(schemautil.replaceAll(s, "\"", "\\\""));
            if (s.indexOf("-") >= 0) {
                s = schemautil.replaceAll(s, "-", "_");
                ret.push(schemautil.replaceAll(s, "\"", "\\\""));
            }
        }
        return ret;
    }
    Attribute.prototype.getTagMatch = function(left) {
        var sb = [];
        var ss = this.tagName.split('|');
        var i, i_len=ss.length, s;
        for (i=0; i<i_len; i++) {
            s = ss[i];
            if (sb.length > 0) {
                sb.push(" || ");
            }
            sb.push(left + " == \"" + schemautil.replaceAll(s, "\"", "\\\"") + "\"");
            if (s.indexOf("-") >= 0) {
                s = schemautil.replaceAll(s, "-", "_");
                sb.push(left + " == \"" + schemautil.replaceAll(s, "\"", "\\\"") + "\"");
            }
        }
        return sb.join('');
    }
    return Attribute;
})(Node);


md.Attribute = Attribute;
md.Attribute.STRING = "string";
md.Attribute.BOOLEAN = "boolean";
md.Attribute.INTEGER = "integer";
md.Attribute.FLOAT = "float";
md.Attribute.DATE = "date";
var Restrict = (function (Node) {
    _inherits(Restrict, Node);
    function Restrict(name) {
        _get(Object.getPrototypeOf(Restrict.prototype), 'constructor', this).call(this, name);
        _classCallCheck(this, Restrict);
        this.wzElement = 'restrict';
        this.facets = [];
    }
    Restrict.prototype.addEnumFacet = function(name) {
        var facet = new EnumFacet(name);
        facet.wzParent = this;
        this.facets.push(facet);
        return facet;
    }
    return Restrict;
})(Node);


md.Restrict = Restrict;
var Facet = (function (Node) {
    _inherits(Facet, Node);
    function Facet(name) {
        _get(Object.getPrototypeOf(Facet.prototype), 'constructor', this).call(this, name);
        _classCallCheck(this, Facet);
        this.wzId = schemautil.getIdentifier(this.wzName, true);
        this.wzNameEscaped = schemautil.escapeString(this.wzName);
    }
    return Facet;
})(Node);


md.Facet = Facet;
md.Facet.ENUMERATION = "enum";
md.Facet.LENGTH = "length";
md.Facet.MAX_LENGTH = "max-length";
md.Facet.MIN_LENGTH = "min-length";
md.Facet.MAX_EXCLUSIVE = ">";
md.Facet.MIN_EXCLUSIVE = "<";
md.Facet.MAX_INCLUSIVE = ">=";
md.Facet.MIN_INCLUSIVE = "<=";
var EnumFacet = (function (Facet) {
    _inherits(EnumFacet, Facet);
    function EnumFacet(name) {
        _get(Object.getPrototypeOf(EnumFacet.prototype), 'constructor', this).call(this, name);
        _classCallCheck(this, EnumFacet);
        this.wzElement = 'enumFacet';
    }
    return EnumFacet;
})(Facet);


md.EnumFacet = EnumFacet;
var Include = (function (Node) {
    _inherits(Include, Node);
    function Include(name) {
        _get(Object.getPrototypeOf(Include.prototype), 'constructor', this).call(this, name);
        _classCallCheck(this, Include);
        this.wzElement = 'include';
        this.actualNameLower = false;
        this.isCalculated = false;
        this.calculated = 'null';
    }
    Include.prototype.wzInitialize = function(ctx) {
        var ss = this.wzName.split('/');
        if (ss.length == 2) {
            this.actualName = ss[0];
            this.rootEntityName = ss[1];
        }
        else {
            this.actualName = this.rootEntityName = this.wzName;
        }
        this.actualNameLower = this.actualName.toLowerCase();
        this.actualNameId = schemautil.getIdentifier(this.actualName, true);
        this.rootEntityNameId = schemautil.getIdentifier(this.rootEntityName, true);
    }
    return Include;
})(Node);


md.Include = Include;
var Element = (function (Node) {
    _inherits(Element, Node);
    function Element(name) {
        _get(Object.getPrototypeOf(Element.prototype), 'constructor', this).call(this, name);
        _classCallCheck(this, Element);
        this.wzElement = 'element';
        this.attributes = [];
        this.elements = [];
        this.includes = [];
        this.relations = [];
        this.methods = [];
        this.restricts = [];
        this.wildTags = [];
        this.choiceOrdered = [];
        this.super = null;
        this.superId = null;
        this.superType = null;
        this.addToChildren = false;
        this.isAbstract = false;
        this.isRoot = false;
        this.acceptAnyTag = null;
        this.acceptAnyTagCollection = null;
        this.suppressCollectionEmit_Flat = false;
        this.nameIsRequired = false;
        this.xmlTagInternal = null;
        this.tagInternal = null;
        this.defaultWhenDeclared = null;
    }
    Element.prototype.allowedNameDeclaration = function(key) {
        var enums = this.getEnumFacets();
        if (enums.length > 0) {
            var sb = [];
            sb.push("this.allowedNames = [ ");
            var first = true;
            var i, i_len=enums.length, facet;
            for (i=0; i<i_len; i++) {
                facet = enums[i];
                if (!first) {
                    sb.push(", ");
                }
                sb.push('"' + schemautil.replaceAll(facet.wzName, "\"", "\\\"") + '"');
                first = false;
            }
            sb.push('];');
            return sb.join('');
        }
        else {
            return null;
        }
    }
    Element.prototype.getEnumFacets = function() {
        var ret = [];
        var i, i_len=this.restricts.length, restrict;
        for (i=0; i<i_len; i++) {
            restrict = this.restricts[i];
            var j, j_len=restrict.facets.length, facet;
            for (j=0; j<j_len; j++) {
                facet = restrict.facets[j];
                if (facet.wzElement === 'enumFacet') {
                    if (_.find(ret, function(item) { return item.wzName === facet.wzName; }) == null) {
                        facet.wzName = facet.wzName.trim();
                        ret.push(facet);
                    }
                }
            }
        }
        return ret;
    }
    Element.prototype.needsVerify = function(emitKey) {
        if (this.relations.length > 0) {
            return true;
        }
        if (this.restricts.length > 0) {
            return true;
        }
        var i, i_len=this.attributes.length, attribute;
        for (i=0; i<i_len; i++) {
            attribute = this.attributes[i];
            if (attribute.restricts.length > 0) {
                return true;
            }
        }
        var i, i_len=this.methods.length, method;
        for (i=0; i<i_len; i++) {
            method = this.methods[i];
            if ((emitKey == null || method.emitKey == emitKey) && method.wzName.toLowerCase() === "wzverify") {
                return true;
            }
        }
        return false;
    }
    Element.prototype.hasAttributesOrChildsToLoad = function() {
        if (this.attributes.length > 0) {
            return true;
        }
        if (this.relations.length > 0) {
            return true;
        }
        if (this.setupDerived().length > 0) {
            return true;
        }
        return false;
    }
    Element.prototype.needsInitialize = function(emitKey) {
        var i, i_len=this.attributes.length, attribute;
        for (i=0; i<i_len; i++) {
            attribute = this.attributes[i];
            if (attribute.IsDataType) {
                return true;
            }
        }
        if (this.relations.length > 0) {
            return true;
        }
        var i, i_len=this.methods.length, method;
        for (i=0; i<i_len; i++) {
            method = this.methods[i];
            if ((emitKey == null || method.emitKey == emitKey) && method.wzName.toLowerCase() === "wzinitialize") {
                return true;
            }
        }
        return false;
    }
    Element.prototype.setupNames = function(ctx) {
        var ss = this.wzName.split('/');
        if (ss.length == 2) {
            var zz = ss[0].split('-');
            if (zz.length == 2) {
                this.wzName = zz[0] + zz[1];
                this.wzNamePlural = zz[0] + ss[1];
            }
            else {
                this.wzName = ss[0];
                this.wzNamePlural = ss[0] + ss[1];
            }
        }
        else {
            this.wzNamePlural + 's';
        }
        this.wzId = schemautil.getIdentifier(this.wzName, true);
        this.wzIdPlural = schemautil.getIdentifier(this.wzNamePlural, true);
        this.wzIdCapital = schemautil.capitalize(this.wzId);
        // 30/10/2015 set this.tagName = this.tagInternal || this.wzId
        this.tagName = this.tagInternal || this.wzName;
        this.tagSafe = this.tagName.replace("\"", "\\\"");
        this.xmlTag = this.xmlTagInternal || this.wzId;
        if (schemautil.isNotEmpty(this.acceptAnyTag)) {
            this.acceptAnyTagId = schemautil.getIdentifier(this.acceptAnyTag, true);
        }
        if (schemautil.isNotEmpty(this.acceptAnyTagCollection)) {
            this.acceptAnyTagCollectionId = schemautil.getIdentifier(this.acceptAnyTagCollection, true);
        }
    }
    Element.prototype.wzSetup = function(ctx) {
        var ss = this.wzName.split(':');
        if (ss.length > 1) {
            this.wzName = ss[0].trim();
            this.super = ss[1].trim();
        }
        this.schema = this.wzParent;
        if (schemautil.isNotEmpty(this.super)) {
            this.superId = schemautil.getIdentifier(this.super, true);
            if (this.wzId === this.superId) {
                ctx.error('An element cannot be super of itself.', this);
            }
        }
        this.superType = this.superId === null ? this.schema.wzId + 'Base' : this.superId;
        this.setupNames(ctx);
    }
    Element.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.attributes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.attributes[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.relations.length, item;
        for (i=0; i<i_len; i++) {
            item = this.relations[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.methods.length, item;
        for (i=0; i<i_len; i++) {
            item = this.methods[i];
            item.wzInitialize(ctx);
        }
        this.initializeLoad(ctx);
    }
    Element.prototype.wzVerify = function(ctx) {
        if (this.ensureName(1) == false) {
            ctx.error('Element name is required', this);
        }
        this.wzVerifySuper(ctx);
        var i, i_len=this.attributes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.attributes[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.relations.length, item;
        for (i=0; i<i_len; i++) {
            item = this.relations[i];
            item.wzVerify(ctx);
        }
    }
    Element.prototype.wzVerifySuper = function(ctx) {
        if (schemautil.isNotEmpty(this.superId)) {
            this.superElement = null;
            var i, i_len=this.schema.elements.length, element;
            for (i=0; i<i_len; i++) {
                element = this.schema.elements[i];
                if (element.wzId === this.superId) {
                    this.superElement = element;
                    break;
                }
            }
            if (this.superElement === null) {
                ctx.error('Super element not found : ' + this.superId, this);
            }
        }
    }
    Element.prototype.addAttribute = function(name) {
        var item = new Attribute(name);
        item.wzParent = this;
        this.attributes.push(item);
        return item;
    }
    Element.prototype.addRelation = function(name) {
        var item = new Relation(name);
        item.wzParent = this;
        this.relations.push(item);
        return item;
    }
    Element.prototype.setupDerived = function(ctx) {
        if (typeof this.derived === 'undefined') {
            this.derived = [];
            var i, i_len=this.schema.elements.length, element;
            for (i=0; i<i_len; i++) {
                element = this.schema.elements[i];
                if (element.superId === this.wzId) {
                    this.derived.push(element);
                    var j, j_len=element.setupDerived(ctx).length, d;
                    for (j=0; j<j_len; j++) {
                        d = element.setupDerived(ctx)[j];
                        if (this.superId === element.wzId) {
                            ctx.error('Element ' + element.wzId + ' cannot be both super element and derived element of element ' + this.wzId, this);
                        }
                        this.derived.push(d);
                    }
                }
            }
        }
        return this.derived;
    }
    Element.prototype.getTags = function(ctx) {
        var d = ctx.tagElementMapping;
        if (d == null) {
            ctx.tagElementMapping = d = {};
        }
        var retval = [],
            right,
            elId = this.wzId;
        if (schemautil.isEmpty(this.tagName)) {
            throw new Error('Empty tag name for element ' + this.wzId);
        }
        if (schemautil.startsWith(this.tagName, "|") || schemautil.endsWith(this.tagName, "|")) {
            var right = this.tagName;
            if (right != elId && typeof d[right] === 'undefined') {
                d[right] = elId;
            }
            retval.push(right);
        }
        else {
            var ss = this.tagName.split('|');
            var i, i_len=ss.length, s;
            for (i=0; i<i_len; i++) {
                s = ss[i];
                right = schemautil.replaceAll(s, "\"", "\\\"");
                if (right != elId && typeof d[right] === 'undefined') {
                    d[right] = elId;
                }
                retval.push(right);
                if (s.indexOf("-") > 0) {
                    right = schemautil.replaceAll(s, '-', '');
                    right = schemautil.replaceAll(right, "\"", "\\\"");
                    if (right != elId && typeof d[right] === 'undefined') {
                        d[right] = elId;
                    }
                    retval.push(right);
                }
            }
        }
        return retval;
    }
    Element.prototype.initializeLoad = function(ctx) {
        var choiceSet = new ChoiceSet();
        this.initializeLoad_attributes(ctx, choiceSet);
        this.initializeLoad_relations(ctx, choiceSet);
        this.choiceOrdered = choiceSet.createOrdered();
    }
    Element.prototype.initializeLoad_attributes = function(ctx,choiceSet) {
        var i, i_len=this.attributes.length, attribute;
        for (i=0; i<i_len; i++) {
            attribute = this.attributes[i];
            if (attribute.isReadOnly) {
                continue;
            }
            var DEFAULT;
            if (schemautil.isEmpty(attribute.defaultWhenDeclared)) {
                DEFAULT = "null";
            }
            else if (attribute.jsType == "string") {
                DEFAULT = "\"" + attribute.defaultWhenDeclared + "\"";
            }
            else {
                DEFAULT = attribute.defaultWhenDeclared;
            }
            if (schemautil.endsWith(attribute.tagName, "*") && this.schema.preserveTags) {
                this.wildTags.push(attribute.tagName);
            }
            else {
                var j, j_len=attribute.getTags(ctx).length, test;
                for (j=0; j<j_len; j++) {
                    test = attribute.getTags(ctx)[j];
                    choiceSet.addChoice(test, function(codelines) {
                        if (attribute.jsType === 'string') {
                            codelines.push("this." + attribute.wzId + " = child.v; return true;");
                        }
                        else {
                            codelines.push("this." + attribute.wzId + " = parse" + attribute.jsType + "(child.v, " + DEFAULT + ", child); return true;");
                        }
                    });
                }
            }
        }
    }
    Element.prototype.initializeLoad_relations = function(ctx,choiceSet) {
        var first = true;
        var i, i_len=this.relations.length, relation;
        for (i=0; i<i_len; i++) {
            relation = this.relations[i];
            if (relation.isOneToOne) {
                var RELATION = relation.wzName;
                if (!relation.rightElement.isAbstract) {
                    var CHILD_ENTITY = relation.rightElement.wzId;
                    var j, j_len=relation.rightElement.getTags(ctx).length, test;
                    for (j=0; j<j_len; j++) {
                        test = relation.rightElement.getTags(ctx)[j];
                        choiceSet.addChoice(test, function(codelines) {
                            codelines.push("return this.wzLoadOneToOne(child, md." + CHILD_ENTITY + ", '" + RELATION + "');");
                        });
                    }
                }
                var j, j_len=relation.rightElement.derived.length, d;
                for (j=0; j<j_len; j++) {
                    d = relation.rightElement.derived[j];
                    if (d.isAbstract) {
                        continue;
                    }
                    var CHILD_ENTITY;
                    if (d.superElement != null && d.superElement.SuppressCollectionEmit_Flat) {
                        CHILD_ENTITY = d.superElement.wzId;
                    }
                    else {
                        CHILD_ENTITY = d.wzId;
                    }
                    var k, k_len=d.getTags(ctx).length, test;
                    for (k=0; k<k_len; k++) {
                        test = d.getTags(ctx)[k];
                        choiceSet.addChoice(test, function(codelines) {
                            codelines.push("return this.wzLoadOneToOne(child, md." + CHILD_ENTITY + ", '" + RELATION + "')");
                        });
                    }
                }
            }
            else {
                var RELATION = relation.wzIdPlural;
                if (!relation.rightElement.isAbstract) {
                    var CHILD_ENTITY = relation.rightElement.wzId;
                    var j, j_len=relation.rightElement.getTags(ctx).length, test;
                    for (j=0; j<j_len; j++) {
                        test = relation.rightElement.getTags(ctx)[j];
                        choiceSet.addChoice(test, function(codelines) {
                            if (relation.rightElement.addToChildren) {
                                codelines.push("return this.wzLoadToChildren(child, md." + CHILD_ENTITY + ");");
                            }
                            else {
                                codelines.push("return this.wzLoadToChildColl(child, md." + CHILD_ENTITY + ", this." + RELATION + ");");
                            }
                        });
                    }
                }
                if (relation.rightElement.addToChildren) {
                    var j, j_len=relation.rightElement.derived.length, deriv;
                    for (j=0; j<j_len; j++) {
                        deriv = relation.rightElement.derived[j];
                        if (deriv.isAbstract) {
                            continue;
                        }
                        var CHILD_ENTITY = deriv.wzId;
                        var k, k_len=deriv.getTags(ctx).length, test;
                        for (k=0; k<k_len; k++) {
                            test = deriv.getTags(ctx)[k];
                            choiceSet.addChoice(test, function(codelines) {
                                codelines.push("item = new " + CHILD_ENTITY + "(child.v, new wzSourceLineInfo(child.r, child.c, child.u))");
                                codelines.push("item.wzTag = name;");
                                codelines.push("this.AddChild(item);");
                                codelines.push("item.LoadFromNode(child);");
                                codelines.push("return true;");
                            });
                        }
                    }
                }
                else {
                    var j, j_len=relation.rightElement.derived.length, d;
                    for (j=0; j<j_len; j++) {
                        d = relation.rightElement.derived[j];
                        if (d.isAbstract) {
                            continue;
                        }
                        var CHILD_ENTITY;
                        if (d.superElement != null && d.superElement.SuppressCollectionEmit_Flat) {
                            CHILD_ENTITY = d.superElement.wzId;
                        }
                        else {
                            CHILD_ENTITY = d.wzId;
                        }
                        var RELATION = relation.wzIdPlural;
                        var k, k_len=d.getTags(ctx).length, test;
                        for (k=0; k<k_len; k++) {
                            test = d.getTags(ctx)[k];
                            choiceSet.addChoice(test, function(codelines) {
                                codelines.push("return this.wzLoadToChildColl(child, md." + CHILD_ENTITY + ", this." + RELATION + ")");
                            });
                        }
                    }
                }
            }
        }
    }
    Element.prototype.getFlatAttributes = function() {
        if (typeof this.flatAttributes === 'undefined') {
            var flatAttributes = [];
            this.flatAttributesFill(flatAttributes, false);
            this.flatAttributes = flatAttributes;
        }
        return this.flatAttributes;
    }
    Element.prototype.flatAttributesFill = function(flatAttributes,inherited) {
        var i, i_len=this.attributes.length, attribute;
        for (i=0; i<i_len; i++) {
            attribute = this.attributes[i];
            var flags = '';
            flags += attribute.isRequired ? 'required ' : '';
            flags += attribute.isDataType ? 'is-datatype ' : '';
            var cloned = {
                name: attribute.wzId, 
                type: attribute.type, 
                tags: attribute.tagName.split('|'), 
                xmlTag: attribute.xmlTagInternal, 
                default: attribute.default, 
                defaultWhenDeclared: attribute.defaultWhenDeclared, 
                flags: flags, 
                inheritedFrom: (inherited ? this.wzId : null), 
                restricts: [], 
                comments: []
            };
            var j, j_len=attribute.restricts.length, restrict;
            for (j=0; j<j_len; j++) {
                restrict = attribute.restricts[j];
                cloned.restricts.push(this.getRestrictFill(restrict));
            }
            var j, j_len=attribute.comments.length, comment;
            for (j=0; j<j_len; j++) {
                comment = attribute.comments[j];
                cloned.comments.push(comment.wzName);
            }
            flatAttributes.push(cloned);
        }
        if (schemautil.isNotEmpty(this.superId)) {
            if (this.superElement) {
                this.superElement.flatAttributesFill(flatAttributes, true);
            }
        }
    }
    Element.prototype.getRestrictFill = function(model) {
        var restrictCloned = {
            facets: [], 
            comments: []
        };
        var i, i_len=model.facets.length, facet;
        for (i=0; i<i_len; i++) {
            facet = model.facets[i];
            var facetCloned = {
                type: facet.wzElement, 
                value: facet.wzName, 
                comments: []
            };
            var j, j_len=facet.comments.length, comment;
            for (j=0; j<j_len; j++) {
                comment = facet.comments[j];
                facetCloned.comments.push(comment.wzName);
            }
            restrictCloned.facets.push(facetCloned);
        }
        var i, i_len=model.comments.length, comment;
        for (i=0; i<i_len; i++) {
            comment = model.comments[i];
            restrictCloned.comments.push(comment.wzName);
        }
        return restrictCloned;
    }
    Element.prototype.getFlatRelations = function() {
        if (typeof this.flatRelations === 'undefined') {
            var flatRelations = [];
            this.flatRelationsFill(flatRelations, false);
            this.flatRelations = flatRelations;
        }
        return this.flatRelations;
    }
    Element.prototype.flatRelationsFill = function(flatRelations,inherited) {
        var i, i_len=this.relations.length, relation;
        for (i=0; i<i_len; i++) {
            relation = this.relations[i];
            var flags = '';
            flags += relation.isOneToOne ? 'is-one-to-one ' : '';
            flags += relation.noGetMethod ? 'no-get-method ' : '';
            flags += relation.hasAddOnce ? 'has-add-once ' : '';
            var cloned = {
                name: relation.wzName, 
                role: relation.wzNamePlural, 
                tags: relation.rightElement.tagName.split('|'), 
                cardinality: (relation.isOneToOne ? 'one-to-one' : 'one-to-many'), 
                flags: flags, 
                inheritedFrom: (inherited ? this.wzId : null), 
                comments: []
            };
            var j, j_len=relation.comments.length, comment;
            for (j=0; j<j_len; j++) {
                comment = relation.comments[j];
                cloned.comments.push(comment.wzName);
            }
            flatRelations.push(cloned);
        }
        if (schemautil.isNotEmpty(this.superId)) {
            if (this.superElement) {
                this.superElement.flatRelationsFill(flatRelations, true);
            }
        }
    }
    return Element;
})(Node);


md.Element = Element;
var Relation = (function (Node) {
    _inherits(Relation, Node);
    function Relation(name) {
        _get(Object.getPrototypeOf(Relation.prototype), 'constructor', this).call(this, name);
        _classCallCheck(this, Relation);
        this.wzElement = 'relation';
        this.wzNamePlural = null;
        this.wzIdPlural = null;
        this.childRole = null;
        this.rightElement = null;
        this.noGetMethod = false;
        this.hasAddOnce = false;
        this.isOneToOne = false;
    }
    Relation.prototype.wzInitializeNames = function(ctx) {
        if (this.isOneToOne == false) {
            if (this.childRole == null) {
                var hyphen = this.wzName.indexOf("[-]");
                var name = hyphen >= 0 ? schemautil.replaceAll(this.wzName, '[-]', '§§§') : this.wzName;
                var ss = name.split('/');
                if (ss.length == 2) {
                    var zz = ss[0].split('-');
                    if (zz.length == 2) {
                        this.wzName = zz[0] + zz[1];
                        this.wzNamePlural = zz[0] + ss[1];
                    }
                    else {
                        this.wzName = ss[0];
                        this.wzNamePlural = ss[0] + ss[1];
                    }
                }
                else {
                    this.wzNamePlural = this.wzName + 's';
                }
                if (hyphen >= 0) {
                    this.wzName = schemautil.replaceAll(this.wzName, '§§§', '-');
                    this.wzNamePlural = schemautil.replaceAll(this.wzNamePlural, '§§§', '-');
                }
            }
            else {
                this.wzNamePlural = this.childRole;
            }
        }
    }
    Relation.prototype.wzInitialize = function(ctx) {
        this.wzInitializeNames(ctx);
        this.wzId = schemautil.getIdentifier(this.wzName, true);
        if (this.isOneToOne == false) {
            this.wzIdPlural = schemautil.getIdentifier(this.wzNamePlural, true);
        }
        this.leftElement = this.wzParent;
        if (this.rightElement === null) {
            this.rightElement = this.wzParent.schema.getElement(this.wzName);
        }
        if (this.rightElement === null) {
            ctx.error('Related element ' + this.wzName + ' not found', this);
        }
        this.childEntityId = this.rightElement.wzId;
        this.childEntityIdCapital = this.rightElement.wzIdCapital;
    }
    Relation.prototype.wzVerify = function(ctx) {
    }
    return Relation;
})(Node);


md.Relation = Relation;
var Choice = (function () {
    function Choice(test) {
        _classCallCheck(this, Choice);
        // Make test case insensitive
        this.test = test.toLowerCase();
        this.length = test.length;
        this.char = test[0];
        this.codelines = [];
    }
    return Choice;
})();


md.Choice = Choice;
var ChoiceSet = (function () {
    function ChoiceSet() {
        _classCallCheck(this, ChoiceSet);
        this.choices = [];
    }
    ChoiceSet.prototype.addChoice = function(test,callback) {
        var choice = new Choice(test);
        callback(choice.codelines);
        this.choices.push(choice);
    }
    ChoiceSet.prototype.createOrdered = function() {
        var retval = [];
        var done;
        var i, i_len=this.choices.length, choice;
        for (i=0; i<i_len; i++) {
            choice = this.choices[i];
            done = false;
            var j, j_len=retval.length, ordered;
            for (j=0; j<j_len; j++) {
                ordered = retval[j];
                if (ordered.char == choice.char && ordered.length == choice.length) {
                    ordered.choices.push(choice);
                    done = true;
                }
            }
            if (!done) {
                ordered = new ChoiceOrdered(choice.char, choice.length);
                ordered.choices.push(choice);
                retval.push(ordered);
            }
        }
        retval.sort(ChoiceSetCompare);
        return retval;
    }
    return ChoiceSet;
})();


md.ChoiceSet = ChoiceSet;
function ChoiceSetCompare(a,b) {
    if (a.length > b.length) {
        return 1;
    }
    if (a.length < b.length) {
        return -1;
    }
    if (a.char > b.char) {
        return 1;
    }
    if (a.char < b.char) {
        return -1;
    }
    return 0;
}

var ChoiceOrdered = (function () {
    function ChoiceOrdered(char,length) {
        _classCallCheck(this, ChoiceOrdered);
        this.char = char;
        this.length = length;
        this.choices = [];
    }
    return ChoiceOrdered;
})();


md.ChoiceOrdered = ChoiceOrdered;
var Require = (function (Node) {
    _inherits(Require, Node);
    function Require(name) {
        _get(Object.getPrototypeOf(Require.prototype), 'constructor', this).call(this, name);
        _classCallCheck(this, Require);
        this.wzElement = 'require';
        this.declareVar = name;
        this.invoke = '';
        this.kind = 'module';
    }
    return Require;
})(Node);


md.Require = Require;
var ExportTo = (function (Node) {
    _inherits(ExportTo, Node);
    function ExportTo(name) {
        _get(Object.getPrototypeOf(ExportTo.prototype), 'constructor', this).call(this, name);
        _classCallCheck(this, ExportTo);
        this.wzElement = 'exportTo';
    }
    return ExportTo;
})(Node);


md.ExportTo = ExportTo;
var Param = (function (Node) {
    _inherits(Param, Node);
    function Param(name) {
        _get(Object.getPrototypeOf(Param.prototype), 'constructor', this).call(this, name);
        _classCallCheck(this, Param);
        this.wzElement = 'param';
    }
    return Param;
})(Node);


md.Param = Param;
var Statement = (function (Node) {
    _inherits(Statement, Node);
    function Statement(name) {
        _get(Object.getPrototypeOf(Statement.prototype), 'constructor', this).call(this, name);
        _classCallCheck(this, Statement);
        this.wzElement = 'statement';
    }
    return Statement;
})(Node);


md.Statement = Statement;
var Method = (function (Node) {
    _inherits(Method, Node);
    function Method(name) {
        _get(Object.getPrototypeOf(Method.prototype), 'constructor', this).call(this, name);
        _classCallCheck(this, Method);
        this.wzElement = 'method';
        this.emitKey = null;
        this.isStatic = false;
        this.isKnownMethod = false;
        this.params = [];
        this.requires = [];
        this.statements = [];
    }
    Method.prototype.addParam = function(name) {
        var item = new Param(name);
        item.wzParent = this;
        this.params.push(item);
        return item;
    }
    Method.prototype.addRequire = function(name) {
        var item = new Require(name);
        item.wzParent = this;
        this.requires.push(item);
        return item;
    }
    Method.prototype.addStatement = function(statement) {
        var item = new Statement(statement.wzElement + ' ' + statement.wzName);
        item.wzParent = this;
        this.statements.push(item);
        return item;
    }
    Method.prototype.importStatement = function(statement) {
        var json = this.stringifyWizziStatement(statement, null);
        var item = new Statement(stringify(json));
        item.wzParent = this;
        this.statements.push(item);
        return item;
    }
    Method.prototype.stringifyWizziStatement = function(wizziNode,parent) {
        var json = {
            n: wizziNode.wzTag, 
            v: wizziNode.wzName, 
            childs: []
        };
        var i, i_len=wizziNode.statements.length, s;
        for (i=0; i<i_len; i++) {
            s = wizziNode.statements[i];
            this.stringifyWizziStatement(s, json);
        }
        if (parent) {
            parent.childs.push(json);
        }
        else {
            return json;
        }
    }
    Method.prototype.wzInitialize = function() {
        if (this.wzName.indexOf("-static") >= 0) {
            this.isStatic = true;
            this.wzName = schemautil.replaceAll(this.wzName, "-static", "").trim();
        }
        var ss = this.wzName.trim().split(' ');
        if (ss.length > 1) {
            this.wzName = ss[0];
            for (var i=1; i < ss.length; i++) {
                this.params.push(ss[i]);
            }
        }
        if (this.wzName.toLowerCase() === "wzinitialize") {
            this.isKnownMethod = true;
        }
        if (this.wzName.toLowerCase() === "wzverify") {
            this.isKnownMethod = true;
        }
    }
    return Method;
})(Node);


md.Method = Method;
var Comment = (function (Node) {
    _inherits(Comment, Node);
    function Comment(name) {
        _get(Object.getPrototypeOf(Comment.prototype), 'constructor', this).call(this, name);
        _classCallCheck(this, Comment);
        this.wzElement = 'comment';
    }
    return Comment;
})(Node);


md.Comment = Comment;
var WizziSchema = (function (Node) {
    _inherits(WizziSchema, Node);
    function WizziSchema(name) {
        _get(Object.getPrototypeOf(WizziSchema.prototype), 'constructor', this).call(this, name);
        _classCallCheck(this, WizziSchema);
        this.wzElement = 'wizzischema';
        this.elements = [];
        this.methods = [];
        this.requires = [];
        this.requiredModules = [];
        this.requiredFunctions = [];
        this.exportTos = [];
        this.preserveTags = true;
        this.rootElement = null;
    }
    WizziSchema.prototype.addElement = function(name) {
        var item = new Element(name);
        item.wzParent = this;
        this.elements.push(item);
        return item;
    }
    WizziSchema.prototype.getElement = function(name) {
        var i, i_len=this.elements.length, element;
        for (i=0; i<i_len; i++) {
            element = this.elements[i];
            if (element.wzName === name) {
                return element;
            }
        }
        return null;
    }
    WizziSchema.prototype.addExportTo = function(name) {
        var item = new ExportTo(name);
        item.wzParent = this;
        this.exportTos.push(item);
        return item;
    }
    WizziSchema.prototype.wzSetup = function(ctx) {
        var i, i_len=this.elements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.elements[i];
            item.wzSetup(ctx);
        }
        var i, i_len=this.elements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.elements[i];
            item.setupDerived(ctx);
        }
    }
    WizziSchema.prototype.wzVerify = function(ctx) {
        var i, i_len=this.elements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.elements[i];
            item.wzVerify(ctx);
        }
    }
    WizziSchema.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.elements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.elements[i];
            if (item.isRoot) {
                this.rootElement = item;
            }
        }
        if (this.rootElement == null && this.elements.length > 0) {
            this.elements[0].isRoot = true;
            this.rootElement = this.elements[0];
        }
        var i, i_len=this.elements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.elements[i];
            item.wzInitialize(ctx);
        }
        this.analize();
        var d = ctx.tagElementMapping;
        if (typeof d === 'object') {
            var str = [];
            str.push("{ ");
            var first = true;
            for (var k in d) {
                if (!first) {
                    str.push(", ");
                }
                first = false;
                var key = schemautil.escapeString(k);
                str.push("'" + key + "': '" + d[key] + "'");
            }
            str.push(" }");
            this.tagElementMapping = str.join('');
        }
        else {
            this.tagElementMapping = '{}';
        }
        this.requiredModules = this.getRequiredModules();
        this.requiredFunctions = this.getRequiredFunctions();
        this.requiredContextMethods = this.getRequiredContextMethods();
    }
    WizziSchema.prototype.addRequire = function(name,kind) {
        var r = _.find(this.requires, function(item) { return item.wzName === name && item.kind === kind });
        if (!r) {
            r = new Require(name);
            r.kind = kind;
            this.requires.push(r);
        }
        return r;
    }
    WizziSchema.prototype.analize = function() {
        var i, i_len=this.elements.length, element;
        for (i=0; i<i_len; i++) {
            element = this.elements[i];
            if (element.nameIsRequired) {
                this.addRequire("verifyRequired", "context-method");
            }
            if (element.allowedNameDeclaration("js") != null) {
                this.addRequire("verifyEnum", "context-method");
            }
            var j, j_len=element.attributes.length, attribute;
            for (j=0; j<j_len; j++) {
                attribute = element.attributes[j];
                if (attribute.isRequired) {
                    this.addRequire("verifyRequired", "context-method");
                }
                if (attribute.isDataType) {
                    this.addRequire("getTypesystem", "context-method");
                }
                if (attribute.allowedDeclaration("js") != null) {
                    this.addRequire("verifyEnum", "context-method");
                }
                if (attribute.type == md.Attribute.STRING) {
                    this.addRequire("parsestring", 'function');
                }
                else if (attribute.type == md.Attribute.BOOLEAN) {
                    this.addRequire("parseboolean", 'function');
                    this.addRequire("isBoolean", 'function');
                }
                else if (attribute.type == md.Attribute.INTEGER) {
                    this.addRequire("parseinteger", 'function');
                    this.addRequire("isInteger", 'function');
                    this.addRequire("isNumber", 'function');
                }
                else if (attribute.type == md.Attribute.FLOAT) {
                    this.addRequire("parsefloat", 'function');
                    this.addRequire("isFloat", 'function');
                    this.addRequire("isNumber", 'function');
                }
                else if (attribute.type == md.Attribute.DATE) {
                    this.addRequire("parsedate", 'function');
                    this.addRequire("isDate", 'function');
                }
            }
            var j, j_len=element.methods.length, method;
            for (j=0; j<j_len; j++) {
                method = element.methods[j];
                var k, k_len=method.requires.length, require;
                for (k=0; k<k_len; k++) {
                    require = method.requires[k];
                    this.addRequire(require.wzName, require.kind);
                }
            }
        }
        var i, i_len=this.methods.length, method;
        for (i=0; i<i_len; i++) {
            method = this.methods[i];
            var j, j_len=method.requires.length, require;
            for (j=0; j<j_len; j++) {
                require = method.requires[j];
                this.addRequire(require.wzName, require.kind);
            }
        }
        this.addRequiredFunctionsDependencies();
    }
    WizziSchema.prototype.exportToJson = function() {
        return typeof _.find(this.exportTos, function(item) { return item.wzName && item.wzName.toLowerCase() === 'json' }) !== 'undefined';
    }
    WizziSchema.prototype.exportToXml = function() {
        return typeof _.find(this.exportTos, function(item) { return item.wzName && item.wzName.toLowerCase() === 'xml' }) !== 'undefined';
    }
    WizziSchema.prototype.exportToPrettify = function() {
        return typeof _.find(this.exportTos, function(item) { return item.wzName && item.wzName.toLowerCase() === 'prettify' }) !== 'undefined';
    }
    WizziSchema.prototype.getRequiredFunctions = function() {
        return _.filter(this.requires, function(item) { return item.kind === 'function' });
    }
    WizziSchema.prototype.getRequiredModules = function() {
        return _.filter(this.requires, function(item) { return item.kind === 'module' });
    }
    WizziSchema.prototype.getRequiredContextMethods = function() {
        return _.filter(this.requires, function(item) { return item.kind === 'context-method' });
    }
    WizziSchema.prototype.addRequiredFunctionsDependencies = function() {
        var deps = [];
        var i, i_len=this.requires.length, require;
        for (i=0; i<i_len; i++) {
            require = this.requires[i];
            if (require.kind === 'function') {
                this.getRequiredFunctionsByItem(require.wzName, deps);
            }
        }
        var i, i_len=deps.length, dep;
        for (i=0; i<i_len; i++) {
            dep = deps[i];
            this.addRequire(dep, 'function');
        }
    }
    WizziSchema.prototype.getRequiredFunctionsByItem = function(name,deps) {
        if (name == "isEmpty") {
            deps.push("isString");
        }
        else if (name == "isNumber") {
            deps.push("isArray");
        }
        else if (name == "replaceAll") {
            deps.push("escapeRegExp");
        }
        else if (name == "isInt") {
            deps.push("isNumber");
        }
        else if (name == "isFloat") {
            deps.push("isNumber");
        }
        else if (name == "isDate") {
            deps.push("isString");
        }
        else if (name == "parsestring") {
            deps.push("isString");
            deps.push("isEmpty");
            deps.push("isBoolean");
            deps.push("nodeException");
        }
        else if (name == "parseboolean") {
            deps.push("isString");
            deps.push("isEmpty");
            deps.push("isBoolean");
            deps.push("nodeException");
        }
        else if (name == "parseint") {
            deps.push("isString");
            deps.push("isEmpty");
            deps.push("nodeException");
        }
        else if (name == "parsefloat") {
            deps.push("isString");
            deps.push("isEmpty");
            deps.push("nodeException");
        }
        else if (name == "parsedate") {
            deps.push("isString");
            deps.push("isEmpty");
            deps.push("nodeException");
        }
    }
    WizziSchema.prototype.loadFromWizziModel = function(wizziModel) {
        this.wzName = wizziModel.wzName;
        this.importComments(wizziModel);
        var i, i_len=wizziModel.requires.length, requireFrom;
        for (i=0; i<i_len; i++) {
            requireFrom = wizziModel.requires[i];
            var require = this.addRequire(requireFrom.wzName);
            if (requireFrom.declareVar && requireFrom.declareVar.length > 0) {
                require.declareVar = requireFrom.declareVar;
            }
            if (requireFrom.invoke && requireFrom.invoke.length > 0) {
                require.invoke = requireFrom.invoke;
            }
            require.kind = requireFrom.kind;
        }
        this.importMethods(wizziModel);
        var i, i_len=wizziModel.elements.length, eFrom;
        for (i=0; i<i_len; i++) {
            eFrom = wizziModel.elements[i];
            var element = this.addElement(eFrom.wzName);
            element.importComments(eFrom);
            element.importRestricts(eFrom);
            element.tagInternal = eFrom.tagInternal;
            element.super = eFrom.super;
            element.isAbstract = eFrom.isAbstract;
            element.isRoot = eFrom.isRoot;
            element.xmlTagInternal = eFrom.xmlTagInternal;
            element.acceptAnyTag = eFrom.acceptAnyTag;
            element.nameIsRequired = eFrom.nameIsRequired;
            element.addToChildren = eFrom.addToChildren;
            element.suppressCollectionEmit = eFrom.suppressCollectionEmit;
            var j, j_len=eFrom.attributes.length, aFrom;
            for (j=0; j<j_len; j++) {
                aFrom = eFrom.attributes[j];
                var attribute = element.addAttribute(aFrom.wzName);
                attribute.importComments(aFrom);
                attribute.importRestricts(aFrom);
                attribute.tagInternal = aFrom.tagInternal;
                attribute.xmlTagInternal = aFrom.xmlTagInternal;
                attribute.type = aFrom.type;
                attribute.default = aFrom.default;
                attribute.isRequired = aFrom.isRequired;
                attribute.isDataType = aFrom.isDataType;
                attribute.defaultWhenDeclared = aFrom.defaultWhenDeclared;
            }
            var j, j_len=eFrom.relations.length, rFrom;
            for (j=0; j<j_len; j++) {
                rFrom = eFrom.relations[j];
                var relation = element.addRelation(rFrom.wzName);
                relation.importComments(rFrom);
                relation.noGetMethod = rFrom.noGetMethod;
                relation.hasAddOnce = rFrom.hasAddOnce;
                relation.isOneToOne = rFrom.isOneToOne;
            }
            element.importMethods(eFrom);
        }
        var i, i_len=wizziModel.exportTos.length, exportTo;
        for (i=0; i<i_len; i++) {
            exportTo = wizziModel.exportTos[i];
            this.addExportTo(exportTo.wzName);
        }
        var ctx = {
            error: function(msg,node) {
                throw new Error(msg + '\n' + util.inspect(node, { depth: 2}));
            }
        };
        this.wzSetup(ctx);
        this.wzVerify(ctx);
        this.wzInitialize(ctx);
    }
    return WizziSchema;
})(Node);


md.WizziSchema = WizziSchema;
