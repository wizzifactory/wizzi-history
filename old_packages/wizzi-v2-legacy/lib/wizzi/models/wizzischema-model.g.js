/*
    artifact generator: /wizzi/lib/artifacts/js/module/gen/main.js
    primary source IttfDocument: C:\My\wizzi\v2\packages\wizzi\lib\artifacts\wizzischema\model\gen\ittf\wizzischema-model.js.ittf
    utc time: Tue, 11 Jul 2017 18:43:48 GMT
*/
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');

var md = module.exports = {};

var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row,col,sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();


md.wzSourceLineInfo = wzSourceLineInfo;
var wizzischemaBase = (function () {
    function wizzischemaBase(name,sourceLineInfo) {
        _classCallCheck(this, wizzischemaBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    wizzischemaBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    wizzischemaBase.prototype.wzSourceFilepath = function(sourceKey) {
        return this.wzRoot().loadContext.getIttfDocumentUri(sourceKey);
    }
    wizzischemaBase.prototype.wzVerify = function() {
    }
    wizzischemaBase.prototype.wzInitialize = function() {
    }
    wizzischemaBase.prototype.wzInitializeAsync = function(ctx,callback) {
        callback(null);
    }
    wizzischemaBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    wizzischemaBase.prototype.wzLoadToChildColl = function(child,type,coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    wizzischemaBase.prototype.wzLoadToChildren = function(child,type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    wizzischemaBase.prototype.wzLoadOneToOne = function(child,type,fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    wizzischemaBase.prototype.error = function(message,node) {
        throw new md.wizzischemaException(message, node, this);
    }
    return wizzischemaBase;
})();


md.wizzischemaBase = wizzischemaBase;

/**
    element wizzischema
     The root element of a wizzi schema.
*/
var wizzischema = (function (wizzischemaBase) {
    _inherits(wizzischema, wizzischemaBase);
    function wizzischema(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(wizzischema.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, wizzischema);
        this.wzElement = "wizzischema";
        /**
             If declared, the WizziModelLoader will preserve, in the loaded WizziModelInstance,
             the tags used in the source IttfDocuments.
        */
        this.preserveTags = false;
        // relation element
        this.elements = [];
        // relation include
        this.includes = [];
        // relation exportTo
        this.exportTos = [];
        // relation require
        this.requires = [];
        // relation method
        this.methods = [];
        // relation comment
        this.comments = [];
    }
    wizzischema.prototype.addElement = function(name,sourceLineInfo) {
        var retval = new md.element(name, sourceLineInfo);
        retval.wzParent = this;
        this.elements.push(retval);
        return retval;
    }
    wizzischema.prototype.getElement = function(name) {
        var found = null;
        this.elements.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    wizzischema.prototype.addInclude = function(name,sourceLineInfo) {
        var retval = new md.include(name, sourceLineInfo);
        retval.wzParent = this;
        this.includes.push(retval);
        return retval;
    }
    wizzischema.prototype.getInclude = function(name) {
        var found = null;
        this.includes.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    wizzischema.prototype.addExportTo = function(name,sourceLineInfo) {
        var retval = new md.exportTo(name, sourceLineInfo);
        retval.wzParent = this;
        this.exportTos.push(retval);
        return retval;
    }
    wizzischema.prototype.getExportTo = function(name) {
        var found = null;
        this.exportTos.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    wizzischema.prototype.addRequire = function(name,sourceLineInfo) {
        var retval = new md.require(name, sourceLineInfo);
        retval.wzParent = this;
        this.requires.push(retval);
        return retval;
    }
    wizzischema.prototype.getRequire = function(name) {
        var found = null;
        this.requires.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    wizzischema.prototype.addMethod = function(name,sourceLineInfo) {
        var retval = new md.method(name, sourceLineInfo);
        retval.wzParent = this;
        this.methods.push(retval);
        return retval;
    }
    wizzischema.prototype.getMethod = function(name) {
        var found = null;
        this.methods.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    wizzischema.prototype.addComment = function(name,sourceLineInfo) {
        var retval = new md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    wizzischema.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    wizzischema.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, md.comment, this.comments);
            }
        }
        if (_l == 1 && _ch == 'e') {
            if (name === 'e') {
                return this.wzLoadToChildColl(child, md.element, this.elements);
            }
        }
        if (_l == 1 && _ch == 'm') {
            if (name === 'm') {
                return this.wzLoadToChildColl(child, md.method, this.methods);
            }
        }
        if (_l == 7 && _ch == 'i') {
            if (name === 'include') {
                return this.wzLoadToChildColl(child, md.include, this.includes);
            }
        }
        if (_l == 7 && _ch == 'r') {
            if (name === 'require') {
                return this.wzLoadToChildColl(child, md.require, this.requires);
            }
        }
        if (_l == 8 && _ch == 'e') {
            if (name === 'exportto') {
                return this.wzLoadToChildColl(child, md.exportTo, this.exportTos);
            }
        }
        if (_l == 9 && _ch == 'e') {
            if (name === 'export-to') {
                return this.wzLoadToChildColl(child, md.exportTo, this.exportTos);
            }
        }
        if (_l == 13 && _ch == 'p') {
            if (name === 'preserve-tags') {
                this.preserveTags = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'preserve_tags') {
                this.preserveTags = parseboolean(child.v, true, child); return true;
            }
        }
        return ok;
    }
    wizzischema.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.wizzischemaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    wizzischema.prototype.wzVerify = function(ctx) {
        var i, i_len=this.elements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.elements[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.includes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.includes[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.exportTos.length, item;
        for (i=0; i<i_len; i++) {
            item = this.exportTos[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.requires.length, item;
        for (i=0; i<i_len; i++) {
            item = this.requires[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.methods.length, item;
        for (i=0; i<i_len; i++) {
            item = this.methods[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        md.wizzischemaBase.prototype.wzVerify.call(this, ctx);
    }
    wizzischema.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.elements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.elements[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.includes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.includes[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.exportTos.length, item;
        for (i=0; i<i_len; i++) {
            item = this.exportTos[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.requires.length, item;
        for (i=0; i<i_len; i++) {
            item = this.requires[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.methods.length, item;
        for (i=0; i<i_len; i++) {
            item = this.methods[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        md.wizzischemaBase.prototype.wzInitialize.call(this, ctx);
    }
    return wizzischema;
})(wizzischemaBase);


md.wizzischema = wizzischema;
// element schemaitem
var schemaitem = (function (wizzischemaBase) {
    _inherits(schemaitem, wizzischemaBase);
    function schemaitem(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(schemaitem.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, schemaitem);
        this.wzElement = "schemaitem";
        // relation comment
        this.comments = [];
    }
    schemaitem.prototype.addComment = function(name,sourceLineInfo) {
        var retval = new md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    schemaitem.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    schemaitem.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, md.comment, this.comments);
            }
        }
        return ok;
    }
    schemaitem.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.wizzischemaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    schemaitem.prototype.wzVerify = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        md.wizzischemaBase.prototype.wzVerify.call(this, ctx);
    }
    schemaitem.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        md.wizzischemaBase.prototype.wzInitialize.call(this, ctx);
    }
    return schemaitem;
})(wizzischemaBase);


md.schemaitem = schemaitem;
/**
    element include
     The parent element may include the nodes of another external schema.
     The IttfNodeValue of this element is the name of the external schema.
*/
var include = (function (schemaitem) {
    _inherits(include, schemaitem);
    function include(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(include.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, include);
        this.wzElement = "include";
    }
    return include;
})(schemaitem);


md.include = include;
/**
    element comment
     A comment line for describing entities.
*/
var comment = (function (wizzischemaBase) {
    _inherits(comment, wizzischemaBase);
    function comment(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(comment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, comment);
        this.wzElement = "comment";
    }
    return comment;
})(wizzischemaBase);


md.comment = comment;
/**
    element element
     A schema element. A classifier model element that may have attributes and relations.
*/
var element = (function (schemaitem) {
    _inherits(element, schemaitem);
    function element(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(element.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, element);
        this.wzElement = "element";
        /**
             The base (super) element from which this element derives.
             Attributes and relations of the base element are inherited.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.super = null
        // This element is abstract and cannot be declared in Ittf documents.
        this.isAbstract = false;
        /**
             Mark the element as the root element of the schema.
             If not explicit, the root element is inferred,
             and the first element declared in the schema is assumed as the root.
        */
        this.isRoot = false;
        /**
             The tag used to declare this element in Ittf documents.
             Optional. The default is the element IttfNodeValue
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.tagInternal = null
        // The Xml tag used for this element when persisted in Xml Format.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.xmlTagInternal = null
        /**
             This element can have any text as a child element.
             The IttfNodeValue of this attribute must be the name of the element collection
             to which child text nodes will be appended.
             Any child node produces an internal ANY element that is appended to this collection.
             TODO example
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.acceptAnyTag = null
        // This element must have a not empty IttfNodeValue
        this.nameIsRequired = false;
        /**
             Every child node of this element will be added to the wzChildren collection.
             Artifact generators will use the wzElement attribute to distinguish child elements.
        */
        this.addToChildren = false;
        // TODO ???
        this.suppressCollectionEmit = false;
        // relation attribute
        this.attributes = [];
        // relation relation
        this.relations = [];
        // relation restrict
        this.restricts = [];
        // relation method
        this.methods = [];
        // relation include
        this.includes = [];
    }
    element.prototype.addAttribute = function(name,sourceLineInfo) {
        var retval = new md.attribute(name, sourceLineInfo);
        retval.wzParent = this;
        this.attributes.push(retval);
        return retval;
    }
    element.prototype.getAttribute = function(name) {
        var found = null;
        this.attributes.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    element.prototype.addRelation = function(name,sourceLineInfo) {
        var retval = new md.relation(name, sourceLineInfo);
        retval.wzParent = this;
        this.relations.push(retval);
        return retval;
    }
    element.prototype.getRelation = function(name) {
        var found = null;
        this.relations.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    element.prototype.addRestrict = function(name,sourceLineInfo) {
        var retval = new md.restrict(name, sourceLineInfo);
        retval.wzParent = this;
        this.restricts.push(retval);
        return retval;
    }
    element.prototype.getRestrict = function(name) {
        var found = null;
        this.restricts.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    element.prototype.addMethod = function(name,sourceLineInfo) {
        var retval = new md.method(name, sourceLineInfo);
        retval.wzParent = this;
        this.methods.push(retval);
        return retval;
    }
    element.prototype.getMethod = function(name) {
        var found = null;
        this.methods.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    element.prototype.addInclude = function(name,sourceLineInfo) {
        var retval = new md.include(name, sourceLineInfo);
        retval.wzParent = this;
        this.includes.push(retval);
        return retval;
    }
    element.prototype.getInclude = function(name) {
        var found = null;
        this.includes.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    element.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == 'a') {
            if (name === 'a') {
                return this.wzLoadToChildColl(child, md.attribute, this.attributes);
            }
        }
        if (_l == 1 && _ch == 'm') {
            if (name === 'm') {
                return this.wzLoadToChildColl(child, md.method, this.methods);
            }
        }
        if (_l == 1 && _ch == 'r') {
            if (name === 'r') {
                return this.wzLoadToChildColl(child, md.relation, this.relations);
            }
        }
        if (_l == 3 && _ch == 'a') {
            if (name === 'any') {
                this.acceptAnyTag = child.v; return true;
            }
        }
        if (_l == 3 && _ch == 't') {
            if (name === 'tag') {
                this.tagInternal = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 's') {
            if (name === 'super') {
                this.super = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'i') {
            if (name === 'is-root') {
                this.isRoot = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_root') {
                this.isRoot = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'include') {
                return this.wzLoadToChildColl(child, md.include, this.includes);
            }
        }
        if (_l == 7 && _ch == 'x') {
            if (name === 'xml-tag') {
                this.xmlTagInternal = child.v; return true;
            }
            else if (name === 'xml_tag') {
                this.xmlTagInternal = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'r') {
            if (name === 'restrict') {
                return this.wzLoadToChildColl(child, md.restrict, this.restricts);
            }
        }
        if (_l == 11 && _ch == 'i') {
            if (name === 'is-abstract') {
                this.isAbstract = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_abstract') {
                this.isAbstract = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 15 && _ch == 'a') {
            if (name === 'add-to-children') {
                this.addToChildren = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'add_to_children') {
                this.addToChildren = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 16 && _ch == 'n') {
            if (name === 'name-is-required') {
                this.nameIsRequired = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'name_is_required') {
                this.nameIsRequired = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 24 && _ch == 's') {
            if (name === 'suppress-collection-emit') {
                this.suppressCollectionEmit = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'suppress_collection_emit') {
                this.suppressCollectionEmit = parseboolean(child.v, true, child); return true;
            }
        }
        ok = md.schemaitem.prototype.loadChild.call(this, child);
        return ok;
    }
    element.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.wizzischemaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    element.prototype.wzVerify = function(ctx) {
        var i, i_len=this.attributes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.attributes[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.relations.length, item;
        for (i=0; i<i_len; i++) {
            item = this.relations[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.restricts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.restricts[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.methods.length, item;
        for (i=0; i<i_len; i++) {
            item = this.methods[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.includes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.includes[i];
            item.wzVerify(ctx);
        }
        md.schemaitem.prototype.wzVerify.call(this, ctx);
    }
    element.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.attributes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.attributes[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.relations.length, item;
        for (i=0; i<i_len; i++) {
            item = this.relations[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.restricts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.restricts[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.methods.length, item;
        for (i=0; i<i_len; i++) {
            item = this.methods[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.includes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.includes[i];
            item.wzInitialize(ctx);
        }
        md.schemaitem.prototype.wzInitialize.call(this, ctx);
    }
    return element;
})(schemaitem);


md.element = element;
/**
    element attribute
     An element attribute.
*/
var attribute = (function (schemaitem) {
    _inherits(attribute, schemaitem);
    function attribute(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(attribute.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, attribute);
        this.allowedTYPES = [ "string", "boolean", "integer", "float", "date", "regexp", "code", "object"];
        this.TYPE_STRING = "string";
        this.TYPE_XBOOLEAN = "boolean";
        this.TYPE_INTEGER = "integer";
        this.TYPE_XFLOAT = "float";
        this.TYPE_DATE = "date";
        this.TYPE_REGEXP = "regexp";
        this.TYPE_CODE = "code";
        this.TYPE_OBJECT = "object";
        this.wzElement = "attribute";
        /**
             The tag used to declare the attribute in IttfDocuments.
             Optional. The default is the attribute IttfNodeValue
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.tagInternal = null
        // The attribute data type
        this.type = "string";
        // The attribute default value
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.default = null
        // If true the attribute must be declared.
        this.isRequired = false;
        // This attribute is a datatype attribute and type services will be available to artifact generators.
        this.isDataType = false;
        // When the attribute is declared without a IttfNodeValue, this will be its value.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.defaultWhenDeclared = null
        // relation restrict
        this.restricts = [];
    }
    attribute.TYPE_STRING = "string";
    attribute.TYPE_XBOOLEAN = "boolean";
    attribute.TYPE_INTEGER = "integer";
    attribute.TYPE_XFLOAT = "float";
    attribute.TYPE_DATE = "date";
    attribute.TYPE_REGEXP = "regexp";
    attribute.TYPE_CODE = "code";
    attribute.TYPE_OBJECT = "object";
    attribute.prototype.addRestrict = function(name,sourceLineInfo) {
        var retval = new md.restrict(name, sourceLineInfo);
        retval.wzParent = this;
        this.restricts.push(retval);
        return retval;
    }
    attribute.prototype.getRestrict = function(name) {
        var found = null;
        this.restricts.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    attribute.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 't') {
            if (name === 'tag') {
                this.tagInternal = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'd') {
            if (name === 'default') {
                this.default = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'r') {
            if (name === 'restrict') {
                return this.wzLoadToChildColl(child, md.restrict, this.restricts);
            }
        }
        if (_l == 11 && _ch == 'i') {
            if (name === 'is-required') {
                this.isRequired = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_required') {
                this.isRequired = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is-datatype') {
                this.isDataType = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_datatype') {
                this.isDataType = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 21 && _ch == 'd') {
            if (name === 'default-when-declared') {
                this.defaultWhenDeclared = child.v; return true;
            }
            else if (name === 'default_when_declared') {
                this.defaultWhenDeclared = child.v; return true;
            }
        }
        ok = md.schemaitem.prototype.loadChild.call(this, child);
        return ok;
    }
    attribute.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.wizzischemaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    attribute.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("attribute", "type", this.type, this.allowedTYPES, this);
        var i, i_len=this.restricts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.restricts[i];
            item.wzVerify(ctx);
        }
        md.schemaitem.prototype.wzVerify.call(this, ctx);
    }
    attribute.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.restricts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.restricts[i];
            item.wzInitialize(ctx);
        }
        md.schemaitem.prototype.wzInitialize.call(this, ctx);
    }
    return attribute;
})(schemaitem);


md.attribute = attribute;
/**
    element relation
     A relation to a child element.
     By default is a one-to-many relation.
     Can be set to a one-to-one, declaring the attribute isOneToOne.
*/
var relation = (function (schemaitem) {
    _inherits(relation, schemaitem);
    function relation(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(relation.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, relation);
        this.wzElement = "relation";
        this.isOneToOne = false;
        this.noGetMethod = false;
        this.hasAddOnce = false;
    }
    relation.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 6 && _ch == 'n') {
            if (name === 'no-get') {
                this.noGetMethod = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'no_get') {
                this.noGetMethod = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 8 && _ch == 'a') {
            if (name === 'add-once') {
                this.hasAddOnce = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'add_once') {
                this.hasAddOnce = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 10 && _ch == 'o') {
            if (name === 'one-to-one') {
                this.isOneToOne = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'one_to_one') {
                this.isOneToOne = parseboolean(child.v, true, child); return true;
            }
        }
        ok = md.schemaitem.prototype.loadChild.call(this, child);
        return ok;
    }
    relation.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.wizzischemaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return relation;
})(schemaitem);


md.relation = relation;
/**
    element restrict
     Group of restrictions to the element or attribute values
*/
var restrict = (function (schemaitem) {
    _inherits(restrict, schemaitem);
    function restrict(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(restrict.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, restrict);
        this.wzElement = "restrict";
        // relation facet
        this.facets = [];
    }
    restrict.prototype.getFacet = function(name) {
        var found = null;
        this.facets.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    restrict.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'e') {
            if (name === 'enum') {
                return this.wzLoadToChildColl(child, md.enumFacet, this.facets);
            }
        }
        if (_l == 6 && _ch == 'r') {
            if (name === 'regexp') {
                return this.wzLoadToChildColl(child, md.regexpFacet, this.facets);
            }
        }
        if (_l == 7 && _ch == 'e') {
            if (name === 'element') {
                return this.wzLoadToChildColl(child, md.elementFacet, this.facets);
            }
        }
        if (_l == 8 && _ch == 'm') {
            if (name === 'maxvalue') {
                return this.wzLoadToChildColl(child, md.maxValueFacet, this.facets);
            }
            else if (name === 'minvalue') {
                return this.wzLoadToChildColl(child, md.minValueFacet, this.facets);
            }
        }
        if (_l == 9 && _ch == 'm') {
            if (name === 'maxlength') {
                return this.wzLoadToChildColl(child, md.maxLengthFacet, this.facets);
            }
            else if (name === 'minlength') {
                return this.wzLoadToChildColl(child, md.minLengthFacet, this.facets);
            }
            else if (name === 'max-value') {
                return this.wzLoadToChildColl(child, md.maxValueFacet, this.facets);
            }
            else if (name === 'min-value') {
                return this.wzLoadToChildColl(child, md.minValueFacet, this.facets);
            }
        }
        if (_l == 10 && _ch == 'm') {
            if (name === 'max-length') {
                return this.wzLoadToChildColl(child, md.maxLengthFacet, this.facets);
            }
            else if (name === 'min-length') {
                return this.wzLoadToChildColl(child, md.minLengthFacet, this.facets);
            }
        }
        ok = md.schemaitem.prototype.loadChild.call(this, child);
        return ok;
    }
    restrict.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.wizzischemaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    restrict.prototype.wzVerify = function(ctx) {
        var i, i_len=this.facets.length, item;
        for (i=0; i<i_len; i++) {
            item = this.facets[i];
            item.wzVerify(ctx);
        }
        md.schemaitem.prototype.wzVerify.call(this, ctx);
    }
    restrict.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.facets.length, item;
        for (i=0; i<i_len; i++) {
            item = this.facets[i];
            item.wzInitialize(ctx);
        }
        md.schemaitem.prototype.wzInitialize.call(this, ctx);
    }
    return restrict;
})(schemaitem);


md.restrict = restrict;
/**
    element facet
     The abstract base class for facet restrictions
*/
var facet = (function (schemaitem) {
    _inherits(facet, schemaitem);
    function facet(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(facet.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, facet);
        this.wzElement = "facet";
    }
    facet.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        ok = md.schemaitem.prototype.loadChild.call(this, child);
        return ok;
    }
    facet.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.wizzischemaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return facet;
})(schemaitem);


md.facet = facet;
/**
    element enumFacet
     A restriction of type enumeration applied to an attribute.
*/
var enumFacet = (function (facet) {
    _inherits(enumFacet, facet);
    function enumFacet(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(enumFacet.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, enumFacet);
        this.wzElement = "enumFacet";
    }
    return enumFacet;
})(facet);


md.enumFacet = enumFacet;
/**
    element maxLengthFacet
     A restriction of type maximum length applied to an attribute.
*/
var maxLengthFacet = (function (facet) {
    _inherits(maxLengthFacet, facet);
    function maxLengthFacet(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(maxLengthFacet.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, maxLengthFacet);
        this.wzElement = "maxLengthFacet";
    }
    return maxLengthFacet;
})(facet);


md.maxLengthFacet = maxLengthFacet;
/**
    element minLengthFacet
     A restriction of type minimum length applied to an attribute.
*/
var minLengthFacet = (function (facet) {
    _inherits(minLengthFacet, facet);
    function minLengthFacet(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(minLengthFacet.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, minLengthFacet);
        this.wzElement = "minLengthFacet";
    }
    return minLengthFacet;
})(facet);


md.minLengthFacet = minLengthFacet;
/**
    element maxValueFacet
     A restriction of type maximum value applied to an attribute.
*/
var maxValueFacet = (function (facet) {
    _inherits(maxValueFacet, facet);
    function maxValueFacet(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(maxValueFacet.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, maxValueFacet);
        this.wzElement = "maxValueFacet";
    }
    return maxValueFacet;
})(facet);


md.maxValueFacet = maxValueFacet;
/**
    element minValueFacet
     A restriction of type minimum value applied to an attribute.
*/
var minValueFacet = (function (facet) {
    _inherits(minValueFacet, facet);
    function minValueFacet(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(minValueFacet.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, minValueFacet);
        this.wzElement = "minValueFacet";
    }
    return minValueFacet;
})(facet);


md.minValueFacet = minValueFacet;
/**
    element regexpFacet
     A restriction of type regexp test applied to an attribute.
*/
var regexpFacet = (function (facet) {
    _inherits(regexpFacet, facet);
    function regexpFacet(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(regexpFacet.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, regexpFacet);
        this.wzElement = "regexpFacet";
    }
    return regexpFacet;
})(facet);


md.regexpFacet = regexpFacet;
/**
    element elementFacet
     A restriction of type allowed child element applied to an element.
*/
var elementFacet = (function (facet) {
    _inherits(elementFacet, facet);
    function elementFacet(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(elementFacet.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, elementFacet);
        this.wzElement = "elementFacet";
    }
    return elementFacet;
})(facet);


md.elementFacet = elementFacet;
/**
    element exportTo
     Require the emission, in the WizziModelType of the schema, of a function
     for exporting the model instance to a different format.
     There are a few built-in ExportTo functions. New export formats may be created
     by WizziPackage developers using methods.
*/
var exportTo = (function (schemaitem) {
    _inherits(exportTo, schemaitem);
    function exportTo(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(exportTo.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, exportTo);
        this.allowedNames = [ "json", "xml", "prettify"];
        this.wzElement = "exportTo";
    }
    exportTo.NAME_JSON = "json";
    exportTo.NAME_XML = "xml";
    exportTo.NAME_PRETTIFY = "prettify";
    exportTo.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("exportTo", "Name", this.wzName, this.allowedNames, this);
        md.schemaitem.prototype.wzVerify.call(this, ctx);
    }
    return exportTo;
})(schemaitem);


md.exportTo = exportTo;
/**
    element require
     A node-js require statement that is emitted in the WizziModelType of the schema.
     The IttfNodeValue is the package name. It is also the variable name of the required package
     unless a declare-var attribute is present.
*/
var require = (function (schemaitem) {
    _inherits(require, schemaitem);
    function require(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(require.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, require);
        this.allowedKINDS = [ "function", "module", "context-method"];
        this.KIND_XFUNCTION = "function";
        this.KIND_MODULE = "module";
        this.KIND_CONTEXT_METHOD = "context-method";
        this.wzElement = "require";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.kind = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.declareVar = null
    }
    require.KIND_XFUNCTION = "function";
    require.KIND_MODULE = "module";
    require.KIND_CONTEXT_METHOD = "context-method";
    require.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'k') {
            if (name === 'kind') {
                this.kind = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'd') {
            if (name === 'declare-var') {
                this.declareVar = child.v; return true;
            }
            else if (name === 'declare_var') {
                this.declareVar = child.v; return true;
            }
        }
        ok = md.schemaitem.prototype.loadChild.call(this, child);
        return ok;
    }
    require.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.wizzischemaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    require.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("require", "kind", this.kind, this.allowedKINDS, this);
        md.schemaitem.prototype.wzVerify.call(this, ctx);
    }
    return require;
})(schemaitem);


md.require = require;
/**
    element method
     A method of an element element pseudo-class generated in the WizziModelType.
*/
var method = (function (schemaitem) {
    _inherits(method, schemaitem);
    function method(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(method.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, method);
        this.wzElement = "method";
        /**
             The emit key of the artifact which should insert this method.
             Can be any string that artifact generators will filter.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.emitkey = null
        // relation param
        this.params = [];
        // relation require
        this.requires = [];
        // relation statement
        this.statements = [];
    }
    method.prototype.addParam = function(name,sourceLineInfo) {
        var retval = new md.param(name, sourceLineInfo);
        retval.wzParent = this;
        this.params.push(retval);
        return retval;
    }
    method.prototype.getParam = function(name) {
        var found = null;
        this.params.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    method.prototype.addRequire = function(name,sourceLineInfo) {
        var retval = new md.require(name, sourceLineInfo);
        retval.wzParent = this;
        this.requires.push(retval);
        return retval;
    }
    method.prototype.getRequire = function(name) {
        var found = null;
        this.requires.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    method.prototype.addStatement = function(name,sourceLineInfo) {
        var retval = new md.statement(name, sourceLineInfo);
        retval.wzParent = this;
        this.statements.push(retval);
        return retval;
    }
    method.prototype.getStatement = function(name) {
        var found = null;
        this.statements.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    method.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '+') {
            if (name === '+') {
                return this.wzLoadToChildColl(child, md.codeline, this.statements);
            }
        }
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, md.jsPropertyOrValue, this.statements);
            }
        }
        if (_l == 1 && _ch == '[') {
            if (name === '[') {
                return this.wzLoadToChildColl(child, md.jsArray, this.statements);
            }
        }
        if (_l == 1 && _ch == '_') {
            if (name === '_') {
                return this.wzLoadToChildColl(child, md.call, this.statements);
            }
        }
        if (_l == 1 && _ch == '{') {
            if (name === '{') {
                return this.wzLoadToChildColl(child, md.jsObject, this.statements);
            }
        }
        if (_l == 2 && _ch == 'd') {
            if (name === 'do') {
                return this.wzLoadToChildColl(child, md.xdo, this.statements);
            }
        }
        if (_l == 2 && _ch == 'i') {
            if (name === 'if') {
                return this.wzLoadToChildColl(child, md.xif, this.statements);
            }
        }
        if (_l == 3 && _ch == 'f') {
            if (name === 'for') {
                return this.wzLoadToChildColl(child, md.xfor, this.statements);
            }
        }
        if (_l == 3 && _ch == 'l') {
            if (name === 'log') {
                return this.wzLoadToChildColl(child, md.log, this.statements);
            }
        }
        if (_l == 3 && _ch == 'n') {
            if (name === 'new') {
                return this.wzLoadToChildColl(child, md.xnew, this.statements);
            }
        }
        if (_l == 3 && _ch == 's') {
            if (name === 'set') {
                return this.wzLoadToChildColl(child, md.set, this.statements);
            }
        }
        if (_l == 3 && _ch == 't') {
            if (name === 'try') {
                return this.wzLoadToChildColl(child, md.xtry, this.statements);
            }
        }
        if (_l == 3 && _ch == 'v') {
            if (name === 'var') {
                return this.wzLoadToChildColl(child, md.xvar, this.statements);
            }
        }
        if (_l == 4 && _ch == 'c') {
            if (name === 'case') {
                return this.wzLoadToChildColl(child, md.xcase, this.statements);
            }
        }
        if (_l == 4 && _ch == 'd') {
            if (name === 'decl') {
                return this.wzLoadToChildColl(child, md.decl, this.statements);
            }
        }
        if (_l == 4 && _ch == 'e') {
            if (name === 'elif') {
                return this.wzLoadToChildColl(child, md.elif, this.statements);
            }
            else if (name === 'else') {
                return this.wzLoadToChildColl(child, md.xelse, this.statements);
            }
        }
        if (_l == 5 && _ch == 'b') {
            if (name === 'break') {
                return this.wzLoadToChildColl(child, md.xbreak, this.statements);
            }
        }
        if (_l == 5 && _ch == 'c') {
            if (name === 'catch') {
                return this.wzLoadToChildColl(child, md.xcatch, this.statements);
            }
        }
        if (_l == 5 && _ch == 'p') {
            if (name === 'param') {
                return this.wzLoadToChildColl(child, md.param, this.params);
            }
            else if (name === 'param') {
                return this.wzLoadToChildColl(child, md.param, this.statements);
            }
        }
        if (_l == 5 && _ch == 't') {
            if (name === 'throw') {
                return this.wzLoadToChildColl(child, md.xthrow, this.statements);
            }
        }
        if (_l == 5 && _ch == 'w') {
            if (name === 'while') {
                return this.wzLoadToChildColl(child, md.xwhile, this.statements);
            }
        }
        if (_l == 6 && _ch == 'r') {
            if (name === 'return') {
                return this.wzLoadToChildColl(child, md.xreturn, this.statements);
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'switch') {
                return this.wzLoadToChildColl(child, md.xswitch, this.statements);
            }
        }
        if (_l == 7 && _ch == 'e') {
            if (name === 'emitkey') {
                this.emitkey = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'f') {
            if (name === 'foreach') {
                return this.wzLoadToChildColl(child, md.foreach, this.statements);
            }
            else if (name === 'finally') {
                return this.wzLoadToChildColl(child, md.xfinally, this.statements);
            }
        }
        if (_l == 7 && _ch == 'r') {
            if (name === 'require') {
                return this.wzLoadToChildColl(child, md.require, this.requires);
            }
        }
        if (_l == 8 && _ch == 'c') {
            if (name === 'continue') {
                return this.wzLoadToChildColl(child, md.xcontinue, this.statements);
            }
        }
        if (_l == 8 && _ch == 'f') {
            if (name === 'function') {
                return this.wzLoadToChildColl(child, md.xfunction, this.statements);
            }
        }
        if (_l == 9 && _ch == 's') {
            if (name === 'statement') {
                return this.wzLoadToChildColl(child, md.statement, this.statements);
            }
        }
        ok = md.schemaitem.prototype.loadChild.call(this, child);
        return ok;
    }
    method.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.wizzischemaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    method.prototype.wzVerify = function(ctx) {
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.requires.length, item;
        for (i=0; i<i_len; i++) {
            item = this.requires[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.statements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.statements[i];
            item.wzVerify(ctx);
        }
        md.schemaitem.prototype.wzVerify.call(this, ctx);
    }
    method.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.requires.length, item;
        for (i=0; i<i_len; i++) {
            item = this.requires[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.statements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.statements[i];
            item.wzInitialize(ctx);
        }
        md.schemaitem.prototype.wzInitialize.call(this, ctx);
    }
    return method;
})(schemaitem);


md.method = method;
/**
    element param
     A parameter of a method or function element.
*/
var param = (function (schemaitem) {
    _inherits(param, schemaitem);
    function param(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(param.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, param);
        this.wzElement = "param";
    }
    return param;
})(schemaitem);


md.param = param;
// element statement
var statement = (function (schemaitem) {
    _inherits(statement, schemaitem);
    function statement(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(statement.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, statement);
        this.wzElement = "statement";
        // relation statement
        this.statements = [];
    }
    statement.prototype.addStatement = function(name,sourceLineInfo) {
        var retval = new md.statement(name, sourceLineInfo);
        retval.wzParent = this;
        this.statements.push(retval);
        return retval;
    }
    statement.prototype.getStatement = function(name) {
        var found = null;
        this.statements.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    statement.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '+') {
            if (name === '+') {
                return this.wzLoadToChildColl(child, md.codeline, this.statements);
            }
        }
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, md.jsPropertyOrValue, this.statements);
            }
        }
        if (_l == 1 && _ch == '[') {
            if (name === '[') {
                return this.wzLoadToChildColl(child, md.jsArray, this.statements);
            }
        }
        if (_l == 1 && _ch == '_') {
            if (name === '_') {
                return this.wzLoadToChildColl(child, md.call, this.statements);
            }
        }
        if (_l == 1 && _ch == '{') {
            if (name === '{') {
                return this.wzLoadToChildColl(child, md.jsObject, this.statements);
            }
        }
        if (_l == 2 && _ch == 'd') {
            if (name === 'do') {
                return this.wzLoadToChildColl(child, md.xdo, this.statements);
            }
        }
        if (_l == 2 && _ch == 'i') {
            if (name === 'if') {
                return this.wzLoadToChildColl(child, md.xif, this.statements);
            }
        }
        if (_l == 3 && _ch == 'f') {
            if (name === 'for') {
                return this.wzLoadToChildColl(child, md.xfor, this.statements);
            }
        }
        if (_l == 3 && _ch == 'l') {
            if (name === 'log') {
                return this.wzLoadToChildColl(child, md.log, this.statements);
            }
        }
        if (_l == 3 && _ch == 'n') {
            if (name === 'new') {
                return this.wzLoadToChildColl(child, md.xnew, this.statements);
            }
        }
        if (_l == 3 && _ch == 's') {
            if (name === 'set') {
                return this.wzLoadToChildColl(child, md.set, this.statements);
            }
        }
        if (_l == 3 && _ch == 't') {
            if (name === 'try') {
                return this.wzLoadToChildColl(child, md.xtry, this.statements);
            }
        }
        if (_l == 3 && _ch == 'v') {
            if (name === 'var') {
                return this.wzLoadToChildColl(child, md.xvar, this.statements);
            }
        }
        if (_l == 4 && _ch == 'c') {
            if (name === 'case') {
                return this.wzLoadToChildColl(child, md.xcase, this.statements);
            }
        }
        if (_l == 4 && _ch == 'd') {
            if (name === 'decl') {
                return this.wzLoadToChildColl(child, md.decl, this.statements);
            }
        }
        if (_l == 4 && _ch == 'e') {
            if (name === 'elif') {
                return this.wzLoadToChildColl(child, md.elif, this.statements);
            }
            else if (name === 'else') {
                return this.wzLoadToChildColl(child, md.xelse, this.statements);
            }
        }
        if (_l == 5 && _ch == 'b') {
            if (name === 'break') {
                return this.wzLoadToChildColl(child, md.xbreak, this.statements);
            }
        }
        if (_l == 5 && _ch == 'c') {
            if (name === 'catch') {
                return this.wzLoadToChildColl(child, md.xcatch, this.statements);
            }
        }
        if (_l == 5 && _ch == 'p') {
            if (name === 'param') {
                return this.wzLoadToChildColl(child, md.param, this.statements);
            }
        }
        if (_l == 5 && _ch == 't') {
            if (name === 'throw') {
                return this.wzLoadToChildColl(child, md.xthrow, this.statements);
            }
        }
        if (_l == 5 && _ch == 'w') {
            if (name === 'while') {
                return this.wzLoadToChildColl(child, md.xwhile, this.statements);
            }
        }
        if (_l == 6 && _ch == 'r') {
            if (name === 'return') {
                return this.wzLoadToChildColl(child, md.xreturn, this.statements);
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'switch') {
                return this.wzLoadToChildColl(child, md.xswitch, this.statements);
            }
        }
        if (_l == 7 && _ch == 'f') {
            if (name === 'foreach') {
                return this.wzLoadToChildColl(child, md.foreach, this.statements);
            }
            else if (name === 'finally') {
                return this.wzLoadToChildColl(child, md.xfinally, this.statements);
            }
        }
        if (_l == 8 && _ch == 'c') {
            if (name === 'continue') {
                return this.wzLoadToChildColl(child, md.xcontinue, this.statements);
            }
        }
        if (_l == 8 && _ch == 'f') {
            if (name === 'function') {
                return this.wzLoadToChildColl(child, md.xfunction, this.statements);
            }
        }
        if (_l == 9 && _ch == 's') {
            if (name === 'statement') {
                return this.wzLoadToChildColl(child, md.statement, this.statements);
            }
        }
        ok = md.schemaitem.prototype.loadChild.call(this, child);
        return ok;
    }
    statement.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.wizzischemaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    statement.prototype.wzVerify = function(ctx) {
        var i, i_len=this.statements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.statements[i];
            item.wzVerify(ctx);
        }
        md.schemaitem.prototype.wzVerify.call(this, ctx);
    }
    statement.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.statements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.statements[i];
            item.wzInitialize(ctx);
        }
        md.schemaitem.prototype.wzInitialize.call(this, ctx);
    }
    return statement;
})(schemaitem);


md.statement = statement;
// element xvar
var xvar = (function (statement) {
    _inherits(xvar, statement);
    function xvar(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(xvar.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xvar);
        this.wzElement = "xvar";
    }
    return xvar;
})(statement);


md.xvar = xvar;
// element decl
var decl = (function (statement) {
    _inherits(decl, statement);
    function decl(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(decl.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, decl);
        this.wzElement = "decl";
    }
    return decl;
})(statement);


md.decl = decl;
// element xif
var xif = (function (statement) {
    _inherits(xif, statement);
    function xif(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(xif.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xif);
        this.wzElement = "xif";
    }
    return xif;
})(statement);


md.xif = xif;
// element elif
var elif = (function (statement) {
    _inherits(elif, statement);
    function elif(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(elif.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, elif);
        this.wzElement = "elif";
    }
    return elif;
})(statement);


md.elif = elif;
// element xelse
var xelse = (function (statement) {
    _inherits(xelse, statement);
    function xelse(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(xelse.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xelse);
        this.wzElement = "xelse";
    }
    return xelse;
})(statement);


md.xelse = xelse;
// element xswitch
var xswitch = (function (statement) {
    _inherits(xswitch, statement);
    function xswitch(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(xswitch.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xswitch);
        this.wzElement = "xswitch";
    }
    return xswitch;
})(statement);


md.xswitch = xswitch;
// element xcase
var xcase = (function (statement) {
    _inherits(xcase, statement);
    function xcase(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(xcase.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xcase);
        this.wzElement = "xcase";
    }
    return xcase;
})(statement);


md.xcase = xcase;
// element xfor
var xfor = (function (statement) {
    _inherits(xfor, statement);
    function xfor(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(xfor.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xfor);
        this.wzElement = "xfor";
    }
    return xfor;
})(statement);


md.xfor = xfor;
// element foreach
var foreach = (function (statement) {
    _inherits(foreach, statement);
    function foreach(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(foreach.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, foreach);
        this.wzElement = "foreach";
    }
    return foreach;
})(statement);


md.foreach = foreach;
// element xbreak
var xbreak = (function (statement) {
    _inherits(xbreak, statement);
    function xbreak(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(xbreak.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xbreak);
        this.wzElement = "xbreak";
    }
    return xbreak;
})(statement);


md.xbreak = xbreak;
// element xcontinue
var xcontinue = (function (statement) {
    _inherits(xcontinue, statement);
    function xcontinue(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(xcontinue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xcontinue);
        this.wzElement = "xcontinue";
    }
    return xcontinue;
})(statement);


md.xcontinue = xcontinue;
// element xwhile
var xwhile = (function (statement) {
    _inherits(xwhile, statement);
    function xwhile(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(xwhile.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xwhile);
        this.wzElement = "xwhile";
    }
    return xwhile;
})(statement);


md.xwhile = xwhile;
// element xdo
var xdo = (function (statement) {
    _inherits(xdo, statement);
    function xdo(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(xdo.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xdo);
        this.wzElement = "xdo";
    }
    return xdo;
})(statement);


md.xdo = xdo;
// element xtry
var xtry = (function (statement) {
    _inherits(xtry, statement);
    function xtry(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(xtry.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xtry);
        this.wzElement = "xtry";
    }
    return xtry;
})(statement);


md.xtry = xtry;
// element xcatch
var xcatch = (function (statement) {
    _inherits(xcatch, statement);
    function xcatch(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(xcatch.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xcatch);
        this.wzElement = "xcatch";
    }
    return xcatch;
})(statement);


md.xcatch = xcatch;
// element xfinally
var xfinally = (function (statement) {
    _inherits(xfinally, statement);
    function xfinally(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(xfinally.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xfinally);
        this.wzElement = "xfinally";
    }
    return xfinally;
})(statement);


md.xfinally = xfinally;
// element xthrow
var xthrow = (function (statement) {
    _inherits(xthrow, statement);
    function xthrow(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(xthrow.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xthrow);
        this.wzElement = "xthrow";
    }
    return xthrow;
})(statement);


md.xthrow = xthrow;
// element xreturn
var xreturn = (function (statement) {
    _inherits(xreturn, statement);
    function xreturn(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(xreturn.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xreturn);
        this.wzElement = "xreturn";
    }
    return xreturn;
})(statement);


md.xreturn = xreturn;
// element set
var set = (function (statement) {
    _inherits(set, statement);
    function set(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(set.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, set);
        this.wzElement = "set";
    }
    return set;
})(statement);


md.set = set;
// element log
var log = (function (statement) {
    _inherits(log, statement);
    function log(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(log.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, log);
        this.wzElement = "log";
    }
    return log;
})(statement);


md.log = log;
// element call
var call = (function (statement) {
    _inherits(call, statement);
    function call(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(call.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, call);
        this.wzElement = "call";
    }
    return call;
})(statement);


md.call = call;
// element jsObject
var jsObject = (function (statement) {
    _inherits(jsObject, statement);
    function jsObject(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(jsObject.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsObject);
        this.wzElement = "jsObject";
    }
    return jsObject;
})(statement);


md.jsObject = jsObject;
// element jsArray
var jsArray = (function (statement) {
    _inherits(jsArray, statement);
    function jsArray(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(jsArray.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsArray);
        this.wzElement = "jsArray";
    }
    return jsArray;
})(statement);


md.jsArray = jsArray;
// element jsPropertyOrValue
var jsPropertyOrValue = (function (statement) {
    _inherits(jsPropertyOrValue, statement);
    function jsPropertyOrValue(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(jsPropertyOrValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsPropertyOrValue);
        this.wzElement = "jsPropertyOrValue";
    }
    return jsPropertyOrValue;
})(statement);


md.jsPropertyOrValue = jsPropertyOrValue;
// element xfunction
var xfunction = (function (statement) {
    _inherits(xfunction, statement);
    function xfunction(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(xfunction.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xfunction);
        this.wzElement = "xfunction";
    }
    return xfunction;
})(statement);


md.xfunction = xfunction;
// element xnew
var xnew = (function (statement) {
    _inherits(xnew, statement);
    function xnew(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(xnew.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xnew);
        this.wzElement = "xnew";
    }
    return xnew;
})(statement);


md.xnew = xnew;
// element codeline
var codeline = (function (statement) {
    _inherits(codeline, statement);
    function codeline(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(codeline.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, codeline);
        this.wzElement = "codeline";
    }
    return codeline;
})(statement);


md.codeline = codeline;
// element param
var param = (function (statement) {
    _inherits(param, statement);
    function param(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(param.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, param);
        this.wzElement = "param";
    }
    return param;
})(statement);


md.param = param;
md.__tagElementMapping = { 'e': 'element', 'export-to': 'exportTo', 'exportto': 'exportTo', 'm': 'method', '#': 'comment', 'a': 'attribute', 'r': 'relation', 'enum': 'enumFacet', 'max-length': 'maxLengthFacet', 'maxlength': 'maxLengthFacet', 'min-length': 'minLengthFacet', 'minlength': 'minLengthFacet', 'max-value': 'maxValueFacet', 'maxvalue': 'maxValueFacet', 'min-value': 'minValueFacet', 'minvalue': 'minValueFacet', 'regexp': 'regexpFacet', 'element': 'elementFacet', 'var': 'xvar', 'if': 'xif', 'else': 'xelse', 'switch': 'xswitch', 'case': 'xcase', 'for': 'xfor', 'break': 'xbreak', 'continue': 'xcontinue', 'while': 'xwhile', 'do': 'xdo', 'try': 'xtry', 'catch': 'xcatch', 'finally': 'xfinally', 'throw': 'xthrow', 'return': 'xreturn', '_': 'call', '{': 'jsObject', '[': 'jsArray', '@': 'jsPropertyOrValue', 'function': 'xfunction', 'new': 'xnew', '+': 'codeline' };
var wizzischemaException = (function () {
    function wizzischemaException(message,node,instance) {
        _classCallCheck(this, wizzischemaException);
        // TODO node seems superflous
        if (node && instance) {
            this.message = message + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        this.stack = new Error().stack;
        this.node = node;
    }
    return wizzischemaException;
})();


md.wizzischemaException = wizzischemaException;
var wizzischemaContext = (function () {
    function wizzischemaContext() {
        _classCallCheck(this, wizzischemaContext);
        this.validationErrors = [];
    }
    wizzischemaContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    wizzischemaContext.prototype.addError = function(message,node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at);
    }
    wizzischemaContext.prototype.verifyEnum = function(valueType,valueName,value,allowed,node) {
        if (value && allowed.indexOf(value) < 0) {
            var allowedStr = 'allowed: ' + allowed.join(', ');
            this.validationErrors.push(valueType + ' ' + valueName + ' has an invalid value: ' + value + ' ' + allowedStr + '. At ' + (node.wzSourceLineInfo ? node.wzSourceLineInfo.toString(node) : 'location unavailable'));
        }
    }
    return wizzischemaContext;
})();


md.wizzischemaContext = wizzischemaContext;
function parseboolean(value,defaultValue,node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    if (!isBoolean(value)) {
        throw new nodeException('Must be a boolean value (\"true\" or \"false\"), got:' + value, node);
    }
    return value === 'true' ? true : false;
}

function isBoolean(value) {
    return value === 'true' || value === 'false';
}

function parsestring(value,defaultValue,node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}

function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}

function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}


