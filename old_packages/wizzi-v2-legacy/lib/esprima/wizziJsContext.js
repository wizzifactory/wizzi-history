/*
    artifact generator: /wizzi/lib/artifacts/js/module/gen/main.js
    primary source IttfDocument: C:\My\wizzi\v2\sources\wizzi-2-boot\ittf\lib\esprima\wizziJsContext.js.ittf
    utc time: Tue, 11 Jul 2017 18:50:00 GMT
*/
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var assert = require('assert');
var util = require('util');
var f_dateutil = require('./functions/dateutil');
var f_verify = require('./functions/verify');
var f_underscore = require('./functions/underscore');
var errors = require('./errors');
var WizziJsEvalHelper = require('./wizziJsEvalHelper');
var ContextData = require('./contextData');
var defaultValues = {
    '__dollardollar': '$$', 
    '__dollaraster': '$*', 
    '__asterdollar': '*$'
};
var knownCallables = {
    'console': console, 
    '_': f_underscore, 
    'Object': Object, 
    'Math': Math, 
    'path': require('path'), 
    'dateUtil': f_dateutil, 
    'verify': f_verify
};
var ittfStates = {
    nodeContext: 0, 
    modelEvalContext: 1, 
    globalContext: 2
};
var WizziJsContext = (function () {
    function WizziJsContext(composedIttfModel) {
        _classCallCheck(this, WizziJsContext);
        if (composedIttfModel) {
            // The WizziJsContext is used for the
            // evaluation of an IttfModel.
            // Create the WizziJsEvalHelper
            this.primaryIttfModel = composedIttfModel;
            this.loadContext = composedIttfModel.loadContext;
            this.evalHelper = new WizziJsEvalHelper(this, composedIttfModel);
        }
        else {
            // The WizziJsContext is used for interpolations.
        }
        
        this.nodeContext = new ContextData(ittfStates.nodeContext);
        this.globalContext = new ContextData(ittfStates.globalContext);
        
        this.exprPending = null;
        
        // The first getValue will be for the '$' variable
        this.ittf_state = ittfStates.globalContext;
        this.currentIttfModelKey = null;
        this.modelEvalContext = null;
        
        this.globalContext.declare('$', this.evalHelper);
        this.globalContext.$freeze();
        this.globalContext.setValues(defaultValues);
        this.globalContext.setValues(knownCallables);
        
        this.runningNodeId = null;
        
    }
    // Called by WizziJsRunner.FunctionDeclarationCall
    WizziJsContext.prototype.push = function() {
        var ret = new WizziJsContext(this.evalHelper);
        return ret;
    }
    WizziJsContext.prototype.pop = function() {
        this.clear();
    }
    WizziJsContext.prototype.clear = function() {
        this.globalContext.clear();
        this.nodeContext.clear();
        if (this.modelEvalContext) {
            this.modelEvalContext.clear();
        }
        this.globalContext.declare('$', this.evalHelper);
        this.globalContext.$freeze();
        this.globalContext.setValues(defaultValues);
        this.globalContext.setValues(knownCallables);
    }
    WizziJsContext.prototype.setRunningNodeId = function(id) {
        this.runningNodeId = id;
    }
    WizziJsContext.prototype.get_currentIttfModelInfo = function() {
        if (this.currentIttfModelKey == null) {
            return {
                    currentModel_uri: 'unavailable', 
                    currentModel_callerUri: 'unavailable'
                };
        }
        else {
            var ittfModelData = this.loadContext.getIttfModelData(this.currentIttfModelKey);
            var callerUri = 'root model';
            if (ittfModelData.ittfModel.$mixerModelKey) {
                var callerIttfModelData = this.loadContext.getIttfModelData(ittfModelData.ittfModel.$mixerModelKey);
                var callerUri = callerIttfModelData ? callerIttfModelData.ittfDocumentUri : 'root model';
            }
            return {
                    currentModel_uri: ittfModelData.ittfDocumentUri, 
                    currentModel_callerUri: callerUri
                };
        }
    }
    WizziJsContext.prototype.declare = function(name,value) {
        if (this.ittf_state === ittfStates.globalContext) {
            this.globalContext.declare(name, value);
        }
        else if (this.ittf_state === ittfStates.nodeContext) {
            this.nodeContext.declare(name, value);
        }
        else {
            this.modelEvalContext.declare(name, value);
        }
    }
    WizziJsContext.prototype.undeclare = function(name) {
        if (this.ittf_state === ittfStates.globalContext) {
            this.globalContext.undeclare(name);
        }
        else if (this.ittf_state === ittfStates.nodeContext) {
            this.nodeContext.undeclare(name);
        }
        else {
            this.modelEvalContext.undeclare(name);
        }
    }
    WizziJsContext.prototype.isDeclared = function(name) {
        var ret = false;
        if (this.ittf_state === ittfStates.globalContext) {
            ret = this.globalContext.isDeclared(name);
        }
        else if (this.ittf_state === ittfStates.nodeContext) {
            var ret = this.nodeContext.isDeclared(name);
            if (!ret) {
                ret = this.globalContext.isDeclared(name);
            }
        }
        else {
            var ret = this.modelEvalContext.isDeclared(name);
            if (!ret) {
                ret = this.globalContext.isDeclared(name);
            }
        }
        return ret;
    }
    WizziJsContext.prototype.setValue = function(name,value) {
        if (this.ittf_state === ittfStates.globalContext) {
            this.globalContext.setValue(name, value);
        }
        else if (this.ittf_state === ittfStates.nodeContext) {
            this.nodeContext.setValue(name, value);
        }
        else {
            this.modelEvalContext.setValue(name, value);
        }
    }
    WizziJsContext.prototype.setValues = function(values) {
        values = (values || {});
        for (var k in values) {
            this.setValue(k, values[k]);
        }
    }
    WizziJsContext.prototype.put = function(name,value) {
        assert(this.ittf_state != ittfStates.nodeContext, 'put in an invalid operation for NodeContext state');
        var ok = false;
        if (this.ittf_state === ittfStates.globalContext) {
            ok = this.globalContext.put(name, value);
        }
        else {
            ok = this.modelEvalContext.put(name, value);
            if (!ok) {
                ok = this.globalContext.put(name, value);
            }
        }
        if (!ok) {
            throw new Error('Not declared: ' + name);
        }
    }
    WizziJsContext.prototype.getValue = function(name) {
        if (this.ittf_state === ittfStates.globalContext) {
            if (this.globalContext.isDeclared(name)) {
                return this.globalContext.getValue(name);
            }
            else {
                return undefined;
            }
        }
        else if (this.ittf_state === ittfStates.nodeContext) {
            if (this.nodeContext.isDeclared(name)) {
                return this.nodeContext.getValue(name);
            }
            if (this.globalContext.isDeclared(name)) {
                return this.globalContext.getValue(name);
            }
            return undefined;
        }
        else {
            if (this.modelEvalContext.isDeclared(name)) {
                return this.modelEvalContext.getValue(name);
            }
            if (this.globalContext.isDeclared(name)) {
                return this.globalContext.getValue(name);
            }
            return undefined;
            console.log('WizziJsContext.getValue context value not found for', name);
            console.log('WizziJsContext.getValue ittf_state ', this.ittf_state);
            console.log('WizziJsContext.getValue currentIttfModelKey ', this.currentIttfModelKey);
            this.dumpValues();
            throw new Error('In esprima context. Not declared: ' + name);
        }
    }
    WizziJsContext.prototype.getValues = function() {
        // TODO modelEvalContext needs globalValues ???
        if (this.ittf_state === ittfStates.globalContext) {
            return this.globalContext.getValues();
        }
        else if (this.ittf_state === ittfStates.nodeContext) {
            return this.nodeContext.getValues();
        }
        else {
            return this.modelEvalContext.getValues();
        }
    }
    WizziJsContext.prototype.setGlobalValues = function(values) {
        this.globalContext.setValues(values);
    }
    WizziJsContext.prototype.getGlobalValues = function() {
        this.globalContext.values();
    }
    WizziJsContext.prototype.declareFunction = function(name,fn) {
        if (this.ittf_state === ittfStates.globalContext) {
            this.globalContext.declareFunction(name, fn);
        }
        else {
            this.modelEvalContext.declareFunction(name, fn);
        }
    }
    WizziJsContext.prototype.getFunction = function(name) {
        if (this.ittf_state === ittfStates.globalContext) {
            return this.globalContext.getFunction(name);
        }
        else {
            var ret = this.modelEvalContext.getFunction(name);
            return ret ? ret : this.globalContext.getFunction(name);
        }
    }
    WizziJsContext.prototype.beginExpr = function() {
        this.exprPending = {};
    }
    WizziJsContext.prototype.endExpr = function() {
        assert(this.exprPending, 'endExpr called without previous call to beginExpr');
        for (var k in this.exprPending) {
            this.put(k, this.exprPending[k]);
        }
        this.exprPending = null;
    }
    WizziJsContext.prototype.dumpValues = function() {
        // TODO if this.verbose
        console.log('Dump context value for debug');
        console.log('WizziJsContext ittf_state ', this.ittf_state);
        console.log('WizziJsContext currentIttfModelKey ', this.currentIttfModelKey);
        if (this.modelEvalContext) {
            console.log('Local values');
            this.modelEvalContext.dumpValues();
        }
        console.log('Global values');
        this.globalContext.dumpValues();
    }
    WizziJsContext.prototype.getDeclaredInfo = function() {
        var ret = [];
        if (this.ittf_state === ittfStates.globalContext) {
            ret.push('state=global');
            ret.push('global declares:' + this.globalContext.getDeclaredInfo());
        }
        else if (this.ittf_state === ittfStates.nodeContext) {
            ret.push('state=node');
        }
        else {
            ret.push('state=model:' + this.currentIttfModelKey);
            ret.push('model declares:' + this.modelEvalContext.getDeclaredInfo());
            ret.push('global declares:' + this.globalContext.getDeclaredInfo());
        }
        return ret.join(', ');
    }
    /**
         The WizziJsRunner is entering a block of statements
         with instructions for the buildup of the treenode
         of the final (evaluated) IttfModel.
    */
    WizziJsContext.prototype.set_NodeContext = function() {
        if (this.ittf_state === ittfStates.nodeContext) {
            // we already are in a nodeContext state
            return ;
        }
        // log '*** => set_NodeContext'
        this.ittf_state = ittfStates.nodeContext;
        this.currentIttfModelKey = null;
        this.modelEvalContext = null;
    }
    /**
         The WizziJsRunner is entering a block of global statements
         declared inside an IttfDocument.
         Example:
         001     $global var message = 'hello';
    */
    WizziJsContext.prototype.set_GlobalContext = function() {
        if (this.ittf_state === ittfStates.globalContext) {
            // we already are in a globalContext state
            return ;
        }
        // log '*** => set_GlobalContext'
        this.ittf_state = ittfStates.globalContext;
        this.currentIttfModelKey = null;
        this.modelEvalContext = null;
    }
    /**
         The WizziJsRunner is entering a block of local statements
         declared inside an IttfDocument using the $ IttfCommand.
         Example:
         001     $ var message = 'hello';
         or the WizziJsEvalHelper has to execute an interpolation
         on a node value which belongs to the modelKey.
    */
    WizziJsContext.prototype.set_IttfModelEvalContext = function(modelKey,line) {
        if (this.currentIttfModelKey === modelKey) {
            return ;
        }
        // Must stay before the call to getIttfModelEvalContext
        // to allow debug info about modelKey
        this.currentIttfModelKey = modelKey;
        this.modelEvalContext = this.evalHelper.getIttfModelEvalContext(modelKey, line);
        if (this.modelEvalContext && this.modelEvalContext.__is_error) {
            return this.modelEvalContext;
        }
        assert(this.modelEvalContext, 'set_IttfModelEvalContext modelEvalContext for key ' + modelKey + ' undefined');
        // log '*** => set_IttfModelEvalContext', modelKey
        this.ittf_state = ittfStates.modelEvalContext;
        return this.modelEvalContext;
    }
    WizziJsContext.prototype.get_currentIttfModelKey = function() {
        return this.currentIttfModelKey;
    }
    return WizziJsContext;
})();


module.exports = WizziJsContext;
