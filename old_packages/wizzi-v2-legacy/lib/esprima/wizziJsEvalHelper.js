/*
    artifact generator: /wizzi/lib/artifacts/js/module/gen/main.js
    primary source IttfDocument: C:\My\wizzi\v2\sources\wizzi-2-boot\ittf\lib\esprima\wizziJsEvalHelper.js.ittf
    utc time: Tue, 11 Jul 2017 18:50:00 GMT
*/
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var assert = require('assert');
var runnerServer = require('../../runtime/runnerServer').instance;
var ContextData = require('./ContextData');
var WizziJsContext = null;
var interpolate = require('../ittf/ittfInterpolate');
var types = require('../util/types');
var work = {};
work.lineSep = "__LS__";
work.textSep = "__TS__";
/**
     properties
     wizziJsContext:Object
     primaryModel:Object
     loadContext:Object
     callApi:Function
     loadWizziModel:Function
*/
var WizziJsEvalHelper = (function () {
    function WizziJsEvalHelper(wizziJsContext,primaryModel) {
        _classCallCheck(this, WizziJsEvalHelper);
        this.wizziJsContext = wizziJsContext;
        this.primaryModel = primaryModel;
        this.loadContext = primaryModel.loadContext;
        this.textSep = work.textSep;
        if (runnerServer) {
            this.callApi = runnerServer.callApi;
            this.loadWizziModel = runnerServer.loadWizziModel;
        }
    }
    /**
         node tree buildup method
         supershort method name
         means set the WizziJsContext state to IttfModelEvalContext
    */
    WizziJsEvalHelper.prototype.s = function(modelKey) {
        // log 'WizziJsEvalHelper called $.s(' + modelKey +')'
        var notUsed = this.wizziJsContext.set_IttfModelEvalContext(modelKey);
        if (notUsed && notUsed.__is_error) {
            return notUsed;
        }
    }
    /**
         node tree buildup method
         supershort method name
         means set the WizziJsContext state to NodeContext
    */
    WizziJsEvalHelper.prototype.n = function() {
        // log 'WizziJsEvalHelper called $.n()'
        this.wizziJsContext.set_NodeContext();
    }
    /**
         node tree buildup method
         supershort method name
         means set the WizziJsContext state to GlobalContext
    */
    WizziJsEvalHelper.prototype.g = function() {
        // log 'WizziJsEvalHelper called $.g()'
        this.wizziJsContext.set_GlobalContext();
    }
    /**
         node tree buildup method
         supershort method name
         means append a child node to a parent node
    */
    WizziJsEvalHelper.prototype.a = function(parent,node,line) {
        // log 'WizziJsEvalHelper called $.a(' + node.n + ',' + node.v + ')'
        assert(parent, "Error evalHelper. Parent undefined in add. At line " + line);
        node.parent = parent;
        if (typeof (parent.childs) === 'undefined') {
            parent.childs = [];
        }
        node.childs = [];
        parent.childs.push(node);
    }
    /**
         Interpolate a templated node value
    */
    WizziJsEvalHelper.prototype.ip = function(modelKey,templatedValue,type,line,hasMacro) {
        var ret;
        try {
            var save = this.wizziJsContext.get_currentIttfModelKey();
            var notUsed = this.wizziJsContext.set_IttfModelEvalContext(modelKey, line);
            if (notUsed && notUsed.__is_error) {
                return notUsed;
            }
            // log ' *** WizziJsEvalHelper.ip templatedValue', templatedValue, 'modelKey', modelKey
            var ret = interpolate(templatedValue, this.wizziJsContext, {delimiter: '${}'});
            if (ret && ret.__is_error) {
                return ret;
            }
            // log 'interpolated result', ret
            if (hasMacro) {
                ret = remacro(ret);
            }
            if (save === null) {
                this.wizziJsContext.set_NodeContext(modelKey);
            }
            else {
                var notUsed = this.wizziJsContext.set_IttfModelEvalContext(save);
                if (notUsed && notUsed.__is_error) {
                    return notUsed;
                }
            }
        } catch (ex) {
            var ittfModelData = this.loadContext.getIttfModelData(modelKey);
            var callerIttfModelData = this.loadContext.getIttfModelData(ittfModelData.ittfModel.$mixerModelKey);
            var callerUri = callerIttfModelData ? callerIttfModelData.ittfDocumentUri : 'root model';
            // log 'saved ip.currentIttfModelKey', save, 'ittfModelData.evalContext', ittfModelData.evalContext
            // 'values.' + util.inspect(this.wizziJsContext.getValues(), {depth: 2}))
            var exMessage = ex ? ex.message : 'not available';
            var exStack = ex ? ex.stack : 'not available';
            return this.error('Exception interpolating: ' + templatedValue + ', line:' + line + ', type:' + type + ', modelKey:' + modelKey + ', ittfModel uri: ' + ittfModelData.ittfDocumentUri + ', callerIttfModel uri: ' + callerUri + ', ex message: ' + exMessage + ', stack: ' + exStack, null, 'ip')
            ;
        }
        var retObject = types.objectify(ret, type, {
            row: line
        })
        ;
        if (retObject && retObject.__is_error) {
            var ittfModelData = this.loadContext.getIttfModelData(modelKey);
            var error = this.error('Error interpolating: ' + templatedValue + ', line:' + line + ', ittfModel uri: ' + ittfModelData.ittfDocumentUri + ', callerIttfModel uri: ' + callerUri, null, 'ip')
            ;
            error.inner = retObject;
            return error;
        }
        else {
            return retObject;
        }
    }
    WizziJsEvalHelper.prototype.api = function() {
        if (this.callApi) {
            return this.callApi.apply(runnerServer, arguments)
            ;
        }
        else {
            return this.error('A RunnerServer has not been started. You must create a wizzifile.js.', null, 'api')
            ;
        }
    }
    WizziJsEvalHelper.prototype.model = function() {
        if (this.loadWizziModel) {
            return this.loadWizziModel.apply(runnerServer, arguments)
            ;
        }
        else {
            return this.error('A wizzi.RunnerServer has not been started. You must create a wizzifile.js.', null, 'model')
            ;
        }
    }
    /**
         called by set_IttfModelEvalContext
         called by WizziJsRunner
    */
    WizziJsEvalHelper.prototype.getIttfModelEvalContext = function(modelKey,line) {
        // retrieve the ittfModelData for the given modelKey
        // from the loadContext
        var ittfModelData = this.loadContext.getIttfModelData(modelKey);
        var evalContext;
        if (ittfModelData.evalContext != null) {
            // An evalContext object has already been created for this ittfModelData
            evalContext = ittfModelData.evalContext;
            var notUsed = this._refreshEvalContext(ittfModelData, evalContext)
            ;
            if (notUsed && notUsed.__is_error) {
                return notUsed;
            }
        }
        else {
            evalContext = new ContextData(1, modelKey);
            // log 'WizziJsEvalHelper created evalContext for', modelKey, 'id', ittfModelData.ittfModel.id, ittfModelData.evalContext, ittfModelData.ittfDocumentUri
            evalContext.setValue('__dirname', path.dirname(ittfModelData.ittfDocumentUri));
            evalContext.setValue('__filename', ittfModelData.ittfDocumentUri);
            var notUsed = this._refreshEvalContext(ittfModelData, evalContext)
            ;
            if (notUsed && notUsed.__is_error) {
                return notUsed;
            }
            ittfModelData.evalContext = evalContext;
        }
        return evalContext;
    }
    WizziJsEvalHelper.prototype._refreshEvalContext = function(ittfModelData,evalContext) {
        if (ittfModelData.ittfModel.$params) {
            var args = ittfModelData.ittfModel.$args;
            if (args && args.indexOf('${') > -1) {
                /**
                    mixin call arguments must be interpolated
                     ittfModelData.ittfModel.$mixerModelKey is the modelKey of the
                     calling node that mixed the ittfModelData.ittfModel
                     we must retrieve the calling node model context
                */
                var callingNode_ModelContext = this.getIttfModelEvalContext(ittfModelData.ittfModel.$mixerModelKey)
                ;
                if (callingNode_ModelContext && callingNode_ModelContext.__is_error) {
                    return callingNode_ModelContext;
                }
                try {
                    if (WizziJsContext == null) {
                        WizziJsContext = require('./wizziJsContext');
                    }
                    var interpolateArgsContext = new WizziJsContext();
                    interpolateArgsContext.setValues(this.wizziJsContext.globalContext.getSettableValues());
                    interpolateArgsContext.setValues(callingNode_ModelContext.getValues());
                    args = interpolate(args, interpolateArgsContext, {delimiter: '${}'});
                    // log 'WizziJsEvalHelper interpolateArgs', ittfModelData.ittfModel.$args, args
                } catch (ex) {
                    var callerIttfModelData = this.loadContext.getIttfModelData(ittfModelData.ittfModel.$mixerModelKey);
                    var callerUri = callerIttfModelData ? callerIttfModelData.ittfDocumentUri : 'root model';
                    var exMessage = ex ? ex.message : 'not available';
                    var exStack = ex ? ex.stack : 'not available';
                    return this.error('Exception interpolating args: ' + args + ', ittfModel uri: ' + ittfModelData.ittfDocumentUri + ', callerIttfModel uri: ' + callerUri + ', ex message: ' + exMessage + ', stack: ' + exStack, null, '_refreshEvalContext')
                    ;
                }
            }
            var paramValues = ittfModelData.ittfModel.getParamValues(args)
            ;
            if (paramValues && paramValues.__is_error) {
                return paramValues;
            }
            var i, i_len=paramValues.length, item;
            for (i=0; i<i_len; i++) {
                item = paramValues[i];
                if (item.isByRef) {
                    var callingNode_ModelContext = this.getIttfModelEvalContext(ittfModelData.ittfModel.$mixerModelKey)
                    ;
                    if (callingNode_ModelContext && callingNode_ModelContext.__is_error) {
                        return callingNode_ModelContext;
                    }
                    evalContext.setValue(item.name, callingNode_ModelContext.getValue(item.name));
                    ittfModelData.byRefParams = (ittfModelData.byRefParams || []);
                    ittfModelData.byRefParams.push(item.name);
                }
                else {
                    evalContext.setValue(item.name, item.value);
                }
            }
        }
    }
    WizziJsEvalHelper.prototype.error = function(message,extra,method) {
        return {
                __is_error: true, 
                message: message, 
                source: 'lib/esprima/wizziJsEvalHelper/' + method
            };
    }
    return WizziJsEvalHelper;
})();


function remacro(value) {
    return verify.replaceAll(value, "#{", "${");
}

module.exports = WizziJsEvalHelper;
