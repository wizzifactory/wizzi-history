$group

	category Spread

		description
			+ The destructuring assignment syntax is a JavaScript expression that makes 
			+ it possible to unpack values from arrays, or properties from objects, 
			+ into distinct variables.

		ecma-href http://www.ecma-international.org/ecma-262/6.0/#sec-destructuring-assignment

		syntax
			+ var a, b, rest;
			+ [a, b] = [10, 20];
			+ console.log(a); // 10
			+ console.log(b); // 20
			+ [a, b, ...rest] = [10, 20, 30, 40, 50];
			+ console.log(a); // 10
			+ console.log(b); // 20
			+ console.log(rest); // [30, 40, 50]
			+ ({a, b} = {a: 10, b: 20});
			+ console.log(a); // 10
			+ console.log(b); // 20
			+ // Experimental (not yet standardized)
			+ ({a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40});

		subject Array destructuring - Basic variable assignment
			es6
				+ var foo = ['one', 'two', 'three'];
				+ var [one, two, three] = foo;
				+ console.log(one); // "one"
				+ console.log(two); // "two"
				+ console.log(three); // "three"

		subject Array destructuring - Assignment separate from declaration
			description
				+ A variable can be assigned its value via destructuring separate from the variable's declaration.
			es6
				+ var a, b;
				+ [a, b] = [1, 2];
				+ console.log(a); // 1
				+ console.log(b); // 2

		subject Array destructuring - Default values
			description
				+ A variable can be assigned a default, in the case that the value pulled 
				+ from the array is undefined.
			es6 
				+ var a, b;
				+ [a=5, b=7] = [1];
				+ console.log(a); // 1
				+ console.log(b); // 7

		subject Array destructuring - Swapping variables
			description
				+ Two variables values can be swapped in one destructuring expression.
				+ Without destructuring assignment, swapping two values requires a temporary variable (or, in some low-level languages, the XOR-swap trick).
			es6
				+ var a = 1;
				+ var b = 3;
				+ [a, b] = [b, a];
				+ console.log(a); // 3
				+ console.log(b); // 1

		subject Array destructuring - Parsing an array returned from a function
			description
				+ It's always been possible to return an array from a function. 
				+ Destructuring can make working with an array return value more concise.

			es6
				+ // In this example, f() returns the values [1, 2] as its output, 
				+ // which can be parsed in a single line with destructuring.
				+ function f() {
					+ return [1, 2];
				+ }
				+ var a, b; 
				+ [a, b] = f(); 
				+ console.log(a); // 1
				+ console.log(b); // 2

		subject Array destructuring - Ignoring some returned values
			description
				+ You can ignore return values that you're not interested in:

			es6
				+ function f() {
					+  return [1, 2, 3];
				+ }
				+ var [a, , b] = f();
				+ console.log(a); // 1
				+ console.log(b); // 3
				+ // You can also ignore all returned values:
				+ [,,] = f();

		subject Array destructuring - Assigning the rest of an array to a variable
			description
				+ When destructuring an array, you can assign the remaining part of it 
				+ to a variable using the rest pattern:
			es6
				+ var [a, ...b] = [1, 2, 3];
				+ console.log(a); // 1
				+ console.log(b); // [2, 3]
				+ // Note that a SyntaxError will be thrown if a trailing comma 
				+ // is used on the left-hand side with a rest element:
				+ var [a, ...b,] = [1, 2, 3];
				+ // SyntaxError: rest element may not have a trailing comma

		subject Array destructuring - Pulling values from a regular expression match
			description
				+ When the regular expression exec() method finds a match, it returns 
				+ an array containing first the entire matched portion of the string and 
				+ then the portions of the string that matched each parenthesized group 
				+ in the regular expression. 
				+ Destructuring assignment allows you to pull the parts out of 
				+ this array easily, ignoring the full match if it is not needed.
			es6
				+ var url = 'https://developer.mozilla.org/en-US/Web/JavaScript';
				+ var parsedURL = /^(\w+)\:\/\/([^\/]+)\/(.*)$/.exec(url);
				+ console.log(parsedURL); // ["https://developer.mozilla.org/en-US/Web/JavaScript", "https", "developer.mozilla.org", "en-US/Web/JavaScript"]
				+ var [, protocol, fullhost, fullpath] = parsedURL;
				+ console.log(protocol); // "https"
				
		subject Object destructuring - Basic assignment
			es6
				+ var o = {p: 42, q: true};
				+ var {p, q} = o;
				+ console.log(p); // 42
				+ console.log(q); // true

		subject Object destructuring - Assignment without declaration
			description
				+ A variable can be assigned its value with destructuring 
				+ separate from its declaration.
				+ The ( .. ) around the assignment statement is required syntax when 
				+ using object literal destructuring assignment without a declaration.
				+ {a, b} = {a: 1, b: 2} is not valid stand-alone syntax, as the {a, b} 
				+ on the left-hand side is considered a block and not an object literal.
				+ However, ({a, b} = {a: 1, b: 2}) is valid, as is var {a, b} = {a: 1, b: 2}
				+ NOTE: Your ( ..) expression needs to be preceded by a semi-colon or it 
				+ may be used to execute a function on the previous line.
			es6
				+ var a, b;
				+ ({a, b} = {a: 1, b: 2});
		
		subject Object destructuring - Assigning to new variable names
			description
				+ A property can be unpacked from an object and assigned to a variable 
				+ with a different name than the object property.
			es6
				+ var o = {p: 42, q: true};
				+ var {p: foo, q: bar} = o;
				+ console.log(foo); // 42 
				+ console.log(bar); // true
		
		subject Object destructuring - Default values
			description
				+ A variable can be assigned a default, in the case that the value 
				+ pulled from the object is undefined.
			es6
				+ var {a = 10, b = 5} = {a: 3};
				+ console.log(a); // 3
				+ console.log(b); // 5
		
		subject Object destructuring - Setting a function parameter's default value
			es5
				+ function drawES5Chart(options) {
					+ options = options === undefined ? {} : options;
					+ var size = options.size === undefined ? 'big' : options.size;
					+ var cords = options.cords === undefined ? {x: 0, y: 0} : options.cords;
					+ var radius = options.radius === undefined ? 25 : options.radius;
					+ console.log(size, cords, radius);
					+ // now finally do some chart drawing
				+ }
				+ drawES5Chart({
					+ cords: {x: 18, y: 30},
					+ radius: 30
				+ });
			es6
				+ function drawES2015Chart({size = 'big', cords = {x: 0, y: 0}, radius = 25} = {}) {
					+ console.log(size, cords, radius);
					+ // do some chart drawing
				+ }
				+ drawES2015Chart({
					+ cords: {x: 18, y: 30},
					+ radius: 30
				+ });

		subject Object destructuring - Nested object and array destructuring
			es6
				+ var metadata = {
					+ title: 'Scratchpad',
					+ translations: [
						+ {
							+ locale: 'de',
							+ localization_tags: [],
							+ last_edit: '2014-04-14T08:43:37',
							+ url: '/de/docs/Tools/Scratchpad',
							+ title: 'JavaScript-Umgebung'
						+ }
					+ ],
					+ url: '/en-US/docs/Tools/Scratchpad'
				+ };
				+ var {title: englishTitle, translations: [{title: localeTitle}]} = metadata;
				+ console.log(englishTitle); // "Scratchpad"
				+ console.log(localeTitle);  // "JavaScript-Umgebung"

		subject Object destructuring - For of iteration and destructuring
			es6
				+ var people = [
					+ {
						+ name: 'Mike Smith',
						+ family: {
							+ mother: 'Jane Smith',
							+ father: 'Harry Smith',
							+ sister: 'Samantha Smith'
						+ },
						+ age: 35
					+ },
					+ {
						+ name: 'Tom Jones',
						+ family: {
							+ mother: 'Norah Jones',
							+ father: 'Richard Jones',
							+ brother: 'Howard Jones'
						+ },
						+ age: 25
					+ }
				+ ];
				+ for (var {name: n, family: {father: f}} of people) {
					+ console.log('Name: ' + n + ', Father: ' + f);
				+ }
				+ // "Name: Mike Smith, Father: Harry Smith"
				+ // "Name: Tom Jones, Father: Richard Jones"
		
		subject Object destructuring - Pulling fields from objects passed as function parameter
			
			es6
				+ function userId({id}) {
					+ return id;
				+ }
				+ function whois({displayName, fullName: {firstName: name}}) {
					+ console.log(displayName + ' is ' + name);
				+ }
				+ var user = { 
					+ id: 42, 
					+ displayName: 'jdoe',
					+ fullName: { 
						+ firstName: 'John',
						+ lastName: 'Doe'
					+ }
				+ };
				+ console.log('userId: ' + userId(user)); // "userId: 42"
				+ whois(user); // "jdoe is John"
				+ // This pulls the id, displayName and firstName from the user object and prints them.

		subject Object destructuring - Computed object property names and destructuring
			
			description
				+ Computed property names, like on object literals, can be used with destructuring.

			es6
				+ let key = 'z';
				+ let {[key]: foo} = {z: 'bar'};
				+ console.log(foo); // "bar"
		
		subject Object destructuring - Invalid JavaScript identifier as a property name
			
			description
				+ Destructuring can be used on property names, which are not 
				+ valid as a JavaScript identifier
			
			es6
				+ const foo = { 'fizz-buzz': true }
				+ const { 'fizz-buzz': fizzBuzz } = foo