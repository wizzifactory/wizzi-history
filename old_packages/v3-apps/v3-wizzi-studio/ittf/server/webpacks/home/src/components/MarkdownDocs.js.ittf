module
	kind react

	import React from 'react'
	import PropTypes from 'prop-types'
	import { withStyles, createStyleSheet } from 'material-ui/styles'
	import Button from 'material-ui/Button'
	import MarkdownElement from './MarkdownElement'
	import Demo from './Demo'

	const styleSheet
        _ createStyleSheet
            @ 'MarkdownDocs'
            =>
                param theme
				return
					{ 
						$include styles/MarkdownDocs

	const headerRegexp = /---\n(.*)\n---/
	const demoRegexp = /^demo='(.*)'$/
	const emptyRegexp = /^\s*$/

	const SOURCE_CODE_ROOT_URL = 'https://github.com/callemall/material-ui/tree/next'

	function MarkdownDocs
		param props
		const { classes, route } = props
		const contents
			_ route.content.replace(headerRegexp, '') $$ Remove header informations
			._ split(/^{{|}}$/gm)                     $$ Split markdown into an array, separating demos
			._ filter(content => !emptyRegexp.test(content)) $$ Remove empty lines

		let markdownUrl = SOURCE_CODE_ROOT_URL

		# Map back to the source code
		if route.componentAPI
			set markdownUrl += `/src${route.componentAPI.path
				\ .replace('./component-api/', '/')
				\ .replace('.md', '.js')}`
			log 'markdownUrl', markdownUrl
		elif route.demo
			set markdownUrl += `/docs/src/pages/component-demos${route.demo.path.replace('./', '/')}`
		else
			set markdownUrl += `/docs/src/pages${route.path}.md`
  
		return
			div
				@ className {classes.root}
				div
					@ className {classes.header}
					< Button 
						@ component "a"
						@ href {markdownUrl}
						@ target "_blank"
						+ { 'Edit this page' }
				{
					_ contents.map
						=>
							param content
							if demoRegexp.test(content)
								return
									< Demo
										@ key {content}
										@ demo {content.match(demoRegexp)[1]}
							else
								return
									< MarkdownElement
										@ key {content}
										@ text {content}

	set MarkdownDocs.propTypes
		{
			@ classes PropTypes.object.isRequired
			@ route
				_ PropTypes.shape
					{
						@ content PropTypes.string.isRequired
						@ path PropTypes.string.isRequired
						@ componentAPI PropTypes.object
						@ demo PropTypes.object
					. isRequired

	export default
		_ withStyles
			@ styleSheet
			(
				@ MarkdownDocs
