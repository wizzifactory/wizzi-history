{
  "name": "npmpackage",
  "preserveTags": true,
  "requires": [],
  "exportTos": [
    "json"
  ],
  "elements": [
    {
      "name": "xpackage",
      "super": null,
      "isRoot": true,
      "tags": [
        "package"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "version",
          "type": "string",
          "tags": [
            "version"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "Version must be parseable by node-semver, which is bundled with npm as a dependency.",
            "(npm install semver to use it yourself.)"
          ]
        },
        {
          "name": "description",
          "type": "string",
          "tags": [
            "description"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "Put a description in it. It's a string.",
            "This helps people discover your package, as it's listed in npm search."
          ]
        },
        {
          "name": "keywords",
          "type": "string",
          "tags": [
            "keywords"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "Put keywords in it. It's an array of strings.",
            "This helps people discover your package as it's listed in npm search."
          ]
        },
        {
          "name": "license",
          "type": "string",
          "tags": [
            "license"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "You should specify a license for your package so that people know how they are permitted to use it, and any restrictions you're placing on it."
          ]
        },
        {
          "name": "homepage",
          "type": "string",
          "tags": [
            "homepage"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "The url to the project homepage.",
            "NOTE: This is not the same as \"url\". If you put a \"url\" field, then the registry will think it's a redirection to your package that has been published somewhere else, and spit at you."
          ]
        },
        {
          "name": "preferGlobal",
          "type": "boolean",
          "tags": [
            "preferGlobal"
          ],
          "default": "false",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "If your package is primarily a command-line application that should be installed globally, then set this value to true to provide a warning if it is installed locally.",
            "It doesn't actually prevent users from installing it locally, but it does help prevent some confusion if it doesn't work as expected."
          ]
        },
        {
          "name": "main",
          "type": "string",
          "tags": [
            "main"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "The main field is a module ID that is the primary entry point to your program. That is, if your package is named foo, and a user installs it, and then does require(\"foo\"), then your main module's exports object will be returned.",
            "This should be a module ID relative to the root of your package folder."
          ]
        },
        {
          "name": "private",
          "type": "boolean",
          "tags": [
            "private"
          ],
          "default": "false",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "Consider also setting \"private\": true to prevent accidental publication."
          ]
        }
      ],
      "relations": [
        {
          "name": "bugs",
          "role": null,
          "tags": [
            "bugs"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "author",
          "role": null,
          "tags": [
            "author"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "contributor",
          "role": "contributors",
          "tags": [
            "contributor"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "file",
          "role": "files",
          "tags": [
            "file"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "repository",
          "role": null,
          "tags": [
            "repository"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "script",
          "role": "scripts",
          "tags": [
            "script"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "config",
          "role": "configs",
          "tags": [
            "config"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "publishConfig",
          "role": "publishConfigs",
          "tags": [
            "publish-config"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "dependency",
          "role": "dependencies",
          "tags": [
            "depend"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "peerDependency",
          "role": "peerDependencies",
          "tags": [
            "peer-depend"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "bundledDependency",
          "role": "bundledDependencies",
          "tags": [
            "bundled-depend"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "optionalDependency",
          "role": "optionalDependencies",
          "tags": [
            "optional-depend"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "engine",
          "role": null,
          "tags": [
            "engine"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "os",
          "role": "oses",
          "tags": [
            "os"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "cpu",
          "role": "cpus",
          "tags": [
            "cpu"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": [
        "The root element of the wfpackage schema.",
        "The wzName is the package name.",
        "The most important things in your package.json are the name and version fields.",
        "Those are actually required, and your package won't install without them.",
        "The name and version together form an identifier that is assumed to be completely unique.",
        "Changes to the package should come along with changes to the version.",
        "The name is what your thing is called."
      ]
    },
    {
      "name": "bugs",
      "super": null,
      "isRoot": false,
      "tags": [
        "bugs"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "email",
          "type": "string",
          "tags": [
            "email"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": [
        "The url to your project's issue tracker and / or the email address to which issues should be reported. These are helpful for people who encounter issues with your package.",
        "The wzName is the url."
      ]
    },
    {
      "name": "person",
      "super": null,
      "isRoot": false,
      "tags": [
        "person"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "name",
          "type": "string",
          "tags": [
            "name"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": []
        },
        {
          "name": "email",
          "type": "string",
          "tags": [
            "email"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": []
        },
        {
          "name": "url",
          "type": "string",
          "tags": [
            "url"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [],
      "derived": [
        {
          "name": "author",
          "tags": [
            "author"
          ]
        },
        {
          "name": "contributor",
          "tags": [
            "contributor"
          ]
        }
      ],
      "restricts": [],
      "methods": [],
      "comments": []
    },
    {
      "name": "author",
      "super": "person",
      "isRoot": false,
      "tags": [
        "author"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "name",
          "type": "string",
          "tags": [
            "name"
          ],
          "flags": "",
          "inheritedFrom": "person",
          "restricts": [],
          "comments": []
        },
        {
          "name": "email",
          "type": "string",
          "tags": [
            "email"
          ],
          "flags": "",
          "inheritedFrom": "person",
          "restricts": [],
          "comments": []
        },
        {
          "name": "url",
          "type": "string",
          "tags": [
            "url"
          ],
          "flags": "",
          "inheritedFrom": "person",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": []
    },
    {
      "name": "contributor",
      "super": "person",
      "isRoot": false,
      "tags": [
        "contributor"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "name",
          "type": "string",
          "tags": [
            "name"
          ],
          "flags": "",
          "inheritedFrom": "person",
          "restricts": [],
          "comments": []
        },
        {
          "name": "email",
          "type": "string",
          "tags": [
            "email"
          ],
          "flags": "",
          "inheritedFrom": "person",
          "restricts": [],
          "comments": []
        },
        {
          "name": "url",
          "type": "string",
          "tags": [
            "url"
          ],
          "flags": "",
          "inheritedFrom": "person",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": []
    },
    {
      "name": "file",
      "super": null,
      "isRoot": false,
      "tags": [
        "file"
      ],
      "flags": "",
      "attributes": [],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": [
        "Certain files are always included, regardless of settings",
        "Conversely, some files are always ignored"
      ]
    },
    {
      "name": "bin",
      "super": null,
      "isRoot": false,
      "tags": [
        "bin"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "path",
          "type": "string",
          "tags": [
            "path"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "The path to a local file name"
          ]
        }
      ],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": [
        "A lot of packages have one or more executable files that they'd like to install into the PATH. npm makes this pretty easy (in fact, it uses this feature to install the \"npm\" executable.)",
        "To use this, supply a bin field in your package.json which is a map of command name to local file name.",
        "On install, npm will symlink that file into prefix/bin for global installs, or ./node_modules/.bin/ for local installs.",
        "The wzName is the command name"
      ]
    },
    {
      "name": "repository",
      "super": null,
      "isRoot": false,
      "tags": [
        "repository"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "url",
          "type": "string",
          "tags": [
            "url"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": [
        "Specify the place where your code lives. This is helpful for people who want to contribute.",
        "If the git repo is on GitHub, then the npm docs command will be able to find you.",
        "The wzName is the repository type (example: git)"
      ]
    },
    {
      "name": "script",
      "super": null,
      "isRoot": false,
      "tags": [
        "script"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "command",
          "type": "string",
          "tags": [
            "command"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": [
        "The \"scripts\" property is a dictionary containing script commands that are run at various times in the lifecycle of your package. The key is the lifecycle event, and the value is the command to run at that point.",
        "The wzName is the script name"
      ]
    },
    {
      "name": "config",
      "super": null,
      "isRoot": false,
      "tags": [
        "config"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "value",
          "type": "string",
          "tags": [
            "value"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": [
        "A \"config\" object can be used to set configuration parameters used in package scripts that persist across upgrades.",
        "See npm-config(7) and npm-scripts(7) for more on package configs."
      ]
    },
    {
      "name": "publishConfig",
      "super": null,
      "isRoot": false,
      "tags": [
        "publish-config"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "value",
          "type": "string",
          "tags": [
            "value"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": [
        "This is a set of config values that will be used at publish-time.",
        "It's especially handy if you want to set the tag, registry or access, so that you can ensure that a given package is not tagged with \"latest\",",
        "published to the global public registry or that a scoped module is private by default.",
        "Any config values can be overridden, but of course only \"tag\", \"registry\" and \"access\" probably matter for the purposes of publishing.",
        "See npm-config(7) to see the list of config options that can be overridden."
      ]
    },
    {
      "name": "dependency",
      "super": null,
      "isRoot": false,
      "tags": [
        "depend"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "version",
          "type": "string",
          "tags": [
            "version"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "The version range is a string which has one or more space-separated descriptors.",
            "Dependencies can also be identified with a tarball or git URL.",
            "See semver(7) for more details about specifying version ranges."
          ]
        }
      ],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": [
        "Dependencies are specified in a simple object that maps a package name to a version range.",
        "Git URLs as Dependencies",
        "Git urls can be of the form:",
        "git://github.com/user/project.git#commit-ish",
        "git+ssh://user@hostname:project.git#commit-ish",
        "git+ssh://user@hostname/project.git#commit-ish",
        "git+http://user@hostname/project/blah.git#commit-ish",
        "git+https://user@hostname/project/blah.git#commit-ish",
        "The commit-ish can be any tag, sha, or branch which can be supplied as an argument to git checkout. The default is master.",
        "",
        "GitHub URLs",
        "As of version 1.1.65, you can refer to GitHub urls as just \"foo\": \"user/foo-project\". Just as with git URLs, a commit-ish suffix can be included.",
        "For example:",
        "{",
        "\"name\": \"foo\",",
        "\"version\": \"0.0.0\",",
        "\"dependencies\": {",
        "\"express\": \"visionmedia/express\",",
        "\"mocha\": \"visionmedia/mocha#4727d357ea\"",
        "}",
        "}",
        "",
        "Local Paths",
        "As of version 2.0.0 you can provide a path to a local directory that contains a package.",
        "Local paths can be saved using npm install --save, using any of these forms:",
        "../foo/bar",
        "~/foo/bar",
        "./foo/bar",
        "/foo/bar",
        "in which case they will be normalized to a relative path and added to your package.json.",
        "For example:",
        "{",
        "\"name\": \"baz\",",
        "\"dependencies\": {",
        "\"bar\": \"file:../foo/bar\"",
        "}",
        "}",
        "This feature is helpful for local offline development and creating tests that require npm installing",
        "where you don't want to hit an external server, but should not be used when publishing packages to the public registry."
      ]
    },
    {
      "name": "devDependency_dev_depend",
      "super": null,
      "isRoot": false,
      "tags": [
        "devDependency dev-depend"
      ],
      "flags": "",
      "attributes": [],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": [
        "If someone is planning on downloading and using your module in their program, then they probably don't want or need to download and build the external test or documentation framework that you use.",
        "In this case, it's best to map these additional items in a devDependencies object.",
        "These things will be installed when doing npm link or npm install from the root of a package, and can be managed like any other npm configuration param. See npm-config(7) for more on the topic.",
        "For build steps that are not platform-specific, such as compiling CoffeeScript or other languages to JavaScript, use the prepublish script to do this, and make the required package a devDependency.",
        "For example:",
        "{",
        "\"name\": \"ethopia-waza\",",
        "\"description\": \"a delightfully fruity coffee varietal\",",
        "\"version\": \"1.2.3\",",
        "\"devDependencies\": {",
        "\"coffee-script\": \"~1.6.3\"",
        "},",
        "\"scripts\": {",
        "\"prepublish\": \"coffee -o lib/ -c src/waza.coffee\"",
        "},",
        "\"main\": \"lib/waza.js\"",
        "}",
        "The prepublish script will be run before publishing, so that users can consume the functionality without requiring them to compile it themselves. In dev mode (ie, locally running npm install), it'll run this script as well, so that you can test it easily."
      ]
    },
    {
      "name": "peerDependency",
      "super": null,
      "isRoot": false,
      "tags": [
        "peer-depend"
      ],
      "flags": "",
      "attributes": [],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": [
        "In some cases, you want to express the compatibility of your package with a host tool or library, while not necessarily doing a require of this host. This is usually referred to as a plugin. Notably, your module may be exposing a specific interface, expected and specified by the host documentation.",
        "For example:",
        "{",
        "\"name\": \"tea-latte\",",
        "\"version\": \"1.3.5\",",
        "\"peerDependencies\": {",
        "\"tea\": \"2.x\"",
        "}",
        "}",
        "This ensures your package tea-latte can be installed along with the second major version of the host package tea only. npm install tea-latte could possibly yield the following dependency graph:",
        "├── tea-latte@1.3.5",
        "└── tea@2.2.0",
        "NOTE: npm versions 1 and 2 will automatically install peerDependencies if they are not explicitly depended upon higher in the dependency tree. In the next major version of npm (npm@3), this will no longer be the case. You will receive a warning that the peerDependency is not installed instead. The behavior in npms 1 & 2 was frequently confusing and could easily put you into dependency hell, a situation that npm is designed to avoid as much as possible.",
        "Trying to install another plugin with a conflicting requirement will cause an error. For this reason, make sure your plugin requirement is as broad as possible, and not to lock it down to specific patch versions.",
        "Assuming the host complies with semver, only changes in the host package's major version will break your plugin. Thus, if you've worked with every 1.x version of the host package, use \"^1.0\" or \"1.x\" to express this. If you depend on features introduced in 1.5.2, use \">= 1.5.2 < 2\"."
      ]
    },
    {
      "name": "bundledDependency",
      "super": null,
      "isRoot": false,
      "tags": [
        "bundled-depend"
      ],
      "flags": "",
      "attributes": [],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": [
        "Array of package names that will be bundled when publishing the package.",
        "If this is spelled \"bundleDependencies\", then that is also honored."
      ]
    },
    {
      "name": "optionalDependency",
      "super": null,
      "isRoot": false,
      "tags": [
        "optional-depend"
      ],
      "flags": "",
      "attributes": [],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": [
        "If a dependency can be used, but you would like npm to proceed if it cannot be found or fails to install, then you may put it in the optionalDependencies object. This is a map of package name to version or url, just like the dependencies object. The difference is that build failures do not cause installation to fail.",
        "It is still your program's responsibility to handle the lack of the dependency. For example, something like this:"
      ]
    },
    {
      "name": "engine",
      "super": null,
      "isRoot": false,
      "tags": [
        "engine"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "version",
          "type": "string",
          "tags": [
            "version"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": [
        "You can specify the version of node that your stuff works on",
        "If you specify an \"engines\" field, then npm will require that \"node\" be somewhere on that list.",
        "If \"engines\" is omitted, then npm will just assume that it works on node.",
        "Note that, unless the user has set the engine-strict config flag, this field is advisory only."
      ]
    },
    {
      "name": "os",
      "super": null,
      "isRoot": false,
      "tags": [
        "os"
      ],
      "flags": "",
      "attributes": [],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": [
        "You can specify which operating systems your module will run on: (example: darwin)",
        "You can also blacklist instead of whitelist operating systems, just prepend the blacklisted os with a '!': (example: !win32)"
      ]
    },
    {
      "name": "cpu",
      "super": null,
      "isRoot": false,
      "tags": [
        "cpu"
      ],
      "flags": "",
      "attributes": [],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": [
        "If your code only runs on certain cpu architectures, you can specify which ones.",
        "Like the os option, you can also blacklist architectures"
      ]
    }
  ]
}