var util = require('util');
var log = require('../util/log')(module);
/*
    ittf commands
        $$        (single line comment)
        $* ... *$ (multi line comment)
    line : {
        indent: Number,
        name: String,
        value: String, // always trimmed
        row: Number,
        col: Number,
        sourceKey: String,
        tagSuffix: undefined || '('
    }
    param textContent:String - The text content of the IttfDocument
    param ittfDocumentData:Object { 
        sourceKey:String - The IttfDocument key generated by the loadContext
    }
*/
module.exports = function (textContent, ittfDocumentData) {
    var sourceKey = ittfDocumentData.sourceKey,
        lines = [],
        leadingWhiteSpaces = 0,
        line = null,
        linepos = 1,
        colpos = 0,
        commentState = 0,
        quote = null,
        chunk = textContent.toString('utf-8'),
        ch,
        i,
        l = chunk.length;
    // console.log('chunk', chunk);
    for (i = 0; i < l; i++) {
        ch = chunk[i];
        colpos++;
        // console.log('ch', ch);
        if (quote != null) {
            if (quote == ch) {
                quote = null;
            }
            processChar(ch);
        } else {
            if (commentState == 2) {
                if (ch == '*') {
                    // could be start of end of comment
                    commentState = 3;
                }
                // skip comment char
            } else if (commentState == 21) {
                if (ch == '\n') {
                    // end of line comment
                    // delegate to processChar end of comment
                    processChar(ch);
                }
                // skip comment char
            } else if (commentState == 3) {
                if (ch == '$') {
                    // ok, really is end of comment
                    commentState = 0; 
                } else {
                    // no, comments continue
                    commentState = 2;
                    processChar('*');
                    processChar(ch);
                }
            } else if (commentState == 1 && ch == '*') {
                // console.log('// ok, really is start of comment');
                // ok, really is start of comment
                commentState = 2;
            } else if (commentState == 1 && ch == '$') {
                // console.log('// ok, is a line comment');
                // ok, is a line comment
                commentState = 21;
            } else if (commentState == 1 && ch != '*') {
                // no, it was not a comment, reset
                commentState = 0;
                processChar('$');
                processChar(ch);
            } else if (commentState == 0 && ch == '"') {
                quote = ch;
                processChar(ch);
            } else if (commentState == 0 && ch == "'") {
                quote = ch;
                processChar(ch);
            } else if (commentState == 0 && ch == '$') {
                // console.log('// could be start of comment');
                // could be start of comment
                commentState = 1;
            } else {
                processChar(ch);
            }
        }
    } // end textContent lexing
    if (line) {
        if (typeof line.value !== 'undefined') line.value = line.value.trim();
        lines.push(line);
    }
    return lines;
    function processChar(ch)
    {
        if (ch == '\n') {
            if (line) {
                if (typeof line.value !== 'undefined') line.value = line.value.trim();
                lines.push(line);
                line = null;
            } else {
                // Allow blank line. Do nothing
            }
            leadingWhiteSpaces = 0;
            colpos = 0;
            linepos++;
            if (commentState == 21) {
                commentState = 0;
            }
        } else if (ch == '\r') {
            // do nothing
        } else if ([' ', '\t'].indexOf(ch) !== -1) {
            // console.log('ch is whitespace', ch);
            if (ch == '\t') colpos += 3;
            if (line) {
                if (typeof line.value == 'undefined') {
                    line.value = '';
                } else {
                    line.value += ch;
                }
            } else {
                leadingWhiteSpaces += (ch == ' ' ? 1 : 4);
            }
        } else if (['('].indexOf(ch) !== -1) {
            if (line) {
                if (typeof line.value == 'undefined') {
                    line.tagSuffix = ch;
                    line.value = '';
                } else {
                    line.value += ch;
                }
            } else {
                line = {
                    indent: leadingWhiteSpaces / 4,
                    name: ch,
                    row: linepos,
                    col: colpos,
                    sourceKey: sourceKey
                };
            }
        } else {
            if (line) {
                if (typeof line.value == 'undefined') {
                    line.name += ch;
                } else {
                    line.value += ch;
                }
            } else {
                line = {
                    indent: leadingWhiteSpaces / 4,
                    name: ch,
                    row: linepos,
                    col: colpos,
                    sourceKey: sourceKey
                };
            }
        }
    }
};
