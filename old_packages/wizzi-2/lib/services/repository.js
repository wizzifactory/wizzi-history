/*
    artifact generator: /wizzi/lib/artifacts/js/module/gen/main.js
    primary source IttfDocument: C:\My\wizzi\v2\sources\wizzi-2-boot\ittf\lib\services\repository.js.ittf
    utc time: Tue, 11 Jul 2017 17:02:26 GMT
*/
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var path = require('path');
var log = require('../util/log')(module);
var verify = require('../util/verify');
var file = require('../util/file');
var fail = require('../util/fail');
var errors = require('../errors');
// TODO
// Explain how Wizzi model types and Artifact generators are retrieved
// TODO
// Implement available WizziFactories
var availableFactories = [];
var Repository = (function () {
    function Repository(options) {
        _classCallCheck(this, Repository);
        this.options = options;
        this.wizziFactoryPackages = [];
    }
    /**
         Register a wizziFactoryPackages to this repository
    */
    Repository.prototype.registerWizziFactoryPackage = function(wizziFactoryPackage) {
        this.wizziFactoryPackages.push(wizziFactoryPackage);
    }
    /**
         Retrieve a WizziModelFactory searching the wizziFactoryPackages
         registered to this repository
    */
    Repository.prototype.getWizziModelFactory = function(schemaName) {
        var found, foundInModule = null, result = null;
        // all wizziFactoryPackages are searched, last encountered results override the previous.
        var i, i_len=this.wizziFactoryPackages.length, item;
        for (i=0; i<i_len; i++) {
            item = this.wizziFactoryPackages[i];
            // log 'searching model loader', schemaName, ' in module', item.name
            found = null;
            if (verify.isFunction(item[schemaName])) {
                found = item[schemaName];
            }
            else if (verify.isFunction(item['getWizziModelFactory'])) {
                try {
                    var m = item['getWizziModelFactory'](schemaName);
                    if (m && verify.isFunction(m.load)) {
                        found = m.load;
                    }
                } catch (ex) {
                    var msg = 'searching schemaName: ' + schemaName + ', in wizziFactoryPackage: ' + item.name + ', message ' + ex.message;
                    ex.message = 'getWizziModelFactory. Exception: ' + msg;
                    fail.warn(ex);
                    found = null;
                }
            }
            if (found) {
                result = found;
                foundInModule = item.filename;
            }
        }
        if (!result) {
            log.error('getWizziModelFactory. Cannot find model loader: ' + schemaName + '\n' + 'availables: ' + availableFactories.join(', '));
        }
        else {
            log.success('getWizziModelFactory. Found model loader: ' + schemaName + ' in module ' + foundInModule);
        }
        return result;
    }
    /**
         Retrieve a WizziSchemaObject searching the wizziFactoryPackages
         registered to this repository
         @param {String} transformName
    */
    Repository.prototype.getWizziSchemaObject = function(schemaName) {
        // console.log('Repository.getWizziSchemaObject.schemaName: ' + schemaName);
        var found, foundInModule = null, result = null;
        // all wizziFactoryPackages are searched, last encountered results override the previous.
        var i, i_len=this.wizziFactoryPackages.length, item;
        for (i=0; i<i_len; i++) {
            item = this.wizziFactoryPackages[i];
            // log 'searching wizzi schema object', schemaName, ' in module', item.name
            found = null;
            if (verify.isFunction(item[schemaName])) {
                found = item[schemaName];
            }
            else if (verify.isFunction(item['getWizziSchemaObject'])) {
                try {
                    var m = item['getWizziSchemaObject'](schemaName);
                    if (m) {
                        found = m;
                    }
                } catch (ex) {
                    var msg = 'searching schemaName: ' + schemaName + ', in wizziFactoryPackage: ' + item.name + ', message ' + ex.message;
                    ex.message = 'getWizziSchemaObject. Exception: ' + msg;
                    fail.warn(ex);
                    found = null;
                }
            }
            if (found) {
                result = found;
                foundInModule = item.name;
            }
        }
        if (!result) {
            log.error('getWizziSchemaObject. Cannot find schema object: ' + schemaName + '\n' + 'availables: ' + availableFactories.join(', '));
        }
        else {
            log.success('getWizziSchemaObject. Found schema object: ' + schemaName + ' in module ' + foundInModule);
        }
        return result;
    }
    /**
         Retrieve a ModelTransformer searching the wizziFactoryPackages
         registered to this repository
         @param {String} transformName
    */
    Repository.prototype.getModelTransformer = function(transformName) {
        // log 'Repository.getModelTransformer.transformName: ' + transformName
        var found, foundInModule = null, result = null;
        // all wizziFactoryPackages are searched, last encountered results override the previous.
        var i, i_len=this.wizziFactoryPackages.length, item;
        for (i=0; i<i_len; i++) {
            item = this.wizziFactoryPackages[i];
            // log 'searching transformer ', transformName, ' in module', item.name
            found = null;
            if (verify.isFunction(item['getModelTransformer'])) {
                try {
                    var m = item['getModelTransformer'](transformName);
                    if (m && verify.isFunction(m.trans)) {
                        found = m.trans;
                    }
                } catch (ex) {
                    var msg = 'searching transformName: ' + transformName + ', in wizziFactoryPackage: ' + item.name + ', message ' + ex.message;
                    ex.message = 'getModelTransformer. Exception: ' + msg;
                    fail.warn(ex);
                    found = null;
                }
            }
            if (found) {
                result = found;
                foundInModule = item.name;
            }
        }
        if (!result) {
            log.error('getModelTransformer. Cannot find transformer: ' + transformName);
        }
        else {
            log.success('getModelTransformer. Found transformer: ' + transformName + ' in module ' + foundInModule);
        }
        return result;
    }
    /**
         retrieve an artifact generator searching the wizziFactoryPackages
         registered to this repository
         @param {String} artifactName
    */
    Repository.prototype.getArtifactGenerator = function(artifactName) {
        // log 'Repository.getArtifactGenerator.artifactName: ' + artifactName
        var found, foundInModule = null, result = null;
        // all wizziFactoryPackages are searched, last encountered results override the previous.
        var i, i_len=this.wizziFactoryPackages.length, item;
        for (i=0; i<i_len; i++) {
            item = this.wizziFactoryPackages[i];
            // log 'searching artifact ', artifactName, ' in module', item.name
            found = null;
            if (verify.isFunction(item['getArtifactGenerator'])) {
                try {
                    found = item['getArtifactGenerator'](artifactName);
                } catch (ex) {
                    var msg = 'searching artifactName: ' + artifactName + ', in wizziFactoryPackage: ' + item.name + ', message ' + ex.message;
                    ex.message = 'getArtifactGenerator. Exception: ' + msg;
                    fail.warn(ex);
                    found = null;
                }
            }
            if (found) {
                result = found;
                foundInModule = item.name;
            }
        }
        if (!result) {
            log.error('getArtifactGenerator. Cannot find artifact generator: ' + artifactName);
        }
        else {
            log.success('getArtifactGenerator. Found artifact generator: ' + artifactName + ' in module ' + foundInModule);
        }
        return result;
    }
    /**
         Async load a WizziModel from an IttfDocument
         @param {String} wizzischema
         @param {String} ittfDocumentUri
         @param {Object} context
         @param {Function} callback
    */
    Repository.prototype.loadWizziModel = function(wizzischema,ittfDocumentUri,context,callback) {
        var factory = this.getWizziModelFactory(wizzischema);
        if (!factory) {
            var error = new errors.NotFoundError('WizziModelFactory', wizzischema, ittfDocumentUri);
            return callback(error);
        }
        context = context || {};
        // log 'factory', factory
        factory(ittfDocumentUri, context, function(err,wizziModel) {
            if (err) {
                return callback(err);
            }
            callback(null, formatWizziModel(wizziModel, context.__formatOptions));
        });
    }
    Repository.prototype.transformModel = function(transformName,model,context,callback) {
        var trans = this.getModelTransformer(transformName);
        if (!trans) {
            var error = new errors.NotFoundError('ModelTransformer', transformName, 'wizzi-core repository');
            return callback(error);
        }
        context = context || {};
        // log 'trans', trans
        trans(model, context, function(err,modelTransformed) {
            if (err) {
                return callback(err);
            }
            callback(null, modelTransformed);
        });
    }
    Repository.prototype.loadWizziSchema = function(wfpackageuri,wizzischema,formatOptions,callback) {
        if (!formatOptions || formatOptions.format !== 'json') {
            var error = new errors.InvalidRequestError('services.repository.loadWizziSchema invalid format');
            return callback(error);
        }
        var schemaJsonUri = path.join(wfpackageuri, '/lib/wizzi/models/' + wizzischema + '-schema.g.json');
        if (!file.isFile(schemaJsonUri)) {
            var error = new errors.NotFoundError('services.repository.loadWizziSchema', wizzischema, schemaJsonUri);
            return callback(error);
        }
        try {
            var schemajson = file.readJSON(schemaJsonUri);
            return callback(null, schemajson);
        } catch (ex) {
            return callback(ex.message);
        }
    }
    return Repository;
})();


function formatWizziModel(wizziModel,formatOptions) {
    if (!formatOptions) {
        return wizziModel;
    }
    var partial = false;
    var ret = {};
    if (formatOptions.ittfSources) {
        partial = true;
        ret.loadContext = {};
        ret.loadContext.ittfSources = wizziModel.loadContext.ittfSources;
    }
    if (partial) {
        return ret;
    }
    else {
        return wizziModel;
    }
}

module.exports = Repository;
