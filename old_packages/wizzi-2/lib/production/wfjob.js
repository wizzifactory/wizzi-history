/*
    artifact generator: /wizzi/lib/artifacts/js/module/gen/main.js
    primary source IttfDocument: C:\My\wizzi\v2\sources\wizzi-2-boot\ittf\lib\production\wfjob.js.ittf
    utc time: Tue, 11 Jul 2017 17:02:26 GMT
*/
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var async = require('async');
var verify = require('../util/verify');
var errors = require('../errors');
var log = require('../util/log')(module);
var wfjob = (function () {
    function wfjob(productionManager,config) {
        _classCallCheck(this, wfjob);
        this.productionManager = productionManager;
        this.config = config;
        this.options = config.options;
        this.wfjobSrc = config.wfjob.src;
        log.setLevel(this.options.verbose || 0);
        this.initialized = false;
    }
    /**
         param config {
         options: {
         verbose:Boolean
         }
         wfjob: {
         src:String
         }
         }
        
         An instance of wfjob prepares the required wizzi packages
         and the artifact infos of a single wfjob WizziModel, whose source IttfDocument
         is referenced in config.wfjob.src
        
         methods
         getArtifactInfoConfigs
    */
    wfjob.prototype.initialize = function(callback) {
        if (this.initialized) {
            return callback(null, this.wfjobModel);
        }
        if (this.productionManager.options.trace) {
            log.info('Started initialize. wfjob source: ' + this.wfjobSrc);
        }
        var wfjobFactory = this.productionManager.getWizziModelFactory('wfjob');
        if (wfjobFactory == null) {
            throw errors.NodeError('Factory for schema @wfjob@ not found', null);
        }
        var ittfLoadContext = Object.assign({}, {
            __productionManager: this.productionManager
        }, this.productionManager.globalContext())
        ;
        var self = this;
        wfjobFactory(this.wfjobSrc, ittfLoadContext, function(err,wfjobModel) {
            if (self.productionManager.options.trace) {
                log.info('Job model loaded. err: ' + err);
            }
            if (err) {
                return callback(err, null);
            }
            self.wfjobModel = wfjobModel;
            self.initialized = true;
            if (self.productionManager.options.trace) {
                log.info('Done initialize');
            }
            callback(null, wfjobModel);
        });
    }
    wfjob.prototype.getRequiredPackages = function(callback) {
        var self = this;
        this.initialize(function(err,wfjobModel) {
            if (err) {
                return callback(err, null);
            }
            var result = [];
            var i, i_len=wfjobModel.requires.length, r;
            for (i=0; i<i_len; i++) {
                r = wfjobModel.requires[i];
                result.push(r.wzName);
            }
            return callback(null, result);
        });
    }
    wfjob.prototype.getArtifactInfoConfigs = function(callback) {
        // log 'wfjob.getArtifactInfoConfigs.start'
        var self = this,
            artifactInfoConfig,
            destPath,
            destFullPath,
            resultRequires = [],
            resultArtifactInfos = [];
        this.initialize(function(err,wfjobModel) {
            if (err) {
                return callback(err, null);
            }
            var i, i_len=wfjobModel.requires.length, require;
            for (i=0; i<i_len; i++) {
                require = wfjobModel.requires[i];
                resultRequires.push(require.wzName);
            }
            /**
                 Production structure
                 wfjob
                 production Collection
                 attribute destFolder
                 lines Collection
                 attribute cwdFolder
                 attribute destFolder
                 artifacts Collection
                 attribute src
                 The path to the primary source document of the artifact.
                 If relative, the base path is the "cwdFolder" of the parent line.
                 If the artifact is a code write artifact the "src" attribute must not be declared.
                 attribute destPath
                 The artifact source file path "src" is the default relative destination path
                 of the generated artifact. When set, this attribute overrides the default.
                 It may be an absolute path.
                 If the artifact is a code write generation the "destPath" attribute must be declared.
            */
            var i, i_len=wfjobModel.productions.length, wfjob_production;
            for (i=0; i<i_len; i++) {
                wfjob_production = wfjobModel.productions[i];
                // log 'WizziJob.getArtifactInfoConfigs.production', wfjob_production.wzName, util.inspect(wfjob_production, { depth: 2 })
                var j, j_len=wfjob_production.lines.length, wfjob_line;
                for (j=0; j<j_len; j++) {
                    wfjob_line = wfjob_production.lines[j];
                    // log 'WizziJob.getArtifactInfoConfigs.line', wfjob_line.wzName, util.inspect(wfjob_line, { depth: null })
                    var k, k_len=wfjob_line.artifacts.length, wfjob_artifact;
                    for (k=0; k<k_len; k++) {
                        wfjob_artifact = wfjob_line.artifacts[k];
                        if (verify.isEmpty(wfjob_artifact.src)) {
                            /**
                                 THIS IS A CODEWRITE artifact
                                 this artifact is generated by a code write generation
                            */
                            artifactInfoConfig = {
                                name: wfjob_artifact.wzName, 
                                options: {}, 
                                contexts: [], 
                                gen: {
                                    generator: wfjob_artifact.generator
                                }, 
                                dest: {
                                    baseFolder: wfjobModel.destBaseFolder, 
                                    folder: wfjob_line.destFolder || wfjob_production.destFolder, 
                                    path: wfjob_artifact.destPath, 
                                    extension: wfjob_artifact.extension
                                }, 
                                toString: function() {
                                    return 'Artifact info config: ' + this.name + '/' + this.gen.generator;
                                }
                            };
                            var l, l_len=wfjob_artifact.modelRefs.length, modelRef;
                            for (l=0; l<l_len; l++) {
                                modelRef = wfjob_artifact.modelRefs[l];
                                var modelInfoConfig = self.createContextModelInfoConfig(modelRef);
                                artifactInfoConfig.contexts.push(modelInfoConfig);
                            }
                        }
                        else {
                            // WIZZIMODEL artifact or WFJOB artifact
                            artifactInfoConfig = {
                                name: wfjob_artifact.wzName, 
                                options: {}, 
                                model: {
                                    cwd: wfjob_line.cwdFolder, 
                                    src: wfjob_artifact.src, 
                                    ignore: wfjob_artifact.ignore, 
                                    schema: wfjob_artifact.schema, 
                                    contexts: [], 
                                    transformers: self._getTransformerList(wfjob_artifact.transformers)
                                }, 
                                isWfJob: wfjob_artifact.isWfJob, 
                                gen: {
                                    generator: wfjob_artifact.generator
                                }, 
                                dest: {
                                    baseFolder: wfjobModel.destBaseFolder, 
                                    folder: wfjob_line.destFolder || wfjob_production.destFolder, 
                                    path: wfjob_artifact.destPath, 
                                    extension: wfjob_artifact.extension
                                }, 
                                toString: function() {
                                    return 'Artifact info config: ' + this.name + '/' + this.model.src + '/' + this.model.schema;
                                }
                            };
                            // log 'WizziJob.getArtifactInfoConfigs.art', wfjob_artifact.wzName, wfjob_line.srcFolder, wfjob_artifact.src, wfjob_artifact.schema
                            var l, l_len=wfjob_artifact.modelRefs.length, modelRef;
                            for (l=0; l<l_len; l++) {
                                modelRef = wfjob_artifact.modelRefs[l];
                                var modelInfoConfig = self.createContextModelInfoConfig(modelRef);
                                artifactInfoConfig.model.contexts.push(modelInfoConfig);
                            }
                        }
                        // log 'WizziJob.artifactInfoConfig', util.inspect(artifactInfoConfig, { depth: 1 })
                        resultArtifactInfos.push(artifactInfoConfig);
                    }
                }
            }
            callback(null, [resultRequires, resultArtifactInfos]);
        });
    }
    /**
         param modelRef:Object { wfjob:ModelRef
         wzName:String // is the key for the wfjob:Model
         collName:String
         collItemName:String
         collPathTemplateValues:Array of {
         }
         }
    */
    wfjob.prototype.createContextModelInfoConfig = function(wfjob_modelRef) {
        // model existence in this.wfjobModel has already been verified loading wfjobModel
        var wfjob_model = this.wfjobModel.getModel(wfjob_modelRef.wzName);
        var modelInfoConfig = {
            exportName: wfjob_modelRef.exportName, 
            src: this._getModelSrc(wfjob_model.src, wfjob_model), 
            schema: wfjob_model.schema, 
            contexts: [], 
            transformers: this._getTransformerList(wfjob_modelRef.transformers), 
            coll: null
        };
        if (wfjob_modelRef.collName) {
            // Single items of a collection contained in a WizziModelInstance may act as data contexts
            // of artifacts where each collection item generates a separate artifact.
            // The coll property specifies:
            // . name                the collection name
            // . itemName            the export name of the collection item when acting as a data context
            // . pathTemplateValues  the property names of the collection item that will be used to build
            // the destination path of the artifact
            modelInfoConfig.coll = {
                name: wfjob_modelRef.collName, 
                itemName: wfjob_modelRef.collItemName, 
                pathTemplateValues: wfjob_modelRef.collPathTemplateValues
            };
        }
        // recurse creation of context modelInfos
        var i, i_len=wfjob_model.modelRefs.length, ctxModelRef;
        for (i=0; i<i_len; i++) {
            ctxModelRef = wfjob_model.modelRefs[i];
            modelInfoConfig.contexts.push(this.createContextModelInfoConfig(ctxModelRef));
        }
        return modelInfoConfig;
    }
    wfjob.prototype._getModelSrc = function(src,node) {
        /**
             When @src@ is relative, the base path is the @modelsBaseFolder@
             declared on the @wfjob@ element.
        */
        if (verify.isAbsolutePath(src)) {
            return src;
        }
        else {
            if (verify.isString(this.wfjobModel.modelsBaseFolder)) {
                return path.join(this.wfjobModel.modelsBaseFolder, src);
            }
            else {
                throw errors.NodeError("The model src " + src + ' is a relative path. A <base-models-folder> attribute is required on the <wfjob> element.', node);
            }
        }
    }
    wfjob.prototype._getTransformerList = function(transformers) {
        var ret = [];
        var i, i_len=transformers.length, item;
        for (i=0; i<i_len; i++) {
            item = transformers[i];
            ret.push({
                name: item.wzName, 
                dumpFile: item.dumpFile
            });
        }
        return ret;
    }
    return wfjob;
})();


function getPath(base,src) {
    return verify.isAbsolutePath(src) ? src : path.join(base, src);
}

module.exports = wfjob;
