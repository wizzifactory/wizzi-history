module
	kind jsfile
	$
		var ROOTELEMENT = schema.rootElement.wzId;
	#
		# ${schema.wzId} WizziModelFactory
	var path = require('path')
	var util = require('util')
	var _ = require('lodash')
	+
	var stringify = require('json-stringify-safe')
	+
    var ${schema.wzId}schema = require('./${schema.wzId}-model.g')
	+
    var md = module.exports = {};
	+    
	set md.createLoadModel
		function
			param wizziObject
			var loadMTree = wizziObject.loadMTree
			var file = wizziObject.file
			var errors = wizziObject.errors
			$include loadModelFromMTree
			#
				# Load a WizziModel of type ${schema.wzId} from an IttfDocument uri
				# @param {String} ittfDocumentUri
				# @param {Object} context - the loading context object
				# @param {Function} callback
			return
				function loadModel
					param ittfDocumentUri
					param context
					param callback
			
					if !ittfDocumentUri
						throw new TypeError('ittfDocumentUri required')
					if typeof ittfDocumentUri !== 'string'
						throw new TypeError('ittfDocumentUri must be a string')
					if typeof callback !== 'function'
						throw new TypeError('callback must be a function')
					var context = context || {}
					var request = context.__request || {}
			
					var start = Date.now()
			
					# load the magical tree
					_ loadMTree
						@ ittfDocumentUri
						@ context
						function
							param err
							param mTree
							if err
								return callback(err)
					
							# TODO implement a stats object inside the request object
							# _ log.info('Loaded Wizzi model instance of schema ${schema.wzId} from Ittf document ' + ittfDocumentUri + ' in ' + (Date.now() - start) + ' ms')
					
							if (request.dumpAll || request.dumpIttfModel) && file.isFilePath(ittfDocumentUri)
								var ittfDumpPath = path.join(path.dirname(ittfDocumentUri), '_debug', path.basename(ittfDocumentUri) + '.ittf.json')
								_ file.write
									@ ittfDumpPath
									_ stringify
										@ mTree
										@ null
										@ 2
					
							_ loadModelFromMTree(mTree, ittfDocumentUri, request, callback)
		
	
