$group
    $if element.hasAttributesOrChildsToLoad()
    
		m loadChild
			param child
    
			# Make test case insensitive
			var 
				decl item
				decl ok = false
				decl name = child.n.toLowerCase()
				decl _l = name.length
				decl _ch = name[0]
			$foreach ordered in element.choiceOrdered
			
				if _l == ${ordered.length} && _ch == '${ordered.char}'
					$ var first = true
					$foreach choice in ordered.choices
						$if first
							if name === '${choice.test}'
								$foreach line in choice.codelines
									set ${line}
						$else
							elif name === '${choice.test}'
								$foreach line in choice.codelines
									set ${line}
					
						$ first = false;
		
			$foreach t in element.wildTags
			
				if name.substr(0, ${t.length - 1}) == "${t.substr(0, t.length - 1)}"
					set this[name] = child.v
					return true
		
			loader_callBase( &element )
		
			$if verify.isNotEmpty(element.acceptAnyTag)
		
				if !ok
					set item = new Any${element.acceptAnyTagId}(child.v, new wzSourceLineInfo(child.r, child.c, child.u))
					set item.wzParent = this
					set item.wzTag = name
					_ this.${element.AcceptAnyTagCollectionId}.push(item)
					_ item.loadFromNode(child)
					set ok = true
		
			return ok
		m loadFromNode
			param node
		
			var loaded = false
			foreach item in node.childs
				set loaded = this.loadChild(item)
				if !loaded
					throw new md.${schema.wzId}Exception("Tag not recognized: " + item.n, item, this)
