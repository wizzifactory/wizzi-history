$group

	$foreach rf in schema.requiredFunctions
        
		$if rf.wzName === "isArray"
            function isArray
				param value
                return Object.prototype.toString.call( value ) === '[object Array]'
        
		$if rf.wzName === "isEmpty"
            function isEmpty
				param value
                return !isString( value ) || value.length === 0
        
		$if rf.wzName === "isNull"
            function isNull
				param value
                return typeof value === 'undefined' || value === null
        
		$if rf.wzName === "isNumber"
            function isNumber
				param value
                return !isArray( value ) && (value - parseFloat( value ) + 1) >= 0
        
		$if rf.wzName === "isObject"
            function isObject
				param value
                return value !== null && typeof value === 'object'
		
		$if rf.wzName === "isString"
            function isString
				param value
                return (typeof value === 'string' || value instanceof String)
        
		$if rf.wzName === "escapeRegExp"
            function escapeRegExp
				param str
                return str.replace(/[\\-\\[\\]/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\")
        
		$if rf.wzName === "replaceAll"
            function replaceAll
				param str
				param find
				param replace
                return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);");
        
		$if rf.wzName === "isBoolean"
            function isBoolean
				param value
                return value === 'true' || value === 'false'
        
		$if rf.wzName === "isInt"
            function isInt
				param value
                return isNumber( value )
        
		$if rf.wzName === "isFloat"
            function isFloat
				param value
                return isNumber( value )

        $if rf.wzName === "isDate"
            function isDate
				param value
                var parts = value.split('/')
                return part[0].length === 4 && part[1].length <= 2 && part[2].length <= 2
        
		$if rf.wzName === "parsestring"
            function parsestring
				param value
				param defaultValue
				param node
                if isEmpty( value )
					return defaultValue
                return value
        
		$if rf.wzName === "parseboolean"
            function parseboolean
				param value
				param defaultValue
				param node
                if isEmpty( value )
					return defaultValue
				if !isBoolean(value)
					throw new ${schema.wzId}ModelException('Must be a boolean value (\"true\" or \"false\"), got:' + value, node)
                return value === 'true' ? true : false
        
		$if rf.wzName === "parseinteger"
            function parseinteger
				param value
				param defaultValue
				param node
                if isEmpty(value)
					return defaultValue
                if !isInt(value)
					throw new ${schema.wzId}ModelException('Must be an int value, got:' + value, node)
                return parseInt(value, 10)
        
		$if rf.wzName === "parsefloat"
            function parsefloat
				param value
				param defaultValue
				param node
                if isEmpty(value)
					return defaultValue
                if !isFloat(value)
					throw new ${schema.wzId}ModelException('Must be a float value, got:' + value, node)
                return parseFloat(value)
        
		$if rf.wzName === "parsedate"
            function parsedate
				param value
				param defaultValue
				param node
                if isEmpty(value)
					return defaultValue
                if !isDate(value)
					throw new ${schema.wzId}ModelException('Must be a date value (YYYY/MM/DD), got:' + value, node)
                var parts = input.split('/')
                return new Date(parts[0], parts[1]-1, parts[2])
        
		$if rf.wzName === "pluralize"
            function pluralize
				param value
                return inflect.pluralize(value)

		$if rf.wzName === "endsWith"
            function endsWith
				param str
				param suffix
				return str.substr(str.length - suffix.length) === suffix

		$if rf.wzName === "startsWith"
            function startsWith
				param str
				param prefix
				return str.substr(0, prefix.length) === prefix

		$if rf.wzName === "trim"
            function trim
				param str
				return str.replace(/^\s+|\s+$/g, '')

		$if rf.wzName === "trimEnd"
            function trimEnd
				param str
				return str.replace(/\s+$/, '')

		$if rf.wzName === "trimStart"
            function trimStart
				param str
				return str.replace(/^\s+/, '')

		$if rf.wzName === "format"
			function format
                var result = ''
                var format = arguments[0]
                for var i = 0;;
                    var open = format.indexOf('{', i)
                    var close = format.indexOf('}', i)
                    if (open < 0) && (close < 0)
                        set result += format.slice(i)
                        break 
                    if (close > 0) && ((close < open) || (open < 0))
                        if format.charAt((close + 1)) !== '}'
                            throw 
                                new Error('format stringFormatBraceMismatch')
                        set result += format.slice(i, close + 1)
                        set i = close + 2
                        continue 
                    set result += format.slice(i, open)
                    set i = open + 1
                    if format.charAt(i) === '{'
                        set result += '{'
                        set i++
                        continue 
                    if close < 0
                        throw 
                            new Error('format stringFormatBraceMismatch')
                    var brace = format.substring(i, close)
                    var colonIndex = brace.indexOf(':')
                    var argNumber = parseInt(colonIndex < 0 ? brace : brace.substring(0, colonIndex), 10) + 1
                    if isNaN(argNumber)
                        throw 
                            new Error('format stringFormatInvalid')
                    var argFormat
                        iif colonIndex < 0
                            then ''
                            else 
                                _ brace.substring((colonIndex + 1))
                    var arg = arguments[argNumber]
                    if (typeof (arg) === "undefined") || (arg === null)
                        set arg = ''
                    if arg.toFormattedString
                        set result += arg.toFormattedString(argFormat)
                    elif arg.format
                        set result += arg.format(argFormat)
                    else 
                        set result += arg.toString()
                    set i = close + 1
                return result