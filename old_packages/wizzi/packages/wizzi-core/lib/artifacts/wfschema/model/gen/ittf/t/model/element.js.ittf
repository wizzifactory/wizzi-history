$group
	$params &element

	# element ${element.wzId}
		$foreach c in element.comments
			# ${c.wzName}
	class ${element.wzId}
		super ${element.superType}
		ctor
			param name
			param sourceLineInfo
			base name
			base sourceLineInfo

			$if element.allowedNameDeclaration() != null
				set ${element.allowedNameDeclaration()}
				
			$foreach attribute in element.attributes
					
				$if attribute.isReadOnly == false
						
					$if attribute.allowedDeclaration() != null
						set ${attribute.allowedDeclaration()}

						$foreach facet in attribute.getEnumFacets()

							$if facet.wzId.toLowerCase() !== "@@empty"
								set this.${attribute.wzId.toUpperCase()}_${facet.wzId.toUpperCase()} = "${facet.wzNameEscaped}"
				
			$if !element.IsAbstract

				set this.wzElement = "${element.wzId}"
				
			$foreach attribute in element.attributes

				$ var comments = attribute.comments
				$include comment
				
				$if verify.isNotEmpty(attribute.default)
					$if attribute.type === 'string'
						set this.${attribute.wzId} = "${attribute.default}"
					$else
						set this.${attribute.wzId} = ${attribute.default}
				$else
					# TODO avoid this declaration, attributes should be tested for undefined not null
					# set this.${attribute.wzId} = null

			$foreach include in element.includes

				set this.${include.actualNameLower}_${include.rootEntityNameId}_items = []

			$foreach relation in element.relations
				# relation ${relation.wzId}
				$foreach c in relation.comments
					#   ${c.wzName}
				$if relation.isOneToOne
					set this.${relation.wzName} = null
				$else
					set this.${relation.wzIdPlural} = []
		
		$foreach facet in element.getEnumFacets()
			$if facet.wzId.toLowerCase() !== "@@empty"
				set ${element.wzId}.NAME_${facet.wzId.toUpperCase()} = "${facet.wzNameEscaped}";
				+
		
		$foreach attribute in element.attributes
			$if attribute.isReadOnly == false && attribute.allowedDeclaration() != null
				$foreach facet in attribute.getEnumFacets()
					$if facet.wzName.toLowerCase() !== "@@empty"
						set ${element.wzId}.${attribute.wzId.toUpperCase()}_${facet.wzId.toUpperCase()} = "${facet.wzNameEscaped}";
						+
		
		$foreach attribute in element.attributes
			
			$if attribute.isCalculated
				set this.{attribute.wzId} = ${attribute.calculated}
			
			$if attribute.isDataType
				# w("public tsi.DataTypes.DataType {attribute.wzId}DataType { get; set; }");

		$foreach relation in element.relations

			$if relation.isOneToOne == false

				$if !relation.rightElement.isAbstract
			
					m add${relation.childEntityIdCapital}
						param name
						param sourceLineInfo
						var retval = new _md.${relation.childEntityId}(name, sourceLineInfo)
						set retval.wzParent = this
						_ this.${relation.wzIdPlural}.push(retval)
						return retval

					$if relation.hasAddOnce

						m add${relation.childEntityIdCapital}Once
							function
								param name
								param sourceLineInfo
								var test = this.get${relation.childEntityIdCapital}(name);");
								if test == null
									return this.add${relation.childEntityIdCapital}(name, value, sourceLineInfo)
								return null
				
				$if !relation.noGetMethod

					m get${relation.childEntityIdCapital}
						param name
						var found = null
						_ this.${relation.wzIdPlural}.forEach
							function
								param item
								set found = found || (item.wzName === name ? item : null)
						return found;

				$if relation.rightElement.addToChildren

					m ${relation.wzId}
						# TODO return wzChildren.Where(n => typeof(${relation.childEntityId}).IsAssignableFrom(n.GetType())).Cast<${relation.childEntityId}>().ToList();");

		
		$include element_tojson
		$include element_toxml
		$include element_toprettify
		$include element_loader
		$include element_verify
		$include element_initialize

		$foreach method in element.methods
			$include method

	set _md.${element.wzId} = ${element.wzId}