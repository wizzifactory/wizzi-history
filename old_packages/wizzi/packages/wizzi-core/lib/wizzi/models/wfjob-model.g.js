/*
    artifact generator: C:\My\wizzi\v5\node_modules\wizzi-legacy-v4\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\v5\node_modules\wizzi-core\lib\artifacts\wfschema\model\gen\ittf\wfschema-model.js.ittf
    utc time: Thu, 28 Feb 2019 20:32:10 GMT
*/
'use strict';
// generated by wizzi.codegen.js.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var wzutils = require('wizzi-utils');
var verify = wzutils.verify;


var _md = module.exports = {};

var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row, col, sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();

_md.wzSourceLineInfo = wzSourceLineInfo;
var wfjobBase = (function () {
    function wfjobBase(name, sourceLineInfo) {
        _classCallCheck(this, wfjobBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    wfjobBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    wfjobBase.prototype.wzSourceFilepath = function(sourceKey) {
        return this.wzRoot().loadHistory.getIttfDocumentUri(sourceKey);
    }
    wfjobBase.prototype.wzVerify = function() {
    }
    wfjobBase.prototype.wzInitialize = function() {
    }
    wfjobBase.prototype.wzInitializeAsync = function(ctx, callback) {
        callback(null);
    }
    wfjobBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    wfjobBase.prototype.wzAddChildToColl = function(node, coll) {
        node.wzParent = this;
        node.wzMoved = true;
        coll.push(node);
    }
    wfjobBase.prototype.wzMoveChildToColl = function(node, coll, fromColl) {
        var index = fromColl.indexOf(node);
        if (index < 0) {
            this.error('wzMoveChildToColl error. The from collection does not contain the node.', node);
        }
        fromColl.splice(index, 1);
        this.wzAddChildToColl(node, coll);
    }
    wfjobBase.prototype.wzLoadToChildColl = function(child, type, coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    wfjobBase.prototype.wzCreateChildColl = function(tag, name, type, coll) {
        var item = new type(name, this.wzSourceLineInfo);
        item.wzTag = tag;
        item.wzParent = this;
        item.wzCreated = true;
        coll.push(item);
        return item;
    }
    wfjobBase.prototype.wzLoadToChildren = function(child, type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    wfjobBase.prototype.wzLoadOneToOne = function(child, type, fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    wfjobBase.prototype.wzRemove = function(fromColl) {
        var index = fromColl.indexOf(this);
        if (index < 0) {
            this.error('wzRemove error. The from collection does not contain the node.', this);
        }
        fromColl.splice(index, 1);
    }
    wfjobBase.prototype.error = function(message, node) {
        throw new _md.wfjobModelException(message, node, this);
    }
    wfjobBase.prototype.toJsonProperties = function(result) {
        result.wzElement = this.wzElement;
        result.wzTag = this.wzTag;
        result.wzName = this.wzName;
    }
    wfjobBase.prototype.toJsonChildren = function(result) {
        if (this.wzChildren.length > 0) {
            var children = [];
            var i, i_len=this.wzChildren.length, item;
            for (i=0; i<i_len; i++) {
                item = this.wzChildren[i];
                children.push(item.toJson());
            }
            result.wzChildren = children;
        }
    }
    return wfjobBase;
})();

_md.wfjobBase = wfjobBase;

/**
    element wfjob
     The root element of the wfjob schema.
*/
var wfjob = (function (wfjobBase) {
    _inherits(wfjob, wfjobBase);
    function wfjob(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(wfjob.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, wfjob);
        this.wzElement = "wfjob";
        // The base path for the source models used by this "wfjob".
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.modelsBaseFolder = null
        // The base folder path for the generated artifacts.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.destBaseFolder = null
        // A short description of the job.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.title = null
        // relation comment
        this.comments = [];
        // relation xrequire
        this.requires = [];
        // relation model
        this.models = [];
        // relation line
        this.lines = [];
        // relation production
        this.productions = [];
        // relation execFile
        this.execFiles = [];
    }
    wfjob.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    wfjob.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    wfjob.prototype.addXrequire = function(name, sourceLineInfo) {
        var retval = new _md.xrequire(name, sourceLineInfo);
        retval.wzParent = this;
        this.requires.push(retval);
        return retval;
    }
    wfjob.prototype.getXrequire = function(name) {
        var found = null;
        this.requires.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    wfjob.prototype.addModel = function(name, sourceLineInfo) {
        var retval = new _md.model(name, sourceLineInfo);
        retval.wzParent = this;
        this.models.push(retval);
        return retval;
    }
    wfjob.prototype.getModel = function(name) {
        var found = null;
        this.models.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    wfjob.prototype.addLine = function(name, sourceLineInfo) {
        var retval = new _md.line(name, sourceLineInfo);
        retval.wzParent = this;
        this.lines.push(retval);
        return retval;
    }
    wfjob.prototype.getLine = function(name) {
        var found = null;
        this.lines.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    wfjob.prototype.addProduction = function(name, sourceLineInfo) {
        var retval = new _md.production(name, sourceLineInfo);
        retval.wzParent = this;
        this.productions.push(retval);
        return retval;
    }
    wfjob.prototype.getProduction = function(name) {
        var found = null;
        this.productions.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    wfjob.prototype.addExecFile = function(name, sourceLineInfo) {
        var retval = new _md.execFile(name, sourceLineInfo);
        retval.wzParent = this;
        this.execFiles.push(retval);
        return retval;
    }
    wfjob.prototype.getExecFile = function(name) {
        var found = null;
        this.execFiles.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    wfjob.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    wfjob.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.modelsBaseFolder)) {
            result["modelsBaseFolder"] = this.modelsBaseFolder;
        }
        if (!isEmpty(this.destBaseFolder)) {
            result["destBaseFolder"] = this.destBaseFolder;
        }
        if (!isEmpty(this.title)) {
            result["title"] = this.title;
        }
    }
    wfjob.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
        items = [];
        var i, i_len=this.requires.length, item;
        for (i=0; i<i_len; i++) {
            item = this.requires[i];
            items.push(item.toJson());
        }
        result['requires'] = items;
        items = [];
        var i, i_len=this.models.length, item;
        for (i=0; i<i_len; i++) {
            item = this.models[i];
            items.push(item.toJson());
        }
        result['models'] = items;
        items = [];
        var i, i_len=this.lines.length, item;
        for (i=0; i<i_len; i++) {
            item = this.lines[i];
            items.push(item.toJson());
        }
        result['lines'] = items;
        items = [];
        var i, i_len=this.productions.length, item;
        for (i=0; i<i_len; i++) {
            item = this.productions[i];
            items.push(item.toJson());
        }
        result['productions'] = items;
        items = [];
        var i, i_len=this.execFiles.length, item;
        for (i=0; i<i_len; i++) {
            item = this.execFiles[i];
            items.push(item.toJson());
        }
        result['execFiles'] = items;
    }
    wfjob.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.comments);
            }
        }
        if (_l == 4 && _ch == 'l') {
            if (name === 'line') {
                return this.wzLoadToChildColl(child, _md.line, this.lines);
            }
        }
        if (_l == 5 && _ch == 'm') {
            if (name === 'model') {
                return this.wzLoadToChildColl(child, _md.model, this.models);
            }
        }
        if (_l == 5 && _ch == 't') {
            if (name === 'title') {
                this.title = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'r') {
            if (name === 'require') {
                return this.wzLoadToChildColl(child, _md.xrequire, this.requires);
            }
        }
        if (_l == 8 && _ch == 'e') {
            if (name === 'execfile') {
                return this.wzLoadToChildColl(child, _md.execFile, this.execFiles);
            }
        }
        if (_l == 9 && _ch == 'e') {
            if (name === 'exec-file') {
                return this.wzLoadToChildColl(child, _md.execFile, this.execFiles);
            }
        }
        if (_l == 10 && _ch == 'p') {
            if (name === 'production') {
                return this.wzLoadToChildColl(child, _md.production, this.productions);
            }
        }
        if (_l == 16 && _ch == 'd') {
            if (name === 'dest-base-folder') {
                this.destBaseFolder = child.v; return true;
            }
            else if (name === 'dest_base_folder') {
                this.destBaseFolder = child.v; return true;
            }
        }
        if (_l == 18 && _ch == 'm') {
            if (name === 'models-base-folder') {
                this.modelsBaseFolder = child.v; return true;
            }
            else if (name === 'models_base_folder') {
                this.modelsBaseFolder = child.v; return true;
            }
        }
        return ok;
    }
    wfjob.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    wfjob.prototype.wzVerify = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.requires.length, item;
        for (i=0; i<i_len; i++) {
            item = this.requires[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.models.length, item;
        for (i=0; i<i_len; i++) {
            item = this.models[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.lines.length, item;
        for (i=0; i<i_len; i++) {
            item = this.lines[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.productions.length, item;
        for (i=0; i<i_len; i++) {
            item = this.productions[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.execFiles.length, item;
        for (i=0; i<i_len; i++) {
            item = this.execFiles[i];
            item.wzVerify(ctx);
        }
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    wfjob.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.requires.length, item;
        for (i=0; i<i_len; i++) {
            item = this.requires[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.models.length, item;
        for (i=0; i<i_len; i++) {
            item = this.models[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.lines.length, item;
        for (i=0; i<i_len; i++) {
            item = this.lines[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.productions.length, item;
        for (i=0; i<i_len; i++) {
            item = this.productions[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.execFiles.length, item;
        for (i=0; i<i_len; i++) {
            item = this.execFiles[i];
            item.wzInitialize(ctx);
        }
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return wfjob;
})(wfjobBase);

_md.wfjob = wfjob;
/**
    element comment
     A comment line for describing job items.
*/
var comment = (function (wfjobBase) {
    _inherits(comment, wfjobBase);
    function comment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(comment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, comment);
        this.wzElement = "comment";
    }
    comment.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    comment.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    comment.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
    }
    return comment;
})(wfjobBase);

_md.comment = comment;
/**
    element xrequire
     Requires a WizziFactoryPackage.
     The IttfNodeValue is the package name.
     If the package is not globally installed must be a fully qualified path.
*/
var xrequire = (function (wfjobBase) {
    _inherits(xrequire, wfjobBase);
    function xrequire(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xrequire.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xrequire);
        this.wzElement = "xrequire";
    }
    xrequire.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    xrequire.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    xrequire.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
    }
    return xrequire;
})(wfjobBase);

_md.xrequire = xrequire;
/**
    element model
     A wizzi model instance or a POJO acting as a context during an mTree loading
     or an artifact generation.
     The ittf node value is the name of the model that must be unique
     in a "wfjob"; it will become the default export name of the context
     value that exposes the model.
     A "model" will be loaded once, and will be reused if
     referenced in many evaluations.
*/
var model = (function (wfjobBase) {
    _inherits(model, wfjobBase);
    function model(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(model.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, model);
        this.allowedFORMATS = [ "json", "xml", "js"];
        this.FORMAT_JSON = "json";
        this.FORMAT_XML = "xml";
        this.FORMAT_JS = "js";
        this.wzElement = "model";
        /**
             The path to the primary ittf document of the "model" or to the the POJO source.
             When relative, the base path is the "modelsBaseFolder"
             declared on the "wfjob" element.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.src = null
        /**
             In case of a wizzi model is the name of the schema that will validate the "model".
             Is alternative to the attribute 'format'.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.schema = null
        /**
             In case of a POJO model is the native format of the source file.
             Is alternative to the attribute 'schema'.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.format = null
        /**
             A filepath where the loaded must be dumped for test.
             The model must implement the toJson method. See the "exportTo" attribute in wizzischema root nodes.
             When declared the loaded model is JSON.stringyfied and written
             to the "dumpFile" filepath.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.dumpFile = null
        // relation modelRef
        // References to "model" instances acting as data context during this "model" evaluation.
        // A "model" is referenced by its name.
        this.modelRefs = [];
        // relation comment
        this.comments = [];
    }
    model.FORMAT_JSON = "json";
    model.FORMAT_XML = "xml";
    model.FORMAT_JS = "js";
    model.prototype.addModelRef = function(name, sourceLineInfo) {
        var retval = new _md.modelRef(name, sourceLineInfo);
        retval.wzParent = this;
        this.modelRefs.push(retval);
        return retval;
    }
    model.prototype.getModelRef = function(name) {
        var found = null;
        this.modelRefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    model.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    model.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    model.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    model.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.src)) {
            result["src"] = this.src;
        }
        if (!isEmpty(this.schema)) {
            result["schema"] = this.schema;
        }
        if (!isEmpty(this.format)) {
            result["format"] = this.format;
        }
        if (!isEmpty(this.dumpFile)) {
            result["dumpFile"] = this.dumpFile;
        }
    }
    model.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.modelRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelRefs[i];
            items.push(item.toJson());
        }
        result['modelRefs'] = items;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    model.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.comments);
            }
        }
        if (_l == 3 && _ch == 's') {
            if (name === 'src') {
                this.src = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'f') {
            if (name === 'format') {
                this.format = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'schema') {
                this.schema = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'm') {
            if (name === 'modelref') {
                return this.wzLoadToChildColl(child, _md.modelRef, this.modelRefs);
            }
        }
        if (_l == 9 && _ch == 'd') {
            if (name === 'dump-file') {
                this.dumpFile = child.v; return true;
            }
            else if (name === 'dump_file') {
                this.dumpFile = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'm') {
            if (name === 'model-ref') {
                return this.wzLoadToChildColl(child, _md.modelRef, this.modelRefs);
            }
        }
        return ok;
    }
    model.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    model.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("model", "format", this.format, this.allowedFORMATS, this);
        var i, i_len=this.modelRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelRefs[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    model.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.modelRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelRefs[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return model;
})(wfjobBase);

_md.model = model;
// element modelRef
var modelRef = (function (wfjobBase) {
    _inherits(modelRef, wfjobBase);
    function modelRef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(modelRef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, modelRef);
        this.wzElement = "modelRef";
        /**
             The name of the context property that will expose the loaded model during
             an evaluation. Overrides the name of the "model" that is the default export name.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.exportName = null
        // relation transformer
        // A model may have one or more transformers.
        // Transformers are chained and the output of a transformation
        // is the input for the next one.
        this.transformers = [];
        // relation modelCollection
        // TODO This is a one-to-one relation, not yet implemented.
        // Single items of a collection contained in the "model" may act as data contexts
        // of artifacts where each collection item generates a separate artifact.
        this.modelCollections = [];
        // relation comment
        this.comments = [];
    }
    modelRef.prototype.addTransformer = function(name, sourceLineInfo) {
        var retval = new _md.transformer(name, sourceLineInfo);
        retval.wzParent = this;
        this.transformers.push(retval);
        return retval;
    }
    modelRef.prototype.getTransformer = function(name) {
        var found = null;
        this.transformers.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    modelRef.prototype.addModelCollection = function(name, sourceLineInfo) {
        var retval = new _md.modelCollection(name, sourceLineInfo);
        retval.wzParent = this;
        this.modelCollections.push(retval);
        return retval;
    }
    modelRef.prototype.getModelCollection = function(name) {
        var found = null;
        this.modelCollections.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    modelRef.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    modelRef.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    modelRef.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    modelRef.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.exportName)) {
            result["exportName"] = this.exportName;
        }
    }
    modelRef.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.transformers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.transformers[i];
            items.push(item.toJson());
        }
        result['transformers'] = items;
        items = [];
        var i, i_len=this.modelCollections.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelCollections[i];
            items.push(item.toJson());
        }
        result['modelCollections'] = items;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    modelRef.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.comments);
            }
        }
        if (_l == 9 && _ch == 'm') {
            if (name === 'modelcoll') {
                return this.wzLoadToChildColl(child, _md.modelCollection, this.modelCollections);
            }
        }
        if (_l == 10 && _ch == 'm') {
            if (name === 'model-coll') {
                return this.wzLoadToChildColl(child, _md.modelCollection, this.modelCollections);
            }
        }
        if (_l == 11 && _ch == 'e') {
            if (name === 'export-name') {
                this.exportName = child.v; return true;
            }
            else if (name === 'export_name') {
                this.exportName = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 't') {
            if (name === 'transformer') {
                return this.wzLoadToChildColl(child, _md.transformer, this.transformers);
            }
        }
        return ok;
    }
    modelRef.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    modelRef.prototype.wzVerify = function(ctx) {
        var i, i_len=this.transformers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.transformers[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.modelCollections.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelCollections[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    modelRef.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.transformers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.transformers[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.modelCollections.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelCollections[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        if (this.modelCollections.length > 0) {
            this.modelCollection = this.modelCollections[0];
            this.collName = this.modelCollection.wzName;
            this.collItemName = this.modelCollection.itemName;
            this.collPathTemplateValues = [];
            var i, i_len=this.modelCollection.pathTemplateValues.length, item;
            for (i=0; i<i_len; i++) {
                item = this.modelCollection.pathTemplateValues[i];
                this.collPathTemplateValues.push({
                    token: item.token, 
                    attribute: item.attribute, 
                    function: item.function
                });
            }
        }
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return modelRef;
})(wfjobBase);

_md.modelRef = modelRef;
/**
    element modelCollection
     Single items of a collection contained in a "model" may act as data contexts
     of artifacts where each collection item generates a separate artifact.
     This element, contained in a "modelRef" element, specifies:
     . the collection name: the IttfNodeValue of this element
     . the export name of the collection item when acting as a data context: the "item-name" attribute
     . the property names of the collection item that will be used to build the destination path
     of the artifact: the "pathTemplateValues" child elements
*/
var modelCollection = (function (wfjobBase) {
    _inherits(modelCollection, wfjobBase);
    function modelCollection(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(modelCollection.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, modelCollection);
        this.wzElement = "modelCollection";
        // The export name of a collection item when acting as a data context.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.itemName = null
        // relation pathTemplateValue
        this.pathTemplateValues = [];
        // relation comment
        this.comments = [];
    }
    modelCollection.prototype.addPathTemplateValue = function(name, sourceLineInfo) {
        var retval = new _md.pathTemplateValue(name, sourceLineInfo);
        retval.wzParent = this;
        this.pathTemplateValues.push(retval);
        return retval;
    }
    modelCollection.prototype.getPathTemplateValue = function(name) {
        var found = null;
        this.pathTemplateValues.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    modelCollection.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    modelCollection.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    modelCollection.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    modelCollection.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.itemName)) {
            result["itemName"] = this.itemName;
        }
    }
    modelCollection.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.pathTemplateValues.length, item;
        for (i=0; i<i_len; i++) {
            item = this.pathTemplateValues[i];
            items.push(item.toJson());
        }
        result['pathTemplateValues'] = items;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    modelCollection.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.comments);
            }
        }
        if (_l == 9 && _ch == 'i') {
            if (name === 'item-name') {
                this.itemName = child.v; return true;
            }
            else if (name === 'item_name') {
                this.itemName = child.v; return true;
            }
        }
        if (_l == 17 && _ch == 'p') {
            if (name === 'pathtemplatevalue') {
                return this.wzLoadToChildColl(child, _md.pathTemplateValue, this.pathTemplateValues);
            }
        }
        if (_l == 19 && _ch == 'p') {
            if (name === 'path-template-value') {
                return this.wzLoadToChildColl(child, _md.pathTemplateValue, this.pathTemplateValues);
            }
        }
        return ok;
    }
    modelCollection.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    modelCollection.prototype.wzVerify = function(ctx) {
        var i, i_len=this.pathTemplateValues.length, item;
        for (i=0; i<i_len; i++) {
            item = this.pathTemplateValues[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    modelCollection.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.pathTemplateValues.length, item;
        for (i=0; i<i_len; i++) {
            item = this.pathTemplateValues[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return modelCollection;
})(wfjobBase);

_md.modelCollection = modelCollection;
// element pathTemplateValue
var pathTemplateValue = (function (wfjobBase) {
    _inherits(pathTemplateValue, wfjobBase);
    function pathTemplateValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(pathTemplateValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, pathTemplateValue);
        this.wzElement = "pathTemplateValue";
        /**
             The property of the context object (a collection item) containing the value which will replace
             the "token" value in the generated artifact path template.
             Is alternative to "function"
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.attribute = null
        /**
             The function of the context object (a collection item) that returns the value which will replace
             the "token" value in the generated artifact path template.
             Is alternative to "attribute"
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.function = null
        /**
             The token that will be replaced by the value returned accessing "attribute" or calling "function"
             on a context object.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.token = null
        // relation comment
        this.comments = [];
    }
    pathTemplateValue.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    pathTemplateValue.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    pathTemplateValue.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    pathTemplateValue.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.attribute)) {
            result["attribute"] = this.attribute;
        }
        if (!isEmpty(this.function)) {
            result["function"] = this.function;
        }
        if (!isEmpty(this.token)) {
            result["token"] = this.token;
        }
    }
    pathTemplateValue.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    pathTemplateValue.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.comments);
            }
        }
        if (_l == 5 && _ch == 't') {
            if (name === 'token') {
                this.token = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'f') {
            if (name === 'function') {
                this.function = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'a') {
            if (name === 'attribute') {
                this.attribute = child.v; return true;
            }
        }
        return ok;
    }
    pathTemplateValue.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    pathTemplateValue.prototype.wzVerify = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    pathTemplateValue.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return pathTemplateValue;
})(wfjobBase);

_md.pathTemplateValue = pathTemplateValue;
/**
    element transformer
     A model transformer .
     The ittf node value is the transformer name {wizzischema}/{transformer}
     to be found in {wizziPackage}/artifacts/{wizzischema}/{transformer}/trans/main.js
*/
var transformer = (function (wfjobBase) {
    _inherits(transformer, wfjobBase);
    function transformer(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(transformer.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, transformer);
        this.wzElement = "transformer";
        /**
             A filepath where the transformed model must be dumped for test.
             When declared the transformed model is JSON.stringyfied and written
             to the "dumpFile" filepath.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.dumpFile = null
        // relation comment
        this.comments = [];
    }
    transformer.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    transformer.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    transformer.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    transformer.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.dumpFile)) {
            result["dumpFile"] = this.dumpFile;
        }
    }
    transformer.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    transformer.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.comments);
            }
        }
        if (_l == 9 && _ch == 'd') {
            if (name === 'dump-file') {
                this.dumpFile = child.v; return true;
            }
            else if (name === 'dump_file') {
                this.dumpFile = child.v; return true;
            }
        }
        return ok;
    }
    transformer.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    transformer.prototype.wzVerify = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    transformer.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return transformer;
})(wfjobBase);

_md.transformer = transformer;
/**
    element artifact
     Describe an artifact to be generated.
     It is a child element of a "line" element.
    
     Can be one of:
     . A Wizzi model instance, acting as a template, which WizziSchema targets a code language technology.
     . A swig template.
     . A code write generation that takes in input a context of one or more WizziModels.
     . A final artifact to be copied to a destination folder without transformations.
     . A reference to another WfJob, to be executed before the current WfJob where the artifact is declared.
    
     Context value objects for template transformations are declared in the "model" element, child of the "wfjob" root element
     and may be referenced in the elements "modelRef", children of the "artifact" element.
    
     The "src" or "destPath" attributes of an "artifact" element may contain tokens enclosed in graph parens.
     When one of the "modelRef@" is a collection model, the artifact generation is repeated
     for each item of the collection and the "src" or "destPath" attributes become the template of the destination path.
     See the "pathTemplateValues" child elements of the "modelRef" for the values that will replace the tokens.
    
     Example
    
     artifact
     dest-path app/db/{table}Datalayer.js.ittf
     ...
     model-ref rdbms
     model-coll tables
     item-name table
     path-template-value
     attribute tableName
     token table
    
     model rdbms
     ...
    
     the Wizzi model instance after loading rdbms: {
     ....
     tables: [{
     tableName: 'user',
     ...
     },{
     ...
     }]
     }
    
     will produce an artifact of path .../app/db/userDatalayer.js, and as many as the items in the tables collection.
    
*/
var artifact = (function (wfjobBase) {
    _inherits(artifact, wfjobBase);
    function artifact(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(artifact.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, artifact);
        this.allowedFORMATS = [ "json", "xml", "js"];
        this.FORMAT_JSON = "json";
        this.FORMAT_XML = "xml";
        this.FORMAT_JS = "js";
        this.wzElement = "artifact";
        /**
             The path to the primary ittf source document of the artifact, in case of a wizzi model, or
             to a native source in case of a POJO.
             TODO explain why this:
             Or it may contain the literal 'context' if the artifact generator require a context object only
             and not a primary model.
             If relative, the base path is the cwdFolder of the parent line.
             Can be a glob pattern.
             If the artifact is a code write artifact the 'src' attribute must be omitted.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.src = null
        /**
             File returned by the src pattern that must be ignored.
             Can be a glob pattern.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.ignore = null
        /**
             When the artifact source is a schemed ittf document, is the schema that will load and
             validate the wizzi model instance.
             May be null (absent) if the artifact is a final artifact or the artifact source is a POJO;
             in this case the 'format' attribute must be declared.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.schema = null
        /**
             When the artifact source is a POJO model is the native format of the source file.
             Is alternative to the attribute 'schema'.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.format = null
        /**
             Indicator that the mTree buildup script must be 'compiled' for javascript
             and loaded with a 'require-from-string' function instead of
             being submitted to js-wizzi.
        */
        this.isCompile = false;
        /**
             Indicator that the artifact source is a wizzi factory job, alias a wizzi model of schema 'wfjob'.
             The job will be executed before any other artifact production of the current wfjob.
             This could be autodected from the schema, but autodetection would forbid other uses or transformations
             of a "wfjob" model, so the indicator is required.
        */
        this.isWfJob = false;
        /**
             Indicator that the artifact source is a wizzi schema, alias a wizzi model of schema 'wfschema'
             and that the generation of the artifacts for the wizzi model described by the wfschema is requested.
             This could be autodected from the schema, but autodetection would forbid other uses or transformations
             of a "wfschema" model, so the indicator is required.
        */
        this.isWfModelType = false;
        /**
             When the artifact source is a wizzi model instance or a POJO, acting as a context, is the name of
             the artifact generator that will transform the context into a software artifact.
             When the artifact is a code write generation or a final artifact must be omitted.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.generator = null
        /**
             The artifact source file path, 'src', is the default relative destination path
             of the generated artifact. When set, this attribute overrides the default.
             It can be an absolute or relative path.
             If the artifact is a code write generation the 'destPath' attribute is required.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.destPath = null
        /**
             The document path extension of the generated artifact. Optional. The default is the 'src' extension
             without the ending '.ittf' string, if present.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.extension = null
        // relation transformer
        // When the artifact source is an Ittf document, the loaded WizziModel may need
        // one or more transformations before being passed to the artifact generator.
        // Transformers are chained and the output of a transformation
        // is the input for the next one.
        this.transformers = [];
        // relation modelRef
        // References to 'model/s' acting as context objects.
        // In case of a final artifact must not be declared.
        this.modelRefs = [];
        // relation comment
        this.comments = [];
    }
    artifact.FORMAT_JSON = "json";
    artifact.FORMAT_XML = "xml";
    artifact.FORMAT_JS = "js";
    artifact.prototype.addTransformer = function(name, sourceLineInfo) {
        var retval = new _md.transformer(name, sourceLineInfo);
        retval.wzParent = this;
        this.transformers.push(retval);
        return retval;
    }
    artifact.prototype.getTransformer = function(name) {
        var found = null;
        this.transformers.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    artifact.prototype.addModelRef = function(name, sourceLineInfo) {
        var retval = new _md.modelRef(name, sourceLineInfo);
        retval.wzParent = this;
        this.modelRefs.push(retval);
        return retval;
    }
    artifact.prototype.getModelRef = function(name) {
        var found = null;
        this.modelRefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    artifact.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    artifact.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    artifact.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    artifact.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.src)) {
            result["src"] = this.src;
        }
        if (!isEmpty(this.ignore)) {
            result["ignore"] = this.ignore;
        }
        if (!isEmpty(this.schema)) {
            result["schema"] = this.schema;
        }
        if (!isEmpty(this.format)) {
            result["format"] = this.format;
        }
        result["isCompile"] = this.isCompile;
        result["isWfJob"] = this.isWfJob;
        result["isWfModelType"] = this.isWfModelType;
        if (!isEmpty(this.generator)) {
            result["generator"] = this.generator;
        }
        if (!isEmpty(this.destPath)) {
            result["destPath"] = this.destPath;
        }
        if (!isEmpty(this.extension)) {
            result["extension"] = this.extension;
        }
    }
    artifact.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.transformers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.transformers[i];
            items.push(item.toJson());
        }
        result['transformers'] = items;
        items = [];
        var i, i_len=this.modelRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelRefs[i];
            items.push(item.toJson());
        }
        result['modelRefs'] = items;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    artifact.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.comments);
            }
        }
        if (_l == 3 && _ch == 's') {
            if (name === 'src') {
                this.src = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'f') {
            if (name === 'format') {
                this.format = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'i') {
            if (name === 'ignore') {
                this.ignore = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'schema') {
                this.schema = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'm') {
            if (name === 'modelref') {
                return this.wzLoadToChildColl(child, _md.modelRef, this.modelRefs);
            }
        }
        if (_l == 9 && _ch == 'd') {
            if (name === 'dest-path') {
                this.destPath = child.v; return true;
            }
            else if (name === 'dest_path') {
                this.destPath = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'e') {
            if (name === 'extension') {
                this.extension = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'g') {
            if (name === 'generator') {
                this.generator = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'i') {
            if (name === 'is-wf-job') {
                this.isWfJob = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_wf_job') {
                this.isWfJob = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 9 && _ch == 'm') {
            if (name === 'model-ref') {
                return this.wzLoadToChildColl(child, _md.modelRef, this.modelRefs);
            }
        }
        if (_l == 10 && _ch == 'i') {
            if (name === 'is-compile') {
                this.isCompile = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_compile') {
                this.isCompile = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 11 && _ch == 't') {
            if (name === 'transformer') {
                return this.wzLoadToChildColl(child, _md.transformer, this.transformers);
            }
        }
        if (_l == 16 && _ch == 'i') {
            if (name === 'is-wf-model-type') {
                this.isWfModelType = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_wf_model_type') {
                this.isWfModelType = parseboolean(child.v, true, child); return true;
            }
        }
        return ok;
    }
    artifact.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    artifact.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("artifact", "format", this.format, this.allowedFORMATS, this);
        var i, i_len=this.transformers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.transformers[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.modelRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelRefs[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    artifact.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.transformers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.transformers[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.modelRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelRefs[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return artifact;
})(wfjobBase);

_md.artifact = artifact;
/**
    element line
     A line is a group of artifacts having the same source "cwdFolder".
*/
var line = (function (wfjobBase) {
    _inherits(line, wfjobBase);
    function line(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(line.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, line);
        this.wzElement = "line";
        // The source folder of the artifact templates of this line.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.cwdFolder = null
        /**
             The destination folder of the generated artifacts of this line.
             Overrides the attribute "destFolder" of the "production" element.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.destFolder = null
        // relation artifact
        // The artifacts of the "line"
        this.artifacts = [];
        // relation comment
        this.comments = [];
    }
    line.prototype.addArtifact = function(name, sourceLineInfo) {
        var retval = new _md.artifact(name, sourceLineInfo);
        retval.wzParent = this;
        this.artifacts.push(retval);
        return retval;
    }
    line.prototype.getArtifact = function(name) {
        var found = null;
        this.artifacts.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    line.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    line.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    line.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    line.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.cwdFolder)) {
            result["cwdFolder"] = this.cwdFolder;
        }
        if (!isEmpty(this.destFolder)) {
            result["destFolder"] = this.destFolder;
        }
    }
    line.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.artifacts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.artifacts[i];
            items.push(item.toJson());
        }
        result['artifacts'] = items;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    line.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.comments);
            }
        }
        if (_l == 8 && _ch == 'a') {
            if (name === 'artifact') {
                return this.wzLoadToChildColl(child, _md.artifact, this.artifacts);
            }
        }
        if (_l == 10 && _ch == 'c') {
            if (name === 'cwd-folder') {
                this.cwdFolder = child.v; return true;
            }
            else if (name === 'cwd_folder') {
                this.cwdFolder = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'd') {
            if (name === 'dest-folder') {
                this.destFolder = child.v; return true;
            }
            else if (name === 'dest_folder') {
                this.destFolder = child.v; return true;
            }
        }
        return ok;
    }
    line.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    line.prototype.wzVerify = function(ctx) {
        var i, i_len=this.artifacts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.artifacts[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    line.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.artifacts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.artifacts[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return line;
})(wfjobBase);

_md.line = line;
/**
    element lineRef
     A reference to a line.
*/
var lineRef = (function (wfjobBase) {
    _inherits(lineRef, wfjobBase);
    function lineRef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(lineRef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, lineRef);
        this.wzElement = "lineRef";
        // relation comment
        this.comments = [];
    }
    lineRef.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    lineRef.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    lineRef.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    lineRef.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    lineRef.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    lineRef.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.comments);
            }
        }
        return ok;
    }
    lineRef.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    lineRef.prototype.wzVerify = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    lineRef.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return lineRef;
})(wfjobBase);

_md.lineRef = lineRef;
/**
    element production
     A job execution unit that generates a set of Software artifacts
     into one destination folder.
*/
var production = (function (wfjobBase) {
    _inherits(production, wfjobBase);
    function production(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(production.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, production);
        this.wzElement = "production";
        // The destination folder of the generated artifacts.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.destFolder = null
        // relation modelRef
        // References to the context WizziWodels used by this "production".
        this.modelRefs = [];
        // relation lineRef
        // References to the "line(s)" to be generated.
        this.lineRefs = [];
        // relation comment
        this.comments = [];
    }
    production.prototype.addModelRef = function(name, sourceLineInfo) {
        var retval = new _md.modelRef(name, sourceLineInfo);
        retval.wzParent = this;
        this.modelRefs.push(retval);
        return retval;
    }
    production.prototype.getModelRef = function(name) {
        var found = null;
        this.modelRefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    production.prototype.addLineRef = function(name, sourceLineInfo) {
        var retval = new _md.lineRef(name, sourceLineInfo);
        retval.wzParent = this;
        this.lineRefs.push(retval);
        return retval;
    }
    production.prototype.getLineRef = function(name) {
        var found = null;
        this.lineRefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    production.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    production.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    production.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    production.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.destFolder)) {
            result["destFolder"] = this.destFolder;
        }
    }
    production.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.modelRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelRefs[i];
            items.push(item.toJson());
        }
        result['modelRefs'] = items;
        items = [];
        var i, i_len=this.lineRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.lineRefs[i];
            items.push(item.toJson());
        }
        result['lineRefs'] = items;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    production.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.comments);
            }
        }
        if (_l == 7 && _ch == 'l') {
            if (name === 'lineref') {
                return this.wzLoadToChildColl(child, _md.lineRef, this.lineRefs);
            }
        }
        if (_l == 8 && _ch == 'l') {
            if (name === 'line-ref') {
                return this.wzLoadToChildColl(child, _md.lineRef, this.lineRefs);
            }
        }
        if (_l == 8 && _ch == 'm') {
            if (name === 'modelref') {
                return this.wzLoadToChildColl(child, _md.modelRef, this.modelRefs);
            }
        }
        if (_l == 9 && _ch == 'm') {
            if (name === 'model-ref') {
                return this.wzLoadToChildColl(child, _md.modelRef, this.modelRefs);
            }
        }
        if (_l == 11 && _ch == 'd') {
            if (name === 'dest-folder') {
                this.destFolder = child.v; return true;
            }
            else if (name === 'dest_folder') {
                this.destFolder = child.v; return true;
            }
        }
        return ok;
    }
    production.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    production.prototype.wzVerify = function(ctx) {
        var i, i_len=this.modelRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelRefs[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.lineRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.lineRefs[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    production.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.modelRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.modelRefs[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.lineRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.lineRefs[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        this.wfjob = this.wzParent;
        var i, i_len=this.modelRefs.length, modelRef;
        for (i=0; i<i_len; i++) {
            modelRef = this.modelRefs[i];
            var model = this.wfjob.getModel(modelRef.wzName);
            if (model == null) {
                this.error('Model ' + modelRef.wzName + ' not found.', modelRef);
            }
            modelRef.___model = model;
        }
        this.lines = [];
        var i, i_len=this.lineRefs.length, lineRef;
        for (i=0; i<i_len; i++) {
            lineRef = this.lineRefs[i];
            var line = this.wfjob.getLine(lineRef.wzName);
            if (line == null) {
                this.error('line ' + lineRef.wzName + ' not found.', lineRef);
            }
            this.lines.push(line);
            var j, j_len=line.artifacts.length, artifact;
            for (j=0; j<j_len; j++) {
                artifact = line.artifacts[j];
                var k, k_len=artifact.modelRefs.length, modelRef;
                for (k=0; k<k_len; k++) {
                    modelRef = artifact.modelRefs[k];
                    var model = this.wfjob.getModel(modelRef.wzName);
                    if (model == null) {
                        this.error('Model ' + modelRef.wzName + ' not found.', modelRef);
                    }
                    modelRef.___model = model;
                }
            }
        }
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return production;
})(wfjobBase);

_md.production = production;
// element env
var env = (function (wfjobBase) {
    _inherits(env, wfjobBase);
    function env(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(env.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, env);
        this.allowedTYPES = [ "string", "boolean", "number"];
        this.TYPE_STRING = "string";
        this.TYPE_XBOOLEAN = "boolean";
        this.TYPE_NUMBER = "number";
        this.wzElement = "env";
        this.type = "string";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.__name = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.__value = null
    }
    env.TYPE_STRING = "string";
    env.TYPE_XBOOLEAN = "boolean";
    env.TYPE_NUMBER = "number";
    env.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    env.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
        if (!isEmpty(this.__name)) {
            result["__name"] = this.__name;
        }
        if (!isEmpty(this.__value)) {
            result["__value"] = this.__value;
        }
    }
    env.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
    }
    env.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 6 && _ch == '_') {
            if (name === '__name') {
                this.__name = child.v; return true;
            }
        }
        if (_l == 7 && _ch == '_') {
            if (name === '__value') {
                this.__value = child.v; return true;
            }
        }
        return ok;
    }
    env.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    env.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("env", "type", this.type, this.allowedTYPES, this);
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    env.prototype.wzInitialize = function(ctx) {
        var nv = verify.parseNameValue(this.wzName);
        this.__name = nv.name;
        this.__value = verify.convert(nv.value, this.type);
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return env;
})(wfjobBase);

_md.env = env;
// element arg
var arg = (function (wfjobBase) {
    _inherits(arg, wfjobBase);
    function arg(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(arg.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, arg);
        this.allowedTYPES = [ "string", "boolean", "number"];
        this.TYPE_STRING = "string";
        this.TYPE_XBOOLEAN = "boolean";
        this.TYPE_NUMBER = "number";
        this.wzElement = "arg";
        this.type = "string";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.__name = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.__value = null
    }
    arg.TYPE_STRING = "string";
    arg.TYPE_XBOOLEAN = "boolean";
    arg.TYPE_NUMBER = "number";
    arg.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    arg.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
        if (!isEmpty(this.__name)) {
            result["__name"] = this.__name;
        }
        if (!isEmpty(this.__value)) {
            result["__value"] = this.__value;
        }
    }
    arg.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
    }
    arg.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 6 && _ch == '_') {
            if (name === '__name') {
                this.__name = child.v; return true;
            }
        }
        if (_l == 7 && _ch == '_') {
            if (name === '__value') {
                this.__value = child.v; return true;
            }
        }
        return ok;
    }
    arg.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    arg.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("arg", "type", this.type, this.allowedTYPES, this);
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    arg.prototype.wzInitialize = function(ctx) {
        var nv = verify.parseNameValue(this.wzName);
        if (nv.value && nv.value.length > 0) {
            this.__name = nv.name;
            this.__value = verify.convert(nv.value, this.type);
        }
        else {
            this.__value = verify.convert(nv.name, this.type);
        }
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return arg;
})(wfjobBase);

_md.arg = arg;
/**
    element execFile
     An execution of a child process using
     -> child_process.execFile(file[, args][, options][, callback])
*/
var execFile = (function (wfjobBase) {
    _inherits(execFile, wfjobBase);
    function execFile(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(execFile.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, execFile);
        this.wzElement = "execFile";
        // The path to the executable.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.exePath = null
        // A short description of the execution.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.title = null
        // Current working directory of the child process.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.cwd = null
        // Default: 'utf8'
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.encoding = null
        // Default: 0
        this.timeout = 0;
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.__options = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.__args = null
        // relation arg
        this.args = [];
        // relation env
        this.envs = [];
        // relation comment
        this.comments = [];
    }
    execFile.prototype.addArg = function(name, sourceLineInfo) {
        var retval = new _md.arg(name, sourceLineInfo);
        retval.wzParent = this;
        this.args.push(retval);
        return retval;
    }
    execFile.prototype.getArg = function(name) {
        var found = null;
        this.args.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    execFile.prototype.addEnv = function(name, sourceLineInfo) {
        var retval = new _md.env(name, sourceLineInfo);
        retval.wzParent = this;
        this.envs.push(retval);
        return retval;
    }
    execFile.prototype.getEnv = function(name) {
        var found = null;
        this.envs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    execFile.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    execFile.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    execFile.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    execFile.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.exePath)) {
            result["exePath"] = this.exePath;
        }
        if (!isEmpty(this.title)) {
            result["title"] = this.title;
        }
        if (!isEmpty(this.cwd)) {
            result["cwd"] = this.cwd;
        }
        if (!isEmpty(this.encoding)) {
            result["encoding"] = this.encoding;
        }
        result["timeout"] = this.timeout;
        if (!isEmpty(this.__options)) {
            result["__options"] = this.__options;
        }
        if (!isEmpty(this.__args)) {
            result["__args"] = this.__args;
        }
    }
    execFile.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.args.length, item;
        for (i=0; i<i_len; i++) {
            item = this.args[i];
            items.push(item.toJson());
        }
        result['args'] = items;
        items = [];
        var i, i_len=this.envs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.envs[i];
            items.push(item.toJson());
        }
        result['envs'] = items;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    execFile.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.comments);
            }
        }
        if (_l == 3 && _ch == 'a') {
            if (name === 'arg') {
                return this.wzLoadToChildColl(child, _md.arg, this.args);
            }
        }
        if (_l == 3 && _ch == 'c') {
            if (name === 'cwd') {
                this.cwd = child.v; return true;
            }
        }
        if (_l == 3 && _ch == 'e') {
            if (name === 'env') {
                return this.wzLoadToChildColl(child, _md.env, this.envs);
            }
        }
        if (_l == 5 && _ch == 't') {
            if (name === 'title') {
                this.title = child.v; return true;
            }
        }
        if (_l == 6 && _ch == '_') {
            if (name === '__args') {
                this.__args = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 't') {
            if (name === 'timeout') {
                this.timeout = parseinteger(child.v, null, child); return true;
            }
        }
        if (_l == 8 && _ch == 'e') {
            if (name === 'exe-path') {
                this.exePath = child.v; return true;
            }
            else if (name === 'exe_path') {
                this.exePath = child.v; return true;
            }
            else if (name === 'encoding') {
                this.encoding = child.v; return true;
            }
        }
        if (_l == 9 && _ch == '_') {
            if (name === '__options') {
                this.__options = child.v; return true;
            }
        }
        return ok;
    }
    execFile.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    execFile.prototype.wzVerify = function(ctx) {
        var i, i_len=this.args.length, item;
        for (i=0; i<i_len; i++) {
            item = this.args[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.envs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.envs[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    execFile.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.args.length, item;
        for (i=0; i<i_len; i++) {
            item = this.args[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.envs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.envs[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        var options = {};
        if (this.cwd && this.cwd.length > 0) {
            options.cwd = this.cwd;
        }
        if (this.encoding && this.encoding.length > 0) {
            options.encoding = this.encoding;
        }
        if (this.timeout > 0) {
            options.timeout = this.timeout;
        }
        if (this.envs.length > 0) {
            var envObj = {};
            var i, i_len=this.envs.length, env;
            for (i=0; i<i_len; i++) {
                env = this.envs[i];
                envObj[env.__name] = env.__value;
            }
            options.env = envObj;
        }
        this.__options = options;
        this.__args = [];
        var i, i_len=this.args.length, arg;
        for (i=0; i<i_len; i++) {
            arg = this.args[i];
            this.__args.push(arg.__value);
        }
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return execFile;
})(wfjobBase);

_md.execFile = execFile;
_md.__tagElementMapping = { '#': 'comment', 'require': 'xrequire', 'exec-file': 'execFile', 'execfile': 'execFile', 'model-ref': 'modelRef', 'modelref': 'modelRef', 'model-coll': 'modelCollection', 'modelcoll': 'modelCollection', 'path-template-value': 'pathTemplateValue', 'pathtemplatevalue': 'pathTemplateValue', 'line-ref': 'lineRef', 'lineref': 'lineRef' };
// model/replaceUnknownElement( )
var wfjobModelException = (function () {
    function wfjobModelException(message, node, instance) {
        _classCallCheck(this, wfjobModelException);
        // TODO node seems superflous
        if (node && instance) {
            this.message = message + ', wzElement: ' + node.wzElement + ', wzName:' + (node.wzName || '') + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        console.log('message', this.message);
        this.stack = (new Error()).stack;
        this.node = node;
    }
    return wfjobModelException;
})();

_md.wfjobModelException = wfjobModelException;
var wfjobContext = (function () {
    function wfjobContext() {
        _classCallCheck(this, wfjobContext);
        this.validationErrors = [];
    }
    wfjobContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    wfjobContext.prototype.addError = function(message, node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at);
    }
    wfjobContext.prototype.verifyEnum = function(valueType, valueName, value, allowed, node) {
        if (value && allowed.indexOf(value) < 0) {
            var allowedStr = 'allowed: ' + allowed.join(', ');
            this.validationErrors.push(valueType + ' ' + valueName + ' has an invalid value: ' + value + ' ' + allowedStr + '. At ' + (node.wzSourceLineInfo ? node.wzSourceLineInfo.toString(node) : 'location unavailable'));
        }
    }
    return wfjobContext;
})();

_md.wfjobContext = wfjobContext;
function parsestring(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}
function parseboolean(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    if (!isBoolean(value)) {
        throw new wfjobModelException('Must be a boolean value (\"true\" or \"false\"), got:' + value, node);
    }
    return value === 'true' ? true : false;
}
function parseinteger(value, defaultValue, node) {
    if (isEmpty(value)) {
        return defaultValue;
    }
    if (!isInt(value)) {
        throw new wfjobModelException('Must be an int value, got:' + value, node);
    }
    return parseInt(value, 10);
}
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}
function isBoolean(value) {
    return value === 'true' || value === 'false';
}
function isArray(value) {
    return Object.prototype.toString.call( value ) === '[object Array]';
}
function isNumber(value) {
    return !isArray( value ) && (value - parseFloat( value ) + 1) >= 0;
}
function isInt(value) {
    return isNumber( value );
}

