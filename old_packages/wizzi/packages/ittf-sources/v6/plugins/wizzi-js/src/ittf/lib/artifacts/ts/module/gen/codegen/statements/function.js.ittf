loader(function)

	$append requires
		var lineParser = require('../../../../../js/module/gen/codegen/util/lineParser')
            
	stm( exportfunction
        var xdefault = model.__default ? 'default ' : ''
        var name = (model.__name || '')
        _ ctx.write('export ' + xdefault + 'function ' + name + '(')
		_ u.genTSParams
			@ model
			@ ctx
			@ cnt
			a_cb()
				_ ctx.write(')')
				if model.typeReturn
					_ ctx.write(': ')
					_ cnt.stm.typeReturn(model.typeReturn, ctx, () => {})
				_ ctx.w(' {')
				_ ctx.indent()
				_ cnt.genItems
					@ model.statements
					@ ctx
					{ 
						@ indent false
					f_cb()
						_ ctx.deindent()
						_ ctx.write('}')
						r_cb()
    
	stm( xfunction
        var 
            decl name = model.wzName.trim()
			decl aster = ctx.__aster || ''
			decl xasync = model.xasync ? 'async ' : ''
        var 
            decl f
            decl iifeInvoke
            decl iife = model.statements.length > 0 && model.statements[(model.statements.length - 1)].wzElement === 'memberCall'
        
		if iife
            set f = '(' + (name.length > 0 ? (xasync + 'function' + aster + ' ' + name) : (xasync + 'function'))
            set iifeInvoke = model.statements[(model.statements.length - 1)]
            set iifeInvoke.wzParent =
                { 
                    @ wzElement 'call'
            _ model.statements.splice((model.statements.length - 1), 1)
        else 
            set f = name.length > 0 ? (xasync + 'function' + aster + ' ' + name) : (xasync + 'function' + aster)
        
		_ ctx.write(f)
		_ u.genTSTypeParameters
			@ model
			@ ctx
			@ cnt
			a_cb()
				_ ctx.write('(')
				_ u.genTSParams
					@ model
					@ ctx
					@ cnt
					a_cb()
						_ ctx.write(')')
						if model.typeReturn
							_ ctx.write(': ')
							_ cnt.stm.typeReturn
								@ model.typeReturn
								@ ctx
								a_cb()
									_ xfunction_end
										@ model
										@ ctx
										@ iife
										@ callback
						else
							_ xfunction_end
								@ model
								@ ctx
								@ iife
								@ callback

    fn( xfunction_end, iife
		_ ctx.w(' {')
		_ ctx.indent()
		_ cnt.genItems
			@ model.statements
			@ ctx
			{ 
				@ indent false
			f_cb()
				_ ctx.deindent()
				_ ctx.write('}')
				if iife
					return
						_ cnt.genItems
							[ 
								@ iifeInvoke
							@ ctx
							{ 
								@ indent false
							f_cb()
								_ ctx.write(')')
								if u.isTopStatement(model, ctx)
									_ ctx.w('')
								r_cb()
				if u.isTopStatement(model, ctx)
					_ ctx.w('')
				r_cb()

	stm( iife
		var invokeCall = null
		if model.statements.length > 0 && model.statements[(model.statements.length - 1)].wzElement === 'callOnValue'
			set invokeCall = model.statements[model.statements.length - 1]
			_ model.statements.splice(model.statements.length - 1, 1)

        if model.unary_prefix
            _ ctx.write
                @ model.unary_prefix
		_ ctx.write('(function(')
		_ u.genTSParams
			@ model
			@ ctx
			@ cnt
			a_cb()
				_ ctx.write(')')
				if model.typeReturn
					_ ctx.write(': ')
					_ cnt.stm.typeReturn(model.typeReturn, ctx, () => {})
				_ ctx.w(' {')
				_ ctx.indent()
				_ cnt.genItems
					@ model.statements
					@ ctx
					{ 
						@ indent false
					a_cb()
						_ ctx.deindent()
						_ ctx.write('})')
						if invokeCall
							_ cnt.genItem
								@ invokeCall
								@ ctx
								f_cb()
									_ ctx.w(';')
									r_cb()
						else
							_ ctx.w('();')
							r_cb()

	stm( generatorfunction
		set ctx.__aster = '*'
		_ cnt.stm.xfunction
			@ model
			@ ctx
			f_cb()
				set ctx.__aster = null
				r_cb()

	stm( asyncfunction
		set model.xasync = true
		_ cnt.stm.xfunction
			@ model
			@ ctx
			f_cb()
				set ctx.__aster = null
				r_cb()

	stm( xyield
		var name = model.wzName.trim()
		if hasStatements(model) == false
			_ ctx.w('yield ' + name + u.semicolon(name))
			r_cb()

		_ ctx.write('yield ')
		_ cnt.genItems
			@ model.statements
			@ ctx
			@ callback

	stm( xawait
		var name = model.wzName.trim()
		if hasStatements(model) == false
			_ ctx.write(name)
			if u.isTopStatement(model, ctx)
				_ ctx.w(u.semicolon(name))
			r_cb()
		else
			_ cnt.genItems
				@ model.statements
				@ ctx
				f_cb()
					if u.isTopStatement(model, ctx)
						_ ctx.w(u.semicolon(name))
					r_cb()

	stm( asyncarrowfunction
		set model.xasync = true
		_ cnt.stm.arrowfunction
			@ model
			@ ctx
			@ callback
	
	stm( arrowfunction
		var async_str = model.xasync ? 'async ' : ''
        if ctx.__is_react_class && model.wzParent.wzElement == 'reactComponent'
			var save1 = ctx.arrowFunctionNoGraphs
			set ctx.arrowFunctionNoGraphs = !u.arrowFunctionRequiresGraphs(model)
			var openGraph
				iif ctx.arrowFunctionNoGraphs
					then '' 
					else ' {'
            _ ctx.w(async_str + model.wzName + ' = (')
			_ u.genTSParams
				@ model
				@ ctx
				@ cnt
				a_cb()
					_ ctx.w(') =>' + openGraph)
					_ ctx.indent()
					_ cnt.genItems
						@ model.statements
						@ ctx
						{ 
							@ indent false
						f_cb()
							_ ctx.deindent()
							if ctx.arrowFunctionNoGraphs == false
								_ ctx.w('}')
							set ctx.arrowFunctionNoGraphs = save1
							r_cb()
		elif u.onlyChildIs(model, 'callOnValue') || u.onlyChildIsHtmlElement(model)
            _ ctx.write(async_str + '(')
			_ u.genTSParams
				@ model
				@ ctx
				@ cnt
				a_cb()
					_ ctx.write(') => ')
					# TODO what if it needs generateParams ?
					_ cnt.genItems
						@ model.statements
						@ ctx
						{ 
							@ indent true
						@ callback
		elif u.onlyChildIs(model, 'arrowfunction')
            _ ctx.write(async_str + '(')
			_ u.genTSParams
				@ model
				@ ctx
				@ cnt
				a_cb()
					_ ctx.write(') => ')
					_ cnt.genItems
						@ model.statements
						@ ctx
						{ 
							@ indent true
						@ callback
		else 
			var save1 = ctx.arrowFunctionNoGraphs
			set ctx.arrowFunctionNoGraphs = !u.arrowFunctionRequiresGraphs(model)
			var openGraph
				iif ctx.arrowFunctionNoGraphs
					then '' 
					else ' {'
            _ ctx.write(async_str + '(')
			_ u.genTSParams
				@ model
				@ ctx
				@ cnt
				a_cb()
					_ ctx.w(') =>' + openGraph)
					_ cnt.genItems
						@ model.statements
						@ ctx
						{ 
							@ indent true
						f_cb()
							if ctx.arrowFunctionNoGraphs == false
								_ ctx.write('}')
							set ctx.arrowFunctionNoGraphs = save1
							r_cb()
    
	stm( xreturn
		if hasStatements(model) == false
			_ ctx.w('return ' + (model.wzName || '') + u.semicolon(model.wzName))
			r_cb()

        _ ctx.write('return ')
        _ cnt.genItems
            @ model.statements
            @ ctx
            { 
                @ indent true
			f_cb()
				if model.statements.length == 1
					_ ctx.w(';')
				r_cb()

	
	$include generateParams