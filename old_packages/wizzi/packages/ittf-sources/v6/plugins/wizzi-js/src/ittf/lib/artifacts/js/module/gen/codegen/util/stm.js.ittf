module
    kind jsfile

	var verify = require('./verify')

	var myname = 'wizzi-js.artifacts.js.module.codegen.util.stm'

	var md
        set module.exports =
            { 
    
	$include data/parents-of-top-statements
	$include data/fb-html-supported-tags
	
	set md.isDescendentOf
        function 
            param model
            param ancestor
            if !model.wzParent
                return false
            if model.wzParent.wzElement == ancestor
                return true
            return 
                _ md.isDescendentOf
                    @ model.wzParent
                    @ ancestor
    
	set md.isTopStatement
        function 
            param model
			param ctx
            if !model.wzParent
                return true
			if typeof ctx === 'undefined'
				throw new Error('stm.isTopStatement called withot ctx parameter')
			if ctx.arrowFunctionNoGraphs
				return false
            var prnElement = model.wzParent.wzElement
            return parents_of_top_statements.indexOf(prnElement) > - 1
    
	set md.isDeclare
        function 
            param model
            if !model.wzParent
                return false
            return ['xvar'].indexOf(model.wzParent.wzElement) > -1
    
	set md.isObjectProperty
        function 
            param model
            if !model.wzParent
                return false
            return ['jsObject', 'state'].indexOf(model.wzParent.wzElement) > -1
    
	set md.isMemberAccess
        function 
            param model
            if ['memberAccess', 'memberAccessComputed', 'memberCall', 
				\b 'decoratorCall', 'callOnValue'].indexOf(model.wzElement) > -1
                return true
    
	set md.isMemberAccessOrCall
        function 
            param model
            if ['memberAccess', 'memberAccessComputed', 'memberCall', 
				\b 'decoratorCall', 'callOnValue'].indexOf(model.wzElement) > -1
                return true
            if !model.wzParent
                return false
            if model.wzElement === 'call' && model.wzParent.wzElement === 'call'
                return true
            return false
    
	set md.isCallArgument
        function 
            param model
            return model.wzElement === 'call' && model.wzParent && model.wzParent.wzElement === 'call'
    
	set md.isArgumentOfCall
	    function 
            param model
            return model.wzParent && ['call', 'memberCall', 'decoratorCall', 'callOnValue'].indexOf(model.wzParent.wzElement) > -1
    
	set md.onlyChildIs
        function 
            param model
            param element
            return model.statements && model.statements.length == 1 && model.statements[0].wzElement === element

	set md.onlyChildIsHtmlElement =
        function 
            param model
			return model.statements && model.statements.length == 1 && (
				\b fb_html_supported_tags.indexOf(model.statements[0].wzElement) > -1 ||
				\b model.statements[0].wzElement === 'htmlelement' )
    
	set md.hasStatementChildren
        function 
            param model
            if model.statements && model.statements.length > 0
				foreach stm in model.statements
					if stm.wzElement != 'comment'
						return true
			return false

	set md.parentIs
        function 
            param model
            param element
            return model.wzParent && model.wzParent.wzElement === element
    
	set md.parentIsHtmlElement =
        function 
            param model
            if ! (model.wzParent)
                return false
			var test = model.wzParent.wzElement
			if test == 'htmlelement'
				return true
            # return ['htmlelement', 'a', 'br', 'button', 'div', 'form', 'h1', 'h2', 'h3', 'h4', 'head', 'header', 'i', 'img', 'input', 'label', 'legend', 'li', 'meta', 'option', 'p', 'select', 'span', 'table', 'tbody', 'td', 'textarea', 'th', 'thead', 'tr', 'ul'].indexOf(model.wzParent.wzElement) > - (1)
			return fb_html_supported_tags.indexOf(model.wzParent.wzElement) > -1
    
	set md.isValue =
        function 
            param model
            if ! (model.wzParent)
                return false
            return ['jsArray', 'jsPropertyOrValue', 'memberAccessComputed', 'or', 'and'].indexOf(model.wzParent.wzElement) > -1
    
	set md.isParamValue
        function 
            param model
            if !model.wzParent
                return false
            return ['call', 'memberCall', 'decoratorCall', 'callOnValue', 'iife', 'xnew', 'arrayOf', 'concat'].indexOf(model.wzParent.wzElement) > -1
    
	set md.semicolon
        function 
            param text
            return verify.endsWith(text, ';') ? '' : ';'
    
	set md.unparen
        function 
            param text
			if verify.isEmpty(text)
                return text
            var s = text.trim()
            return 
                iif md.isParenEnclosed(s)
                    then 
                        _ s.substr(1, s.length - 2)
                    else text
    
	set md.setOperator
        function 
            param text
            param statements
			if verify.isEmpty(text)
                return ''
            set text = text.trim()
            if statements.length === 1 && statements[0].wzElement === 'memberAccessComputed'
                return text + ''
            var t1 = text.substr(-1, 1)
            var t2 = text.substr(-2, 2)
            if op1.indexOf(t1) > -1
                return text + ' '
            if op2.indexOf(t2) > -1
                return text + ' '
            return text + ' = '
    
	set md.encloseParen
        function 
            param text
            var s = text.trim()
            if md.isParenEnclosed(s) === false
                if s.substr(0, 1) !== '('
                    set s = '(' + s
                if s.substr(-1, 1) !== ')' && s.substr(-2, 2) !== ');'
                    set s = s + ')'
                return s
            else 
                return text
    
	set md.isGraphEnclosed
        function 
            param text
            if verify.isEmpty(text)
                return false
			set text = text.trim()
			return text.substr(0, 1) === '{' && text.substr(-1, 1) === '}'

	set md.isParenEnclosed
        function 
            param text
            if verify.isEmpty(text)
                return false
            set text = text.trim()
            var hasEndParens = text.substr(-1, 1) === ')' || text.substr(-2, 2) === ');'
            if !hasEndParens || text.substr(0, 1) !== '('
                return false
            var
                decl count = 1
                decl quote = null
            for var ch, i = 1; i < text.length; i++
                set ch = text[i]
                if ch === '"' || ch === "'"
                    if quote === ch
                        set quote = null
                    elif quote === null
                        set quote = ch
                elif quote !== null
                    + ;
                elif ch === '('
                    set count++
                elif ch === ')'
                    set count--
                if i < (text.length - 1) && count === 0
                    return false
            return true
    
	set md.arrowFunctionRequiresGraphs
        function 
            param model
			if model.statements.length == 0 || model.statements.length > 1
				return true
			if ['call', 'statement', 'set'].indexOf(model.statements[0].wzElement) > -1
				return false
			return true

	set md.isQuoted
        function 
            param text
            if verify.isEmpty(text) || text.length < 2
                return false
            return (text.substr(0, 1) === '"' && text.substr(-1, 1) === '"') || 
				\b (text.substr(0, 1) === '\'' && text.substr(-1, 1) === '\'')
    
	set md.unquote
        function 
            param text
            if verify.isEmpty(text) || text.length < 2
                return text
            if md.isQuoted(text)
                return text.substr(1, text.length-2)
			else
				return text

	var op1
        [ 
            @ '='
    
	var op2
        [ 
            @ '+='
            @ '-='
            @ '/='
            @ '*='
    
	var parenOp
        [ 
            @ '||'
            @ '>>>'
            @ '>>'
    
	set md.getOpenParen
        function 
            param oper
            return parenOp.indexOf(oper) > -1 ? '(' : ''
    
	set md.getCloseParen =
        function 
            param oper
            return parenOp.indexOf(oper) > -1 ? ')' : ''
    
	set md.getParentOfType =
        function 
            param model
            param type
            var prn = model.wzParent
            while prn != null && prn.wzElement !== type
                set prn = prn.wzParent
            return prn
    
	set md.hasArguments
        function 
            param callText
            if typeof(callText) !== 'string'
                return false
            set callText = callText.trim()
            var hasEndParens = ((callText.substr(- (1), 1) === ')') || (callText.substr(- (2), 2) === ');'))
            if !hasEndParens
                return false
            var namecount = 0
            var enclosedcount = 0
            var seen = false
            var 
                decl count = 0
                decl quote = null
            for var ch, i = 0; i < callText.length; i++
                set ch = callText[i]
                if ((ch === '"') || (ch === "'"))
                    if quote === ch
                        set quote = null
                    elif quote === null
                        set quote = ch
                elif quote !== null
                    + ;
                elif ch === '('
                    set seen = true
                    set count++
                elif ch === ')'
                    set count--
                    if count === 0
                        set enclosedcount++
                elif ! (seen)
                    set namecount++
            return seen && (namecount > 0 || enclosedcount > 1) && count == 0
    
	set md.emitBlock
        function 
            param cnt
            param tag
            param model
            param items
            param count
            param ctx
			param callback
            
			_ emitBlock_begin
				@ cnt
				@ tag
				@ model
				@ items
				@ count
				@ ctx
				f_cb()
					_ emitBlock_end
						@ cnt
						@ items
						@ ctx
						@ count
						@ callback

	function emitBlock_begin
        param cnt
        param tag
        param model
        param items
        param count
        param ctx
		param callback

		var blockIndex = items.length > 0 && items[0].wzElement === 'test' ? 1 : 0
        if ctx.values.__preserveBlock
            if count > blockIndex && items[blockIndex].wzElement === 'block'
                if tag === 'case'
                    _ ctx.w(tag + ' ' + model.wzName + ': {')
					r_cb()
                elif tag === 'else'
                    _ ctx.w(tag + ' {')
					r_cb()
                else 
                    _ md.emitTest
						@ cnt
						@ tag
						@ model
						@ items
						@ ctx
						@ ' {'
						@ callback
            else 
                if tag === 'case'
                    _ ctx.w(tag + ' ' + model.wzName + ':')
					r_cb()
                elif tag === 'else'
                    _ ctx.w(tag)
					r_cb()
                else 
                    _ md.emitTest
						@ cnt
						@ tag
						@ model
						@ items
						@ ctx
						@ ''
						@ callback
		else
			if tag === 'case'
                _ ctx.w(tag + ' ' + model.wzName + ': {')
				r_cb()
            elif tag === 'else'
                _ ctx.w(tag + ' {')
				r_cb()
            else
                _ md.emitTest
					@ cnt
					@ tag
					@ model
					@ items
					@ ctx
					@ ' {'
					@ callback

	function emitBlock_end
        param cnt
        param items
        param ctx
		param count
		param callback

		var blockIndex = items.length > 0 && items[0].wzElement === 'test' ? 1 : 0

		var from = items.length > 0 && items[0].wzElement === 'test' ? 1 : 0
        _ cnt.genItems
            @ items
            @ ctx
            { 
                @ indent true
                @ from from
			f_cb()
				if ctx.values.__preserveBlock
					if count > blockIndex && items[blockIndex].wzElement === 'block'
						_ ctx.w('}')
				else 
					_ ctx.w('}')
				r_cb()

	set md.emitTest
        function 
            param cnt
            param tag
            param model
            param items
            param ctx
            param open
			param callback
			if items.length > 0 && items[0].wzElement === 'test'
                _ ctx.write(tag + ' ')
                _ cnt.genItem
                    @ items[0]
                    @ ctx
					f_cb()
						_ ctx.w(open)
						r_cb()
            else 
                _ ctx.w(tag + ' (' + md.unparen(model.wzName) + ')' + open)
				r_cb()


	#
		# TYPESCRIPT
	set md.isTSSimpleType
        function 
            param model
			return
				[
					@ 'typeNumber'
					@ 'typeString'
					@ 'typeBoolean'
					@ 'typeAny'
					@ 'typeArray'
					@ 'typeObject'
					@ 'typeObjectLiteral'
					@ 'typeVoid'
					@ 'typeNull'
					@ 'typeUndefined'
					@ 'typeLiteral'
					@ 'typeTypeof'
					@ 'typeReference'
					@ 'typeFunction'
					@ 'typeArrowFunction'
					@ 'typeUnion'
					@ 'typeIntersect'
					@ 'typeKeyOf'
					. indexOf(model.wzElement) > -1

	set md.extractTSSimpleType
        function 
            param model
			if !model.statements || model.statements.length == 0
				return
			var ret, retIndex
			_ model.statements.some
				=>
					param item
					param index
					if md.isTSSimpleType(item)
						set ret = item
						set retIndex = index
						return true
			if ret
				_ model.statements.splice(retIndex, 1)
			return ret

	set md.extractTS
        function 
            param model
			param element
			if !model.statements || model.statements.length == 0
				return
			var ret, retIndex
			_ model.statements.some
				=>
					param item
					param index
					if item.wzElement === element
						set ret = item
						set retIndex = index
						return true
			if ret
				_ model.statements.splice(retIndex, 1)
			return ret

	set md.genTSParams
        function 
            param model
			param ctx
			param cnt
			param callback
			if !!(model.params && model.params.length > 0) == false
				r_cb()
			# log 'genTSParams enter', model.wzElement, model.params
			repeater(1, model.params)
				var p = item_1
				# log 'genTSParams p', p
				if index_1 > 0
					_ ctx.write(', ')
				var ptype 
					_ md.extractTSSimpleType
						@ p
				_ md.genAccessorsAndExtra
					@ p
					@ ctx
				# log 'genTSParams', index_1, p.statements.length, ptype && ptype.wzElement
				if p.statements.length == 0
					_ ctx.write(p.wzName)
					if p.typeOptional
						_ ctx.write('?')
					if ptype
						_ ctx.write(': ')
						_ cnt.stm[ptype.wzElement]
							@ ptype
							@ ctx
							a_cb()
								repeater_increment(1)
					else
						repeater_increment(1)
				elif p.wzElement === 'objectParam' || p.wzElement === 'jsObject'
					set p.wzElement = 'jsObject'
					_ cnt.stm[p.wzElement]
						@ p
						@ ctx
						a_cb()
							set p.wzElement = 'objectParam'
							if ptype
								_ ctx.write(': ')
								_ cnt.stm[ptype.wzElement]
									@ ptype
									@ ctx
									a_cb()
										repeater_increment(1)
							else
								repeater_increment(1)
				elif p.statements.length == 1
					_ ctx.write(p.wzName)
					if p.typeOptional
						_ ctx.write('?')
					var s0 = p.statements[0]
					# log 'genTSParams.s0.wzElement', s0.wzElement
					# if s0.wzElement === 'typeInitValue' || s0.wzElement === 'typeCTor' || s0.wzElement === 'typeNever'
					# log 'genTSParams.s0.statements.length', s0.statements.length
					if ptype
						_ ctx.write(': ')
						_ cnt.stm[ptype.wzElement]
							@ ptype
							@ ctx
							a_cb()
								_ genTSParams_close
									@ s0
									@ ctx
									@ cnt
									a_cb()
										repeater_increment(1)
					else
						_ genTSParams_close
							@ s0
							@ ctx
							@ cnt
							a_cb()
								repeater_increment(1)
					# else
					#	throw new Error('jswizzifier.genTSParams.statements[0].wzElement should be "typeInitValue or typeCTor".found: ' + s0.wzElement)
				else
					# log 'jswizzifier.genTSParams.p', p, 'statements', p.statements
					_ callback
						_ ctx.error(myname + '.genTSParams.statements.length should be 0 or 1.found: ' + p.statements.length, model)
				$append next
					# log 'genTSParams.exit'
					r_cb()

	function genTSParams_close
		param s0
		param ctx
		param cnt
		param callback
		if s0.statements.length == 2
			var item = s0.statements[0]
			# log 'genTSParams_close 1 item.wzElement', item.wzElement
			_ cnt.stm[item.wzElement]
				@ item
				@ ctx
				a_cb()
					_ ctx.write(' = ')
					var item = s0.statements[1]
					# log 'genTSParams_close 2 item.wzElement', item.wzElement
					_ cnt.stm[item.wzElement]
						@ item
						@ ctx
						@ callback
		else
			_ ctx.write(' = ')
			# log 'genTSParams_close 3 item.wzElement', s0.wzElement
			_ cnt.stm[s0.wzElement]
				@ s0
				@ ctx
				@ callback

	set md.genAccessorsAndExtra
		function
			param model
			param ctx
			if model.typePublic
				_ ctx.write('public ')
			if model.typeProtected
				_ ctx.write('protected ')
			if model.typePrivate
				_ ctx.write('private ')
			if model.typeReadonly
				_ ctx.write('readonly ')
			if model.typeAbstract
				_ ctx.write('abstract ')

	set md.genTSTypeParameters
        function 
            param model
			param ctx
			param cnt
			param callback
			_ genTSTypeParameters_partial
				@ model
				@ ctx
				@ cnt
				a_cb()
					if model.extends && model.extends.length > 0
						_ ctx.write( ' extends ')
						_ model.extends.forEach
							=>
								param e
								param index
								if index > 0
									_ ctx.write(', ')
								_ ctx.write(e.wzName)
					r_cb()

	function genTSTypeParameters_partial
        param model
		param ctx
		param cnt
		param callback
		if model.typeParameterDecls && model.typeParameterDecls.length > 0
			_ ctx.write('<')
			repeater( 1, model.typeParameterDecls
				if index_1 > 0
					_ ctx.write(', ')
				_ cnt.stm.typeParameterDecl
					@ item_1
					@ ctx
					a_cb()
						repeater_increment( 1 )
				$append next
					_ ctx.write('>')
					r_cb()
		else
			r_cb()

	set md.indexedTSNeedsGraphs
        function 
            param model
			return
				[
					@ 'typeMapped'
					@ 'typeConditional'
					. indexOf(model.wzElement) > -1

			