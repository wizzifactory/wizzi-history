loader(expressions)

	# void, !, or, and, iif, ==, !=, ===, !==, ||, &&, |, &, 
	# -, +, *, /, ^, %,	<, <=, >, >=

	stm( identifier
		_ ctx.write( model.wzName )
		if model.statements.length > 0
			_ cnt.genItems
				@ model.statements
				@ ctx
				@ callback
		else
			r_cb()

	stm( expressionMember
		_ ctx.write( model.wzName || '')
		_ cnt.genItems
			@ model.statements
			@ ctx
			@ callback

	stm( xvoid
		_ ctx.write('void ')
		if model.statements.length == 0
			_ ctx.write(model.wzName)
			r_cb()
		elif model.statements.length == 1
			_ cnt.genItem
				@ model.statements[0]
				@ ctx
				@ callback
		else
			return
				_ callback
					_ ctx.error('void statement element requires zero or one child elements', model)

    stm( not
		_ ctx.write('!')
		if model.statements.length == 0
			_ ctx.write(model.wzName)
			r_cb()
		elif model.statements.length == 1
			var saveParenRequired = ctx.parenRequired
			set ctx.parenRequired = true
			_ cnt.genItem
				@ model.statements[0]
				@ ctx
				f_cb()
					set ctx.parenRequired = saveParenRequired
					r_cb()
		else
			return
				_ callback
					_ ctx.error('not/! statement element requires zero or one child elements', model)

    stm( or
		if model.statements.length != 2
			if model.statements.length == 0 && ctx.__allowSingleLineOp
				_ ctx.write(' || ' + (model.wzName || ''))
				r_cb()
			else
				return
					_ callback
						_ ctx.error('or/|| statement element requires two child element', model)
        var saveParenRequired = ctx.parenRequired
		set ctx.parenRequired = true
        _ cnt.genItem
            @ model.statements[0]
            @ ctx
			f_cb()
				_ ctx.write(' || ')
				_ cnt.genItem
					@ model.statements[1]
					@ ctx
					f_cb()
						set ctx.parenRequired = saveParenRequired
						r_cb()
    
	stm( and
		if model.statements.length != 2
			if model.statements.length == 0 && ctx.__allowSingleLineOp
				_ ctx.write(' && ' + (model.wzName || ''))
				r_cb()
			else
				return
					_ callback
						_ ctx.error('and/&& statement element requires two child element', model)
        var saveParenRequired = ctx.parenRequired
		set ctx.parenRequired = true
		_ cnt.genItem
            @ model.statements[0]
            @ ctx
			f_cb()
				_ ctx.write(' && ')
				_ cnt.genItem
					@ model.statements[1]
					@ ctx
					f_cb()
						set ctx.parenRequired = saveParenRequired
						r_cb()
    
	stm( iif
		if model.statements.length < 2
			return
				_ callback
					_ ctx.error('iif statement element requires at least two child elements', model)
        var paren = ctx.parenRequired || model.statements.length > 2
        if paren
            _ ctx.write('(')
        _ ctx.write(model.wzName + ' ? ')
        _ cnt.genItem
            @ model.statements[0]
            @ ctx
			f_cb()
				_ ctx.write(' : ')
				_ cnt.genItem
					@ model.statements[1]
					@ ctx
					f_cb()
						if paren
							_ ctx.write(')')
						if model.statements.length > 2
							_ cnt.genItem
								@ model.statements[2]
								@ ctx
								f_cb()
									_ iif_end
										@ model
										@ ctx
										@ callback
						else
							_ iif_end
								@ model
								@ ctx
								@ callback
    
	fn( iif_end )
		if u.isTopStatement(model, ctx) && u.isDescendentOf(model, 'iif') == false
			_ console.log
				@ 'iif'
				@ model.wzParent.wzElement
				iif model.wzParent.wzParent
					then 
						set model.wzParent.wzParent.wzElement
					else ''
			_ ctx.w(';')
		r_cb()

	stm( test
        _ ctx.write('(')
        _ cnt.genItems
            @ model.statements
            @ ctx
            { 
                @ indent false
			f_cb()
				_ ctx.write(')')
				r_cb()
    
	stm( then
		if hasStatements(model) == false
            _ ctx.write
                @ model.wzName
			r_cb()

        _ cnt.genItems
            @ model.statements
            @ ctx
            { 
                @ indent true
			@ callback
    
	stm( op_eq
        _ emitOperators(cnt, '==', model, ctx, callback)
    
	stm( op_noteq
        _ emitOperators(cnt, '!=', model, ctx, callback)
    
	stm( op_eq_strict
        _ emitOperators(cnt, '===', model, ctx, callback)
    
	stm( op_noteq_strict
        _ emitOperators(cnt, '!==', model, ctx, callback)
    
	stm( op_or
        _ emitOperators(cnt, '||', model, ctx, callback)
    
	stm( op_and
        _ emitOperators(cnt, '&&', model, ctx, callback)
    
	stm( op_xor
        _ emitOperators(cnt, '|', model, ctx, callback)
    
	stm( op_xand
        _ emitOperators(cnt, '&', model, ctx, callback)
    
	stm( op_minus
        _ emitOperators(cnt, '-', model, ctx, callback)
    
	stm( op_plus
        _ emitOperators(cnt, '+', model, ctx, callback)
    
	stm( op_times
        _ emitOperators(cnt, '*', model, ctx, callback)
    
	stm( op_div
        _ emitOperators(cnt, '/', model, ctx, callback)
    
	stm( op_power
        _ emitOperators(cnt, '^', model, ctx, callback)
    
	stm( op_mod
        _ emitOperators(cnt, '%', model, ctx, callback)
    
	stm( op_lt
        _ emitOperators(cnt, '<', model, ctx, callback)
    
	stm( op_le
        _ emitOperators(cnt, '<=', model, ctx, callback)
    
	stm( op_gt
        _ emitOperators(cnt, '>', model, ctx, callback)
    
	stm( op_ge
        _ emitOperators(cnt, '>=', model, ctx, callback)

	function emitOperators
		param cnt
		param op
		param model
		param ctx
		param callback
		if model.statements[0] && model.statements[1]
			var requireParen1 = model.statements.length > 2
			var requireParena1 = model.statements[0].statements.length > 0
			var requireParena2 = model.statements[1].statements.length > 0
			if requireParen1
				_ ctx.write('(')
			if requireParena1
				_ ctx.write('(')
			_ cnt.genItem
				@ model.statements[0]
				@ ctx
				f_cb()
					if requireParena1
						_ ctx.write(')')
					_ ctx.write(' ' + op + ' ')
					if requireParena2
						_ ctx.write('(')
					_ cnt.genItem
						@ model.statements[1]
						@ ctx
						f_cb()
							if requireParena2
								_ ctx.write(')')
							if requireParen1
								_ ctx.write(')')
							if model.statements[2]
								_ cnt.genItem
									@ model.statements[2]
									@ ctx
									f_cb()
										if (u.isTopStatement(model, ctx) && (u.isDescendentOf(model, 'iif') == false))
											_ ctx.w(';')
										r_cb()
							else
								if (u.isTopStatement(model, ctx) && (u.isDescendentOf(model, 'iif') == false))
									_ ctx.w(';')
								r_cb()
		else 
			if model.statements.length == 0 && ctx.__allowSingleLineOp
				_ ctx.write(' ' + op + ' ' + (model.wzName || ''))
				r_cb()
			else
				_ ctx.artifactGenerationError
					@ "Invalid model. Two child statements are required. Model: " + util.inspect(model, {depth: 2})
					@ "wizzi-codegen/lib/js/statements/expressions/emitOperators"
					@ model
				#
					throw 
						new Error("module.gen.statements.emitOperators Invalid model " + util.inspect(model, {depth: 2}))
