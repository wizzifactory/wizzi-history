module 
    kind jsfile
	+
	var md
        set module.exports =
            { 

	set md.isArray
        function 
            param test
            if test === null || typeof(test) === 'undefined'
                return false
            return {}.toString.call(test) === '[object Array]'

	set md.isObject
        function 
            param test
            if test === null || typeof(test) === 'undefined'
                return false
            return {}.toString.call(test) === '[object Object]'

	set md.isFunction
        function 
            param functionToCheck
            if functionToCheck === null || typeof(functionToCheck) === 'undefined'
                return false
            return {}.toString.call(functionToCheck) === '[object Function]'
    
	set md.isString
        function 
            param test
            return test !== null && typeof(test) === 'string'

	set md.isEmpty
        function 
            param test
            return test == null || typeof(test) !== 'string' || test.length == 0
    
	set md.isNotEmpty
        function 
            param test
            return test != null && typeof(test) === 'string' && test.length > 0

	set md.startsWith
        function 
            param str
            param prefix
			if md.isEmpty(str) || md.isEmpty(prefix)
				return false
            else
				return str.indexOf(prefix) === 0
    
	set md.endsWith
        function 
            param str
            param suffix
			if md.isEmpty(str) || md.isEmpty(suffix)
				return false
            else
				return str.indexOf(suffix, str.length - suffix.length) !== -1

	set md.replaceAll =
        function 
            param text
            param find
            param replace
            if md.isEmpty(text)
                return text
            return 
                _ text.replace
                    new RegExp
                        _ escapeRegExp(find)
                        @ 'g'
                    @ replace
    
	function escapeRegExp
        param text
        return text.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1")
    





