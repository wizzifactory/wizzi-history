wfschema svg

	# Example of language schema that targets
	# the Scalable Vector Graphics (SVG) 1.1 (Second Edition) specification.
	# It implements a minimal set of elements

	export-to json

	$
		/*
			We use jswizzi to build the value context : 'presentationAttributes' that will
			be referenced below, in the template nodes that define the styles attribute of the
			svg.
		*/
		var x_presentationAttributes = 'alignment-baseline,baseline-shift,clip,clip-path,clip-rule,' + 
			'color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,' +
			'cursor,direction,display,dominant-baseline,enable-background,fill,fill-opacity,fill-rule,' +
			'filter,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,' +
			'font-style,font-variant,font-weight,glyph-orientation-horizontal,glyph-orientation-vertical,' +
			'image-rendering,kerning,letter-spacing,lighting-color,marker-end,marker-mid,marker-start,' +
			'mask,opacity,overflow,pointer-events,shape-rendering,stop-color,stop-opacity,stroke,'+ 
			'stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,' +
			'stroke-opacity,stroke-width,text-anchor,text-decoration,text-rendering,unicode-bidi,' +
			'visibility,word-spacing,writing-mode';
		var a_presentationAttributes = x_presentationAttributes.split(',');
		var presentationAttributes = [], len = a_presentationAttributes.length, item, i;
		for (i=0; i<len; i++) {
			item = a_presentationAttributes[i];
			presentationAttributes.push({ name: _.dashToCamelCase(item), tag: item });
		}
	
	declare
		var styles
			[
				$foreach pa in presentationAttributes
					{
						@ name '${pa.name}'
						@ tag '${pa.tag}'

	e comment
		tag #
		r comment/s
	
	e item
		# attributes common to all svg items
		a id
		a href
		a rotate
		a xmlns
		a_tag( xmlBase, xml:base
		a_tag( xmlLang, xml:lang
		a_tag( xmlSpace, xml:space
		a_tag(pathLength, path-length)
			# This attribute lets specify the total length for the path, in user units.
			# Value type: <number> ; Default value: none; Animatable: yes

		$foreach pa in presentationAttributes
			a ${pa.name}
				$if pa.tag !== pa.name
					tag ${pa.tag}
		
		r comment/s
		r attribute/s
		r item/s

		svg/getAttrs( 
			\b id;href;rotate;xmlns;xmlBase;xmlLang;xmlSpace;pathLength
			\b )

		m getStyleAttributes
			var ret = []
			foreach style in styles
				if typeof(this[style.name]) !== 'undefined' && this[style.name] != null
					_ ret.push
						{
							@ name style.name
							@ tag style.tag
							@ value this[style.name]
			return ret

	e attribute
		# Used for Svg element attributes not declared in this schema.
		# The wzName must contain a name-value pair separated by a blank (value is optional).
		# Name is the attribute name and value, if not empty, is the attribute value.

		tag @
	
	e rect : item

		a x
			# This attribute determines the x coordinate of the rect.
			# Value type: <length>|<percentage> ; Default value: 0; Animatable: yes
		a y
			# This attribute determines the y coordinate of the rect.
			# Value type: <length>|<percentage> ; Default value: 0; Animatable: yes
		a width
			# This attribute determines the width of the rect.
			# Value type: auto|<length>|<percentage> ; Default value: auto; Animatable: yes
		a height
			# This attribute determines the height of the rect.
			# Value type: auto|<length>|<percentage> ; Default value: auto; Animatable: yes
		a rx
			# This attribute determines the horizontal corner radius of the rect.
			# Value type: auto|<length>|<percentage> ; Default value: auto; Animatable: yes
		a ry
			# This attribute determines the vertical corner radius of the rect.
			# Value type: auto|<length>|<percentage> ; Default value: auto; Animatable: yes

		svg/getAttrs( x;y;width;height;rx;ry, item )

	e svg : rect
		is-root
		a_tag( viewBox, view-box )
			# This attribute defines the bound of the SVG viewport for the current SVG fragment.
			# Value type: <list-of-numbers> ; Default value: none; Animatable: yes
		a_tag( preserveAspectRatio, preserve-aspect-ratio )
			# This attribute defines how the svg fragment must be deformed if it is embedded in a container with a different aspect ratio.
			# Value type: (none| xMinYMin| xMidYMin| xMaxYMin| xMinYMid| xMidYMid| xMaxYMid| xMinYMax| xMidYMax| xMaxYMax) (meet|slice)? ; Default value: xMidYMid meet; Animatable: yes
		a transform
		a version
		svg/getAttrs( width;height;viewBox;preserveAspectRatio;transform;version, item )

	e line : item
		a x1
		a y1
		a x2
		a y2
		a transform

		svg/getAttrs( x1;y1;x2;y2;transform, item )

	e polyline : item
		a points
		a transform
		
		svg/getAttrs( points;transform, item )

	
	e polygon : item
		a points
		a transform

		svg/getAttrs( points:pathLength;transform, item )

	e circle : item
		a cx
		a cy
		a r
		a transform

		svg/getAttrs( cx;cy;r;transform, item )

	e ellipse : item
		a cx
		a cy
		a rx
		a ry
		a transform

		svg/getAttrs( cx;cy;rx;ry;transform, item )

	e path : item
		a d
		a transform

		svg/getAttrs( d;transform, item )

	e text : item
		a x
		a y
		a fontFamily
			tag font-family
		a fontSize
			tag font-size
		a transform

		svg/getAttrs( x;y;fontFamily;fontSize;transform, item )

	e textPath : item

	e tspan : item
		a x
		a y
		a dx
		a dy

		svg/getAttrs( x;y;dx;dy , item )

	e a : item
		a transform
		# link
		# a
			# href http://tecfa.unige.ch
			# rect
				# fill #00FF00
				# stroke #00FF00
				# width 300
				# height 40
				# ry 5
				# rx 5
				# y 80
				# x 50
			# text TECFA POWER 1 click away
				# x 100
				# y 110
				# stroke #000099
				# fill #000099
				# font-size 24
		svg/getAttrs( transform, item )

	e g : item
		a transform
		# grouping
		svg/getAttrs( transform, item )

	e image : rect
		a transform
		svg/getAttrs( transform, rect )

	e title : item

	e altGlyph : item
	e altGlyphDef : item
	e altGlyphItem : item
	e animate : item
	e animateColor : item
	e animateMotion : item
	e animateTransform : item
	e clipPath : item
		a transform
		svg/getAttrs( transform, item )
	e color-profile : item
	e cursor : item
	e defs : item
		a transform
		svg/getAttrs( transform, item )
	e desc : item
	e feBlend : item
	e feColorMatrix : item
	e feComponentTransfer : item
	e feComposite : item
	e feConvolveMatrix : item
	e feDiffuseLighting : item
	e feDisplacementMap : item
	e feDistantLight : item
	e feFlood : item
	e feFuncA : item
	e feFuncB : item
	e feFuncG : item
	e feFuncR : item
	e feGaussianBlur : item
	e feImage : item
	e feMerge : item
	e feMergeNode : item
	e feMorphology : item
	e feOffset : item
	e fePointLight : item
	e feSpecularLighting : item
	e feSpotLight : item
	e feTile : item
	e feTurbulence : item
	e filter : item
	e font : item
	e font-face : item
	e font-face-format : item
	e font-face-name : item
	e font-face-src : item
	e font-face-uri : item
	e foreignObject : item
		a transform
		svg/getAttrs( transform, item )
	e glyph : item
	e glyphRef : item
	e hkern : item
	e linearGradient : item
	e marker : item
	e mask : item
	e metadata : item
	e missing-glyph : item
	e mpath : item
	e pattern : item
	e radialGradient : item
	e script : item
	e set : item
	e stop : item
		a class
		a style
		a offset
		svg/getAttrs( class;style;offset )
	e style : item
	e switch : item
		a transform
		svg/getAttrs( transform, item )
	e symbol : item
	e tref : item
	e use : item
		a transform
		svg/getAttrs( transform, item )
	e view : item
	e vkern : item

	# TODO this should become function
	m extractAttributes
		param item
		param names_string
		param attrs
		if !attrs
			set attrs = []
		if verify.isNotEmpty(names_string)
			var names = names_string.split(';')
			foreach name in names
				if typeof(item[name]) !== 'undefined' && item != null
					_ attrs.push
						{
							@ name name
							@ value item[name]
		return attrs