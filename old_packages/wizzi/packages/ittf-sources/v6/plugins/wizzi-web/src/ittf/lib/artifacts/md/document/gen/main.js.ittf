module
	kind jsfile

	var util = require('util')
	var verify = require('wizzi-utils').verify
	var myname = 'md.document.main'

	set module.exports
		{ 
			@ gen
				function
					param model
					param ctx
					param callback

					# log 'model', util.inspect(model, { depth: 1 })
					new Gen(model, ctx, callback)

	class Gen
		ctor
			param model
			param ctx
			param callback
			_ this.genItem(model, ctx)
			_ callback(null, ctx)
			
		m genItems
			param items
			param ctx
			param options

			var
				decl opt = options || {}
				decl from = opt.from || 0

			for var i = from; i < items.length; i++
				var item = items[i]
				_ this.genItem(item, ctx)
				
		md-gen-method( genItem )

			if this[model.wzElement]
				# known element
				if this[model.wzElement](model, ctx)
					# ok, processed
					return
			else
				log myname + '. Unknown statement tag/element: ' + model.wzTag + '/' + model.wzElement, model
				throw ctx.error(myname + '. Unknown statement tag/element: ' + model.wzTag + '/' + model.wzElement, model)

		
		md-gen-method( md )
			_ this.genItems(model.elements, ctx)
			return true;
	
		md-gen-method( frontmatter )
			_ ctx.w("---")
			foreach a in model.attributes
				var nv = verify.parseNameValue(a.wzName, a)
				_ ctx.w
					@ nv.name() + ": " + nv.value()
			_ this.genItems(model.elements, ctx)
			_ ctx.w("---")
			return true;

		md-gen-method( propertyOrValue )
			var p = verify.parseNameValue(model.wzName, model)
			_ ctx.w
				@ p.name() + ": " + p.value()

		md-gen-method( element )
			_ this.writeHtml(model.wzName, model, ctx)

		md-gen-method( div )
			_ this.writeHtml('div', model, ctx)

		md-gen-method( h1 )
			if ctx.isHtml || (!ctx.isCode && model.elements.length > 0)
				_ this.writeHtml('h1', model, ctx)
			else
				_ ctx.w("# " + model.wzName)
			return true;
	
		md-gen-method( h2 )
			if ctx.isHtml || (!ctx.isCode && model.elements.length > 0)
				_ this.writeHtml('h2', model, ctx)
			else
				_ ctx.w("## " + model.wzName)
			return true;
	
		md-gen-method( h3 )
			if ctx.isHtml || (!ctx.isCode && model.elements.length > 0)
				_ this.writeHtml('h3', model, ctx)
			else
				_ ctx.w("### " + model.wzName)
			return true;
	
		md-gen-method( h4 )
			if ctx.isHtml || (!ctx.isCode && model.elements.length > 0)
				_ this.writeHtml('h4', model, ctx)
			else
				_ ctx.w("#### " + model.wzName)
			return true;
	
		md-gen-method( h5 )
			if ctx.isHtml || (!ctx.isCode && model.elements.length > 0)
				_ this.writeHtml('h5', model, ctx)
			else
				_ ctx.w("##### " + model.wzName)
			return true;
	
		md-gen-method( h6 )
			if ctx.isHtml || (!ctx.isCode && model.elements.length > 0)
				_ this.writeHtml('h6', model, ctx)
			else
				_ ctx.w("##### " + model.wzName)
			return true;
	
		md-gen-method( a )
			if ctx.isHtml || (!ctx.isCode && model.elements.length > 0)
				_ this.writeHtml('a', model, ctx)
			else
				_ ctx.write('[' + model.wzName + ']')
				_ ctx.write('(' + model.href)
				if verify.isString(model.title)
					_ ctx.write(' "' + model.title + '"')
				_ ctx.w(')')

		md-gen-method( ul )
			_ this.genItems(model.elements, ctx)

		md-gen-method( li )
			_ ctx.write('* ')
			if model.wzName && model.wzName.length > 0
				_ ctx.write(model.wzName + ' ' )
			_ this.genItems(model.elements, ctx)
			_ ctx.w('')
	
		md-gen-method( ol )
			_ this.genItems(model.elements, ctx)

		md-gen-method( img )
			if ctx.isHtml || (!ctx.isCode && model.elements.length > 0)
				_ this.writeHtml('img', model, ctx)
			else
				_ ctx.write('![' + model.wzName + ']')
				_ ctx.write('(' + model.src)
				if verify.isString(model.title)
					_ ctx.write(' "' + model.title + '"')
				_ ctx.w(')')

		md-gen-method( video )

		md-gen-method( table )
			_ ctx.w
			_ ctx.w('<table>')
			_ this.genItems(model.elements, ctx)
			_ ctx.w('</table>')
			_ ctx.w

		md-gen-method( tr )
			_ ctx.w('<tr>')
			_ this.genItems(model.elements, ctx)
			_ ctx.w('</tr>')

		md-gen-method( tbody )
			_ ctx.w('<tbody>')
			_ this.genItems(model.elements, ctx)
			_ ctx.w('</tbody>')

		md-gen-method( td )
			_ ctx.write('<td>')
			if model.wzName
				_ ctx.write(model.wzName)
			if model.elements && model.elements.length > 0
				_ ctx.w()
				_ this.genItems(model.elements, ctx)
			else
				_ ctx.w('</td>')

		md-gen-method( th )
			_ ctx.write('<th>')
			if model.wzName
				_ ctx.write(model.wzName)
			if model.elements && model.elements.length > 0
				_ ctx.w()
				_ this.genItems(model.elements, ctx)
			else
				_ ctx.w('</th>')

		md-gen-method( quote )

		md-gen-method( hr )
			_ ctx.w('* * *')

		md-gen-method( p )
			if ctx.isHtml || (!ctx.isCode && model.elements.length > 0)
				_ this.writeHtml('p', model, ctx)
			else
				_ ctx.w(model.wzName)
				if ctx.isCode
					_ ctx.indent()
				_ this.genItems(model.elements, ctx)
				if ctx.isCode
					_ ctx.deindent()
				return true;
	
		md-gen-method( span )
			_ ctx.write
				_ verify.replaceAll(model.wzName, '&nbsp;', ' ')
			_ this.genItems(model.elements, ctx)
			return true;

		md-gen-method( br )
			_ ctx.w()
			return true;
	
		md-gen-method( i )
			_ ctx.write('*' + model.wzName)
			_ this.genItems(model.elements, ctx)
			_ ctx.write('*')
			return true;
	
		md-gen-method( b )
			_ ctx.write('**' + model.wzName)
			_ this.genItems(model.elements, ctx)
			_ ctx.write('**')
			return true;
	
		md-gen-method( span )
			_ ctx.write(model.wzName)
			_ this.genItems(model.elements, ctx)
			return true;
	
		md-gen-method( blank )
			_ ctx.write(' ' + model.wzName)
			_ this.genItems(model.elements, ctx)
			return true;
	
		md-gen-method( plus )
			if ctx.isCode
				_ ctx.w(model.wzName)
			else
				_ ctx.w("`" + model.wzName + "`")
			_ ctx.indent
			_ this.genItems(model.elements, ctx)
			_ ctx.deindent
			return true;

		md-gen-method( js )
			_ ctx.w("```javascript")
			set ctx.isCode = true
			_ this.genItems(model.elements, ctx)
			set ctx.isCode = false
			_ ctx.w("```")
			return true;

		md-gen-method( html )
			_ ctx.w("```html")
			set ctx.isCode = true
			_ this.genItems(model.elements, ctx)
			set ctx.isCode = false
			_ ctx.w("```")
			return true;

		md-gen-method( css )
			_ ctx.w("```css")
			set ctx.isCode = true
			_ this.genItems(model.elements, ctx)
			set ctx.isCode = false
			_ ctx.w("```")
			return true;

		md-gen-method( bash )
			_ ctx.w("```bash")
			set ctx.isCode = true
			_ this.genItems(model.elements, ctx)
			set ctx.isCode = false
			_ ctx.w("```")
			return true;

		md-gen-method( sh )
			_ ctx.w("```sh")
			set ctx.isCode = true
			_ this.genItems(model.elements, ctx)
			set ctx.isCode = false
			_ ctx.w("```")
			return true;

		md-gen-method( code )
			_ ctx.w("```" + model.wzName)
			set ctx.isCode = true
			_ this.genItems(model.elements, ctx)
			set ctx.isCode = false
			_ ctx.w("```")
			return true;

		md-gen-method( imgRef )
			_ ctx.write('![' + model.alt + ']')
			_ ctx.w('[' + model.wzName + ']')

		md-gen-method( ref )
			_ ctx.write('[' + model.wzName + ']')
			_ ctx.write(' ' + model.href)
			_ ctx.w(' "' + model.title + '"')

		m writeHtml
			param tag
			param model
			param ctx
			var saveIsHtml = ctx.isHtml
			set ctx.isHtml = true
			if !saveIsHtml
				_ ctx.w
			_ ctx.write('<' + tag)
			foreach a in getAttributes(model)
				var nv = verify.parseNameValue(a.wzName, a)
				_ ctx.write(' ' + nv.name() + '="' + nv.value() + '"')
			if model.wzName.length > 0
				_ ctx.write('>' + model.wzName)
			else
				_ ctx.write('>')
			_ this.genItems(model.elements, ctx)
			_ ctx.write('</' + tag + '>')
			if !saveIsHtml
				_ ctx.w
				_ ctx.w
			set ctx.isHtml = saveIsHtml 

	function isLineTag
		param model
		return ['p', 'br'].indexOf(model.wzElement) > -1;

	var knownAttributes
		[
			@ 'href'
			@ 'src'
			@ 'title'
			@ 'id'
			@ 'alt'

	function getAttributes
		param model
		var ret = []
		foreach a in model.attributes
			_ ret.push(a)
		foreach name in knownAttributes
			if typeof model[name] !== 'undefined'
				_ ret.push
					{
						@ wzName name + ' ' + model[name]
		return ret



