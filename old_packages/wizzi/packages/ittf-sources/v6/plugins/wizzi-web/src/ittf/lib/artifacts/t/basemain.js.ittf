module wizzi-web.lib.artifacts.${schema}.${name}.gen.main
	$params schema, name, commands|none
	kind jsfile
	$
		var items = commands.split(';'), cmd, root = schema, hasStandardElement = false;
		for (var i=0; i<items.length; i++) {
			cmd = items[i];
			if (cmd == 'has-standard-element') { hasStandardElement = true; }
			else {
				root = cmd;
			}
		}
	+
	var myname = 'wizzi-web.lib.artifacts.${schema}.${name}.gen.main'
	+
	var util = require('util')
	var async = require('async')
	var verify = require('wizzi-utils').verify;
	$hook imports
	+
	var lineParser = require('../../../util/lineParser')
	+
	var md = module.exports = {}
	var stm = {}

	set md.gen
		function gen
			{ model
			{ ctx
			callback
			# log myname, 'enter', 'ctx.values', ctx.values
			# check the model is a wizzi model of type '${root}'
			if model.wzElement !== '${root}'
				return
					_ callback
						_ ctx.error
							@ myname + " error: the model paramater should be a '${root}' wizzi model"
							@ model
			_ getGenItem
				@ ctx
				(
					@ model
					f_cb()
						log myname, 'exit err', err
						r_cb( ctx )

	function getGenItem
		param ctx
		return
			function
				param model
				param callback
				if stm[model.wzElement]
					log myname, 'known element', model.wzElement
					_ stm[model.wzElement]
						@ model
						@ ctx
						f_cb( done )
							$if hasStandardElement
								if done
									# ok, processed
									r_cb()
								else
									return
										_ stm.standardElement
											@ model
											@ ctx
											@ callback
							$else
								r_cb()
				else
					$if hasStandardElement
						return
							_ stm.standardElement
								@ model
								@ ctx
								@ callback
					$else
						_ callback
							_ ctx.error
								@ myname + " error: model element not managed: " + model.wzElement
								@ model

	function genItems
		param items
		param ctx
		param options
		param callback
		var
			decl opt = options || {}
			decl from = opt.from || 0
			decl indent = typeof opt.indent === 'undefined' ? true : opt.indent

		if indent
			_ ctx.indent()

		var goitems = []
		for var i = from; i < items.length; i++
			if options.sep && i > from
				_ goitems.push
					{
						@ wzElement 'separator'
						@ wzName options.sep
			_ goitems.push(items[i])

		_ async.mapSeries
			@ goitems
			_ getGenItem
				@ ctx
			f_cb()
				if indent
					_ ctx.deindent()
				r_cb()
	$hook