wfschema html

	$
		// Hack for escaping an ittf expression used in this ittf document as a literal.
		var wzName = '$' + '{wzName}';
	
	# A schema modeling an html document.

	# ATTENTION in this model the classical python like comment char sharp(#) is replaced
	#           by the minus(-) char, see the comment element.
	#           The sharp(#) is used for the _sharp extension element.

	# Preprocess the mTree before loading the wizzi model
	mtree-is-preprocessed

	e element
		# A generic html element.
		# The wzName, if present becames the first TEXTNODE of the html element.
		# You should find a proper schema element that extends this one for every valid html element. 
		# In any case this element is not abstract and can be used for eventual missing html elements.
		# In this case must contain a name-value pair separated by a blank: name is
		# the html element name and value (optional), if present, is the first TEXTNODE of the element.

		tag <
		
		$include html/spec-globals-attributes
		a aria-*
		a data-*
		a ng-*
		a ui-*
		a v-*
		a on*
		a @*
		a role
		
		r attribute/s
		r element/s

	e html : element
		# The root element.
		a doctype
		a manifest
		a version
		is-root

	$include html/spec-elements
	
	#
	# Extension element that do not match any tag of the HTML spec.
	#

	e attribute
		# Used for Html element attributes not declared in this schema.
		# The wzName must contain a name-value pair separated by a blank (value is optional).
		# Name is the attribute name and value, if not empty, is the attribute value.

		tag @

	e _dot : element
		# short for <div class='${wzName}' [ attributes ]>
		
		tag .
	
	e _sharp : element
		# short for <div id='${wzName}' [...]> ...
		
		tag #

	e _js : element
		# When has no children is short for
		#   html4: <script src="${wzName}" type="text/javascript" [ attributes ]></script>
		#   html5: <script src="${wzName}"></script>
		# When has children is the root of an inline script ( script html element )
		
		tag js

		r statement/s

	e_tag( jsBabel, js-babel, element )
		# When has no children is short for
		#   html5: <script src="${wzName}" type="text/babel"></script>
		# When has children is the root of an inline script ( script html element )
		
		r statement/s

	e json : element
		include json {

	$include html/js
	
	e _css : element
		# When has no children is short for <link href="${wzName}" rel="stylesheet" [ attributes ]> 
		# When has children is the root of an inline stylesheet ( style html element )
		
		tag css

		r rule/s

	$include html/css

	e _text : element
		# The wzName becomes a TEXTNODE rewritten inline in the output document.
		
		tag +
	
	e _textLF : element
		# The wzName becomes a TEXTNODE rewritten in the output document followed by a LF char.
		
		tag ++
	
	e comment : element
		# The wzName is the comment text.
		
		tag -

	#
	# Disambiguation extension tags that do not match any tag of the HTML spec.
	#

	e @title : element
		# The title html element.
		# The title tag is ambiguous it can be both a global attribute and a child element.

	e @style : element
		# The html style element.
		# The style tag is ambiguous it can be both a global attribute and a child element.
		a media
		a nonce
		a type
		a scoped
		include css

	e lorem : element
		# the wzName = count
		a units
			restrict
				enum words
				enum sentences
				enum paragraphs
			default words
		a minWords
			tag min-words
			default 5
		a maxWords
			tag max-words
			default 15
		a minSentences
			tag min-sentences
			default 3
		a maxSentences
			tag max-sentences
			default 7
		a htmlTag
			tag html-tag
			default p

	$include html/includes