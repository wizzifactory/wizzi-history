module
	kind jsfile

	var HtmlJsPreprocessor = require('./html-js-mtre-preprocessor.g')

	set module.exports
		function
			param mTree
			param context

			# log 'wizzi-web.html.preprocess.mTree', mTree

			var state = {}
			foreach item in mTree.nodes[0].children
				_ traverse(item, state)

			return mTree

	function traverse
		param node
		param state

		if preprocessNode(node, state)
			return

		var saveParent = state.parent
		foreach item in node.children
			_ traverse(item, state)
		set state.parent = saveParent 

	function preprocessNode
		param node
		param state

		if node.n === '--css' || inferCssInclude(node)
			set node.n = '::style'
			if childNameIsOneOf(node, ['css']) == false
				var scoped
					_ extractRemove
						@ node
						@ 'scoped'
				_ wrapChilds
					@ node
					{
						@ n 'css'
						@ v ''
				if scoped
					_ node.children.push
						@ scoped
				return true
		elif node.n === '--js' || inferJsInclude(node)
			set node.n = '::script'
			if childNameIsOneOf(node, ['module']) == false
				var type
					_ extractRemove
						@ node
						@ 'type'
				_ wrapChilds
					@ node
					{
						@ n 'module'
						@ v ''
						[ children
							{
								@ n 'kind'
								@ v 'react'
				if type
					_ node.children.push
						@ type
			_ HtmlJsPreprocessor(node)
			return true
		elif inferSvgInclude(node)
			set node.n = '::media'
			if node.children[0].n !== 'svg'
				_ wrapChilds
					@ node
					{
						@ n 'svg'
						@ v ''
						[ children
			return true
		elif inferReadyInclude(node)
			set node.n = '::ready'
			if node.children[0].n !== 'module'
				_ wrapChilds
					@ node
					{
						@ n 'module'
						@ v ''
						[ children
			return true
		elif inferJsonObjectInclude(node)
			set node.n = '::data-object'
			return true
		elif inferJsonArrayInclude(node)
			set node.n = '::data-array'
			return true
		else
			return false

	function inferCssInclude
		param node
		if node.n === '@style' || node.n === 'style'
			if descendentNameIsOneOf(node, ['css', '<', '.', '#'])
				return true
		return false

	function inferJsInclude
		param node
		if node.n === 'script'
			if descendentNameIsOneOf(node, ['src']) == false
				return true
		return false

	function inferSvgInclude
		param node
		if node.n === '::media' && descendentNameIsOneOf(node, ['svg'])
			return true
		if node.n === 'svg'
			if descendentNameIsOneOf(node, ['src']) == false
				return true
		return false
	
	function inferReadyInclude
		param node
		if node.n === 'ready'
				return true
		return false

	function inferJsonObjectInclude
		param node
		if node.n === 'json' && childNameIsOneOf(node, ['{'])
			return true
		return false

	function inferJsonArrayInclude
		param node
		if node.n === 'json' && childNameIsOneOf(node, ['['])
			return true
		return false

	function childNameIsOneOf
		param node
		param names
		foreach child in node.children
			foreach name in names
				if child.n === name
					return true
		return false

	function descendentNameIsOneOf
		param node
		param names
		var found
		foreach child in node.children
			foreach name in names
				if child.n == name
					return true
			set found
				_ descendentNameIsOneOf
					@ child
					@ names
			if found
				return true
		return false

	function extractRemove
		param node
		param n
		var ret
		var children = node.children
		set node.children = []
		foreach item in children
			if item.n === n
			else
				_ node.children.push
					@ item

	function wrapChilds
		param node
		param newN
		
		# log 'wrapChild', node.children

		_ copyNodeAttrsDeep
			@ node
			@ newN
		
		var children = node.children
		set newN.parent = node.parent
		set node.children = [ newN ]
		foreach item in children
			_ newN.children.push
				@ item

	function copyNodeAttrsDeep
		param nfrom
		param nto
		
		_ copyNodeAttrs
			@ nfrom
			@ nto
		
		foreach item in nto.children
			_ copyNodeAttrsDeep
				@ nfrom
				@ item

	function copyNodeAttrs
		param nfrom
		param nto
		set nto.r = nfrom.r
		set nto.c = nfrom.c
		set nto.s = nfrom.s
		set nto.u = nfrom.u
		if typeof nto.children === 'undefined'
			set nto.children = []