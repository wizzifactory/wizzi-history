/*
    artifact generator: C:\My\wizzi\v5\node_modules\wizzi-legacy-v4\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\v5\node_modules\wizzi-core\lib\artifacts\wfschema\model\gen\ittf\wfschema-model.js.ittf
    utc time: Tue, 02 Oct 2018 06:32:11 GMT
*/
'use strict';
// generated by wizzi.codegen.js.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var wzutils = require('wizzi-utils');
var verify = wzutils.verify;


var _md = module.exports = {};

var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row, col, sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();

_md.wzSourceLineInfo = wzSourceLineInfo;
var htmlBase = (function () {
    function htmlBase(name, sourceLineInfo) {
        _classCallCheck(this, htmlBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    htmlBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    htmlBase.prototype.wzSourceFilepath = function(sourceKey) {
        return this.wzRoot().loadHistory.getIttfDocumentUri(sourceKey);
    }
    htmlBase.prototype.wzVerify = function() {
    }
    htmlBase.prototype.wzInitialize = function() {
    }
    htmlBase.prototype.wzInitializeAsync = function(ctx, callback) {
        callback(null);
    }
    htmlBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    htmlBase.prototype.wzAddChildToColl = function(node, coll) {
        node.wzParent = this;
        node.wzMoved = true;
        coll.push(node);
    }
    htmlBase.prototype.wzMoveChildToColl = function(node, coll, fromColl) {
        var index = fromColl.indexOf(node);
        if (index < 0) {
            this.error('wzMoveChildToColl error. The from collection does not contain the node.', node);
        }
        fromColl.splice(index, 1);
        this.wzAddChildToColl(node, coll);
    }
    htmlBase.prototype.wzLoadToChildColl = function(child, type, coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    htmlBase.prototype.wzCreateChildColl = function(tag, name, type, coll) {
        var item = new type(name, this.wzSourceLineInfo);
        item.wzTag = tag;
        item.wzParent = this;
        item.wzCreated = true;
        coll.push(item);
        return item;
    }
    htmlBase.prototype.wzLoadToChildren = function(child, type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    htmlBase.prototype.wzLoadOneToOne = function(child, type, fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    htmlBase.prototype.wzRemove = function(fromColl) {
        var index = fromColl.indexOf(this);
        if (index < 0) {
            this.error('wzRemove error. The from collection does not contain the node.', this);
        }
        fromColl.splice(index, 1);
    }
    htmlBase.prototype.error = function(message, node) {
        throw new _md.htmlModelException(message, node, this);
    }
    return htmlBase;
})();

_md.htmlBase = htmlBase;

/**
    element element
     A generic html element.
     The wzName, if present becames the first TEXTNODE of the html element.
     You should find a proper schema element that extends this one for every valid html element.
     In any case this element is not abstract and can be used for eventual missing html elements.
     In this case must contain a name-value pair separated by a blank: name is
     the html element name and value (optional), if present, is the first TEXTNODE of the element.
*/
var element = (function (htmlBase) {
    _inherits(element, htmlBase);
    function element(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(element.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, element);
        this.wzElement = "element";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.accesskey = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.class = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.contenteditable = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.contextmenu = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.dir = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.draggable = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.dropzone = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.hidden = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.id = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.itemid = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.itemprop = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.itemref = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.itemscope = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.itemtype = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.lang = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.spellcheck = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.style = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.tabindex = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.title = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.translate = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.aria__ = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.data__ = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.ng__ = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.ui__ = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.on_ = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.role = null
        // relation attribute
        this.attributes = [];
        // relation element
        this.elements = [];
    }
    element.prototype.addAttribute = function(name, sourceLineInfo) {
        var retval = new _md.attribute(name, sourceLineInfo);
        retval.wzParent = this;
        this.attributes.push(retval);
        return retval;
    }
    element.prototype.getAttribute = function(name) {
        var found = null;
        this.attributes.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    element.prototype.addElement = function(name, sourceLineInfo) {
        var retval = new _md.element(name, sourceLineInfo);
        retval.wzParent = this;
        this.elements.push(retval);
        return retval;
    }
    element.prototype.getElement = function(name) {
        var found = null;
        this.elements.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    element.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md._sharp, this.elements);
            }
        }
        if (_l == 1 && _ch == '+') {
            if (name === '+') {
                return this.wzLoadToChildColl(child, _md._text, this.elements);
            }
        }
        if (_l == 1 && _ch == '-') {
            if (name === '-') {
                return this.wzLoadToChildColl(child, _md.comment, this.elements);
            }
        }
        if (_l == 1 && _ch == '.') {
            if (name === '.') {
                return this.wzLoadToChildColl(child, _md._dot, this.elements);
            }
        }
        if (_l == 1 && _ch == '<') {
            if (name === '<') {
                return this.wzLoadToChildColl(child, _md.element, this.elements);
            }
        }
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, _md.attribute, this.attributes);
            }
        }
        if (_l == 1 && _ch == 'a') {
            if (name === 'a') {
                return this.wzLoadToChildColl(child, _md.a, this.elements);
            }
        }
        if (_l == 1 && _ch == 'b') {
            if (name === 'b') {
                return this.wzLoadToChildColl(child, _md.b, this.elements);
            }
        }
        if (_l == 1 && _ch == 'i') {
            if (name === 'i') {
                return this.wzLoadToChildColl(child, _md.i, this.elements);
            }
        }
        if (_l == 1 && _ch == 'p') {
            if (name === 'p') {
                return this.wzLoadToChildColl(child, _md.p, this.elements);
            }
        }
        if (_l == 1 && _ch == 'q') {
            if (name === 'q') {
                return this.wzLoadToChildColl(child, _md.q, this.elements);
            }
        }
        if (_l == 1 && _ch == 's') {
            if (name === 's') {
                return this.wzLoadToChildColl(child, _md.s, this.elements);
            }
        }
        if (_l == 1 && _ch == 'u') {
            if (name === 'u') {
                return this.wzLoadToChildColl(child, _md.u, this.elements);
            }
        }
        if (_l == 2 && _ch == '+') {
            if (name === '++') {
                return this.wzLoadToChildColl(child, _md._textLF, this.elements);
            }
        }
        if (_l == 2 && _ch == 'b') {
            if (name === 'br') {
                return this.wzLoadToChildColl(child, _md.br, this.elements);
            }
        }
        if (_l == 2 && _ch == 'd') {
            if (name === 'dd') {
                return this.wzLoadToChildColl(child, _md.dd, this.elements);
            }
            else if (name === 'dl') {
                return this.wzLoadToChildColl(child, _md.dl, this.elements);
            }
            else if (name === 'dt') {
                return this.wzLoadToChildColl(child, _md.dt, this.elements);
            }
        }
        if (_l == 2 && _ch == 'e') {
            if (name === 'em') {
                return this.wzLoadToChildColl(child, _md.em, this.elements);
            }
        }
        if (_l == 2 && _ch == 'h') {
            if (name === 'h1') {
                return this.wzLoadToChildColl(child, _md.h1, this.elements);
            }
            else if (name === 'h2') {
                return this.wzLoadToChildColl(child, _md.h2, this.elements);
            }
            else if (name === 'h3') {
                return this.wzLoadToChildColl(child, _md.h3, this.elements);
            }
            else if (name === 'h4') {
                return this.wzLoadToChildColl(child, _md.h4, this.elements);
            }
            else if (name === 'h5') {
                return this.wzLoadToChildColl(child, _md.h5, this.elements);
            }
            else if (name === 'h6') {
                return this.wzLoadToChildColl(child, _md.h6, this.elements);
            }
            else if (name === 'hr') {
                return this.wzLoadToChildColl(child, _md.hr, this.elements);
            }
        }
        if (_l == 2 && _ch == 'i') {
            if (name === 'id') {
                this.id = child.v; return true;
            }
        }
        if (_l == 2 && _ch == 'j') {
            if (name === 'js') {
                return this.wzLoadToChildColl(child, _md._js, this.elements);
            }
        }
        if (_l == 2 && _ch == 'l') {
            if (name === 'li') {
                return this.wzLoadToChildColl(child, _md.li, this.elements);
            }
        }
        if (_l == 2 && _ch == 'o') {
            if (name === 'ol') {
                return this.wzLoadToChildColl(child, _md.ol, this.elements);
            }
        }
        if (_l == 2 && _ch == 'r') {
            if (name === 'rb') {
                return this.wzLoadToChildColl(child, _md.rb, this.elements);
            }
            else if (name === 'rp') {
                return this.wzLoadToChildColl(child, _md.rp, this.elements);
            }
            else if (name === 'rt') {
                return this.wzLoadToChildColl(child, _md.rt, this.elements);
            }
        }
        if (_l == 2 && _ch == 't') {
            if (name === 'td') {
                return this.wzLoadToChildColl(child, _md.td, this.elements);
            }
            else if (name === 'th') {
                return this.wzLoadToChildColl(child, _md.th, this.elements);
            }
            else if (name === 'tr') {
                return this.wzLoadToChildColl(child, _md.tr, this.elements);
            }
        }
        if (_l == 2 && _ch == 'u') {
            if (name === 'ul') {
                return this.wzLoadToChildColl(child, _md.ul, this.elements);
            }
        }
        if (_l == 3 && _ch == 'b') {
            if (name === 'bdi') {
                return this.wzLoadToChildColl(child, _md.bdi, this.elements);
            }
            else if (name === 'bdo') {
                return this.wzLoadToChildColl(child, _md.bdo, this.elements);
            }
        }
        if (_l == 3 && _ch == 'c') {
            if (name === 'col') {
                return this.wzLoadToChildColl(child, _md.col, this.elements);
            }
            else if (name === 'css') {
                return this.wzLoadToChildColl(child, _md._css, this.elements);
            }
        }
        if (_l == 3 && _ch == 'd') {
            if (name === 'dir') {
                this.dir = child.v; return true;
            }
            else if (name === 'del') {
                return this.wzLoadToChildColl(child, _md.del, this.elements);
            }
            else if (name === 'dfn') {
                return this.wzLoadToChildColl(child, _md.dfn, this.elements);
            }
            else if (name === 'div') {
                return this.wzLoadToChildColl(child, _md.div, this.elements);
            }
        }
        if (_l == 3 && _ch == 'i') {
            if (name === 'img') {
                return this.wzLoadToChildColl(child, _md.img, this.elements);
            }
            else if (name === 'ins') {
                return this.wzLoadToChildColl(child, _md.ins, this.elements);
            }
        }
        if (_l == 3 && _ch == 'k') {
            if (name === 'kbd') {
                return this.wzLoadToChildColl(child, _md.kbd, this.elements);
            }
        }
        if (_l == 3 && _ch == 'm') {
            if (name === 'map') {
                return this.wzLoadToChildColl(child, _md.map, this.elements);
            }
        }
        if (_l == 3 && _ch == 'n') {
            if (name === 'nav') {
                return this.wzLoadToChildColl(child, _md.nav, this.elements);
            }
        }
        if (_l == 3 && _ch == 'p') {
            if (name === 'pre') {
                return this.wzLoadToChildColl(child, _md.pre, this.elements);
            }
        }
        if (_l == 3 && _ch == 'r') {
            if (name === 'rtc') {
                return this.wzLoadToChildColl(child, _md.rtc, this.elements);
            }
            else if (name === 'rub') {
                return this.wzLoadToChildColl(child, _md.rub, this.elements);
            }
        }
        if (_l == 3 && _ch == 's') {
            if (name === 'sub') {
                return this.wzLoadToChildColl(child, _md.sub, this.elements);
            }
            else if (name === 'sup') {
                return this.wzLoadToChildColl(child, _md.sup, this.elements);
            }
        }
        if (_l == 3 && _ch == 'v') {
            if (name === 'var') {
                return this.wzLoadToChildColl(child, _md.xvar, this.elements);
            }
        }
        if (_l == 3 && _ch == 'w') {
            if (name === 'wbr') {
                return this.wzLoadToChildColl(child, _md.wbr, this.elements);
            }
        }
        if (_l == 4 && _ch == 'a') {
            if (name === 'abbr') {
                return this.wzLoadToChildColl(child, _md.abbr, this.elements);
            }
            else if (name === 'area') {
                return this.wzLoadToChildColl(child, _md.area, this.elements);
            }
        }
        if (_l == 4 && _ch == 'b') {
            if (name === 'base') {
                return this.wzLoadToChildColl(child, _md.base, this.elements);
            }
            else if (name === 'body') {
                return this.wzLoadToChildColl(child, _md.body, this.elements);
            }
        }
        if (_l == 4 && _ch == 'c') {
            if (name === 'cite') {
                return this.wzLoadToChildColl(child, _md.cite, this.elements);
            }
            else if (name === 'code') {
                return this.wzLoadToChildColl(child, _md.code, this.elements);
            }
        }
        if (_l == 4 && _ch == 'd') {
            if (name === 'data') {
                return this.wzLoadToChildColl(child, _md.data, this.elements);
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'form') {
                return this.wzLoadToChildColl(child, _md.form, this.elements);
            }
        }
        if (_l == 4 && _ch == 'h') {
            if (name === 'html') {
                return this.wzLoadToChildColl(child, _md.html, this.elements);
            }
            else if (name === 'head') {
                return this.wzLoadToChildColl(child, _md.head, this.elements);
            }
        }
        if (_l == 4 && _ch == 'j') {
            if (name === 'json') {
                return this.wzLoadToChildColl(child, _md.json, this.elements);
            }
        }
        if (_l == 4 && _ch == 'l') {
            if (name === 'lang') {
                this.lang = child.v; return true;
            }
            else if (name === 'link') {
                return this.wzLoadToChildColl(child, _md.link, this.elements);
            }
        }
        if (_l == 4 && _ch == 'm') {
            if (name === 'main') {
                return this.wzLoadToChildColl(child, _md.main, this.elements);
            }
            else if (name === 'mark') {
                return this.wzLoadToChildColl(child, _md.mark, this.elements);
            }
            else if (name === 'math') {
                return this.wzLoadToChildColl(child, _md.math, this.elements);
            }
            else if (name === 'menu') {
                return this.wzLoadToChildColl(child, _md.menu, this.elements);
            }
            else if (name === 'meta') {
                return this.wzLoadToChildColl(child, _md.meta, this.elements);
            }
        }
        if (_l == 4 && _ch == 'r') {
            if (name === 'role') {
                this.role = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 's') {
            if (name === 'samp') {
                return this.wzLoadToChildColl(child, _md.samp, this.elements);
            }
            else if (name === 'span') {
                return this.wzLoadToChildColl(child, _md.span, this.elements);
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'time') {
                return this.wzLoadToChildColl(child, _md.time, this.elements);
            }
        }
        if (_l == 5 && _ch == 'a') {
            if (name === 'aside') {
                return this.wzLoadToChildColl(child, _md.aside, this.elements);
            }
            else if (name === 'audio') {
                return this.wzLoadToChildColl(child, _md.audio, this.elements);
            }
        }
        if (_l == 5 && _ch == 'c') {
            if (name === 'class') {
                this.class = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'e') {
            if (name === 'embed') {
                return this.wzLoadToChildColl(child, _md.embed, this.elements);
            }
        }
        if (_l == 5 && _ch == 'i') {
            if (name === 'input') {
                return this.wzLoadToChildColl(child, _md.input, this.elements);
            }
        }
        if (_l == 5 && _ch == 'l') {
            if (name === 'label') {
                return this.wzLoadToChildColl(child, _md.label, this.elements);
            }
            else if (name === 'lorem') {
                return this.wzLoadToChildColl(child, _md.lorem, this.elements);
            }
        }
        if (_l == 5 && _ch == 'm') {
            if (name === 'meter') {
                return this.wzLoadToChildColl(child, _md.meter, this.elements);
            }
        }
        if (_l == 5 && _ch == 'p') {
            if (name === 'param') {
                return this.wzLoadToChildColl(child, _md.param, this.elements);
            }
        }
        if (_l == 5 && _ch == 'r') {
            if (name === 'ready') {
                return this.wzLoadToChildColl(child, _md.ready, this.elements);
            }
        }
        if (_l == 5 && _ch == 's') {
            if (name === 'style') {
                this.style = child.v; return true;
            }
            else if (name === 'small') {
                return this.wzLoadToChildColl(child, _md.small, this.elements);
            }
        }
        if (_l == 5 && _ch == 't') {
            if (name === 'title') {
                this.title = child.v; return true;
            }
            else if (name === 'table') {
                return this.wzLoadToChildColl(child, _md.table, this.elements);
            }
            else if (name === 'tbody') {
                return this.wzLoadToChildColl(child, _md.tbody, this.elements);
            }
            else if (name === 'tfoot') {
                return this.wzLoadToChildColl(child, _md.tfoot, this.elements);
            }
            else if (name === 'thead') {
                return this.wzLoadToChildColl(child, _md.thead, this.elements);
            }
            else if (name === 'track') {
                return this.wzLoadToChildColl(child, _md.track, this.elements);
            }
        }
        if (_l == 5 && _ch == 'v') {
            if (name === 'video') {
                return this.wzLoadToChildColl(child, _md.video, this.elements);
            }
        }
        if (_l == 6 && _ch == '@') {
            if (name === '@title') {
                return this.wzLoadToChildColl(child, _md._title, this.elements);
            }
            else if (name === '@style') {
                return this.wzLoadToChildColl(child, _md._style, this.elements);
            }
        }
        if (_l == 6 && _ch == 'b') {
            if (name === 'button') {
                return this.wzLoadToChildColl(child, _md.button, this.elements);
            }
        }
        if (_l == 6 && _ch == 'c') {
            if (name === 'canvas') {
                return this.wzLoadToChildColl(child, _md.canvas, this.elements);
            }
        }
        if (_l == 6 && _ch == 'd') {
            if (name === 'dialog') {
                return this.wzLoadToChildColl(child, _md.dialog, this.elements);
            }
        }
        if (_l == 6 && _ch == 'f') {
            if (name === 'figure') {
                return this.wzLoadToChildColl(child, _md.figure, this.elements);
            }
            else if (name === 'footer') {
                return this.wzLoadToChildColl(child, _md.footer, this.elements);
            }
        }
        if (_l == 6 && _ch == 'h') {
            if (name === 'hidden') {
                this.hidden = child.v; return true;
            }
            else if (name === 'hgroup') {
                return this.wzLoadToChildColl(child, _md.hgroup, this.elements);
            }
            else if (name === 'header') {
                return this.wzLoadToChildColl(child, _md.header, this.elements);
            }
        }
        if (_l == 6 && _ch == 'i') {
            if (name === 'itemid') {
                this.itemid = child.v; return true;
            }
            else if (name === 'iframe') {
                return this.wzLoadToChildColl(child, _md.iframe, this.elements);
            }
        }
        if (_l == 6 && _ch == 'k') {
            if (name === 'keygen') {
                return this.wzLoadToChildColl(child, _md.keygen, this.elements);
            }
        }
        if (_l == 6 && _ch == 'l') {
            if (name === 'legend') {
                return this.wzLoadToChildColl(child, _md.legend, this.elements);
            }
        }
        if (_l == 6 && _ch == 'o') {
            if (name === 'object') {
                return this.wzLoadToChildColl(child, _md.object, this.elements);
            }
            else if (name === 'option') {
                return this.wzLoadToChildColl(child, _md.option, this.elements);
            }
            else if (name === 'output') {
                return this.wzLoadToChildColl(child, _md.output, this.elements);
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'script') {
                return this.wzLoadToChildColl(child, _md.script, this.elements);
            }
            else if (name === 'select') {
                return this.wzLoadToChildColl(child, _md.select, this.elements);
            }
            else if (name === 'source') {
                return this.wzLoadToChildColl(child, _md.source, this.elements);
            }
            else if (name === 'strong') {
                return this.wzLoadToChildColl(child, _md.strong, this.elements);
            }
        }
        if (_l == 7 && _ch == 'a') {
            if (name === 'address') {
                return this.wzLoadToChildColl(child, _md.address, this.elements);
            }
            else if (name === 'article') {
                return this.wzLoadToChildColl(child, _md.article, this.elements);
            }
        }
        if (_l == 7 && _ch == 'c') {
            if (name === 'caption') {
                return this.wzLoadToChildColl(child, _md.caption, this.elements);
            }
        }
        if (_l == 7 && _ch == 'd') {
            if (name === 'details') {
                return this.wzLoadToChildColl(child, _md.details, this.elements);
            }
        }
        if (_l == 7 && _ch == 'i') {
            if (name === 'itemref') {
                this.itemref = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'j') {
            if (name === 'jsbabel') {
                return this.wzLoadToChildColl(child, _md.jsBabel, this.elements);
            }
        }
        if (_l == 7 && _ch == 's') {
            if (name === 'section') {
                return this.wzLoadToChildColl(child, _md.section, this.elements);
            }
            else if (name === 'summary') {
                return this.wzLoadToChildColl(child, _md.summary, this.elements);
            }
        }
        if (_l == 8 && _ch == 'c') {
            if (name === 'colgroup') {
                return this.wzLoadToChildColl(child, _md.colgroup, this.elements);
            }
        }
        if (_l == 8 && _ch == 'd') {
            if (name === 'dropzone') {
                this.dropzone = child.v; return true;
            }
            else if (name === 'datalist') {
                return this.wzLoadToChildColl(child, _md.datalist, this.elements);
            }
        }
        if (_l == 8 && _ch == 'f') {
            if (name === 'fieldset') {
                return this.wzLoadToChildColl(child, _md.fieldset, this.elements);
            }
        }
        if (_l == 8 && _ch == 'i') {
            if (name === 'itemprop') {
                this.itemprop = child.v; return true;
            }
            else if (name === 'itemtype') {
                this.itemtype = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'j') {
            if (name === 'js-babel') {
                return this.wzLoadToChildColl(child, _md.jsBabel, this.elements);
            }
        }
        if (_l == 8 && _ch == 'm') {
            if (name === 'menuitem') {
                return this.wzLoadToChildColl(child, _md.menuitem, this.elements);
            }
        }
        if (_l == 8 && _ch == 'n') {
            if (name === 'noscript') {
                return this.wzLoadToChildColl(child, _md.noscript, this.elements);
            }
        }
        if (_l == 8 && _ch == 'o') {
            if (name === 'optgroup') {
                return this.wzLoadToChildColl(child, _md.optgroup, this.elements);
            }
        }
        if (_l == 8 && _ch == 'p') {
            if (name === 'progress') {
                return this.wzLoadToChildColl(child, _md.progress, this.elements);
            }
        }
        if (_l == 8 && _ch == 't') {
            if (name === 'tabindex') {
                this.tabindex = child.v; return true;
            }
            else if (name === 'template') {
                return this.wzLoadToChildColl(child, _md.template, this.elements);
            }
            else if (name === 'textarea') {
                return this.wzLoadToChildColl(child, _md.textarea, this.elements);
            }
        }
        if (_l == 9 && _ch == 'a') {
            if (name === 'accesskey') {
                this.accesskey = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'd') {
            if (name === 'draggable') {
                this.draggable = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'i') {
            if (name === 'itemscope') {
                this.itemscope = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 't') {
            if (name === 'translate') {
                this.translate = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'b') {
            if (name === 'blockquote') {
                return this.wzLoadToChildColl(child, _md.blockquote, this.elements);
            }
        }
        if (_l == 10 && _ch == 'f') {
            if (name === 'figcaption') {
                return this.wzLoadToChildColl(child, _md.figcaption, this.elements);
            }
        }
        if (_l == 10 && _ch == 's') {
            if (name === 'spellcheck') {
                this.spellcheck = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'c') {
            if (name === 'contextmenu') {
                this.contextmenu = child.v; return true;
            }
        }
        if (_l == 15 && _ch == 'c') {
            if (name === 'contenteditable') {
                this.contenteditable = child.v; return true;
            }
        }
        if (name.substr(0, 5) == "aria-") {
            this[name] = child.v;
            return true;
        }
        if (name.substr(0, 5) == "data-") {
            this[name] = child.v;
            return true;
        }
        if (name.substr(0, 3) == "ng-") {
            this[name] = child.v;
            return true;
        }
        if (name.substr(0, 3) == "ui-") {
            this[name] = child.v;
            return true;
        }
        if (name.substr(0, 2) == "on") {
            this[name] = child.v;
            return true;
        }
        return ok;
    }
    element.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    element.prototype.wzVerify = function(ctx) {
        var i, i_len=this.attributes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.attributes[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.elements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.elements[i];
            item.wzVerify(ctx);
        }
        _md.htmlBase.prototype.wzVerify.call(this, ctx);
    }
    element.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.attributes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.attributes[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.elements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.elements[i];
            item.wzInitialize(ctx);
        }
        _md.htmlBase.prototype.wzInitialize.call(this, ctx);
    }
    return element;
})(htmlBase);

_md.element = element;
/**
    element html
     The root element.
*/
var html = (function (element) {
    _inherits(html, element);
    function html(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(html.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, html);
        this.allowedVERSIONS = [ "5", "4"];
        this.VERSION_5 = "5";
        this.VERSION_4 = "4";
        this.wzElement = "html";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.doctype = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.manifest = null
        this.version = "5";
    }
    html.VERSION_5 = "5";
    html.VERSION_4 = "4";
    html.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 7 && _ch == 'd') {
            if (name === 'doctype') {
                this.doctype = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'v') {
            if (name === 'version') {
                this.version = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'm') {
            if (name === 'manifest') {
                this.manifest = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    html.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    html.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("html", "version", this.version, this.allowedVERSIONS, this);
        _md.element.prototype.wzVerify.call(this, ctx);
    }
    return html;
})(element);

_md.html = html;
// element a
var a = (function (element) {
    _inherits(a, element);
    function a(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(a.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, a);
        this.wzElement = "a";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.href = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.target = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.download = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.rel = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.hreflang = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
    }
    a.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'r') {
            if (name === 'rel') {
                this.rel = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'h') {
            if (name === 'href') {
                this.href = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 't') {
            if (name === 'target') {
                this.target = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'd') {
            if (name === 'download') {
                this.download = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'h') {
            if (name === 'hreflang') {
                this.hreflang = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    a.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return a;
})(element);

_md.a = a;
// element abbr
var abbr = (function (element) {
    _inherits(abbr, element);
    function abbr(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(abbr.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, abbr);
        this.wzElement = "abbr";
    }
    return abbr;
})(element);

_md.abbr = abbr;
// element address
var address = (function (element) {
    _inherits(address, element);
    function address(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(address.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, address);
        this.wzElement = "address";
    }
    return address;
})(element);

_md.address = address;
// element area
var area = (function (element) {
    _inherits(area, element);
    function area(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(area.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, area);
        this.wzElement = "area";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.alt = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.coords = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.shape = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.href = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.target = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.download = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.rel = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.hreflang = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
    }
    area.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'a') {
            if (name === 'alt') {
                this.alt = child.v; return true;
            }
        }
        if (_l == 3 && _ch == 'r') {
            if (name === 'rel') {
                this.rel = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'h') {
            if (name === 'href') {
                this.href = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 's') {
            if (name === 'shape') {
                this.shape = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'c') {
            if (name === 'coords') {
                this.coords = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 't') {
            if (name === 'target') {
                this.target = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'd') {
            if (name === 'download') {
                this.download = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'h') {
            if (name === 'hreflang') {
                this.hreflang = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    area.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return area;
})(element);

_md.area = area;
// element article
var article = (function (element) {
    _inherits(article, element);
    function article(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(article.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, article);
        this.wzElement = "article";
    }
    return article;
})(element);

_md.article = article;
// element aside
var aside = (function (element) {
    _inherits(aside, element);
    function aside(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(aside.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, aside);
        this.wzElement = "aside";
    }
    return aside;
})(element);

_md.aside = aside;
// element audio
var audio = (function (element) {
    _inherits(audio, element);
    function audio(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(audio.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, audio);
        this.wzElement = "audio";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.src = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.crossorigin = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.preload = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.autoplay = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.mediagroup = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.loop = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.muted = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.controls = null
    }
    audio.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 's') {
            if (name === 'src') {
                this.src = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'l') {
            if (name === 'loop') {
                this.loop = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'm') {
            if (name === 'muted') {
                this.muted = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'p') {
            if (name === 'preload') {
                this.preload = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'a') {
            if (name === 'autoplay') {
                this.autoplay = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'c') {
            if (name === 'controls') {
                this.controls = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'm') {
            if (name === 'mediagroup') {
                this.mediagroup = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'c') {
            if (name === 'crossorigin') {
                this.crossorigin = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    audio.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return audio;
})(element);

_md.audio = audio;
// element b
var b = (function (element) {
    _inherits(b, element);
    function b(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(b.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, b);
        this.wzElement = "b";
    }
    return b;
})(element);

_md.b = b;
// element base
var base = (function (element) {
    _inherits(base, element);
    function base(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(base.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, base);
        this.wzElement = "base";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.href = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.target = null
    }
    base.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'h') {
            if (name === 'href') {
                this.href = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 't') {
            if (name === 'target') {
                this.target = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    base.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return base;
})(element);

_md.base = base;
// element bdi
var bdi = (function (element) {
    _inherits(bdi, element);
    function bdi(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(bdi.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, bdi);
        this.wzElement = "bdi";
    }
    return bdi;
})(element);

_md.bdi = bdi;
// element bdo
var bdo = (function (element) {
    _inherits(bdo, element);
    function bdo(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(bdo.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, bdo);
        this.wzElement = "bdo";
    }
    return bdo;
})(element);

_md.bdo = bdo;
// element blockquote
var blockquote = (function (element) {
    _inherits(blockquote, element);
    function blockquote(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(blockquote.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, blockquote);
        this.wzElement = "blockquote";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.cite = null
    }
    blockquote.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'c') {
            if (name === 'cite') {
                this.cite = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    blockquote.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return blockquote;
})(element);

_md.blockquote = blockquote;
// element body
var body = (function (element) {
    _inherits(body, element);
    function body(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(body.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, body);
        this.wzElement = "body";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.onbeforeunload = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.onhashchange = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.onlanguagechange = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.onmessage = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.onoffline = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.ononline = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.onpagehide = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.onpageshow = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.onpopstate = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.onstorage = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.onunload = null
    }
    body.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 8 && _ch == 'o') {
            if (name === 'ononline') {
                this.ononline = child.v; return true;
            }
            else if (name === 'onunload') {
                this.onunload = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'o') {
            if (name === 'onmessage') {
                this.onmessage = child.v; return true;
            }
            else if (name === 'onoffline') {
                this.onoffline = child.v; return true;
            }
            else if (name === 'onstorage') {
                this.onstorage = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'o') {
            if (name === 'onpagehide') {
                this.onpagehide = child.v; return true;
            }
            else if (name === 'onpageshow') {
                this.onpageshow = child.v; return true;
            }
            else if (name === 'onpopstate') {
                this.onpopstate = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 'o') {
            if (name === 'onhashchange') {
                this.onhashchange = child.v; return true;
            }
        }
        if (_l == 14 && _ch == 'o') {
            if (name === 'onbeforeunload') {
                this.onbeforeunload = child.v; return true;
            }
        }
        if (_l == 16 && _ch == 'o') {
            if (name === 'onlanguagechange') {
                this.onlanguagechange = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    body.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return body;
})(element);

_md.body = body;
// element br
var br = (function (element) {
    _inherits(br, element);
    function br(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(br.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, br);
        this.wzElement = "br";
    }
    return br;
})(element);

_md.br = br;
// element button
var button = (function (element) {
    _inherits(button, element);
    function button(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(button.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, button);
        this.wzElement = "button";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.autofocus = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.disabled = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.form = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.formaction = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.formenctype = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.formmethod = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.formnovalidate = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.formtarget = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.menua_name = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.value = null
    }
    button.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'f') {
            if (name === 'form') {
                this.form = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                this.value = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'd') {
            if (name === 'disabled') {
                this.disabled = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'a') {
            if (name === 'autofocus') {
                this.autofocus = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'f') {
            if (name === 'formaction') {
                this.formaction = child.v; return true;
            }
            else if (name === 'formmethod') {
                this.formmethod = child.v; return true;
            }
            else if (name === 'formtarget') {
                this.formtarget = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'm') {
            if (name === 'menua name') {
                this.menua_name = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'f') {
            if (name === 'formenctype') {
                this.formenctype = child.v; return true;
            }
        }
        if (_l == 14 && _ch == 'f') {
            if (name === 'formnovalidate') {
                this.formnovalidate = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    button.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return button;
})(element);

_md.button = button;
// element canvas
var canvas = (function (element) {
    _inherits(canvas, element);
    function canvas(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(canvas.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, canvas);
        this.wzElement = "canvas";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.width = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.height = null
    }
    canvas.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'w') {
            if (name === 'width') {
                this.width = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'h') {
            if (name === 'height') {
                this.height = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    canvas.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return canvas;
})(element);

_md.canvas = canvas;
// element caption
var caption = (function (element) {
    _inherits(caption, element);
    function caption(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(caption.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, caption);
        this.wzElement = "caption";
    }
    return caption;
})(element);

_md.caption = caption;
// element cite
var cite = (function (element) {
    _inherits(cite, element);
    function cite(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(cite.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, cite);
        this.wzElement = "cite";
    }
    return cite;
})(element);

_md.cite = cite;
// element code
var code = (function (element) {
    _inherits(code, element);
    function code(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(code.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, code);
        this.wzElement = "code";
    }
    return code;
})(element);

_md.code = code;
// element col
var col = (function (element) {
    _inherits(col, element);
    function col(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(col.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, col);
        this.wzElement = "col";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.span = null
    }
    col.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 's') {
            if (name === 'span') {
                this.span = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    col.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return col;
})(element);

_md.col = col;
// element colgroup
var colgroup = (function (element) {
    _inherits(colgroup, element);
    function colgroup(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(colgroup.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, colgroup);
        this.wzElement = "colgroup";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.span = null
    }
    colgroup.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 's') {
            if (name === 'span') {
                this.span = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    colgroup.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return colgroup;
})(element);

_md.colgroup = colgroup;
// element data
var data = (function (element) {
    _inherits(data, element);
    function data(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(data.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, data);
        this.wzElement = "data";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.value = null
    }
    data.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                this.value = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    data.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return data;
})(element);

_md.data = data;
// element datalist
var datalist = (function (element) {
    _inherits(datalist, element);
    function datalist(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(datalist.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, datalist);
        this.wzElement = "datalist";
    }
    return datalist;
})(element);

_md.datalist = datalist;
// element dd
var dd = (function (element) {
    _inherits(dd, element);
    function dd(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(dd.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, dd);
        this.wzElement = "dd";
    }
    return dd;
})(element);

_md.dd = dd;
// element del
var del = (function (element) {
    _inherits(del, element);
    function del(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(del.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, del);
        this.wzElement = "del";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.cite = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.datetime = null
    }
    del.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'c') {
            if (name === 'cite') {
                this.cite = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'd') {
            if (name === 'datetime') {
                this.datetime = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    del.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return del;
})(element);

_md.del = del;
// element details
var details = (function (element) {
    _inherits(details, element);
    function details(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(details.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, details);
        this.wzElement = "details";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.open = null
    }
    details.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'o') {
            if (name === 'open') {
                this.open = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    details.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return details;
})(element);

_md.details = details;
// element dfn
var dfn = (function (element) {
    _inherits(dfn, element);
    function dfn(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(dfn.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, dfn);
        this.wzElement = "dfn";
    }
    return dfn;
})(element);

_md.dfn = dfn;
// element dialog
var dialog = (function (element) {
    _inherits(dialog, element);
    function dialog(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(dialog.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, dialog);
        this.wzElement = "dialog";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.open = null
    }
    dialog.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'o') {
            if (name === 'open') {
                this.open = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    dialog.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return dialog;
})(element);

_md.dialog = dialog;
// element div
var div = (function (element) {
    _inherits(div, element);
    function div(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(div.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, div);
        this.wzElement = "div";
    }
    return div;
})(element);

_md.div = div;
// element dl
var dl = (function (element) {
    _inherits(dl, element);
    function dl(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(dl.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, dl);
        this.wzElement = "dl";
    }
    return dl;
})(element);

_md.dl = dl;
// element dt
var dt = (function (element) {
    _inherits(dt, element);
    function dt(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(dt.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, dt);
        this.wzElement = "dt";
    }
    return dt;
})(element);

_md.dt = dt;
// element em
var em = (function (element) {
    _inherits(em, element);
    function em(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(em.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, em);
        this.wzElement = "em";
    }
    return em;
})(element);

_md.em = em;
// element embed
var embed = (function (element) {
    _inherits(embed, element);
    function embed(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(embed.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, embed);
        this.wzElement = "embed";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.src = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.width = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.height = null
    }
    embed.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 's') {
            if (name === 'src') {
                this.src = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'w') {
            if (name === 'width') {
                this.width = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'h') {
            if (name === 'height') {
                this.height = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    embed.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return embed;
})(element);

_md.embed = embed;
// element fieldset
var fieldset = (function (element) {
    _inherits(fieldset, element);
    function fieldset(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(fieldset.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, fieldset);
        this.wzElement = "fieldset";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.disabled = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.form = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.name = null
    }
    fieldset.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'f') {
            if (name === 'form') {
                this.form = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'n') {
            if (name === 'name') {
                this.name = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'd') {
            if (name === 'disabled') {
                this.disabled = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    fieldset.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return fieldset;
})(element);

_md.fieldset = fieldset;
// element figcaption
var figcaption = (function (element) {
    _inherits(figcaption, element);
    function figcaption(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(figcaption.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, figcaption);
        this.wzElement = "figcaption";
    }
    return figcaption;
})(element);

_md.figcaption = figcaption;
// element figure
var figure = (function (element) {
    _inherits(figure, element);
    function figure(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(figure.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, figure);
        this.wzElement = "figure";
    }
    return figure;
})(element);

_md.figure = figure;
// element footer
var footer = (function (element) {
    _inherits(footer, element);
    function footer(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(footer.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, footer);
        this.wzElement = "footer";
    }
    return footer;
})(element);

_md.footer = footer;
// element form
var form = (function (element) {
    _inherits(form, element);
    function form(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(form.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, form);
        this.wzElement = "form";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.accept_charset = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.action = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.autocomplete = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.enctype = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.method = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.name = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.novalidate = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.target = null
    }
    form.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'n') {
            if (name === 'name') {
                this.name = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'a') {
            if (name === 'action') {
                this.action = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'm') {
            if (name === 'method') {
                this.method = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 't') {
            if (name === 'target') {
                this.target = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'e') {
            if (name === 'enctype') {
                this.enctype = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'n') {
            if (name === 'novalidate') {
                this.novalidate = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 'a') {
            if (name === 'autocomplete') {
                this.autocomplete = child.v; return true;
            }
        }
        if (_l == 14 && _ch == 'a') {
            if (name === 'accept-charset') {
                this.accept_charset = child.v; return true;
            }
            else if (name === 'accept_charset') {
                this.accept_charset = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    form.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return form;
})(element);

_md.form = form;
// element hgroup
var hgroup = (function (element) {
    _inherits(hgroup, element);
    function hgroup(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(hgroup.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, hgroup);
        this.wzElement = "hgroup";
    }
    return hgroup;
})(element);

_md.hgroup = hgroup;
// element h1
var h1 = (function (element) {
    _inherits(h1, element);
    function h1(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(h1.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, h1);
        this.wzElement = "h1";
    }
    return h1;
})(element);

_md.h1 = h1;
// element h2
var h2 = (function (element) {
    _inherits(h2, element);
    function h2(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(h2.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, h2);
        this.wzElement = "h2";
    }
    return h2;
})(element);

_md.h2 = h2;
// element h3
var h3 = (function (element) {
    _inherits(h3, element);
    function h3(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(h3.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, h3);
        this.wzElement = "h3";
    }
    return h3;
})(element);

_md.h3 = h3;
// element h4
var h4 = (function (element) {
    _inherits(h4, element);
    function h4(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(h4.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, h4);
        this.wzElement = "h4";
    }
    return h4;
})(element);

_md.h4 = h4;
// element h5
var h5 = (function (element) {
    _inherits(h5, element);
    function h5(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(h5.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, h5);
        this.wzElement = "h5";
    }
    return h5;
})(element);

_md.h5 = h5;
// element h6
var h6 = (function (element) {
    _inherits(h6, element);
    function h6(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(h6.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, h6);
        this.wzElement = "h6";
    }
    return h6;
})(element);

_md.h6 = h6;
// element head
var head = (function (element) {
    _inherits(head, element);
    function head(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(head.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, head);
        this.wzElement = "head";
    }
    return head;
})(element);

_md.head = head;
// element header
var header = (function (element) {
    _inherits(header, element);
    function header(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(header.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, header);
        this.wzElement = "header";
    }
    return header;
})(element);

_md.header = header;
// element hr
var hr = (function (element) {
    _inherits(hr, element);
    function hr(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(hr.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, hr);
        this.wzElement = "hr";
    }
    return hr;
})(element);

_md.hr = hr;
// element i
var i = (function (element) {
    _inherits(i, element);
    function i(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(i.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, i);
        this.wzElement = "i";
    }
    return i;
})(element);

_md.i = i;
// element iframe
var iframe = (function (element) {
    _inherits(iframe, element);
    function iframe(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(iframe.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, iframe);
        this.wzElement = "iframe";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.src = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.srcdoc = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.name = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.sandbox = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.seamless = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.allowfullscreen = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.allowTransparency = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.frameborder = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.scrolling = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.width = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.height = null
    }
    iframe.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 's') {
            if (name === 'src') {
                this.src = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'n') {
            if (name === 'name') {
                this.name = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'w') {
            if (name === 'width') {
                this.width = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'h') {
            if (name === 'height') {
                this.height = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'srcdoc') {
                this.srcdoc = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 's') {
            if (name === 'sandbox') {
                this.sandbox = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 's') {
            if (name === 'seamless') {
                this.seamless = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 's') {
            if (name === 'scrolling') {
                this.scrolling = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'f') {
            if (name === 'frameborder') {
                this.frameborder = child.v; return true;
            }
        }
        if (_l == 15 && _ch == 'a') {
            if (name === 'allowfullscreen') {
                this.allowfullscreen = child.v; return true;
            }
        }
        if (_l == 17 && _ch == 'a') {
            if (name === 'allowtransparency') {
                this.allowTransparency = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    iframe.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return iframe;
})(element);

_md.iframe = iframe;
// element img
var img = (function (element) {
    _inherits(img, element);
    function img(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(img.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, img);
        this.wzElement = "img";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.alt = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.src = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.srcset = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.crossorigin = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.usemap = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.ismap = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.width = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.height = null
        this.svg_svg_items = [];
    }
    img.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'a') {
            if (name === 'alt') {
                this.alt = child.v; return true;
            }
        }
        if (_l == 3 && _ch == 's') {
            if (name === 'src') {
                this.src = child.v; return true;
            }
            else if (name === 'svg') {
                // generated by wizzi/lib/wizzi/models/bootstrap/t/wfschema/t/element_load;
                this.svg_svg_items.push(child);
                var err, wizziModel;
                this.wzRoot().wzFactory.loadModelFromMtree( //;
                    'svg',  //;
                    { nodes: [ child ], loadHistory: this.wzRoot().loadHistory }, //;
                    function(cberr, cbwizziModel) { //;
                        err = cberr;
                        wizziModel = cbwizziModel;
                    });
                this.get_svg = function(callback) { //;
                    // We must wait until the async loadModelFromMtree(..) has returned a wizziModel or an err;
                    var iv = setInterval(function() { //;
                        if (err || wizziModel) { //;
                            clearInterval(iv);
                            if (callback) { //;
                                callback(err, wizziModel);
                                callback = null;
                            } //;
                        } //;
                    }, 100);
                };
                return true;
            }
        }
        if (_l == 5 && _ch == 'i') {
            if (name === 'ismap') {
                this.ismap = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'w') {
            if (name === 'width') {
                this.width = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'h') {
            if (name === 'height') {
                this.height = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'srcset') {
                this.srcset = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'u') {
            if (name === 'usemap') {
                this.usemap = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'c') {
            if (name === 'crossorigin') {
                this.crossorigin = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    img.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return img;
})(element);

_md.img = img;
// element input
var input = (function (element) {
    _inherits(input, element);
    function input(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(input.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, input);
        this.wzElement = "input";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.accept = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.alt = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.autocomplete = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.autofocus = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.checked = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.dirname = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.disabled = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.form = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.formaction = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.formenctype = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.formmethod = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.formnovalidate = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.formtarget = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.height = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.inputmode = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.list = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.max = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.maxlength = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.min = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.minlength = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.multiple = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.name = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.pattern = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.placeholder = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.readonly = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.required = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.size = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.src = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.step = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.value = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.width = null
    }
    input.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'a') {
            if (name === 'alt') {
                this.alt = child.v; return true;
            }
        }
        if (_l == 3 && _ch == 'm') {
            if (name === 'max') {
                this.max = child.v; return true;
            }
            else if (name === 'min') {
                this.min = child.v; return true;
            }
        }
        if (_l == 3 && _ch == 's') {
            if (name === 'src') {
                this.src = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'form') {
                this.form = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'l') {
            if (name === 'list') {
                this.list = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'n') {
            if (name === 'name') {
                this.name = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 's') {
            if (name === 'size') {
                this.size = child.v; return true;
            }
            else if (name === 'step') {
                this.step = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                this.value = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'w') {
            if (name === 'width') {
                this.width = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'a') {
            if (name === 'accept') {
                this.accept = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'h') {
            if (name === 'height') {
                this.height = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'c') {
            if (name === 'checked') {
                this.checked = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'd') {
            if (name === 'dirname') {
                this.dirname = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'p') {
            if (name === 'pattern') {
                this.pattern = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'd') {
            if (name === 'disabled') {
                this.disabled = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'm') {
            if (name === 'multiple') {
                this.multiple = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'r') {
            if (name === 'readonly') {
                this.readonly = child.v; return true;
            }
            else if (name === 'required') {
                this.required = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'a') {
            if (name === 'autofocus') {
                this.autofocus = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'i') {
            if (name === 'inputmode') {
                this.inputmode = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'm') {
            if (name === 'maxlength') {
                this.maxlength = child.v; return true;
            }
            else if (name === 'minlength') {
                this.minlength = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'f') {
            if (name === 'formaction') {
                this.formaction = child.v; return true;
            }
            else if (name === 'formmethod') {
                this.formmethod = child.v; return true;
            }
            else if (name === 'formtarget') {
                this.formtarget = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'f') {
            if (name === 'formenctype') {
                this.formenctype = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'p') {
            if (name === 'placeholder') {
                this.placeholder = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 'a') {
            if (name === 'autocomplete') {
                this.autocomplete = child.v; return true;
            }
        }
        if (_l == 14 && _ch == 'f') {
            if (name === 'formnovalidate') {
                this.formnovalidate = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    input.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return input;
})(element);

_md.input = input;
// element ins
var ins = (function (element) {
    _inherits(ins, element);
    function ins(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ins.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ins);
        this.wzElement = "ins";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.cite = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.datetime = null
    }
    ins.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'c') {
            if (name === 'cite') {
                this.cite = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'd') {
            if (name === 'datetime') {
                this.datetime = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    ins.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return ins;
})(element);

_md.ins = ins;
// element kbd
var kbd = (function (element) {
    _inherits(kbd, element);
    function kbd(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(kbd.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, kbd);
        this.wzElement = "kbd";
    }
    return kbd;
})(element);

_md.kbd = kbd;
// element keygen
var keygen = (function (element) {
    _inherits(keygen, element);
    function keygen(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(keygen.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, keygen);
        this.wzElement = "keygen";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.autofocus = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.challenge = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.disabled = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.form = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.keytype = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.name = null
    }
    keygen.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'f') {
            if (name === 'form') {
                this.form = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'n') {
            if (name === 'name') {
                this.name = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'k') {
            if (name === 'keytype') {
                this.keytype = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'd') {
            if (name === 'disabled') {
                this.disabled = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'a') {
            if (name === 'autofocus') {
                this.autofocus = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'c') {
            if (name === 'challenge') {
                this.challenge = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    keygen.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return keygen;
})(element);

_md.keygen = keygen;
// element label
var label = (function (element) {
    _inherits(label, element);
    function label(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(label.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, label);
        this.wzElement = "label";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.form = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.for = null
    }
    label.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'f') {
            if (name === 'for') {
                this.for = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'form') {
                this.form = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    label.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return label;
})(element);

_md.label = label;
// element legend
var legend = (function (element) {
    _inherits(legend, element);
    function legend(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(legend.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, legend);
        this.wzElement = "legend";
    }
    return legend;
})(element);

_md.legend = legend;
// element li
var li = (function (element) {
    _inherits(li, element);
    function li(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(li.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, li);
        this.wzElement = "li";
    }
    return li;
})(element);

_md.li = li;
// element link
var link = (function (element) {
    _inherits(link, element);
    function link(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(link.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, link);
        this.wzElement = "link";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.href = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.crossorigin = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.rel = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.media = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.hreflang = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.sizes = null
    }
    link.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'r') {
            if (name === 'rel') {
                this.rel = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'h') {
            if (name === 'href') {
                this.href = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'm') {
            if (name === 'media') {
                this.media = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 's') {
            if (name === 'sizes') {
                this.sizes = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'h') {
            if (name === 'hreflang') {
                this.hreflang = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'c') {
            if (name === 'crossorigin') {
                this.crossorigin = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    link.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return link;
})(element);

_md.link = link;
// element main
var main = (function (element) {
    _inherits(main, element);
    function main(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(main.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, main);
        this.wzElement = "main";
    }
    return main;
})(element);

_md.main = main;
// element map
var map = (function (element) {
    _inherits(map, element);
    function map(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(map.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, map);
        this.wzElement = "map";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.name = null
    }
    map.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'n') {
            if (name === 'name') {
                this.name = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    map.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return map;
})(element);

_md.map = map;
// element mark
var mark = (function (element) {
    _inherits(mark, element);
    function mark(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(mark.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, mark);
        this.wzElement = "mark";
    }
    return mark;
})(element);

_md.mark = mark;
// element math
var math = (function (element) {
    _inherits(math, element);
    function math(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(math.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, math);
        this.wzElement = "math";
    }
    return math;
})(element);

_md.math = math;
// element menu
var menu = (function (element) {
    _inherits(menu, element);
    function menu(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(menu.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, menu);
        this.wzElement = "menu";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.label = null
    }
    menu.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'l') {
            if (name === 'label') {
                this.label = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    menu.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return menu;
})(element);

_md.menu = menu;
// element menuitem
var menuitem = (function (element) {
    _inherits(menuitem, element);
    function menuitem(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(menuitem.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, menuitem);
        this.wzElement = "menuitem";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.label = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.icon = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.disabled = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.checked = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.radiogroup = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.default = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.command = null
    }
    menuitem.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'i') {
            if (name === 'icon') {
                this.icon = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'l') {
            if (name === 'label') {
                this.label = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'c') {
            if (name === 'checked') {
                this.checked = child.v; return true;
            }
            else if (name === 'command') {
                this.command = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'd') {
            if (name === 'default') {
                this.default = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'd') {
            if (name === 'disabled') {
                this.disabled = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'r') {
            if (name === 'radiogroup') {
                this.radiogroup = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    menuitem.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return menuitem;
})(element);

_md.menuitem = menuitem;
// element meta
var meta = (function (element) {
    _inherits(meta, element);
    function meta(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(meta.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, meta);
        this.wzElement = "meta";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.name = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.http_equiv = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.content = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.charset = null
    }
    meta.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'n') {
            if (name === 'name') {
                this.name = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'c') {
            if (name === 'content') {
                this.content = child.v; return true;
            }
            else if (name === 'charset') {
                this.charset = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'h') {
            if (name === 'http-equiv') {
                this.http_equiv = child.v; return true;
            }
            else if (name === 'http_equiv') {
                this.http_equiv = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    meta.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return meta;
})(element);

_md.meta = meta;
// element meter
var meter = (function (element) {
    _inherits(meter, element);
    function meter(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(meter.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, meter);
        this.wzElement = "meter";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.value = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.min = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.max = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.low = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.high = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.optimum = null
    }
    meter.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'l') {
            if (name === 'low') {
                this.low = child.v; return true;
            }
        }
        if (_l == 3 && _ch == 'm') {
            if (name === 'min') {
                this.min = child.v; return true;
            }
            else if (name === 'max') {
                this.max = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'h') {
            if (name === 'high') {
                this.high = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                this.value = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'o') {
            if (name === 'optimum') {
                this.optimum = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    meter.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return meter;
})(element);

_md.meter = meter;
// element nav
var nav = (function (element) {
    _inherits(nav, element);
    function nav(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(nav.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, nav);
        this.wzElement = "nav";
    }
    return nav;
})(element);

_md.nav = nav;
// element noscript
var noscript = (function (element) {
    _inherits(noscript, element);
    function noscript(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(noscript.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, noscript);
        this.wzElement = "noscript";
    }
    return noscript;
})(element);

_md.noscript = noscript;
// element object
var object = (function (element) {
    _inherits(object, element);
    function object(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(object.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, object);
        this.wzElement = "object";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.data = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.typemustmatch = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.name = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.usemap = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.form = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.width = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.height = null
    }
    object.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'd') {
            if (name === 'data') {
                this.data = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'form') {
                this.form = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'n') {
            if (name === 'name') {
                this.name = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'w') {
            if (name === 'width') {
                this.width = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'h') {
            if (name === 'height') {
                this.height = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'u') {
            if (name === 'usemap') {
                this.usemap = child.v; return true;
            }
        }
        if (_l == 13 && _ch == 't') {
            if (name === 'typemustmatch') {
                this.typemustmatch = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    object.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return object;
})(element);

_md.object = object;
// element ol
var ol = (function (element) {
    _inherits(ol, element);
    function ol(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ol.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ol);
        this.wzElement = "ol";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.reversed = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.start = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
    }
    ol.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 's') {
            if (name === 'start') {
                this.start = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'r') {
            if (name === 'reversed') {
                this.reversed = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    ol.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return ol;
})(element);

_md.ol = ol;
// element optgroup
var optgroup = (function (element) {
    _inherits(optgroup, element);
    function optgroup(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(optgroup.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, optgroup);
        this.wzElement = "optgroup";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.disabled = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.label = null
    }
    optgroup.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'l') {
            if (name === 'label') {
                this.label = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'd') {
            if (name === 'disabled') {
                this.disabled = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    optgroup.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return optgroup;
})(element);

_md.optgroup = optgroup;
// element option
var option = (function (element) {
    _inherits(option, element);
    function option(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(option.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, option);
        this.wzElement = "option";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.disabled = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.label = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.selected = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.value = null
    }
    option.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'l') {
            if (name === 'label') {
                this.label = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                this.value = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'd') {
            if (name === 'disabled') {
                this.disabled = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 's') {
            if (name === 'selected') {
                this.selected = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    option.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return option;
})(element);

_md.option = option;
// element output
var output = (function (element) {
    _inherits(output, element);
    function output(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(output.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, output);
        this.wzElement = "output";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.for = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.form = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.name = null
    }
    output.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'f') {
            if (name === 'for') {
                this.for = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'form') {
                this.form = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'n') {
            if (name === 'name') {
                this.name = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    output.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return output;
})(element);

_md.output = output;
// element p
var p = (function (element) {
    _inherits(p, element);
    function p(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(p.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, p);
        this.wzElement = "p";
    }
    return p;
})(element);

_md.p = p;
// element param
var param = (function (element) {
    _inherits(param, element);
    function param(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(param.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, param);
        this.wzElement = "param";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.name = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.value = null
    }
    param.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'n') {
            if (name === 'name') {
                this.name = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                this.value = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    param.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return param;
})(element);

_md.param = param;
// element pre
var pre = (function (element) {
    _inherits(pre, element);
    function pre(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(pre.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, pre);
        this.wzElement = "pre";
    }
    return pre;
})(element);

_md.pre = pre;
// element progress
var progress = (function (element) {
    _inherits(progress, element);
    function progress(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(progress.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, progress);
        this.wzElement = "progress";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.value = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.max = null
    }
    progress.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'm') {
            if (name === 'max') {
                this.max = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                this.value = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    progress.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return progress;
})(element);

_md.progress = progress;
// element q
var q = (function (element) {
    _inherits(q, element);
    function q(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(q.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, q);
        this.wzElement = "q";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.cite = null
    }
    q.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'c') {
            if (name === 'cite') {
                this.cite = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    q.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return q;
})(element);

_md.q = q;
// element rb
var rb = (function (element) {
    _inherits(rb, element);
    function rb(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(rb.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, rb);
        this.wzElement = "rb";
    }
    return rb;
})(element);

_md.rb = rb;
// element rp
var rp = (function (element) {
    _inherits(rp, element);
    function rp(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(rp.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, rp);
        this.wzElement = "rp";
    }
    return rp;
})(element);

_md.rp = rp;
// element rt
var rt = (function (element) {
    _inherits(rt, element);
    function rt(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(rt.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, rt);
        this.wzElement = "rt";
    }
    return rt;
})(element);

_md.rt = rt;
// element rtc
var rtc = (function (element) {
    _inherits(rtc, element);
    function rtc(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(rtc.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, rtc);
        this.wzElement = "rtc";
    }
    return rtc;
})(element);

_md.rtc = rtc;
// element rub
var rub = (function (element) {
    _inherits(rub, element);
    function rub(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(rub.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, rub);
        this.wzElement = "rub";
    }
    return rub;
})(element);

_md.rub = rub;
// element s
var s = (function (element) {
    _inherits(s, element);
    function s(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(s.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, s);
        this.wzElement = "s";
    }
    return s;
})(element);

_md.s = s;
// element samp
var samp = (function (element) {
    _inherits(samp, element);
    function samp(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(samp.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, samp);
        this.wzElement = "samp";
    }
    return samp;
})(element);

_md.samp = samp;
// element script
var script = (function (element) {
    _inherits(script, element);
    function script(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(script.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, script);
        this.wzElement = "script";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.src = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.charset = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.async = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.defer = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.crossorigin = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.nonce = null
        this.js_module_items = [];
    }
    script.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 's') {
            if (name === 'src') {
                this.src = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'a') {
            if (name === 'async') {
                this.async = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'd') {
            if (name === 'defer') {
                this.defer = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'n') {
            if (name === 'nonce') {
                this.nonce = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'm') {
            if (name === 'module') {
                // generated by wizzi/lib/wizzi/models/bootstrap/t/wfschema/t/element_load;
                this.js_module_items.push(child);
                var err, wizziModel;
                this.wzRoot().wzFactory.loadModelFromMtree( //;
                    'js',  //;
                    { nodes: [ child ], loadHistory: this.wzRoot().loadHistory }, //;
                    function(cberr, cbwizziModel) { //;
                        err = cberr;
                        wizziModel = cbwizziModel;
                    });
                this.get_js = function(callback) { //;
                    // We must wait until the async loadModelFromMtree(..) has returned a wizziModel or an err;
                    var iv = setInterval(function() { //;
                        if (err || wizziModel) { //;
                            clearInterval(iv);
                            if (callback) { //;
                                callback(err, wizziModel);
                                callback = null;
                            } //;
                        } //;
                    }, 100);
                };
                return true;
            }
        }
        if (_l == 7 && _ch == 'c') {
            if (name === 'charset') {
                this.charset = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'c') {
            if (name === 'crossorigin') {
                this.crossorigin = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    script.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return script;
})(element);

_md.script = script;
// element section
var section = (function (element) {
    _inherits(section, element);
    function section(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(section.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, section);
        this.wzElement = "section";
    }
    return section;
})(element);

_md.section = section;
// element select
var select = (function (element) {
    _inherits(select, element);
    function select(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(select.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, select);
        this.wzElement = "select";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.autocomplete = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.autofocus = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.disabled = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.form = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.multiple = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.name = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.required = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.size = null
    }
    select.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'f') {
            if (name === 'form') {
                this.form = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'n') {
            if (name === 'name') {
                this.name = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 's') {
            if (name === 'size') {
                this.size = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'd') {
            if (name === 'disabled') {
                this.disabled = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'm') {
            if (name === 'multiple') {
                this.multiple = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'r') {
            if (name === 'required') {
                this.required = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'a') {
            if (name === 'autofocus') {
                this.autofocus = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 'a') {
            if (name === 'autocomplete') {
                this.autocomplete = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    select.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return select;
})(element);

_md.select = select;
// element small
var small = (function (element) {
    _inherits(small, element);
    function small(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(small.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, small);
        this.wzElement = "small";
    }
    return small;
})(element);

_md.small = small;
// element source
var source = (function (element) {
    _inherits(source, element);
    function source(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(source.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, source);
        this.wzElement = "source";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.src = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
    }
    source.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 's') {
            if (name === 'src') {
                this.src = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    source.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return source;
})(element);

_md.source = source;
// element span
var span = (function (element) {
    _inherits(span, element);
    function span(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(span.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, span);
        this.wzElement = "span";
    }
    return span;
})(element);

_md.span = span;
// element strong
var strong = (function (element) {
    _inherits(strong, element);
    function strong(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(strong.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, strong);
        this.wzElement = "strong";
    }
    return strong;
})(element);

_md.strong = strong;
// element sub
var sub = (function (element) {
    _inherits(sub, element);
    function sub(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(sub.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, sub);
        this.wzElement = "sub";
    }
    return sub;
})(element);

_md.sub = sub;
// element summary
var summary = (function (element) {
    _inherits(summary, element);
    function summary(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(summary.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, summary);
        this.wzElement = "summary";
    }
    return summary;
})(element);

_md.summary = summary;
// element sup
var sup = (function (element) {
    _inherits(sup, element);
    function sup(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(sup.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, sup);
        this.wzElement = "sup";
    }
    return sup;
})(element);

_md.sup = sup;
// element table
var table = (function (element) {
    _inherits(table, element);
    function table(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(table.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, table);
        this.wzElement = "table";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.sortable = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.border = null
    }
    table.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 6 && _ch == 'b') {
            if (name === 'border') {
                this.border = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 's') {
            if (name === 'sortable') {
                this.sortable = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    table.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return table;
})(element);

_md.table = table;
// element tbody
var tbody = (function (element) {
    _inherits(tbody, element);
    function tbody(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(tbody.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, tbody);
        this.wzElement = "tbody";
    }
    return tbody;
})(element);

_md.tbody = tbody;
// element td
var td = (function (element) {
    _inherits(td, element);
    function td(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(td.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, td);
        this.wzElement = "td";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.colspan = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.rowspan = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.headers = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.align = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.width = null
    }
    td.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'a') {
            if (name === 'align') {
                this.align = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'w') {
            if (name === 'width') {
                this.width = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'c') {
            if (name === 'colspan') {
                this.colspan = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'h') {
            if (name === 'headers') {
                this.headers = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'r') {
            if (name === 'rowspan') {
                this.rowspan = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    td.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return td;
})(element);

_md.td = td;
// element template
var template = (function (element) {
    _inherits(template, element);
    function template(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(template.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, template);
        this.wzElement = "template";
    }
    return template;
})(element);

_md.template = template;
// element textarea
var textarea = (function (element) {
    _inherits(textarea, element);
    function textarea(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(textarea.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, textarea);
        this.wzElement = "textarea";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.autofocus = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.cols = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.dirname = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.disabled = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.form = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.inputmode = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.maxlength = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.minlength = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.name = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.placeholder = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.readonly = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.required = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.rows = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.wrap = null
    }
    textarea.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'c') {
            if (name === 'cols') {
                this.cols = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'form') {
                this.form = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'n') {
            if (name === 'name') {
                this.name = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'r') {
            if (name === 'rows') {
                this.rows = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'w') {
            if (name === 'wrap') {
                this.wrap = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'd') {
            if (name === 'dirname') {
                this.dirname = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'd') {
            if (name === 'disabled') {
                this.disabled = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'r') {
            if (name === 'readonly') {
                this.readonly = child.v; return true;
            }
            else if (name === 'required') {
                this.required = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'a') {
            if (name === 'autofocus') {
                this.autofocus = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'i') {
            if (name === 'inputmode') {
                this.inputmode = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'm') {
            if (name === 'maxlength') {
                this.maxlength = child.v; return true;
            }
            else if (name === 'minlength') {
                this.minlength = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'p') {
            if (name === 'placeholder') {
                this.placeholder = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    textarea.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return textarea;
})(element);

_md.textarea = textarea;
// element tfoot
var tfoot = (function (element) {
    _inherits(tfoot, element);
    function tfoot(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(tfoot.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, tfoot);
        this.wzElement = "tfoot";
    }
    return tfoot;
})(element);

_md.tfoot = tfoot;
// element th
var th = (function (element) {
    _inherits(th, element);
    function th(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(th.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, th);
        this.wzElement = "th";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.colspan = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.rowspan = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.headers = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.align = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.width = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.scope = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.sorted = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.abbr = null
    }
    th.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'a') {
            if (name === 'abbr') {
                this.abbr = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'a') {
            if (name === 'align') {
                this.align = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 's') {
            if (name === 'scope') {
                this.scope = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'w') {
            if (name === 'width') {
                this.width = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'sorted') {
                this.sorted = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'c') {
            if (name === 'colspan') {
                this.colspan = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'h') {
            if (name === 'headers') {
                this.headers = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'r') {
            if (name === 'rowspan') {
                this.rowspan = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    th.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return th;
})(element);

_md.th = th;
// element thead
var thead = (function (element) {
    _inherits(thead, element);
    function thead(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(thead.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, thead);
        this.wzElement = "thead";
    }
    return thead;
})(element);

_md.thead = thead;
// element time
var time = (function (element) {
    _inherits(time, element);
    function time(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(time.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, time);
        this.wzElement = "time";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.datetime = null
    }
    time.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 8 && _ch == 'd') {
            if (name === 'datetime') {
                this.datetime = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    time.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return time;
})(element);

_md.time = time;
// element tr
var tr = (function (element) {
    _inherits(tr, element);
    function tr(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(tr.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, tr);
        this.wzElement = "tr";
    }
    return tr;
})(element);

_md.tr = tr;
// element track
var track = (function (element) {
    _inherits(track, element);
    function track(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(track.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, track);
        this.wzElement = "track";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.default = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.kind = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.label = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.src = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.srclang = null
    }
    track.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 's') {
            if (name === 'src') {
                this.src = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'k') {
            if (name === 'kind') {
                this.kind = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'l') {
            if (name === 'label') {
                this.label = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'd') {
            if (name === 'default') {
                this.default = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 's') {
            if (name === 'srclang') {
                this.srclang = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    track.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return track;
})(element);

_md.track = track;
// element u
var u = (function (element) {
    _inherits(u, element);
    function u(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(u.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, u);
        this.wzElement = "u";
    }
    return u;
})(element);

_md.u = u;
// element ul
var ul = (function (element) {
    _inherits(ul, element);
    function ul(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ul.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ul);
        this.wzElement = "ul";
    }
    return ul;
})(element);

_md.ul = ul;
// element xvar
var xvar = (function (element) {
    _inherits(xvar, element);
    function xvar(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xvar.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xvar);
        this.wzElement = "xvar";
    }
    return xvar;
})(element);

_md.xvar = xvar;
// element video
var video = (function (element) {
    _inherits(video, element);
    function video(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(video.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, video);
        this.wzElement = "video";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.src = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.crossorigin = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.poster = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.preload = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.autoplay = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.mediagroup = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.loop = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.muted = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.controls = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.width = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.height = null
    }
    video.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 's') {
            if (name === 'src') {
                this.src = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'l') {
            if (name === 'loop') {
                this.loop = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'm') {
            if (name === 'muted') {
                this.muted = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'w') {
            if (name === 'width') {
                this.width = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'h') {
            if (name === 'height') {
                this.height = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'p') {
            if (name === 'poster') {
                this.poster = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'p') {
            if (name === 'preload') {
                this.preload = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'a') {
            if (name === 'autoplay') {
                this.autoplay = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'c') {
            if (name === 'controls') {
                this.controls = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'm') {
            if (name === 'mediagroup') {
                this.mediagroup = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'c') {
            if (name === 'crossorigin') {
                this.crossorigin = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    video.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return video;
})(element);

_md.video = video;
// element wbr
var wbr = (function (element) {
    _inherits(wbr, element);
    function wbr(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(wbr.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, wbr);
        this.wzElement = "wbr";
    }
    return wbr;
})(element);

_md.wbr = wbr;
/**
    element attribute
     Used for Html element attributes not declared in this schema.
     The wzName must contain a name-value pair separated by a blank (value is optional).
     Name is the attribute name and value, if not empty, is the attribute value.
*/
var attribute = (function (htmlBase) {
    _inherits(attribute, htmlBase);
    function attribute(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(attribute.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, attribute);
        this.wzElement = "attribute";
    }
    return attribute;
})(htmlBase);

_md.attribute = attribute;
/**
    element _dot
     short for <div class='${wzName}' [ attributes ]>
*/
var _dot = (function (element) {
    _inherits(_dot, element);
    function _dot(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(_dot.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, _dot);
        this.wzElement = "_dot";
    }
    return _dot;
})(element);

_md._dot = _dot;
/**
    element _sharp
     short for <div id='${wzName}' [...]> ...
*/
var _sharp = (function (element) {
    _inherits(_sharp, element);
    function _sharp(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(_sharp.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, _sharp);
        this.wzElement = "_sharp";
    }
    return _sharp;
})(element);

_md._sharp = _sharp;
/**
    element _js
     When has no children is short for
     html4: <script src="${wzName}" type="text/javascript" [ attributes ]></script>
     html5: <script src="${wzName}"></script>
     When has children is the root of an inline script ( script html element )
*/
var _js = (function (element) {
    _inherits(_js, element);
    function _js(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(_js.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, _js);
        this.wzElement = "_js";
        // relation statement
        this.statements = [];
    }
    _js.prototype.addStatement = function(name, sourceLineInfo) {
        var retval = new _md.statement(name, sourceLineInfo);
        retval.wzParent = this;
        this.statements.push(retval);
        return retval;
    }
    _js.prototype.getStatement = function(name) {
        var found = null;
        this.statements.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    _js.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, _md.jsPropertyOrValue, this.statements);
            }
        }
        if (_l == 1 && _ch == '[') {
            if (name === '[') {
                return this.wzLoadToChildColl(child, _md.jsArray, this.statements);
            }
        }
        if (_l == 1 && _ch == '_') {
            if (name === '_') {
                return this.wzLoadToChildColl(child, _md.call, this.statements);
            }
        }
        if (_l == 1 && _ch == '{') {
            if (name === '{') {
                return this.wzLoadToChildColl(child, _md.jsObject, this.statements);
            }
        }
        if (_l == 2 && _ch == 'i') {
            if (name === 'if') {
                return this.wzLoadToChildColl(child, _md.xif, this.statements);
            }
        }
        if (_l == 3 && _ch == 'f') {
            if (name === 'for') {
                return this.wzLoadToChildColl(child, _md.xfor, this.statements);
            }
        }
        if (_l == 3 && _ch == 'l') {
            if (name === 'log') {
                return this.wzLoadToChildColl(child, _md.log, this.statements);
            }
        }
        if (_l == 3 && _ch == 's') {
            if (name === 'set') {
                return this.wzLoadToChildColl(child, _md.set, this.statements);
            }
        }
        if (_l == 3 && _ch == 't') {
            if (name === 'try') {
                return this.wzLoadToChildColl(child, _md.xtry, this.statements);
            }
        }
        if (_l == 3 && _ch == 'v') {
            if (name === 'var') {
                return this.wzLoadToChildColl(child, _md.xvar, this.statements);
            }
        }
        if (_l == 4 && _ch == 'e') {
            if (name === 'elif') {
                return this.wzLoadToChildColl(child, _md.elif, this.statements);
            }
            else if (name === 'else') {
                return this.wzLoadToChildColl(child, _md.xelse, this.statements);
            }
        }
        if (_l == 5 && _ch == 'c') {
            if (name === 'catch') {
                return this.wzLoadToChildColl(child, _md.xcatch, this.statements);
            }
        }
        if (_l == 5 && _ch == 'w') {
            if (name === 'while') {
                return this.wzLoadToChildColl(child, _md.xwhile, this.statements);
            }
        }
        if (_l == 7 && _ch == 'f') {
            if (name === 'foreach') {
                return this.wzLoadToChildColl(child, _md.foreach, this.statements);
            }
        }
        if (_l == 8 && _ch == 'f') {
            if (name === 'function') {
                return this.wzLoadToChildColl(child, _md.xfunction, this.statements);
            }
        }
        if (_l == 9 && _ch == 's') {
            if (name === 'statement') {
                return this.wzLoadToChildColl(child, _md.statement, this.statements);
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    _js.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    _js.prototype.wzVerify = function(ctx) {
        var i, i_len=this.statements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.statements[i];
            item.wzVerify(ctx);
        }
        _md.element.prototype.wzVerify.call(this, ctx);
    }
    _js.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.statements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.statements[i];
            item.wzInitialize(ctx);
        }
        _md.element.prototype.wzInitialize.call(this, ctx);
    }
    return _js;
})(element);

_md._js = _js;
/**
    element jsBabel
     When has no children is short for
     html5: <script src="${wzName}" type="text/babel"></script>
     When has children is the root of an inline script ( script html element )
*/
var jsBabel = (function (element) {
    _inherits(jsBabel, element);
    function jsBabel(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(jsBabel.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsBabel);
        this.wzElement = "jsBabel";
        // relation statement
        this.statements = [];
    }
    jsBabel.prototype.addStatement = function(name, sourceLineInfo) {
        var retval = new _md.statement(name, sourceLineInfo);
        retval.wzParent = this;
        this.statements.push(retval);
        return retval;
    }
    jsBabel.prototype.getStatement = function(name) {
        var found = null;
        this.statements.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    jsBabel.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, _md.jsPropertyOrValue, this.statements);
            }
        }
        if (_l == 1 && _ch == '[') {
            if (name === '[') {
                return this.wzLoadToChildColl(child, _md.jsArray, this.statements);
            }
        }
        if (_l == 1 && _ch == '_') {
            if (name === '_') {
                return this.wzLoadToChildColl(child, _md.call, this.statements);
            }
        }
        if (_l == 1 && _ch == '{') {
            if (name === '{') {
                return this.wzLoadToChildColl(child, _md.jsObject, this.statements);
            }
        }
        if (_l == 2 && _ch == 'i') {
            if (name === 'if') {
                return this.wzLoadToChildColl(child, _md.xif, this.statements);
            }
        }
        if (_l == 3 && _ch == 'f') {
            if (name === 'for') {
                return this.wzLoadToChildColl(child, _md.xfor, this.statements);
            }
        }
        if (_l == 3 && _ch == 'l') {
            if (name === 'log') {
                return this.wzLoadToChildColl(child, _md.log, this.statements);
            }
        }
        if (_l == 3 && _ch == 's') {
            if (name === 'set') {
                return this.wzLoadToChildColl(child, _md.set, this.statements);
            }
        }
        if (_l == 3 && _ch == 't') {
            if (name === 'try') {
                return this.wzLoadToChildColl(child, _md.xtry, this.statements);
            }
        }
        if (_l == 3 && _ch == 'v') {
            if (name === 'var') {
                return this.wzLoadToChildColl(child, _md.xvar, this.statements);
            }
        }
        if (_l == 4 && _ch == 'e') {
            if (name === 'elif') {
                return this.wzLoadToChildColl(child, _md.elif, this.statements);
            }
            else if (name === 'else') {
                return this.wzLoadToChildColl(child, _md.xelse, this.statements);
            }
        }
        if (_l == 5 && _ch == 'c') {
            if (name === 'catch') {
                return this.wzLoadToChildColl(child, _md.xcatch, this.statements);
            }
        }
        if (_l == 5 && _ch == 'w') {
            if (name === 'while') {
                return this.wzLoadToChildColl(child, _md.xwhile, this.statements);
            }
        }
        if (_l == 7 && _ch == 'f') {
            if (name === 'foreach') {
                return this.wzLoadToChildColl(child, _md.foreach, this.statements);
            }
        }
        if (_l == 8 && _ch == 'f') {
            if (name === 'function') {
                return this.wzLoadToChildColl(child, _md.xfunction, this.statements);
            }
        }
        if (_l == 9 && _ch == 's') {
            if (name === 'statement') {
                return this.wzLoadToChildColl(child, _md.statement, this.statements);
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    jsBabel.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    jsBabel.prototype.wzVerify = function(ctx) {
        var i, i_len=this.statements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.statements[i];
            item.wzVerify(ctx);
        }
        _md.element.prototype.wzVerify.call(this, ctx);
    }
    jsBabel.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.statements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.statements[i];
            item.wzInitialize(ctx);
        }
        _md.element.prototype.wzInitialize.call(this, ctx);
    }
    return jsBabel;
})(element);

_md.jsBabel = jsBabel;
// element json
var json = (function (element) {
    _inherits(json, element);
    function json(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(json.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, json);
        this.wzElement = "json";
        this.json___items = [];
    }
    json.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '{') {
            if (name === '{') {
                // generated by wizzi/lib/wizzi/models/bootstrap/t/wfschema/t/element_load;
                this.json___items.push(child);
                var err, wizziModel;
                this.wzRoot().wzFactory.loadModelFromMtree( //;
                    'json',  //;
                    { nodes: [ child ], loadHistory: this.wzRoot().loadHistory }, //;
                    function(cberr, cbwizziModel) { //;
                        err = cberr;
                        wizziModel = cbwizziModel;
                    });
                this.get_json = function(callback) { //;
                    // We must wait until the async loadModelFromMtree(..) has returned a wizziModel or an err;
                    var iv = setInterval(function() { //;
                        if (err || wizziModel) { //;
                            clearInterval(iv);
                            if (callback) { //;
                                callback(err, wizziModel);
                                callback = null;
                            } //;
                        } //;
                    }, 100);
                };
                return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    json.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return json;
})(element);

_md.json = json;
// element ready
var ready = (function (element) {
    _inherits(ready, element);
    function ready(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ready.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ready);
        this.allowedKINDS = [ "jquery", "window"];
        this.KIND_JQUERY = "jquery";
        this.KIND_WINDOW = "window";
        this.wzElement = "ready";
        this.kind = "jquery";
        // relation statement
        this.statements = [];
    }
    ready.KIND_JQUERY = "jquery";
    ready.KIND_WINDOW = "window";
    ready.prototype.addStatement = function(name, sourceLineInfo) {
        var retval = new _md.statement(name, sourceLineInfo);
        retval.wzParent = this;
        this.statements.push(retval);
        return retval;
    }
    ready.prototype.getStatement = function(name) {
        var found = null;
        this.statements.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    ready.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, _md.jsPropertyOrValue, this.statements);
            }
        }
        if (_l == 1 && _ch == '[') {
            if (name === '[') {
                return this.wzLoadToChildColl(child, _md.jsArray, this.statements);
            }
        }
        if (_l == 1 && _ch == '_') {
            if (name === '_') {
                return this.wzLoadToChildColl(child, _md.call, this.statements);
            }
        }
        if (_l == 1 && _ch == '{') {
            if (name === '{') {
                return this.wzLoadToChildColl(child, _md.jsObject, this.statements);
            }
        }
        if (_l == 2 && _ch == 'i') {
            if (name === 'if') {
                return this.wzLoadToChildColl(child, _md.xif, this.statements);
            }
        }
        if (_l == 3 && _ch == 'f') {
            if (name === 'for') {
                return this.wzLoadToChildColl(child, _md.xfor, this.statements);
            }
        }
        if (_l == 3 && _ch == 'l') {
            if (name === 'log') {
                return this.wzLoadToChildColl(child, _md.log, this.statements);
            }
        }
        if (_l == 3 && _ch == 's') {
            if (name === 'set') {
                return this.wzLoadToChildColl(child, _md.set, this.statements);
            }
        }
        if (_l == 3 && _ch == 't') {
            if (name === 'try') {
                return this.wzLoadToChildColl(child, _md.xtry, this.statements);
            }
        }
        if (_l == 3 && _ch == 'v') {
            if (name === 'var') {
                return this.wzLoadToChildColl(child, _md.xvar, this.statements);
            }
        }
        if (_l == 4 && _ch == 'e') {
            if (name === 'elif') {
                return this.wzLoadToChildColl(child, _md.elif, this.statements);
            }
            else if (name === 'else') {
                return this.wzLoadToChildColl(child, _md.xelse, this.statements);
            }
        }
        if (_l == 4 && _ch == 'k') {
            if (name === 'kind') {
                this.kind = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'c') {
            if (name === 'catch') {
                return this.wzLoadToChildColl(child, _md.xcatch, this.statements);
            }
        }
        if (_l == 5 && _ch == 'w') {
            if (name === 'while') {
                return this.wzLoadToChildColl(child, _md.xwhile, this.statements);
            }
        }
        if (_l == 7 && _ch == 'f') {
            if (name === 'foreach') {
                return this.wzLoadToChildColl(child, _md.foreach, this.statements);
            }
        }
        if (_l == 8 && _ch == 'f') {
            if (name === 'function') {
                return this.wzLoadToChildColl(child, _md.xfunction, this.statements);
            }
        }
        if (_l == 9 && _ch == 's') {
            if (name === 'statement') {
                return this.wzLoadToChildColl(child, _md.statement, this.statements);
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    ready.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    ready.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("ready", "kind", this.kind, this.allowedKINDS, this);
        var i, i_len=this.statements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.statements[i];
            item.wzVerify(ctx);
        }
        _md.element.prototype.wzVerify.call(this, ctx);
    }
    ready.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.statements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.statements[i];
            item.wzInitialize(ctx);
        }
        _md.element.prototype.wzInitialize.call(this, ctx);
    }
    return ready;
})(element);

_md.ready = ready;
/**
    element statement
     The base class of a javascript statement in an html ittf document
*/
var statement = (function (htmlBase) {
    _inherits(statement, htmlBase);
    function statement(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(statement.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, statement);
        this.wzElement = "statement";
        // relation statement
        this.statements = [];
    }
    statement.prototype.addStatement = function(name, sourceLineInfo) {
        var retval = new _md.statement(name, sourceLineInfo);
        retval.wzParent = this;
        this.statements.push(retval);
        return retval;
    }
    statement.prototype.getStatement = function(name) {
        var found = null;
        this.statements.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    statement.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, _md.jsPropertyOrValue, this.statements);
            }
        }
        if (_l == 1 && _ch == '[') {
            if (name === '[') {
                return this.wzLoadToChildColl(child, _md.jsArray, this.statements);
            }
        }
        if (_l == 1 && _ch == '_') {
            if (name === '_') {
                return this.wzLoadToChildColl(child, _md.call, this.statements);
            }
        }
        if (_l == 1 && _ch == '{') {
            if (name === '{') {
                return this.wzLoadToChildColl(child, _md.jsObject, this.statements);
            }
        }
        if (_l == 2 && _ch == 'i') {
            if (name === 'if') {
                return this.wzLoadToChildColl(child, _md.xif, this.statements);
            }
        }
        if (_l == 3 && _ch == 'f') {
            if (name === 'for') {
                return this.wzLoadToChildColl(child, _md.xfor, this.statements);
            }
        }
        if (_l == 3 && _ch == 'l') {
            if (name === 'log') {
                return this.wzLoadToChildColl(child, _md.log, this.statements);
            }
        }
        if (_l == 3 && _ch == 's') {
            if (name === 'set') {
                return this.wzLoadToChildColl(child, _md.set, this.statements);
            }
        }
        if (_l == 3 && _ch == 't') {
            if (name === 'try') {
                return this.wzLoadToChildColl(child, _md.xtry, this.statements);
            }
        }
        if (_l == 3 && _ch == 'v') {
            if (name === 'var') {
                return this.wzLoadToChildColl(child, _md.xvar, this.statements);
            }
        }
        if (_l == 4 && _ch == 'e') {
            if (name === 'elif') {
                return this.wzLoadToChildColl(child, _md.elif, this.statements);
            }
            else if (name === 'else') {
                return this.wzLoadToChildColl(child, _md.xelse, this.statements);
            }
        }
        if (_l == 5 && _ch == 'c') {
            if (name === 'catch') {
                return this.wzLoadToChildColl(child, _md.xcatch, this.statements);
            }
        }
        if (_l == 5 && _ch == 'w') {
            if (name === 'while') {
                return this.wzLoadToChildColl(child, _md.xwhile, this.statements);
            }
        }
        if (_l == 7 && _ch == 'f') {
            if (name === 'foreach') {
                return this.wzLoadToChildColl(child, _md.foreach, this.statements);
            }
        }
        if (_l == 8 && _ch == 'f') {
            if (name === 'function') {
                return this.wzLoadToChildColl(child, _md.xfunction, this.statements);
            }
        }
        if (_l == 9 && _ch == 's') {
            if (name === 'statement') {
                return this.wzLoadToChildColl(child, _md.statement, this.statements);
            }
        }
        return ok;
    }
    statement.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    statement.prototype.wzVerify = function(ctx) {
        var i, i_len=this.statements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.statements[i];
            item.wzVerify(ctx);
        }
        _md.htmlBase.prototype.wzVerify.call(this, ctx);
    }
    statement.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.statements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.statements[i];
            item.wzInitialize(ctx);
        }
        _md.htmlBase.prototype.wzInitialize.call(this, ctx);
    }
    return statement;
})(htmlBase);

_md.statement = statement;
// element xvar
var xvar = (function (statement) {
    _inherits(xvar, statement);
    function xvar(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xvar.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xvar);
        this.wzElement = "xvar";
    }
    return xvar;
})(statement);

_md.xvar = xvar;
// element xfunction
var xfunction = (function (statement) {
    _inherits(xfunction, statement);
    function xfunction(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xfunction.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xfunction);
        this.wzElement = "xfunction";
        // relation param
        this.params = [];
    }
    xfunction.prototype.addParam = function(name, sourceLineInfo) {
        var retval = new _md.param(name, sourceLineInfo);
        retval.wzParent = this;
        this.params.push(retval);
        return retval;
    }
    xfunction.prototype.getParam = function(name) {
        var found = null;
        this.params.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xfunction.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'p') {
            if (name === 'param') {
                return this.wzLoadToChildColl(child, _md.param, this.params);
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    xfunction.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    xfunction.prototype.wzVerify = function(ctx) {
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzVerify(ctx);
        }
        _md.statement.prototype.wzVerify.call(this, ctx);
    }
    xfunction.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzInitialize(ctx);
        }
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    xfunction.prototype.getParams = function() {
        var ret = [];
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            ret.push(item.wzName);
        }
        return ret;
    }
    return xfunction;
})(statement);

_md.xfunction = xfunction;
// element set
var set = (function (statement) {
    _inherits(set, statement);
    function set(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(set.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, set);
        this.wzElement = "set";
    }
    return set;
})(statement);

_md.set = set;
// element call
var call = (function (statement) {
    _inherits(call, statement);
    function call(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(call.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, call);
        this.wzElement = "call";
    }
    return call;
})(statement);

_md.call = call;
// element xif
var xif = (function (statement) {
    _inherits(xif, statement);
    function xif(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xif.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xif);
        this.wzElement = "xif";
    }
    return xif;
})(statement);

_md.xif = xif;
// element elif
var elif = (function (statement) {
    _inherits(elif, statement);
    function elif(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(elif.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, elif);
        this.wzElement = "elif";
    }
    return elif;
})(statement);

_md.elif = elif;
// element xelse
var xelse = (function (statement) {
    _inherits(xelse, statement);
    function xelse(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xelse.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xelse);
        this.wzElement = "xelse";
    }
    return xelse;
})(statement);

_md.xelse = xelse;
// element xfor
var xfor = (function (statement) {
    _inherits(xfor, statement);
    function xfor(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xfor.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xfor);
        this.wzElement = "xfor";
    }
    return xfor;
})(statement);

_md.xfor = xfor;
// element foreach
var foreach = (function (statement) {
    _inherits(foreach, statement);
    function foreach(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(foreach.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, foreach);
        this.wzElement = "foreach";
    }
    return foreach;
})(statement);

_md.foreach = foreach;
// element xwhile
var xwhile = (function (statement) {
    _inherits(xwhile, statement);
    function xwhile(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xwhile.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xwhile);
        this.wzElement = "xwhile";
    }
    return xwhile;
})(statement);

_md.xwhile = xwhile;
// element xtry
var xtry = (function (statement) {
    _inherits(xtry, statement);
    function xtry(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xtry.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xtry);
        this.wzElement = "xtry";
    }
    return xtry;
})(statement);

_md.xtry = xtry;
// element xcatch
var xcatch = (function (statement) {
    _inherits(xcatch, statement);
    function xcatch(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xcatch.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xcatch);
        this.wzElement = "xcatch";
    }
    return xcatch;
})(statement);

_md.xcatch = xcatch;
// element jsObject
var jsObject = (function (statement) {
    _inherits(jsObject, statement);
    function jsObject(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(jsObject.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsObject);
        this.wzElement = "jsObject";
    }
    return jsObject;
})(statement);

_md.jsObject = jsObject;
// element jsArray
var jsArray = (function (statement) {
    _inherits(jsArray, statement);
    function jsArray(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(jsArray.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsArray);
        this.wzElement = "jsArray";
    }
    return jsArray;
})(statement);

_md.jsArray = jsArray;
// element jsPropertyOrValue
var jsPropertyOrValue = (function (statement) {
    _inherits(jsPropertyOrValue, statement);
    function jsPropertyOrValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(jsPropertyOrValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsPropertyOrValue);
        this.wzElement = "jsPropertyOrValue";
    }
    return jsPropertyOrValue;
})(statement);

_md.jsPropertyOrValue = jsPropertyOrValue;
// element log
var log = (function (statement) {
    _inherits(log, statement);
    function log(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(log.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, log);
        this.wzElement = "log";
    }
    return log;
})(statement);

_md.log = log;
/**
    element _css
     When has no children is short for <link href="${wzName}" rel="stylesheet" [ attributes ]>
     When has children is the root of an inline stylesheet ( style html element )
*/
var _css = (function (element) {
    _inherits(_css, element);
    function _css(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(_css.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, _css);
        this.wzElement = "_css";
        // relation rule
        this.rules = [];
    }
    _css.prototype.getRule = function(name) {
        var found = null;
        this.rules.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    _css.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.idRule, this.rules);
            }
        }
        if (_l == 1 && _ch == '.') {
            if (name === '.') {
                return this.wzLoadToChildColl(child, _md.classRule, this.rules);
            }
        }
        if (_l == 1 && _ch == '<') {
            if (name === '<') {
                return this.wzLoadToChildColl(child, _md.elementRule, this.rules);
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    _css.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    _css.prototype.wzVerify = function(ctx) {
        var i, i_len=this.rules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.rules[i];
            item.wzVerify(ctx);
        }
        _md.element.prototype.wzVerify.call(this, ctx);
    }
    _css.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.rules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.rules[i];
            item.wzInitialize(ctx);
        }
        _md.element.prototype.wzInitialize.call(this, ctx);
    }
    return _css;
})(element);

_md._css = _css;
/**
    element rule
     The base abstract rule.
     It has a child relation (one-to-many) with itself so one
     can declare a tree with unlimited deep.
*/
var rule = (function (htmlBase) {
    _inherits(rule, htmlBase);
    function rule(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(rule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, rule);
        this.wzElement = "rule";
        // relation otherRuleSelector
        this.otherRuleSelectors = [];
        // relation property
        this.properties = [];
        // relation rule
        this.rules = [];
    }
    rule.prototype.addOtherRuleSelector = function(name, sourceLineInfo) {
        var retval = new _md.otherRuleSelector(name, sourceLineInfo);
        retval.wzParent = this;
        this.otherRuleSelectors.push(retval);
        return retval;
    }
    rule.prototype.getOtherRuleSelector = function(name) {
        var found = null;
        this.otherRuleSelectors.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    rule.prototype.addProperty = function(name, sourceLineInfo) {
        var retval = new _md.property(name, sourceLineInfo);
        retval.wzParent = this;
        this.properties.push(retval);
        return retval;
    }
    rule.prototype.getProperty = function(name) {
        var found = null;
        this.properties.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    rule.prototype.getRule = function(name) {
        var found = null;
        this.rules.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    rule.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.idRule, this.rules);
            }
        }
        if (_l == 1 && _ch == '+') {
            if (name === '+') {
                return this.wzLoadToChildColl(child, _md.otherRuleSelector, this.otherRuleSelectors);
            }
        }
        if (_l == 1 && _ch == '.') {
            if (name === '.') {
                return this.wzLoadToChildColl(child, _md.classRule, this.rules);
            }
        }
        if (_l == 1 && _ch == '<') {
            if (name === '<') {
                return this.wzLoadToChildColl(child, _md.elementRule, this.rules);
            }
        }
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, _md.property, this.properties);
            }
        }
        return ok;
    }
    rule.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    rule.prototype.wzVerify = function(ctx) {
        var i, i_len=this.otherRuleSelectors.length, item;
        for (i=0; i<i_len; i++) {
            item = this.otherRuleSelectors[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.rules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.rules[i];
            item.wzVerify(ctx);
        }
        _md.htmlBase.prototype.wzVerify.call(this, ctx);
    }
    rule.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.otherRuleSelectors.length, item;
        for (i=0; i<i_len; i++) {
            item = this.otherRuleSelectors[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.rules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.rules[i];
            item.wzInitialize(ctx);
        }
        this.ruleParts = this.getAscendingRuleParts();
        this.canHaveContent = ['idRule', 'classRule', 'elementRule', 'gtRule', 'ampersand', 'placeholder'].indexOf(this.wzElement) > -1;
        _md.htmlBase.prototype.wzInitialize.call(this, ctx);
    }
    rule.prototype.getAscendingRuleParts = function() {
        if (typeof this.wzName === 'string' && this.wzName.length > 0) {
            var ruleParts = this.wzName.trim().split(',');
            if (ruleParts.length > 0) {
                if (this.wzElement === 'idRule') {
                    ruleParts[0] = '#' + ruleParts[0];
                }
                else if (this.wzElement === 'classRule') {
                    ruleParts[0] = '.' + ruleParts[0];
                }
            }
            if (this.wzParent && this.wzParent.getAscendingRuleParts) {
                var parentRuleParts = this.wzParent.getAscendingRuleParts();
                var ret = [];
                var i, i_len=parentRuleParts.length, prp;
                for (i=0; i<i_len; i++) {
                    prp = parentRuleParts[i];
                    var j, j_len=ruleParts.length, rp;
                    for (j=0; j<j_len; j++) {
                        rp = ruleParts[j];
                        ret.push(prp + ' ' + rp);
                    }
                }
                return ret;
            }
            else {
                return ruleParts;
            }
        }
        else {
            return [];
        }
    }
    rule.prototype.findRuleBySelector = function(name) {
        if (this.canHaveContent && this.getSelector() === name) {
            return this;
        }
        var ret = null;
        var i, i_len=this.rules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.rules[i];
            ret = item.findRuleBySelector(name);
            if (ret) {
                return ret;
            }
        }
        return ret;
    }
    rule.prototype.hasContent = function() {
        var i, i_len=this.rules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.rules[i];
            if (item.canHaveContent) {
                return true;
            }
        }
        return this.getProperties().length > 0;
    }
    rule.prototype.getSelector = function(final) {
        if (final && this.wzElement === 'placeholder') {
            return this.parentRuleParts.slice(1).join(', ');
        }
        else {
            return this.parentRuleParts.join(', ');
        }
    }
    rule.prototype.getProperties = function() {
        var retval = [];
        var i, i_len=this.properties.length, prop;
        for (i=0; i<i_len; i++) {
            prop = this.properties[i];
            if (prop.wzElement === 'property') {
                var p = verify.parseNameValue(prop.wzName, prop);
                if (prop.properties.length > 0) {
                    if (p.hasValue()) {
                        retval.push({ name: p.name(), value: p.value() });
                    }
                    var j, j_len=prop.properties.length, nestedprop;
                    for (j=0; j<j_len; j++) {
                        nestedprop = prop.properties[j];
                        var p_nested = lineParser.parseNameValueRaw(nestedprop.wzName, nestedprop);
                        retval.push({ name: p.name() + '-' + p_nested.name(), value: p_nested.value() });
                    }
                }
                else {
                    if (p.hasValue()) {
                        retval.push({ name: p.name(), value: p.value() });
                    }
                }
            }
        }
        return retval;
    }
    return rule;
})(htmlBase);

_md.rule = rule;
/**
    element elementRule
     The element rule
     The wzName contain the selector(s)
*/
var elementRule = (function (rule) {
    _inherits(elementRule, rule);
    function elementRule(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(elementRule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, elementRule);
        this.wzElement = "elementRule";
    }
    return elementRule;
})(rule);

_md.elementRule = elementRule;
/**
    element classRule
     The class rule
     The wzName contain the selector(s)
*/
var classRule = (function (rule) {
    _inherits(classRule, rule);
    function classRule(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(classRule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, classRule);
        this.wzElement = "classRule";
    }
    return classRule;
})(rule);

_md.classRule = classRule;
/**
    element idRule
     The id rule
     The wzName contain the selector(s)
*/
var idRule = (function (rule) {
    _inherits(idRule, rule);
    function idRule(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(idRule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, idRule);
        this.wzElement = "idRule";
    }
    return idRule;
})(rule);

_md.idRule = idRule;
/**
    element otherRuleSelector
     The wzName contains other selector(s) to add to those of the parent rule
     In case of a rule with many selectors allow the declaration on many nodes
     Example
     < td
     + span
     + li
     + ...
     for: td, span, li, ...
*/
var otherRuleSelector = (function (htmlBase) {
    _inherits(otherRuleSelector, htmlBase);
    function otherRuleSelector(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(otherRuleSelector.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, otherRuleSelector);
        this.wzElement = "otherRuleSelector";
    }
    return otherRuleSelector;
})(htmlBase);

_md.otherRuleSelector = otherRuleSelector;
/**
    element property
     A generic rule property.
     You should find a proper schema element that extends this one for every valid css3 property.
     In any case this element is not abstract and can be used for eventual missing properties.
     In this case must contain a name-value pair separated by a blank: name is
     the property name and value is the property value.
*/
var property = (function (htmlBase) {
    _inherits(property, htmlBase);
    function property(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(property.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, property);
        this.wzElement = "property";
        // relation property
        // Nested property
        this.properties = [];
    }
    property.prototype.addProperty = function(name, sourceLineInfo) {
        var retval = new _md.property(name, sourceLineInfo);
        retval.wzParent = this;
        this.properties.push(retval);
        return retval;
    }
    property.prototype.getProperty = function(name) {
        var found = null;
        this.properties.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    property.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, _md.property, this.properties);
            }
        }
        return ok;
    }
    property.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    property.prototype.wzVerify = function(ctx) {
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzVerify(ctx);
        }
        _md.htmlBase.prototype.wzVerify.call(this, ctx);
    }
    property.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzInitialize(ctx);
        }
        _md.htmlBase.prototype.wzInitialize.call(this, ctx);
    }
    return property;
})(htmlBase);

_md.property = property;
/**
    element _text
     The wzName becomes a TEXTNODE rewritten inline in the output document.
*/
var _text = (function (element) {
    _inherits(_text, element);
    function _text(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(_text.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, _text);
        this.wzElement = "_text";
    }
    return _text;
})(element);

_md._text = _text;
/**
    element _textLF
     The wzName becomes a TEXTNODE rewritten in the output document followed by a LF char.
*/
var _textLF = (function (element) {
    _inherits(_textLF, element);
    function _textLF(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(_textLF.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, _textLF);
        this.wzElement = "_textLF";
    }
    return _textLF;
})(element);

_md._textLF = _textLF;
/**
    element comment
     The wzName is the comment text.
*/
var comment = (function (element) {
    _inherits(comment, element);
    function comment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(comment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, comment);
        this.wzElement = "comment";
    }
    return comment;
})(element);

_md.comment = comment;
/**
    element _title
     The title html element.
     The title tag is ambiguous it can be both a global attribute and a child element.
*/
var _title = (function (element) {
    _inherits(_title, element);
    function _title(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(_title.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, _title);
        this.wzElement = "_title";
    }
    return _title;
})(element);

_md._title = _title;
/**
    element _style
     The html style element.
     The style tag is ambiguous it can be both a global attribute and a child element.
*/
var _style = (function (element) {
    _inherits(_style, element);
    function _style(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(_style.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, _style);
        this.wzElement = "_style";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.media = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.nonce = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.scoped = null
        this.css_css_items = [];
    }
    _style.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'c') {
            if (name === 'css') {
                // generated by wizzi/lib/wizzi/models/bootstrap/t/wfschema/t/element_load;
                this.css_css_items.push(child);
                var err, wizziModel;
                this.wzRoot().wzFactory.loadModelFromMtree( //;
                    'css',  //;
                    { nodes: [ child ], loadHistory: this.wzRoot().loadHistory }, //;
                    function(cberr, cbwizziModel) { //;
                        err = cberr;
                        wizziModel = cbwizziModel;
                    });
                this.get_css = function(callback) { //;
                    // We must wait until the async loadModelFromMtree(..) has returned a wizziModel or an err;
                    var iv = setInterval(function() { //;
                        if (err || wizziModel) { //;
                            clearInterval(iv);
                            if (callback) { //;
                                callback(err, wizziModel);
                                callback = null;
                            } //;
                        } //;
                    }, 100);
                };
                return true;
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'm') {
            if (name === 'media') {
                this.media = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'n') {
            if (name === 'nonce') {
                this.nonce = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'scoped') {
                this.scoped = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    _style.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return _style;
})(element);

_md._style = _style;
/**
    element lorem
     the wzName = count
*/
var lorem = (function (element) {
    _inherits(lorem, element);
    function lorem(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(lorem.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, lorem);
        this.allowedUNITS = [ "words", "sentences", "paragraphs"];
        this.UNITS_WORDS = "words";
        this.UNITS_SENTENCES = "sentences";
        this.UNITS_PARAGRAPHS = "paragraphs";
        this.wzElement = "lorem";
        this.units = "words";
        this.minWords = "5";
        this.maxWords = "15";
        this.minSentences = "3";
        this.maxSentences = "7";
        this.htmlTag = "p";
    }
    lorem.UNITS_WORDS = "words";
    lorem.UNITS_SENTENCES = "sentences";
    lorem.UNITS_PARAGRAPHS = "paragraphs";
    lorem.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'u') {
            if (name === 'units') {
                this.units = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'h') {
            if (name === 'html-tag') {
                this.htmlTag = child.v; return true;
            }
            else if (name === 'html_tag') {
                this.htmlTag = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'm') {
            if (name === 'min-words') {
                this.minWords = child.v; return true;
            }
            else if (name === 'min_words') {
                this.minWords = child.v; return true;
            }
            else if (name === 'max-words') {
                this.maxWords = child.v; return true;
            }
            else if (name === 'max_words') {
                this.maxWords = child.v; return true;
            }
        }
        if (_l == 13 && _ch == 'm') {
            if (name === 'min-sentences') {
                this.minSentences = child.v; return true;
            }
            else if (name === 'min_sentences') {
                this.minSentences = child.v; return true;
            }
            else if (name === 'max-sentences') {
                this.maxSentences = child.v; return true;
            }
            else if (name === 'max_sentences') {
                this.maxSentences = child.v; return true;
            }
        }
        ok = _md.element.prototype.loadChild.call(this, child);
        return ok;
    }
    lorem.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.htmlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    lorem.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("lorem", "units", this.units, this.allowedUNITS, this);
        _md.element.prototype.wzVerify.call(this, ctx);
    }
    return lorem;
})(element);

_md.lorem = lorem;
_md.__tagElementMapping = { '@': 'attribute', '<': 'element', 'var': 'xvar', '.': '_dot', '#': '_sharp', 'js': '_js', 'js-babel': 'jsBabel', 'jsbabel': 'jsBabel', 'css': '_css', '+': '_text', '++': '_textLF', '-': 'comment', '@title': '_title', '@style': '_style', 'function': 'xfunction', '_': 'call', 'if': 'xif', 'else': 'xelse', 'for': 'xfor', 'while': 'xwhile', 'try': 'xtry', 'catch': 'xcatch', '{': 'jsObject', '[': 'jsArray' };
// model/replaceUnknownElement( )
var htmlModelException = (function () {
    function htmlModelException(message, node, instance) {
        _classCallCheck(this, htmlModelException);
        // TODO node seems superflous
        if (node && instance) {
            this.message = message + ', wzElement: ' + node.wzElement + ', wzName:' + (node.wzName || '') + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        console.log('message', this.message);
        this.stack = (new Error()).stack;
        this.node = node;
    }
    return htmlModelException;
})();

_md.htmlModelException = htmlModelException;
var htmlContext = (function () {
    function htmlContext() {
        _classCallCheck(this, htmlContext);
        this.validationErrors = [];
    }
    htmlContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    htmlContext.prototype.addError = function(message, node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at);
    }
    htmlContext.prototype.verifyEnum = function(valueType, valueName, value, allowed, node) {
        if (value && allowed.indexOf(value) < 0) {
            var allowedStr = 'allowed: ' + allowed.join(', ');
            this.validationErrors.push(valueType + ' ' + valueName + ' has an invalid value: ' + value + ' ' + allowedStr + '. At ' + (node.wzSourceLineInfo ? node.wzSourceLineInfo.toString(node) : 'location unavailable'));
        }
    }
    return htmlContext;
})();

_md.htmlContext = htmlContext;
function parsestring(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}
function isBoolean(value) {
    return value === 'true' || value === 'false';
}

