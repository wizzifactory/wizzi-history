$group

	vfile/m( getFiles, readdirSync, options )
		set options
			_ Object.assign
				{
				@ GET_FILES_DEFAULTS
				@ options || {}

		$append async
			# log 'wizzi-utils.vfile.getFiles', path_string, options
			var that = this
			
			function getItems
				param callback
				_ that.isDirectory
					@ path_string
					f_cb( isDirectory )
						# log 'wizzi-utils.vfile.getFiles.isDirectory', isDirectory
						if isDirectory
							var files
								[ 
							var relPath
								[ 
							_ that._appendFiles
								@ path_string
								@ files
								@ relPath
								@ options
								f_cb( notUsed )
									# log 'wizzi-utils.vfile.getFiles.after_appendFiles.files', files
									return
										_ callback
											@ null
											@ files
						else
							_ that.isFile
								@ path_string
								f_cb( isFile )
									# log 'wizzi-utils.vfile.getFiles.isFile', isFile
									if isFile
										return
											_ callback
												@ null
												[
													{
														@ fullPath unixifyPath(path_string)
														@ relPath path.basename(path_string)
									else
										return
											_ callback
												@ null
												[
			_ getItems
				f_cb( items )
					# log 'wizzi-utils.vfile.getFiles.items', items, options.documentContent
					if options.documentContent
						_ async.map
							@ items
							function
								param item
								param callback
								_ that.read
									@ item.fullPath
									f_cb( content )
										return 
											_ callback
												@ null
												{ 
													@ fullPath item.fullPath
													@ relPath item.relPath
													@ content content
							f_cb( itemsWithContent )
								return
									_ callback
										@ null
										@ itemsWithContent
					else
						return
							_ callback
								@ null
								@ items

		$append sync
			
			var result
			
			if this.isDirectory(path_string)
				var files
					[ 
				var relPath
					[ 
				_ this._appendFiles
					@ path_string
					@ files
					@ relPath
					@ options
				set result = files
			elif this.isFile(path_string)
				set result
					[
						{
							@ fullPath unixifyPath(path_string)
							@ relPath path.basename(path_string)
			else 
				set result = []
			
			if options.documentContent
				var 
					decl resultWithContents
						[ 
					decl content
				foreach item in result
					set content
						_ this.read
							@ item.fullPath
					_ resultWithContents.push
						{ 
							@ fullPath item.fullPath
							@ relPath item.relPath
							@ content content
				return resultWithContents
			else
				return result
    
	vfile/m( _appendFiles, readdirSync, files, relPath, options )

		$append async

			# log 'wizzi-utils.vfile._appendFiles.async.files', files, options

			var that = this
			_ this.fsimpl.readdir
				@ path_string
				f_cb( dir )
					
					# log 'wizzi-utils.vfile._appendFiles.async.dir', dir
					var folders = []
					_ async.map
						@ dir
						function
							param item
							param callback
							var filePath = path.join(path_string, item)
							# log 'wizzi-utils.vfile._appendFiles.filePath', filePath
							_ that.isDirectory
								@ filePath
								f_cb( isDirectory )
									# log 'wizzi-utils.vfile._appendFiles.async.isDirectory', filePath, isDirectory
									if isDirectory
										return
											_ callback
												@ null
												@ (options.deep ? item : null )
									else 
										if !options.extension || verify.endsWith(item, options.extension)
											_ files.push
												{
													@ fullPath filePath
													@ relPath
														_ unixifyPath
															_ path.join
																_ relPath.join('/')
																@ item
										return
											_ callback
												@ null
												@ null
						f_cb( items )

							# log 'wizzi-utils.vfile._appendFiles.async.items', items
							
							var len = items.length
							
							function repeat
								param index
								if index == len
									return 
										_ callback
											@ null
								var item = items[index]
								# log '*** item', item
								if item !== null
									var filePath = path.join(path_string, item)
									var newRelPath = relPath.slice(0)
									_ newRelPath.push(item)
									# log '*** item', item, filePath
									_ that._appendFiles
										@ filePath
										@ files
										@ newRelPath
										@ options
										f_cb( result )
											# log 'wizzi-utils.vfile._appendFiles.deep.async.files', files
											return
												_ repeat
													@ index + 1
								else
									return
										_ repeat
											@ index + 1
							_ repeat(0)

		$append sync
			var dir = this.fsimpl.readdirSync(path_string)
			var folders = []
            foreach item in dir
				var filePath = path.join(path_string, item)
				# log 'wizzi-utils.vfile._appendFiles.filePath', filePath
                if this.isDirectory(filePath)
					if options.deep
						_ folders.push(item)
                else 
                    if !options.extension || verify.endsWith(item, options.extension)
                        _ files.push
							{
								@ fullPath filePath
								@ relPath
									_ unixifyPath
										_ path.join
											_ relPath.join('/')
											@ item
			foreach item in folders
				var filePath = path.join(path_string, item)
                var newRelPath = relPath.slice(0)
                _ newRelPath.push(item)
                _ this._appendFiles(filePath, files, newRelPath, options)
    
