module
    kind jsfile
    
	var util = require('util')
	var path = require('path')
	var chalk = require('chalk')
	var sprintf = require('extsprintf').sprintf
	var errors = require('./errors')
	var regexpExt = require('./regexpExt')
    
	var md
        set module.exports =
            { 

	set md.getAllRegExp = regexpExt.getAllRegExp
	set md.namedRegExp = regexpExt.namedRegExp
	var isAbsolutePathRegExp = new RegExp('^(?:[a-z]+:)?/', 'i')
    
	$include verify/is
	$include verify/validation
	$include verify/convert
	$include verify/texts
	$include verify/paths
	$include verify/parseNameValue

	set md.isArtifact
        function 
            param test
            if !md.isDefined(test) || test === null
                return false
            if !md.isFunction(test.generate)
                return false
            if !md.isFunction(test.toFile)
                return false
            if !md.isFunction(test.generateToFile)
                return false
            return true
    
	set md.getInterfaceMessage
        function 
            return "generate(...), toFile(...), generateToFile(...)"
    
	set md.startsWith
        function 
            param str
            param prefix
			if md.isEmpty(str) || md.isEmpty(prefix)
				return false
            else
				return str.indexOf(prefix) === 0
    
	set md.endsWith
        function 
            param str
            param suffix
			if md.isEmpty(str) || md.isEmpty(suffix)
				return false
            else
				return str.indexOf(suffix, str.length - suffix.length) !== -1
    
	set md.unquote
        function 
            param str
            if md.isString(str) === false
                return str
            if str.length < 2
                return str
            if (str.substr(0, 1) === "'" && str.substr(-1, 1) === "'" && str.substr(1, str.length -2).indexOf("'") == -1) ||
				\b (str.substr(0, 1) === "\"" && str.substr(-1, 1) === "\""  && str.substr(1, str.length -2).indexOf("\"") == -1)
                return str.substr(1, str.length -2)
            else 
                return str
    
	set md.capitalize
        function 
            param str
            if md.isEmpty(str)
                return str
            return str.substr(0, 1).toUpperCase() + str.substr(1)

	set md.dashToCamelCase
        function 
            param str
            if md.isEmpty(str)
                return str
			return
				_ str.replace
					@ /-([a-z])/g
					function
						param g
						return g[1].toUpperCase()
    
	set md.replaceAll
        function 
            param text
            param find
            param replace
            if md.isEmpty(text)
                return text
            # log 'replaceAll', text, '-', find, '-', md.escapeRegExp(find), '-', replace
			return 
                _ text.replace
                    new RegExp
                        _ md.escapeRegExp(find)
                        @ 'g'
                    @ replace
    
	set md.escapeRegExp
		function
			param text
            if md.isEmpty(text)
                return text
			return text.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1")
    
	set md.htmlEscape
        function escape
            param value
            if md.isEmpty(value)
                return value
            set value = md.replaceAll(value, '<', '&lt;')
            set value = md.replaceAll(value, '>', '&gt;')
            return value

	set md.resolveToString
		function
			param paramValue
			if md.isNotEmpty(paramValue)
				return paramValue
			if md.isFunction(paramValue)
				var value = paramValue()
				if md.isNotEmpty(value)
					return value
			return null

	set md.makeInline
			function
				param text
				# 192: └ , 191: ┐ , 190: ¥
				return 
					_ md.replaceAll
						_ md.replaceAll
							_ md.replaceAll
								@ text
								@ '\n'
								@ '¥'
							@ '\r'
							@ '┐'
						@ '$'
						@ '└'

	var win32 = process.platform === 'win32'
	set md.unixifyPath =
        function 
            param path_string
            if win32
                return path_string.replace(/\\/g, '/')
            else 
                return path_string

	$include verify/wzError
	$include verify/assert
	$include verify/errors
	
	function error
		param code
		param method
		param message
		param innerError
		var parameter = null
		if md.isObject(message)
			set parameter = message.parameter
			set message = message.message
		return 
			_ md.error
				@ innerError
				{
					@ name ( md.isNumber(code) ? 'Err-' + code : code )
					@ method 'wizzi-utils.verify.' + method
					@ parameter parameter
					@ sourcePath __filename
				@ message || 'Error message unavailable'