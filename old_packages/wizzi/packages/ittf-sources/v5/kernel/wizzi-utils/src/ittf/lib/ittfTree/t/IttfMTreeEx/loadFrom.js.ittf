$group
	
	m loadFromNode
		param node
		param $params
		set this.name = (node.name || node.n) + (node.tagSuffix || '')
		set this.value = node.value || node.v || ''
		set this.row = node.row || node.r || ''
		set this.col = node.col || node.c || ''
		if node.id
			set this.id = node.id
		if $params && $params.length > 0
			_ this.add('$params', $params, this)
		_ this.__importChilds(node.children)
	
	m __importChilds
		param children
		var added
		if children && children.length
			foreach node in children
				set added 
					_ this.add
						@ (node.name || node.n) + (node.tagSuffix || '')
						@ node.value || node.v || ''
				set added.row = node.row || node.r || ''
				set added.col = node.col || node.c || ''
				if node.id
					set added.id = node.id
				set added.commentState = node.commentState
				_ added.__importChilds
					@ node.children

	m __getVFile
		param options
		param callback
		if options.file
			set this.file = options.file
			return
				_ callback
					@ null
					@ options.file
		else
			# load the default vfile (filesystem or browser)
			var that = this
			return
				_ vfile
					f_cb( file )
						set that.file = file
						return
							_ callback
								@ null
								@ file

	m __loadMTree
		param objFrom
		param options
		param callback

		var that = this
		_ this.__getVFile
			@ options
			f_cb( file )
				set options.file = file
				if verify.isObject(objFrom)
					# log 'ittfMTreeEx.__loadMTree. objFrom is an object'
					if verify.isArray(objFrom.nodes) && objFrom.nodes.length == 1
						_ that.loadFromNode(objFrom.nodes[0], objFrom.$params)
					elif (objFrom.name || objFrom.n) && objFrom.children
						_ that.loadFromNode(objFrom, objFrom.$params)
					else
						return
							_ callback
								{
									@ __is_error true
									@ method 'wizzi-utils.ittfMTreeEx.__loadMTree' 
									@ message 'Invalid object parameter: objFrom. The object is not an mTree object.'
					return
						_ callback
							@ null
							@ that

				elif verify.isNotEmpty(objFrom)
					# log 'ittfMTreeEx.__loadMTree. objFrom is a string'
					set that.model
						{
							@ uri (options.fromString ? 'string://' : objFrom)
							@ dirname (options.fromString ? '' : path.dirname(objFrom))
			
					if options.fromString
						# log 'ittfMTreeEx.__loadMTree. Loading from text string'
						_ asIsLoader.createFromString
							@ objFrom
							@ options
							f_cb( asisMTree )
								set that.content = asisMTree.content
								# log 'ittfMTreeEx.asis.loader.asisMTree.nodes.length', asisMTree.nodes.length, !asisMTree.nodes[0]
								_ that.loadFromNode
									@ asisMTree.nodes[0]
									@ asisMTree.$params
								return
									_ callback
										@ null
										@ that
					else
						# log 'ittfMTreeEx.__loadMTree. Loading from file'
						# load from file using the vfile class
						_ file.isFile
							@ objFrom
							f_cb( isFile )
								if isFile == false
									return
										_ callback
											{
												@ __is_error true
												@ method 'wizzi-utils.ittfMTreeEx.__loadMTree' 
												@ message 'Document not found: ' + objFrom
								else
									_ asIsLoader
										@ objFrom
										@ options
										f_cb( asisMTree )
											set that.content = asisMTree.content
											# log 'ittfMTreeEx.asis.loader.asisMTree.nodes.length', asisMTree.nodes.length, !asisMTree.nodes[0]
											_ that.loadFromNode
												@ asisMTree.nodes[0]
												@ asisMTree.$params
											set that.model.basename = path.basename(objFrom)
											var ss = that.model.basename.split('.')
											set that.model.isIttf = ss[ss.length-1] === 'ittf'
											if that.model.isIttf
												set that.model.schema = ss[ss.length-2].toLowerCase()
												set that.model.seedName = ss.slice(0,-2).join('.')
												if that.model.schema !== 'json'
													set that.model.jsonTwinUri
														_ path.join
															@ that.model.dirname
															@ that.model.seedName + '.json.ittf'
											# log 'ittfMTreeEx.loadFrom.ittf.model', that.model
											return
												_ callback
													@ null
													@ that
				else
					return
						_ callback
							{
								@ __is_error true
								@ method 'wizzi-utils.ittfMTreeEx.__loadMTree' 
								@ message 'Invalid parameter: objFrom'

	m createFrom
		static
		param objFrom
		param options
		param callback
		
		if typeof(callback) === 'undefined' && verify.isFunction(options)
			set callback = options
			set options = {}
		else
			set options = options || {}

		function clean
			param node
			delete node.parent
			delete node.model
			if node.children
				foreach item in node.children
					_ clean(item)
			return node

		var mTree = new IttfMTreeEx()

		_ mTree.__loadMTree
			@ objFrom
			@ options
			f_cb( mTree )
				# log 'wizzi-utils.ittfMTreeEx.createFrom. Received mTree', mTree.name, mTree.value
				if options.clean
					_ clean(mTree)
				_ callback
					@ null
					@ mTree