$group

	#
		$if isWebpackTarget
			# The default fsimpl is 'browser'
		$else
			# The default fsimpl is 'filesystem'
	function default_fs
		param options
		param callback
		if typeof callback === 'undefined'
			set callback = options
			set options = {}

		$if isWebpackTarget

			_ BrowserFS.install(window)
			_ BrowserFS.configure
				{ 
					@ fs "MountableFileSystem"
					{ options
						{ '/tmp'
							@ fs "InMemory"
						{ '/ixdb'
							@ fs "IndexedDB"
							{ options
								@ storeName options.storeName || 'wizziRepo'
				f_cb()
					var fs = BrowserFS.BFSRequire('fs')
					return
						_ callback
							@ null
							_ build_default_fsimpl
								@ fs
								@ 'browser'
		
		$else
			$$ use fs from initial nodejs imports: var fs = require('fs')
			return
				_ callback
					@ null
					_ build_default_fsimpl
						@ fs
						@ 'filesystem'

	function build_default_fsimpl
		param fs
		param kind
		# lstat() is identical to stat(), 
		# except that if path is a symbolic link, 
		# then the link itself is stat-ed, 
		# not the file that it refers to.
		return
			{
				@ kind kind
				@ stat fs.stat
				@ statSync fs.statSync
				@ lstat fs.lstat
				@ lstatSync fs.lstatSync
				@ chmod fs.chmod
				@ chmodSync fs.chmodSync
				@ exists fs.exists
				@ existsSync fs.existsSync
				@ readFile fs.readFile
				@ readFileSync fs.readFileSync
				@ writeFile fs.writeFile
				@ writeFileSync fs.writeFileSync
				@ readdir fs.readdir
				@ readdirSync fs.readdirSync
				@ mkdir fs.mkdir
				@ mkdirSync fs.mkdirSync
				@ rmdir fs.rmdir
				@ rmdirSync fs.rmdirSync
				@ unlink fs.unlink
				@ unlinkSync fs.unlinkSync
				@ rename fs.rename
				@ renameSync fs.renameSync
				@ copyFile fs.copyFile
				@ copyFileSync fs.copyFileSync
				@ createWriteStream fs.createWriteStream
