$group
	
	m isCommand
		return this.name && this.name[0] === '$'

	m isExpressionCommand
		return this.name && ['$if', '$elif', '$foreach', '$backeach', '$while'].indexOf(this.name) == 0

	m isCodeDeclare
		return this.name && ['$', '$global'].indexOf(this.name) == 0

	m isMultilineDeclare
		return this.name && ['$.'].indexOf(this.name) == 0

	m isCode
		var test = this.parent
		while test
			if test.isCodeDeclare()
				return true
			set test = test.parent
		return false

	m isMixinCall
		return this.name && this.name.substr(-1,1) === '('

	m isIncludeCall
		return this.name === '$include'

	m isReferenceToIttf
		if verify.isNotEmpty(this.getValueStripComments())
			# log 'isReferenceToIttf.this.getValueStripComments()', verify.endsWith(this.getValueStripComments(), '.ittf')
			return verify.endsWith(this.getValueStripComments(), '.ittf')
		else
			return false

	m isLineContinuation
		return this.name && ['\\', '\\b', '\\n'].indexOf(this.name) == 0

	m getMixinArgs
		var ret = []
		if this.isMixinCall()
			var v = this.getValueStripComments()
			if v.substr(-1) === ')'
				set v = v.substr(0, v.length-1)
			var ss = v.split(',')
			foreach s in ss
				if s.length > 0
					_ ret.push(s)
		return ret

	m getValueStripComments
		var ndx = this.value.indexOf('$$')
		if ndx < 0
			set ndx = this.value.indexOf('$*')
		if ndx < 0
			return this.value
		return this.value.substr(0, ndx).trim()

	m getValueParsed
		#
		# Parses this mTree node value property
		# detecting interpolations: ${'$'}{expr}
		# Returns an array of value parts where part items can be
		# of type 0 (normal text) or 1 (interpolated expr) 
		#
		# return
		#   [ parts
		#     { part
		#       integer t
		#         one-of: 0 (text), 1 (expr)
		#       string v 
		#         # text or expr
		#
		
		var
			decl v = this.value.trim()
			decl len = v.length
			decl ch
			decl i
			decl parts = []
			decl partsIndex = 0
			decl text = []
			decl expr = []
			decl state = 0
		
		for i=0; i<len; i++
			set ch = v[i]
			if ch == '$'
				if state == 0
					set state = 1
				elif state == 1
					_ text.push('$')
					_ text.push(ch)
					set state = 0
				else $$ 2
					_ expr.push(ch)
			elif ch == '{'
				if state == 0
					_ text.push(ch)
				elif state == 1
					set state = 2
				else $$ 2
					_ expr.push(ch)
			elif ch == '}' && state == 2
				if text.length > 0
					_ parts.push
						{
							@ t 0
							@ v text.join('') 
					set text = []
				_ parts.push
					{
						@ t 1
						@ v expr.join('') 
				set expr = []
				set state = 0
			elif state == 0
				_ text.push(ch)
			elif state == 1
				_ text.push('$')
				_ text.push(ch)
				set state = 0
			elif state == 2
				_ expr.push(ch)
		
		if text.length > 0
			_ parts.push
				{
					@ t 0
					@ v text.join('') 
			set text = []
		
		return parts





