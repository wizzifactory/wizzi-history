$group

	#
		# params
		#	{ request
		#		string user
		#         default stefi
		#		string role
		#         default admin
		#		string storeKind
		#         default filesystem
		#		{ config
		#			string wfBaseFolder
		#			string storeUri
		#             # when storeKind == 'mongodb'
		#			string storeBaseFolder
		#             # when storeKind == 'mongodb'
		#           string pluginsBaseFolder
		#			[ plugins
		#				string name
		#		{ job
		#			string name
		#             # label for messages
		#			string ittfDocumentUri
		#             # 'wfjob' model primary ittf document
		#			{ productionOptions
		#				integer indentSpaces
		#					default 4
		#				string basedir
		#                 TODO explain where used
		#				integer verbose
		#					default 2
		#				{ dumps
		#					# dumps to files of transient objects for debug purposes
		#					string dumpsBaseFolder
		#					{ mTreeBuildupJsWizziScript
		#						boolean dump
		#						string dumpsBaseFolder
		#					{ mixedMTree
		#						boolean dump
		#						string dumpsBaseFolder
		#					{ evaluatedMTree
		#						boolean dump
		#						string dumpsBaseFolder
		#			{ globalContext
		#				# Every wizzi factory loading, transformation and generation
		#				# executed by this job
		#				# will have the properties of this object injected in its context
		#				# at the global level.
    set md.executeWizziJob
        function
			{ request
				{ config
					[ plugins
				{ job
			callback
			+
			# check_cb( callback, executeWizziJob )
			# check_cb_object( request, executeWizziJob )
			# check_cb_object( request.config, executeWizziJob )
			# check_cb_object( request.job, executeWizziJob )
			+
			var user = request.user || 'stefi'
			var role = request.role || 'admin'
			var storeKind = request.storeKind || 'filesystem'
			var jobName = request.job.name
			+
			log '='
			log '======== v5.wizzi.executeWizziJob ===== Start job: ' + jobName + ' ============='
			log '- Executor module path ', __filename
			log '- Job source path ', request.job.ittfDocumentUri
			log '- user', user + '/' + role
			log '- storeKind', storeKind
			if request.config.wfBaseFolder
				log '- wfBaseFolder', request.config.wfBaseFolder
			if request.config.storeUri
				log '- storeUri', request.config.storeUri
			if request.config.storeBaseFolder
				log '- storeBaseFolder', request.config.storeBaseFolder
			+
			var requestConfig = Object.assign({}, request.config)
			+
			var wfBaseFolder = requestConfig.wfBaseFolder
			if wfBaseFolder && wfBaseFolder.length > 0
				# FIXME property wfBaseFolder in module wizzi/config
				#       should be part of the wizzi.wizziFactory instance.
				#       Find where it is referenced.
				_ md.config.set('wfBaseFolder', wfBaseFolder)
			+
			log '- plugins'
			var plugins 
				[
			foreach item in requestConfig.plugins
				if plugins.indexOf(item) < 0
					_ plugins.push(item)
					log '  ', item
			log '- pluginsBaseFolder', requestConfig.pluginsBaseFolder || process.cwd()
			+
			_ wizziFactory.createFactory
				@ user
				@ role
				{
					@ repo
						{
							@ storeKind storeKind
							@ storeUri requestConfig.storeUri
							@ storeBaseFolder requestConfig.storeBaseFolder
					@ plugins
						{
							@ items plugins
							@ pluginsBaseFolder requestConfig.pluginsBaseFolder || process.cwd()
					@ globalContext request.job.globalContext || {}
				_ executeWizziJob_step2
					@ request.job
					@ callback

    function executeWizziJob_step2
		param jobRequest
		param callback
		return
			f_cb( wizziFactoryInstance )
				var jobName = jobRequest.name
				var jobPath = jobRequest.ittfDocumentUri
				+
				log '='
				log '======== v5.wizzi.executeWizziJob_step2 ===== job: ' + jobName + ' ============='
				log '='
				+
				checked_call( pman
					_ wizziFactoryInstance.createProductionManager
						@ jobRequest.productionOptions
						@ jobRequest.globalContext
				+
				checked_call( notUsed
					_ pman.addJobRequest
						{ 
							@ wfjob
								{ 
									@ ittfDocumentUri jobPath
				+
				_ pman.run
					function 
						param err
						param result
						if err
							log 'executeWizziJob_step2.error', JSON.stringify(err)
							set err.wizziJob = jobName
							set err.wizziJobStep = 'Running job'
							set err.wizziJobIttfSourceUri = jobPath
							return
								_ callback
									@ err
						log '='
						_ log.success('======== v5.wizzi.executeWizziJob. Job: ' + jobName + '. Run completed')
						log '='
						_ pman.persistToFile
							function 
								param err
								param result
								if err
									set err.wizziJob = jobName
									set err.wizziJobStep = 'Persisting to file'
									set err.wizziJobIttfSourceUri = jobPath
									return
										_ callback
											@ err
								log '='
								_ log.success('======== v5.wizzi.executeWizziJob. Job: ' + jobName + '.  PersistToFile completed')
								log '='
								_ pman.terminate
								if callback
									_ callback(null, result)


    set md.printWizziJobError
        function
			param jobName
			param err
			set err.WizziIndexStack = (new Error()).stack
			log "\n"
			log "====================================================================================================\n"
			log "FATAL ERROR : v5.executing wizzi instance job: " + jobName
			log "\n"
			log "Error message:\n"
			log err.message + "\n"
			log "Error details:\n"
			log err + "\n"
			log "FATAL ERROR - END\n"
			log "====================================================================================================\n"
			log "\n"
			_ process.exit(999)
