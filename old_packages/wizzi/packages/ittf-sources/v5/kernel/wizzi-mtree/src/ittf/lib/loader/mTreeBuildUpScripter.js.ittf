module wizzi-mtree.loader.mTreeBuildUpScripter
    kind jsfile

	#
		# from a composed-MTree
		# write the jsWizziScript that will
		# buildup an evaluated mTree.
		#
		# The script will be executed 
		# by the JsWizziRunner.

	var verify = require('wizzi-utils').verify
	var interpolate = require('./ittfInterpolate')

	wz-function codify
        param node
        param nparent
        param jsScriptCoder
        param ctx
        var 
            decl nnode = ++ctx.counter
            decl closeBlock = null
        
		var tag = node.name

		if tag == '$' || tag == '$+'
            _ setJsWizziContext
                @ ctx
                @ node.model.brickKey
                @ jsScriptCoder
            _ codeBlock(node, jsScriptCoder, ctx)
        
		elif tag == '$global'
            _ setJsWizziContext
				@ ctx
				@ 'global'
				@ jsScriptCoder
				@ node.model.brickKey
            _ codeBlock(node, jsScriptCoder, ctx)
            _ setJsWizziContext
                @ ctx
                @ node.model.brickKey
                @ jsScriptCoder
        
		elif tag == '$.'
            _ setJsWizziContext(ctx, null, jsScriptCoder)
            var vparent = ('$' + nparent)
            var value
                _ codifyValue
                    @ node.model.brickKey
                    @ node.value
                    @ 'string'
                    @ jsScriptCoder.length + 1
					@ node.hasMacro
					@ ctx
            _ jsScriptCoder.w
				@ vparent + ".v = " + vparent + ".v ? " + vparent + ".v : ''" + ' //' + node.id
            _ jsScriptCoder.w
				@ vparent + '.v += ($.textSep + ' + value + ');' + ' //' + node.id
        
		elif tag == '$if'
            _ setJsWizziContext
                @ ctx
                @ node.model.brickKey
                @ jsScriptCoder
            _ jsScriptCoder.if
                @ node.value
                @ node
            set closeBlock = '}'
        
		elif tag == '$else'
            _ jsScriptCoder.else(node)
            set ctx.brickKey = -1
            set closeBlock = '}'
        
		elif tag == '$elif'
            _ jsScriptCoder.elif
                @ node.value
                @ node
            set ctx.brickKey = - (1)
            set closeBlock = '}'
        
		elif tag == '$while'
            _ jsScriptCoder.while
                @ node.value
                @ node
            set ctx.brickKey = - (1)
            set closeBlock = '}'
        
		elif tag == '$for'
            _ setJsWizziContext
                @ ctx
                @ node.model.brickKey
                @ jsScriptCoder
            
			_ jsScriptCoder.for
				@ node.value
				@ node
            
			set closeBlock = '}'

		elif tag == '$for_stop'
            _ setJsWizziContext
                @ ctx
                @ node.model.brickKey
                @ jsScriptCoder
            var items = node.value.split(' ')
            var namevalue = items[0].split(',')
            var name = namevalue[0]
            var value = namevalue[1]
            
			_ jsScriptCoder.w
				@ 'var ' + name + ', ' + value + ';' + ' //' + node.id
            
			_ jsScriptCoder.for
				@ name + ' in ' + items[2] + ' //' + node.id
				@ node
            
			_ jsScriptCoder.w
				@ value + ' = ' + items[2] + '[' + name + '];' + ' //' + node.id
            
			set closeBlock = '}'
        
		elif tag == '$foreach'
            _ setJsWizziContext
                @ ctx
                @ node.model.brickKey
                @ jsScriptCoder
            var items = node.value.split(' ')
			# items = [item, in, coll]
			# TODO if items.length != 3 -> malformed
			# TODO if items[1] !== 'in' -> malformed
            
			_ jsScriptCoder.w
				@ 'var ' + items[0] + '_count = ' + items[2] + '.length;' + ' //' + node.id

			_ jsScriptCoder.for
				@ 'var i' + nnode + '=0; i' + nnode + '<' + items[0] + '_count; i' + nnode + '++'
				@ node
            
			_ jsScriptCoder.w
				@ 'var ' + items[0] + ' = ' + items[2] + '[i' + nnode + '];' + ' //' + node.id
            
			_ jsScriptCoder.w
				@ 'var ' + items[0] + '_index = i' + nnode + ';' + ' //' + node.id
            
			set closeBlock = '}'
        
		elif tag == '$backeach'
            _ setJsWizziContext
                @ ctx
                @ node.model.brickKey
                @ jsScriptCoder
            var items = node.value.split(' ')
            
			_ jsScriptCoder.w
				@ 'var ' + items[0] + '_count = ' + items[2] + '.length;' + ' //' + node.id

			_ jsScriptCoder.for
				@ 'var i' + nnode + '=' + items[0] + '_count-1; i' + nnode + '>-1; i' + nnode + '--'
				@ node
            
			_ jsScriptCoder.w
				@ 'var ' + items[0] + ' = ' + items[2] + '[i' + nnode + '];' + ' //' + node.id
            
			_ jsScriptCoder.w
				@ 'var ' + items[0] + '_index = i' + nnode + ';' + ' //' + node.id
           
			set closeBlock = '}'
        
		elif tag == '$virtual'
            + ;
        
		elif tag == '$function'
            _ setJsWizziContext
                @ ctx
                @ node.model.brickKey
                @ jsScriptCoder
			var params = '$parent'
			foreach item in node.children
				if item.name === '$param'
					set params += ',' + item.value
			_ jsScriptCoder.w('function ' + node.value + '(' + params + ') {')
			_ jsScriptCoder.indent
			foreach item in node.children
				if item.name !== '$param'
					_ codify(item, 'parent', jsScriptCoder, ctx)
			_ jsScriptCoder.deindent
			_ jsScriptCoder.w('}');
			set ctx.brickKey = -1
			return

		elif tag == '$_'
			set ctx.brickKey = null
            _ setJsWizziContext
                @ ctx
                @ node.model.brickKey
                @ jsScriptCoder
			var vparent = '$' + nparent
			var args = vparent
			foreach item in node.children
				if item.name === '$@'
					set args += ',' + item.value
			_ jsScriptCoder.w(node.value + '(' + args + ');');
			set ctx.brickKey = null
            _ setJsWizziContext
                @ ctx
                @ node.model.brickKey
                @ jsScriptCoder
			return

		else 
			if ctx.isCompile && node.__firstOfMixedNodes
				_ jsScriptCoder.w
					@ '// firstOfMixed ' + node.model.$args + '/' + node.model.$params
				_ isCompilePassedParameters
					@ jsScriptCoder
					@ node.model.calcParamValues(node.model.$args)
            _ setJsWizziContext(ctx, null, jsScriptCoder)
            _ jsScriptCoder.w
				@ 'var $' + nnode + ' = { ' + 
					$$ \b 'n: "' + escapename(tag) + '", ' + 
					\b 'n: ' + codifyValue(node.model.brickKey, tag, 'string', jsScriptCoder.length + 1, node.hasMacro, ctx) + ', ' + 
					\b (node.source ? 'source: ' + escapename(node.source) + ', ' : '') +
					\b 'v: ' + codifyValue(node.model.brickKey, node.value, 'string', jsScriptCoder.length + 1, node.hasMacro, ctx) + ', ' + 
					\b 'r: ' + node.row + ', ' +
					\b 'c: ' + node.col + ', ' + 
					\b 's: "' + node.model.brickKey + '", ' + 
					\b 'u: "' + node.sourceKey + '", ' + ' };' + ' //' + node.id

            var vparent = ('$' + nparent)
            _ jsScriptCoder.w
				@ '$.a(' + vparent + ', $' + nnode + ', ' + (jsScriptCoder.length + 1) + ');'
            set nparent = nnode
        
		if tag !== '$' && tag !== '$global' && tag !== '$+'
            foreach item in node.children
				_ codify(item, nparent, jsScriptCoder, ctx)
            if closeBlock
                _ jsScriptCoder.end()
                set ctx.brickKey = -1

    function setJsWizziContext
        param ctx
        param brickKey
        param jsScriptCoder
		param brickKeyInGlobal

        if ctx.brickKey === brickKey
            return 
        if brickKey === null
            _ jsScriptCoder.w('$.n();')
        elif brickKey === 'global'
			_ jsScriptCoder.w('$.g("' + brickKeyInGlobal + '");')
        else 
            _ jsScriptCoder.w('$.s("' + brickKey + '");')
        set ctx.brickKey = brickKey
    
	function codifyValue
        param brickKey
        param value
        param type
        param line
		param hasMacro
		param ctx

		if typeof(value) === 'undefined' || value == null
            return '""'
        if type === 'string'
            if value.indexOf('${') > -1
				var sHasMacro = hasMacro ? 'true' : 'false'
				if ctx.isCompile
					var newValue
						_ interpolate
							@ value
							{
							{
								@ isCompile true
					# return '"' + newValue + '"'
					return newValue
				else
					return '$.ip("' + brickKey + '", ' + escape(value) + ', "' + type + '", ' + line + ', ' + sHasMacro + ')'
            
			# 23/5/18 return escape(hasMacro ? remacro(value) : value)
			return escape(remacro(value))
        return value
    
	function codeBlock
        param node
        param jsScriptCoder
		param ctx

        if node.name == '$' || node.name == '$global' || node.name == '$+'
            if node.value && node.value.trim().length > 0
                _ jsScriptCoder.w
                    @ node.value
        else 
            if (node.name && (node.name.trim().length > 0))
				if ctx.isCompile && node.__firstOfMixedNodes
					_ jsScriptCoder.w
						@ '// firstOfMixed ' + node.model.$args + '/' + node.model.$params
					# log '=========', node.model.calcParamValues(node.model.$args)
					_ isCompilePassedParameters
						@ jsScriptCoder
						@ node.model.calcParamValues(node.model.$args)
                _ jsScriptCoder.w
					@ node.name + ' ' + (node.value || '') + ' //' + node.id
        
		foreach item in node.children
			_ codeBlock(item, jsScriptCoder, ctx)

	function isCompilePassedParameters
		param jsScriptCoder
		param parameters
		foreach p in parameters
			if p.type = 'string'
				_ jsScriptCoder.w
					@ p.name + ' = "' + p.value + '";'
			else
				_ jsScriptCoder.w
					@ p.name + ' = ' + p.value + ';'

	function escape
        param value
        if typeof (value) === 'undefined'
            return "null"
        elif typeof (value) === 'string'
            return "\"" + escapevalue(value) + "\""
        else 
            return value
   
	function escapename
        param value
        if verify.isNotEmpty(value)
            return 
                _ verify.replaceAll
                    _ verify.replaceAll(value, "\\", "\\\\")
                    @ '"'
                    @ '\\"'
        else
            return value  

	function escapevalue
        param value
        if verify.isNotEmpty(value)
            return 
                _ verify.replaceAll
                    _ escapename
						@ value
					@ "\n"
					@ "\\n"
        else
            return value  

	function remacro
		param value
		$* VIA 22/10/18 see loader.liner for this
		if value.substr(-2) === '\\b'
			set value = value.substr(0, value.length-2) + ' '
		*$
		# Alt+146: Æ
		return verify.replaceAll(value, "Æ{", "${")



