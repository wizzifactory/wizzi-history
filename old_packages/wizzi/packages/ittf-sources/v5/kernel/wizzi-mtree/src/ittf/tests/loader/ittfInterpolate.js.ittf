base_test( ittfInterpolate )
	
	$append imports
		var Context = require('../../lib/jswizzi/jsWizziContext')
		var ip = require('../../lib/loader/ittfInterpolate')
		var errors = require('../../lib/jswizzi/errors')

	var ctx = new Context()

	before-each
		_ ctx.clear()
		_ ctx.set_GlobalContext()

	it interpolate a single var

		_ ctx.setValue('name', 'stefi') 
		var result = ip('My name is $' + '{name}.', ctx)
		log 'result', result

		tobe_string( result, My name is stefi. )
	
	it interpolate a single var + an empty var

		_ ctx.setValue('name', 'stefi') 
		_ ctx.setValue('hobby', '') 
		var result = ip('My name is $' + '{name} and hobby $' + '{hobby}.', ctx)
		log 'result', result

		tobe_string( result, My name is stefi and hobby . )

	it escaped interpolation

		_ ctx.setValue('name', 'stefi') 
		_ ctx.setValue('hobby', 'walking') 
		var result = ip('My name is \\$' + '\\{name} and hobby $' + '{hobby}.', ctx)
		log 'result', result

		_ expect(result).to.be.a('string')
		_ expect(result).to.be('My name is $' + '{name} and hobby walking.')

	it strange template string

		_ ctx.setValue('name', 'stefi') 
		var result = ip('Hello *{ $a $ {} a$ ok.', ctx)
		log 'result', result
		tobe_string( result, Hello *{ $a $ {} a$ ok. )

	it not closed var delimiter

		_ ctx.setValue('name', 'stefi') 
		var result = ip('Hello ${a', ctx)
		log 'result', result
		tobe_string( result, Hello ${a )

	it ending dollar

		_ ctx.setValue('name', 'stefi') 
		var result = ip('Hello $', ctx)
		log 'result', result
		tobe_string( result, Hello $ )

	it double dollar

		_ ctx.setValue('name', 'stefi') 
		var result = ip('Hello $' + '$ ok', ctx)
		log 'result', result
		_ expect(result).to.be.a('string')
		_ expect(result).to.be('Hello $' + '$ ok')


	it interpolated can manage methods on values

		_ ctx.setValue('name', 'stefi') 
		var result = ip('Hello $' + '{ _.capitalize(name); }.', ctx)
		log 'result', result
		tobe_string( result, Hello Stefi.

	it access a member property of an object

		var obj
			{
				@ a 'stefi'
		_ ctx.setValue('obj', obj) 
		var result = ip('Hello $' + '{ obj.a }.', ctx)
		log 'result', result
		tobe_string( result, Hello stefi.

	it access a not existent member property of an object

		var obj
			{
				@ a 'stefi'
		_ ctx.setValue('obj', obj) 
		var result = ip('Hello $' + '{ obj.b }.', ctx)
		log 'result', result
		tobe_string( result, Hello .

	it access a not existent member property of an object after accesing an existent one

		var obj
			{
				@ a 'stefi'
		_ ctx.setValue('obj', obj) 
		var result = ip('Hello $' + '{ obj.a }.', ctx)
		log 'result', result
		tobe_string( result, Hello stefi.
		set result = ip('Hello $' + '{ obj.b }.', ctx)
		log 'result', result
		tobe_string( result, Hello .