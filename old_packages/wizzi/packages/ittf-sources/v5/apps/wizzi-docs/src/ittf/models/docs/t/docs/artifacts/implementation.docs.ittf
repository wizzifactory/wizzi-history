concept Generation implementation

	summary

		p An artifact generator produces a text document. The result of a
			+ generation is a buffer of text characters. The production
			+ of this text is driven by models contained in the
			+ parameters passed to the generator.

		p An artifact generator receives three parameters:
		ittf
			- func gen
				- { model
					- | api-ref wizzi-plugin.wizziModel
					- | POJO
				- { ctx
					- api-ref wizzi.artifact.genContext
				- callback
		ul
			li A model, a javascript object, that can be a Wizzi Model or a POJO, 
				+ and represent the main object context of the artifact generation,
				+ the model that drives the generation.
			li An instance of the wizzi.artifact.genContext class that contains
				ul
					li An in-memory buffer where the generated text is written
						+ sequentially using write and write line methods.
					li A data context that may contain zero or many secondary
						+ context models, Wizzi Models or POJO.
					li Some helper functions for text indentation, interpolation
						+ and error management.
			li A callback function that a succesfull generation must call
				+ passing, as a second parameter, an instance of the 
				+ wizzi.artifact.genContext with the text buffer containing
				+ the generated artifact

		p An artifact generation can be code write based, using the write statements
			+ of the wizzi.artifact.genContext instance, or template based.
			+ The wizzi factory uses both systems with a preference, when convenient,
			+ for the template based one, and uses the mTree loader as its preferred
			+ template engine.

		h3 Code generation by term rewriting
		
		p The mTree loader, implemented by the wizzi-mtree.loader.loadMTree API method, is
			+ a powerfull model composer and transformer. 
			+ Model transformations can be 
			+ chained: an output mTree can become the input context for the next
			+ mTree loading. A 'wfjob' model can orchestrate any number of cascading
			+ transformations.
			+ The models passed to the artifact generator are the final
			+ models, ripe and ready for generating the textual artifact.
		
		p A template based generation, that uses the mTree loader,
			+ can be, indeed, more a code generation by term rewriting
			+ than a textual code generation. When mTrees are loaded into Wizzi Models,
			+ that can apply types and validations, and can programmatically modify the model,
			+ we have a tool for efficiently enabling any extension of the target
			+ language, easily implementing partial classes or any other modular
			+ aspect or rewrite rule.

		h3 Language schemas and language artifact generators
		p Focusing on the generation of 
			+ the textual content of an artifact, we must treat of a class
			+ of Wizzi Model types that is specific for the production
			+ of code targeting the synthax of a programming languages (PL).

		p A language schema defines a tree structure
			+ that an associated language artifact generator can transform
			+ in a targeting PL code. It can be viewd as a profile of a PL Grammar that 
			+ can be implemented partially,
			+ with some of its symbols stereotyped. The schema developer should try 
			+ to find the optimal balance between ease of use and completeness and
			+ define the proper approximation of the schema in respect to the PL grammar.

		p Must be said that language schema is a concept. A language schema is
			+ like any other wizzi schema and a language artifact is
			+ like any other artifact generator. The production of specific tools for
			+ creating language schemas and artifacts could be 
			+ undertaken in the future.

		p The wizzi factory, that is generated by the wizzi factory,
			+ uses some language schemas for its generations:
		ul
			li The js schema in the wizzi-js plugin.
			li The html and css schemas in the wizzi-html plugin.
			li The md (markdown) schema in the wizzi-docs plugin.

		h3 Template based artifact generation

		p Wizzi models which type is a language schema are the ideal template
			+ format for a wizzi factory template based artifact generation.

		h4 This is an example of a js ittf document.
		ittf
			- module
				- kind jsfile
				- class Horse
					- super Animal
					- ctor
						- param name
						- base name
					- m say
						- log 'Hiiii i am ' + this.name
		
					- m create
						- static
						- param name
						- return
							- new Horse
								- @ name

		p Almost every ittf node maps to a node type of the javascripts AST. And 
			+ ittf nodes can be template node commands and can contain expressions.

		h4 Example of template based implementation of
			\b the wizzi-plugin.artifactGenerator API
		p In this dummy example, a 'js' ittf document template,
			+ named 'datalayer/adapters.js.ittf'
			+ is transformed in the javascript textual code of a fictitious datalayer
			+ adapter component.
		p This example artifact generator makes use internaly of a 'js' language
			+ artifact generator, named 'js/module'. The model that it receives as 
			+ the first parameter, that has been loaded in previous steps, becomes 
			+ the mTreeBuilUpContext object for loading the mTree of the template. 
			+ It must be a Wizzi Model of type 'rdbms' otherwise an error
			+ is returned in the callback.
		p The template is loaded, and transformed in a textual artifact, calling
			+ the 'loadModelAndGenerateArtifact' method of the current instance of
			+ the wizzi.wizziFactory class, exposed in the property 'wizziFactory'
			+ of the 'ctx' parameter (an instance of the wizzi.artifact.genContext class).
		ittf
			- module
				- kind jsfile
				-
				- var path = require('path')
				- var md = module.exports = {}
				- var myname = 'artifact rdbms.adapters.main';
				-
				- set md.gen
					- function
						- { model
						- { ctx
						- callback
						- # check the model is a Wizzi Model of type 'rdbms'
						- if model.wzElement !== 'rdbms'
							- return
								- callback
									- _ctx.error
										- @ myname + " error: the model paramater should be an 'rdbms' Wizzi Model"
										- @ model
						- # build the artifact template path, it is a js ittf document in a sub folder
						- var ittfTemplatePath
							- _ path.join
								- @ __dirname
								- @ 'ittf'
								- @ 'datalayer'
								- @ 'adapters.js.ittf'
						- # call the wizzifactory method for loading a language Wizzi Model and
						- # generate a language artifact from it. Pass the input model in the
						- # mTreeBuildUpContext property of the request object argument.
						- # The 'js' schema of the template model is detected by its filename.
						- _ ctx.wizziFactory.loadModelAndGenerateArtifact
							- @ ittfTemplatePath
							- {
								- @ mTreeBuildUpContext model
							- @ 'js/module'
							- function
								- param err
								- param artifactText
								- if err
									- # invoke the callback on error, passing back the loadModelAndGenerateArtifact error
									- return
										- _ callback
											- err
								- # write the artifactText into the genContext buffer
								- _ ctx.write(artifactText)
								- # invoke the callback on success, passing back the genContext
								- _ callback(null, ctx)

		


