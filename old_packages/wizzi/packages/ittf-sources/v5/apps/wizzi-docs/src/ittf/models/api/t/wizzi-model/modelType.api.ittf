$group

	api wizzi.modelType
		module
			standard-path {wizzi-plugin}/lib/wizzi/models/{schema}-model.g.js

		# This module contains the javascript classes that implement
		# an object model defined by a wizzi schema.
		# It is generated by the wizzi.generateWizziModelTypes function
		# from an ittf document of type 'wfschema'.
		# A wizzi.modelType can be loaded from a wizzi-mtree.mTree instance
		# when the last is conformant to its wizzi schema.
		# Depending from the definition of their ittf node names (tags) in the
		# wizzi schema, ittf nodes become elements (instances) or 
		# attributes (properties) of the object model.

		{
			{ sourceLineInfo
				api-ref wizzi.modelType.sourceLineInfo
			{ baseElement
				api-ref wizzi.modelType.baseElement
			{ {element}
				# One element class for each element in the wizzi schema.
				# One of these is the root element.
				api-ref wizzi.modelType.{element}
			{ {schema}Context
				api-ref wizzi.modelType.context
			{ {schema}Exception
				api-ref wizzi.modelType.exception
		
	api wizzi.modelType.sourceLineInfo
		class-instance
		
		# Stores the info about the source position of a node.
		
		{
			ctor
				integer row
					# The row number position of the node in the source ittf document.
				integer col
					# The col number position of the node in the source ittf document.
				string sourceKey
					# The key for retrieving infos about the source ittf document, stored
					# in the wizzi-mtree.loader.loadHistory object, available as a property
					# of the root wizzi.modelType.element.

			m toString
				# Returns a formatted message with a node position and source location.
				{ instance
					api-ref wizzi.modelType.{element}

	api wizzi.modelType.baseElement
		class-instance

		{
			string wzTag
				# It is the value of the wizzi-mtree.mTree.node.n property
				# of the source node (the ittf node name).
			string wzElement
				# It is the name of `this` element type, defined in the wizzi schema and
				# associated with the wizzi-mtree.mTree.node.n of the source node.
				# When the wizzi schema do not declare a `tag` attribute for this element
				# it is equal to the `wzTag`.
			string wzName
				# It is the value of the wizzi-mtree.mTree.node.v property
				# of the source node (the ittf node value).
			{ wzParent
				api-ref wizzi.modelType.{element}
				# When null, `this` element is the root element of the model.
			[ wzChildren
				# Collection of children elements. TODO explain ...
				{ element
					api-ref wizzi.modelType.{element}
			{ wzSourceLineInfo
				api-ref wizzi.modelType.sourceLineInfo
			
			ctor
				string name
					# Becomes the `wzName` property of the element instance.
					# It is the value of the wizzi-mtree.loader.node.value property
					# of the source node (the ittf node value).
				{ sourceLineInfo
					api-ref wizzi.modelType.sourceLineInfo
			
			m wzRoot
				# Returns the root element of the object model.
				# Always the object model has a single root element.
				return
					{ rootElement
						api-ref wizzi.modelType.{element}
			
			m wzSourceFilepath
				return
					string filePath
						# The location of the source ittf document.
			
			m wzAddChild
				# Add a child element to the `wzChildren` collection property.
				{ node
					api-ref wizzi.modelType.{element}
				# This happens when the new element is in a one-to-many
				# relation with `this` element and TODO explain ...

			m wzLoadToChildColl
				# Creates a new wizzi.modelType.{element} instance from a
				# mTree node, and append it to an array of elements, childs of
				# `this` element.
				# This happens when the new element is in a one-to-many
				# relation with `this` element.
				{ child
					api-ref wizzi-mtree.loader.node
					# The node of the source mTree that must become a new
					# wizzi.modelType.{element} instance of the model.
				{ type
					# The type object of the wizzi.modelType.{element} from which
					# the instance of the new element must be created.
				[ coll
					# The array to which the newly created wizzi.modelType.{element}
					# must be appended.

			m wzLoadToChildren
				# Creates a new wizzi.modelType.{element} instance from a
				# mTree node, and append it the `wzChildren` collection property.
				# This happens when the new element is in a one-to-many
				# relation with `this` element and TODO explain ...
				{ child
					api-ref wizzi-mtree.loader.node
					# The node of the source mTree that must become a new
					# wizzi.modelType.{element} instance of the model.
				{ type
					# The type object of the wizzi.modelType.{element} from which
					# the instance of the new element must be created.
    
			m wzLoadOneToOne
				# Creates a new wizzi.modelType.{element} instance from a
				# mTree node, and set it to the `fieldName` property.
				# This happens when the new element is in a one-to-one
				# relation with `this` element.
				{ child
					api-ref wizzi-mtree.loader.node
					# The node of the source mTree that must become a new
					# wizzi.modelType.{element} instance of the model.
				{ type
					# The type object of the wizzi.modelType.{element} from which
					# the instance of the new element must be created.
				string fieldName

			m error
				# Throws a wizzi.modelType.exception when something go wrong,
				# usually an unknown mTree node name.
				string message
				{ node
					api-ref wizzi-mtree.mTree.node
		
	api wizzi.modelType.{element}
		class-instance
		extends wizzi.modelType.baseElement

		# One element class is generated for each element in the wizzi schema.
		# One of these is the root element.

		{
			{ {relatedElement.Name}
				# Generated for each element related to `this` element
				# with a one-to-one relation.
				api-ref wizzi.modelType.{element}

			[ {element.NamePlural}
				# Generated for each element related to `this` element
				# with a one-to-many relation.
				{ element
					api-ref wizzi.modelType.{element}

			m add{relatedElement.Name}
				# Add a child element to the {relatedElement.NamePlural} collection.
				# Generated for each element related to `this` element
				# with a one-to-many relation.
				string name
				{ sourceLineInfo
					api-ref wizzi.modelType.sourceLineInfo
    
			m get{relatedElement.Name}
				# Retrieve a child element by name (wzName) from 
				# the {relatedElement.NamePlural} collection.
				# Generated for each element related to `this` element
				# with a one-to-many relation.
				string name
					# The `wzName` of the searche element.
				return
					{ element
						api-ref wizzi.modelType.{element}

			m wzVerify
				# Executes a constraints check on `this` instance.
				# It is called by the wizzi.modelFactory.loadModel function.
				# The first block of statements is autogenerated
				# from the wizzi schema implicit and explicit constraints.
				# A wizzi schema author can add other checks, defining a wzVerify
				# method in the wizzi schema definition of `this` element type.
				{ ctx
					api-ref wizzi.modelType.context
			
			m wzInitialize
				# Called by the wizzi.modelFactory.loadModel function
				# befere the `wzVerify` method is called.
				# A wizzi schema author can add other checks defining a wzInitialize
				# method in the wizzi schema definition of `this` element type.
				{ ctx
					api-ref wizzi.modelType.context

	api wizzi.modelType.rootElement
		class-instance
		extends wizzi.modelType.{element}

		# The root element here is distinguished for documentation purposes
		# because it has some special properties.
		# Actually the root element extends the wizzi.modelType.baseElement, as
		# any other element (except when a super element is explicitly declared
		# in the 'wfschema').

		{
			{ loadHistory

	api wizzi.modelType.context
		class-instance

		{

			[ validationErrors
			
			m schemaIsValid
				# Returns true if the `validationErrors` array is empty.
				return
					boolean isValid

			m addError
				called-by wizzi.modelType.{element}.wzVerify
				# Add an error to the `validationErrors` array.
				string message
				{ node
					api-ref wizzi.modelType.{element}
    
			m verifyEnum 
				# Verify the constraint `enum` for an attribute.
				string valueType
					# The element type of the attribute to be checked.
				string valueName
					# The name of the attribute to be checked.
				string value
					# The value to be checked. Must be in `allowed`.
				[ allowed
					# An array of valid values.
				{ node
					api-ref wizzi.modelType.{element}

			m TODO
				# Add verifies for other explicit constraints.

	api wizzi.modelType.exception
		class-instance

		{
			ctor
				string message
				{ node
					# TODO rename this to mTreeNode
					api-ref wizzi-mtree.mTree.node
				{ instance
					# TODO rename this to elementInstance
					api-ref wizzi.modelType.{element}
				

