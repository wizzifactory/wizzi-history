r-container( WizziGists, false, true, withPageInfo;../../utils/withPageInfo

	$append imports
		common/page_imports()
		import
			@ getJobGists
			gists/optionsImportActions()
			from '../../store/actions'
		import MySelect from '../mui/MySelect'
		import MyLink from '../mui/FileSystemNavItem'
		import OptionsDialog from './dialogs/OptionsDialog'
		import ConfirmDialog from './dialogs/ConfirmDialog'

		const title = 'Wizzi gists'

		gists/optionsData(gist)

	style
		{ root
			@ flexGrow 1
		{ barHead
			@ marginLeft '15px'
		{ column
			@ float 'left'
			@ padding '20px'

	state
		@ selectedGistKind 'gist'
		$include common/optionsState

	did-mount-with-info()
		prop dispatchGetJobGists
		_ dispatchGetJobGists
			@ 'gist'

	did-update
		prop toGist
		prop match
		prop history
		prop dispatchClearJobNavigations
		if toGist
			_ dispatchClearJobNavigations
			_ history.push
				`lit 
					+ /job/gist/
					@ match.params.userId
					+ /
					@ toGist.hash

	=> handleSelectGistKind
		param e
		prop dispatchGetJobGists
		if e.target.value !== this.state.selectedGistKind
			_ this.setState
				{
					@ selectedGistKind e.target.value
			_ dispatchGetJobGists
				@ e.target.value

	gists/optionsHandlers()

	render
		prop classes
		prop loadingError
		prop match
		prop gists
		prop fragments
		prop contexts
		prop schemas

		const {selectedGistKind, selectedSchema} = this.state
		var items = gists
		if selectedGistKind === 'fragment'
			set items = fragments
		elif selectedGistKind === 'context'
			set items = contexts
		common/guardLoading( items )

		return
			. { classes.root }
				$include common/optionsRender
				< AppBar
					@ position static
					@ color default
					common/tlb()
						< Grid 
							@ item
							< Paper 
								@ className {classes.buttonPaper}
								< MySelect
									@ label "schema"
									@ value {selectedSchema}
									@ onChange {this.handleSelectSchema}
									@ items { schemas }
						< Grid 
							@ item
							< Paper 
								@ className {classes.buttonPaper}
								< MySelect
									@ label "kind"
									@ value {selectedGistKind}
									@ onChange {this.handleSelectGistKind}
									@ items { ['gist', 'fragment', 'context'] }
						common/tlb-btn( Create, this.handleCreateJobGist
				. { classes.column }
					< List
						{
							_ items.map
								=>
									param p
									param i
									return
										< MyLink
											@ key {i}
											@ title {p.basename}
											@ kind {1} 
											@ to
												`lit 
													+ /job/gist/
													@ match.params.userId
													+ /
													@ p.hash
											@ onDuplicate
												=> 
													_ this.handleDuplicateJobGist(p.hash, p.basename)
											@ onRename
												=> 
													_ this.handleRenameJobGist(p.hash, p.basename)
											@ onDelete
												=> 
													_ this.handleDeleteJobGist(p.hash, p.basename)


	$append state-to-props
		@ loadingError state.job.loadingError
		@ gists state.job.gists
		@ fragments state.job.fragments
		@ contexts state.job.contexts
		@ toGist state.job.toGist
		@ schemas state.commons.managedSchemas
		
	$append dispatch-to-props

		common/dispatch( getJobGists, kind
		gists/optionsDispatchToProps()

