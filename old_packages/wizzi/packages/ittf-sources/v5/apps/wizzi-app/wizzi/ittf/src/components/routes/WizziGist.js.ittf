r-container( WizziGist, false, true, withPageInfo;../../utils/withPageInfo

	$append imports
		$include common/wizzi_options
		$include codesplit2/wizzi_options
		common/page_imports()
		editor/imports()
		codesplit2/imports()
		$include common/optionsImport
		import
			@ getJobGist
			editor/importActions()
			gists/optionsImportActions()
			from '../../store/actions'
		import { CreateFileIcon } from '../mui/Icons'
		import MySelect from '../mui/MySelect'
		import CodeHighLight from '../mui/CodeHighLight'
		import EventSourceView from '../mui/EventSourceView'

		const title = 'Wizzi gist'
		
		gists/optionsData()
		$include wfactions/constants

	style
		editor/style()
		codesplit2/style(&opt)

	state
		editor/state()
		codesplit2/state(&opt)
		@ execUrl null
		@ execUrlCounter 1
		common/optionsState()
		@ selectedFragment null
		@ selectedContext null
		@ selectedSchema null

	did-update-with-info( this.props.gist ? title + ': ' + this.props.gist.basename : title )
		prop match
		prop dispatchGetJobGist
		if match.params.hash !== prevProps.match.params.hash
			_ dispatchGetJobGist
				@ match.params.hash

	did-mount-with-info( this.props.gist ? title + ': ' + this.props.gist.basename : title )
		prop match
		prop dispatchGetJobGist
		_ dispatchGetJobGist
			@ match.params.hash

	codesplit2/handlers(&opt)

	=> handleGistChange
		param value
		prop gist
		prop dispatchUpdateJobGist
		_ dispatchUpdateJobGist
			@ gist.hash
			@ value

	=> handleExec
		prop gist
		const {execUrlCounter} = this.state
		_ this.setState
			=> 
				_ this.setState
					=> 
						return
							{
								@ ...this.state
								@ execUrl '/api/jobs/gistexec?hash=' + gist.hash + '&eventstream=true&cpunter=' + execUrlCounter
								@ execUrlCounter execUrlCounter + 1
				return
					{
						@ ...this.state
						@ execUrl null

	=> handleSelectFragment
		param e
		_ this.setState
			{
				@ selectedFragment e.target.value

	=> handleEditGistFragment
		prop match
		prop history
		_ history.push
			`lit 
				+ /job/gist/
				@ match.params.userId
				+ /
				@ this.state.selectedFragment

	=> handleSelectContext
		param e
		_ this.setState
			{
				@ selectedContext e.target.value

	=> handleEditGistContext
		prop match
		prop history
		_ history.push
			`lit 
				+ /job/gist/
				@ match.params.userId
				+ /
				@ this.state.selectedContext

	=> handleSelectSchema
		param e
		_ this.setState
			{
				@ selectedSchema e.target.value

	editor/handlers()
	gists/optionsHandlers()

	render
		prop classes
		prop loadingError
		prop match
		prop gist
		prop fragments
		prop contexts
		prop schemas

		common/guardLoading( gist )

		editor/renderPropsAndState()
		codesplit2/render_prop_state(&opt)
		const { execUrl, selectedFragment, selectedContext, selectedSchema } = this.state

		return
			div
				$include common/optionsRender
				editor/renderInfoDialog()
				common/tlb()
					< Grid 
						@ item
						< Paper 
							@ className {classes.buttonPaper}
							< MySelect
								@ label "schema"
								@ value {selectedSchema}
								@ onChange {this.handleSelectSchema}
								@ items { schemas }
					< Grid 
						@ item
						< Paper 
							@ className {classes.buttonPaper}
							< MySelect
								@ label "fragments"
								@ value {selectedFragment || fragments[0] && fragments[0].hash }
								@ nameProp "basename"
								@ valueProp "hash"
								@ onChange {this.handleSelectFragment}
								@ items { fragments }
					common/tlb-btn( edit fragment, this.handleEditGistFragment, EditIcon
					common/tlb-btn( create new fragment, this.handleCreateGistFragment, CreateFileIcon
					span |
					< Grid 
						@ item
						< Paper 
							@ className {classes.buttonPaper}
							< MySelect
								@ label "contexts"
								@ value {selectedContext || contexts[0] && contexts[0].hash }
								@ nameProp "basename"
								@ valueProp "hash"
								@ onChange {this.handleSelectContext}
								@ items { contexts }
					common/tlb-btn( edit context, this.handleEditGistContext, EditIcon
					common/tlb-btn( create new context, this.handleCreateGistContext, CreateFileIcon
					span |
					common/tlb-btn( Exec, this.handleExec
					common/tlb-btn( generate, this.handleGenerateDefaultArtifact
					common/tlb-btn( script, this.handleMTreeDebugInfo

				codesplit2/render(&opt)
					$append pane1
						< CodeEditor 
							@ language { 'js' }
							@ value { gist.content }
							@ onChange { this.handleGistChange }
					$append pane2
						< EventSourceView
							@ url { execUrl }

	$append state-to-props
		editor/stateToProps()
		@ loadingError state.job.loadingError
		@ gist state.job.gist
		@ fragments state.job.fragments
		@ contexts state.job.contexts
		@ selectedDocumentHash state.job.gist ? state.job.gist.hash : null

	$append dispatch-to-props

		@ dispatchGetJobGist
			=>
				param hash
				log 'dispatchGetJobGist', hash
				_ dispatch
					_ getJobGist
						@ hash

		@ dispatchUpdateJobGist
			=>
				param hash
				param newcontent
				log 'dispatchUpdateJobGist', hash
				_ dispatch
					_ updateJobGist
						@ hash
						@ newcontent
				_ dispatch
					_ changedJobGist
						@ newcontent

		editor/dispatchToProps()
		gists/optionsDispatchToProps()