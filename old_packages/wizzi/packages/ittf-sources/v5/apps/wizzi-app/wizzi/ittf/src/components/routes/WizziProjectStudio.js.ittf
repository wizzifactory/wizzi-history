r-container( WizziProjectStudio

	$append imports
		import
			@ selectProject
			@ createProject 
			@ getDocuments
			@ selectDocument
			@ createDocument 
			@ updateDocument 
			@ changeDocument
			@ getFragments
			@ selectFragment
			@ createFragment 
			@ generateArtifact
			from '../../store/actions'
		import Document from './projectstudio/Document'

		import verify from '../../lib/verify'
		import
			@ getSchema
			from '../../store/actions'

	state
		@ currentProject null
		@ selectedUri null
		@ selectedContent null

	will-receive-props
		log 'WizziProjectStudio.WillReceiveProps', nextProps
		if nextProps && nextProps.selectedUri !== this.state.selectedUri
			_ this.setState
				{
					@ ...this.state
					@ selectedUri nextProps.selectedUri
					@ selectedContent nextProps.selectedContent

	did-mount
		prop match
		const projectId = match.params.projectId
		log 'WizziProjectStudio.DidMount.projectId', projectId
		if projectId && projectId.length > 0
			_ this.setState
				{
					@ ...this.state
					@ currentProject projectId
					@ selectedUri null
					@ selectedContent null
			_ this.props.dispatchLoadDocuments
				@ projectId
			_ this.props.dispatchLoadFragments
				@ projectId

	render
		prop schemas
		prop projects
		
		prop documents
		prop userFragments
		prop projectFragments
		
		prop selectedType
		prop selectedUri
		prop selectedSchema
		prop selectedContent
		
		prop generatedArtifactContent
		prop generatedArtifactError
		
		prop dispatchSelectProject
		prop dispatchCreateProjectSubmit

		prop dispatchChangeDocument
		prop dispatchSelectDocument
		prop dispatchCreateDocumentSubmit
		
		prop dispatchSelectFragment
		prop dispatchCreateFragmentSubmit
		
		prop dispatchGenerateArtifact
		
		var _selectedSchemaData = null
		var schemaNames = []
		var artifactNames = []
		
		foreach s in schemas
			_ schemaNames.push(s.name)
			if s.name === selectedSchema
				set _selectedSchemaData = s
		
		if selectedType === 'document' && _selectedSchemaData && _selectedSchemaData.artifacts
			foreach a in _selectedSchemaData.artifacts
				_ artifactNames.push(a.name)
		
		log 'WizziProjectStudio.render.schemas, schemaNames, artifactNames', schemas, schemaNames, artifactNames

		return
			< Document
				@ projects {projects}
				@ schemas {schemaNames}
				@ documents {documents}
				@ userFragments {userFragments}
				@ projectFragments {projectFragments}

				@ currentProject {this.state.currentProject}
				@ selectedUri {selectedUri}
				@ selectedContent {selectedContent}

				@ artifacts {artifactNames}
				@ generatedArtifactContent {generatedArtifactContent}
				@ generatedArtifactError {generatedArtifactError}

				@ onSelectProject {dispatchSelectProject}
				@ onCreateProjectSubmit {dispatchCreateProjectSubmit}
				
				@ onEditorRef
					=>
						param node
						set this.editor = node
						log 'DocumentEditor.onTextRef.this.editor', this.editor
				
				@ onSelectArtifactRef
					=>
						param node
						set this.selectArtifact = node
						log 'DocumentEditor.onSelectArtifactRef.node', node
				
				@ onSelectDocument {dispatchSelectDocument}
				@ onSelectFragment {dispatchSelectFragment}
				@ onSaveDocument
					=>
						log 'this.editor', this.editor
						log 'this.editor.value', this.editor.value
						_ dispatchChangeDocument
							@ selectedUri
							@ this.editor.value
				@ onGenerateArtifact
					=>
						_ dispatchGenerateArtifact
							@ selectedUri
							@ this.selectArtifact.value
				@ onCreateDocumentSubmit {dispatchCreateDocumentSubmit}
				@ onCreateFragmentSubmit {dispatchCreateFragmentSubmit}

	$append state-to-props
		@ currentProject state.commons.currentProject
		@ schemas state.commons.schemas
		@ projects state.commons.projects
		
		@ documents state.document.items
		@ userFragments state.fragment.userItems
		@ projectFragments state.fragment.projectItems

		@ selectedType state.editor.selectedType
		@ selectedUri state.editor.selectedUri
		@ selectedSchema state.editor.selectedSchema
		@ selectedContent state.editor.selectedContent
		
		@ generatedArtifactContent state.artifact.generatedArtifact
		@ generatedArtifactError state.artifact.error

	$append dispatch-to-props

		@ dispatchLoadDocuments
			=>
				param project
				_ dispatch
					_ getDocuments
						@ project

		@ dispatchSelectDocument
			=>
				param uri
				param schema
				_ dispatch
					_ selectDocument
						@ uri
						@ schema

		@ dispatchChangeDocument
			=>
				param uri
				param newValue
				# log 'DocumentEditor.dispatchChange', uri, newValue
				_ dispatch
					_ changeDocument
						@ newValue
				_ dispatch
					_ updateDocument
						@ uri
						@ newValue

		@ dispatchLoadFragments
			=>
				param project
				_ dispatch
					_ getFragments
						@ project

		@ dispatchSelectFragment
			=>
				param uri
				param schema
				_ dispatch
					_ selectFragment
						@ uri
						@ schema

		@ dispatchGenerateArtifact
			=>
				param uri
				param artifactName
				log 'DocumentEditor.generateArtifact', uri, artifactName
				_ dispatch
					_ generateArtifact
						@ uri
						@ artifactName

		@ dispatchCreateDocumentSubmit
			=>
				param name
				param schema
				param folder
				param project
				_ dispatch
					_ createDocument
						@ name
						@ schema
						@ folder
						@ project

		@ dispatchCreateFragmentSubmit
			=>
				param name
				param schema
				param folder
				param project
				_ dispatch
					_ createFragment
						@ name
						@ schema
						@ folder
						@ project

		@ dispatchSelectProject
			=>
				param project
				_ dispatch
					_ selectProject
						@ project

		@ dispatchCreateProjectSubmit
			=>
				param project
				_ dispatch
					_ createProject
						@ project