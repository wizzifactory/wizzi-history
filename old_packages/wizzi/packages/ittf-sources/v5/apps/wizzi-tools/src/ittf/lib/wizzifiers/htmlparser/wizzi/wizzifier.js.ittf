basewizzifier()

	set md.getWizzifierIncludes
		function
			param options
			param callback
		
			set options.wizziIncludes = options.wizziIncludes || []

			# log 'options.wizziIncludes', options.wizziIncludes

			_ async.map
				@ options.wizziIncludes
				function
					param item
					param callback
					if item.kind === 'css'
						if !csswizzifier
							set csswizzifier = require('../../cssparser/css/wizzifier')
						_ csswizzifier.getWizziTree
							@ item.literal
							{
							f_cb_no_err( ittf )
								# log 'getWizzifierIncludes.item.ittf', ittf
								if err
									_ item.node.children.push
										{
											@ tag 'error'
											@ name err.message
											[ children
								else
									if options.isForVue
										foreach ittfchild in ittf.children
											_ item.node.children.push
												@ ittfchild
									else
										_ item.node.children.push
											@ ittf
								r_cb()
					elif item.kind === 'ts'
						if !jswizzifier
							# log 'jswizzifier import 1'
							set jswizzifier = require('../../jsparser/babel/wizzifier')
							# log 'jswizzifier import 2'
						# log 'jswizzifier', jswizzifier
						_ jswizzifier.getWizziTree
							@ item.literal
							{
								@ babel
									{
										@ sourceType 'module'
										@ ts_or_flow 'typescript'
							f_cb_no_err( ittf )
								# log 'getWizzifierIncludes.item.ittf', ittf
								if err
									_ item.node.children.push
										{
											@ tag 'error'
											@ name err.message
											[ children
								else
									if options.isForVue
										foreach ittfchild in ittf.children
											# skip kind
											if i > 0
												_ item.node.children.push
													@ ittfchild
									else
										_ item.node.children.push
											@ ittf
								r_cb()
					else
						if !jswizzifier
							# log 'jswizzifier import 1'
							set jswizzifier = require('../../jsparser/babel/wizzifier')
							# log 'jswizzifier import 2'
						# log 'jswizzifier', jswizzifier
						_ jswizzifier.getWizziTree
							@ item.literal
							{
							f_cb_no_err( ittf )
								# log 'getWizzifierIncludes.item.ittf', ittf
								if err
									_ item.node.children.push
										{
											@ tag 'error'
											@ name err.message
											[ children
								else
									if options.isForVue
										foreach ittfchild in ittf.children
											# skip kind
											if i > 0
												_ item.node.children.push
													@ ittfchild
									else
										_ item.node.children.push
											@ ittf
								r_cb()
				@ callback

	$append imports
		var html_parser = require('./parser')
		var cloner = require('./cloner')
		var csswizzifier = null
		var jswizzifier = null
		
		function parseInternal
			param html
			param options
			param callback
			
			if typeof callback === 'undefined'
				set callback = options
				set options = {}
			set options = (options || {})

			set options.wizziIncludes = options.wizziIncludes || []
			
			var wizziTree
				{ 
					@ children
						[ 
			var parser
				new html_parser.Parser
					{ 
						@ onopentag
							function 
								param tagname
								param attribs
								var ittfTag = tagname
								if options.isForVue
									if tagname.substr(0, 2) !== 'v-'
										if ['router-link', 'router-view'].indexOf(tagname) < 0
											if tagname[0] === tagname[0].toUpperCase() || tagname.indexOf('-') > -1
												set ittfTag = '< ' + tagname
								else
									if tagname[0] === tagname[0].toUpperCase() || tagname.indexOf('-') > -1
										set ittfTag = '< ' + tagname
								# log "OpenTag " + tagname, ittfTag, attribs
								var n
									{ 
										@ tag ittfTag
										@ name ''
										@ attribs attribs
										@ children
											[ 
								set n.parent = wizziTree
								_ wizziTree.children.push(n)
								set wizziTree = n
						@ ontext
							function 
								param text
								# log "Text", text, wizziTree.tag
								var lines
									_ file.splitLines
										_ text.trim()
								if wizziTree.swig
									# log '++++++++++ wizziTree.swig'
									_ lines.forEach
										function 
											param l
											var n
												{ 
													@ tag '+'
													@ name l
													@ attribs
														{ 
													@ children
														[ 
											_ wizziTree.children.push(n)
								elif 'script' === wizziTree.tag
									var literal = lines.join('\n')
									log 'literal', literal, wizziTree.attribs['lang']
									_ options.wizziIncludes.push
										{
											@ kind wizziTree.attribs['lang'] || wizziTree.attribs['language'] || 'js'
											@ node wizziTree
											@ literal literal
								elif 'style' === wizziTree.tag
									var literal = lines.join('\n')
									# log 'literal', literal
									_ options.wizziIncludes.push
										{
											@ kind 'css'
											@ node wizziTree
											@ literal literal
								elif lines.length == 1
									if wizziTree.children.length > 0
										var n
											{ 
												@ tag '+'
												@ name lines[0]
												@ attribs
													{ 
												@ children
													[ 
										_ wizziTree.children.push(n)
									else 
										set wizziTree.name += lines[0]
								else 
									_ lines.forEach
										function 
											param l
											var n
												{ 
													@ tag '++'
													@ name l.trim()
													@ attribs
														{ 
													@ children
														[ 
											_ wizziTree.children.push(n)
						@ onclosetag
							function 
								param tagname
								# log 'onclosetag', tagname
								if wizziTree.parent != null
									set wizziTree = wizziTree.parent
								else 
									_ console.log("WARNING overclose ", tagname)
						@ onswig
							function 
								param text
								var 
									decl p
										_ lineparser.parseNameValue
											@ text
											{ 
									decl tag
										_ p.name()
											._ trim()
											._ toLowerCase()
									decl text = p.value()
								# log "OpenSwig " + tag, text
								if ['for', 'if', 'block', 'autoescape', 'filter', 'macro', 'spaceless', 'raw'].indexOf(tag) >= 0
									var n
										{ 
											@ tag tag
											@ name text
											@ attribs
												{ 
											@ children
												[ 
											@ lines
												[ 
											@ swig true
									set n.parent = wizziTree
									_ wizziTree.children.push(n)
									set wizziTree = n
								elif ['endfor', 'endif', 'endblock', 'endautoescape', 'endfilter', 'endmacro', 'endspaceless', 'endraw'].indexOf(tag) >= 0
									if wizziTree.parent != null
										set wizziTree = wizziTree.parent
									else 
										_ console.log("WARNING overclose ", tagname)
								elif ['extends', 'include', 'import', 'parent', 'set'].indexOf(tag) >= 0
									var n
										{ 
											@ tag tag
											@ name text
											@ attribs
												{ 
											@ children
												[ 
											@ lines
												[ 
											@ swig true
									_ wizziTree.children.push(n)
								elif ['else', 'elif', 'elseif'].indexOf(tag) >= 0
									if wizziTree.parent != null
										set wizziTree = wizziTree.parent
									else 
										_ console.log("WARNING overclose ", tagname)
									var n
										{ 
											@ tag tag
											@ name text
											@ attribs
												{ 
											@ children
												[ 
											@ lines
												[ 
											@ swig true
									set n.parent = wizziTree
									_ wizziTree.children.push(n)
									set wizziTree = n
								else 
									throw 
										new Error('Html.Wizzifier. Wizzi parse onswig unknown tag: ' + tag)
			var addedWrapper = false
			try
				if html && html.length > 0
					var i1 = html.indexOf('<')
					var i2 = html.indexOf('>')
					if i1 > -1 && i2 > -1
						var temp = html.substr(i1+1, i2-i1-1)
						log 'wizzi-tools.htmlparser.addedWrapper.temp', temp
						if temp.toLowerCase().indexOf('!doctype') > -1
							set html = '<html>' + html.substr(i2+1) + '</html>'
						else
							set html = '<html>' + html + '</html>'
						set addedWrapper = true
						log 'wizzi-tools.htmlparser.addedWrapper.html', html
					_ parser.write(html)
					_ parser.end()
			catch ex
				return
					_ callback
						@ ex
			while wizziTree.parent != null
				set wizziTree = wizziTree.parent
			if addedWrapper
				set wizziTree.children = wizziTree.children[0].children
			# log 'wizziTree', wizziTree
			log 'wizzi-tools.htmlparser.wizzify.options.embedTag,wizziTree.children.length', options.embedTag, wizziTree.children.length
			var synthax
			if wizziTree.children.length > 1 && typeof (options.embedTag) === 'string'
				log 'wizzi-tools.htmlparser.wizzify.options.embedTag, wizziTree.children[0]', options.embedTag, wizziTree.children[0]
				if options.embedTag === wizziTree.children[0].tag
					set synthax = wizziTree.children[0]
				else
					set synthax =
						{ 
							@ tag options.embedTag
							@ name ''
							@ attribs
								{ 
							@ children
								[ 
					_ wizziTree.children.forEach
						function 
							param item
							_ synthax.children.push(item)
			else
				if wizziTree.children.length == 1
					set synthax = wizziTree.children[0]
				else
					set synthax =
						{ 
							@ tag 'html'
							@ name '__dummy_root__'
							@ attribs
								{ 
							@ children
								[ 
					_ wizziTree.children.forEach
						function 
							param item
							_ synthax.children.push(item)
			if !synthax
				return
					_ callback
						new Error('Html.Wizzifier.Wizzi parse failed. wizziTree: ' + util.inspect(wizziTree, {depth: 2}))
			r_cb( synthax )

	function wizzify
        param html
        param options
        param callback
		log 'wizzi-tools.htmlparser.wizzify.html', html
		_ parseInternal
			@ html
			@ options
			@ callback
