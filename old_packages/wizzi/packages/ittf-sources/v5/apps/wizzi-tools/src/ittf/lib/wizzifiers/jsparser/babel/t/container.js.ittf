module
	kind jsfile

	import util
	import path
	import async
	var file = require('wizzi-utils').file
	var verify = require('wizzi-utils').verify
	var parser = require("@babel/parser")
	var ittfwriter = require("../../../util/ittfwriter");
	var cleanBabel = require('./cleanBabel')
	var codeReplacer = require('../../../util/jsCodeReplacer')
	var CommentManager = require('../../../util/commentManager')
	var csswizzifier = null
	var htmlwizzifier = null

	var format
		function
			param parent
			param ast
			param options
			if !ast
				throw new Error('missing ast. parent is: ' + util.inspect(parent, { depth: 2 }))
			if parent === null
				if options.starter
					set options.starter = false
				elif options.returnText
					# ok
				else
					_ showstack(options)
					throw new Error('parent is null.' + util.inspect(ast, 4))

			if options.verbose
				# log 'ast.type', ast.type
			var formatter = format[ast.type]
			if formatter
				_ options.stack.push(ast)
				var result = formatter(parent, ast, options)
				_ options.stack.pop()
				return result
			else
				throw new Error('no formatter for type: ' + ast.type)

	var formatText
		function
			param parent
			param ast
			param options
			param node
			var saveReturnText = options.returnText
			set options.returnText = true
			if node
				_ options.formatTextNodes.push(node)
			var value = format(parent, ast, options)
			if node
				_ options.formatTextNodes.pop(); 
			set options.returnText = saveReturnText
			return value
	
	$hook

	var md = module.exports = {}

	$include helper_functions

	var commonPlugins
		[
			@ 'jsx'
			@ "objectRestSpread"
			@ "classProperties"
			@ "doExpressions"
			@ ['decorators', { decoratorsBeforeExport: true }]
			@ "classProperties"
			@ "classPrivateProperties"
			@ "classPrivateMethods"
			@ "exportDefaultFrom"
			@ "exportNamespaceFrom"
			@ "asyncGenerators"
			@ "functionBind"
			@ "functionSent"
			@ "dynamicImport"
			@ "numericSeparator"
			@ "optionalChaining"
			@ "importMeta"
			@ "bigInt"
			@ "optionalCatchBinding"
			@ "throwExpressions"
			@ "nullishCoalescingOperator"


	set md.parse
		function
			param input
			param babelOptions
			set babelOptions = babelOptions || {}
			var plugins
			if babelOptions.ts_or_flow === 'typescript'
				set plugins
					[
						@ 'typescript'
						._ concat
							@ commonPlugins
			else
				set plugins
					[
						@ 'flow'
						._ concat
							@ commonPlugins
			# log 'jswizzifier.container.babelOptions', babelOptions
			return
				_ parser.parse
					@ input
					{
						@ sourceType 'module'
						@ plugins plugins

	set md.getCodeAST
		function
			param input
			param options
			param callback
			set options = options || {}
			set options.input = input
			set options.stack = []
			set options.formatTextNodes = []
			set options.wizziIncludes = []
			set options.stateAST = []
			var babelOptions = options.babel || {}
			var syntax
			var cr
			try
				set cr = codeReplacer.clean(input)
				set syntax = md.parse(cr.codeCleaned, babelOptions)
			catch ex
				return
					_ callback
						@ ex
			_ cleanBabel.cleanAst(syntax)
			_ callback
				@ null
				@ syntax

	set md.getWizziTree
		function
			param input
			param options
			param callback
			# log 'options', options
			
			set options = options || {};
			set options.input = input
			set options.stack = []
			set options.formatTextNodes = []
			set options.wizziIncludes = []
			set options.stateAST = []
			var startTime = Date.now()
			var babelOptions = options.babel || {}
			# log 'Parsed in ' + (Date.now() - startTime) + ' ms'
			
			var syntax
			var cr
			try
				set cr = codeReplacer.clean(input)
				# log 'jsparser.container.cr', cr
				set syntax = md.parse(cr.codeCleaned, babelOptions)
			catch ex
				return
					_ callback
						@ ex

			if options.syntaxOutFile
				_ file.write
					@ options.syntaxOutFile
					_ JSON.stringify
						_ cleanBabel.cleanAst(syntax, cr)
						@ null
						@ 2
			
			set options.starter = true
			set options.replaceds = cr.replaceds
			set options.commentManager = new CommentManager()
			# log 'cr.codeCleaned', cr.codeCleaned
			# log 'cr.replaceds', cr.replaceds
			var root
				{
					@ tag 'module'
					[ children
			if babelOptions.ts_or_flow !== 'typescript'
				_ root.children.push
					{
						@ tag 'kind'
						@ name 'react'
						[ children
			try
				_ format(root, syntax, options)
			catch ex
				return
					_ callback
						@ ex
			
			# log "wizziTree", JSON.stringify(root, null, 2)
			# log 'options.wizziIncludes', options.wizziIncludes
			_ async.map
				@ options.wizziIncludes
				function
					param item
					param callback
					if item.kind === 'css'
						if !csswizzifier
							set csswizzifier = require('../../cssparser/css/wizzifier')
						_ csswizzifier.getWizziTree
							@ item.literal
							{
							f_cb_no_err( ittf )
								# log 'getWizzifierIncludes.item.ittf', ittf
								_ item.node.children.push
									@ ittf
								r_cb()
					else
						if !htmlwizzifier
							set htmlwizzifier = require('../../htmlparser/wizzi/wizzifier')
						_ htmlwizzifier.getWizziTree
							@ item.literal
							{
							f_cb_no_err( ittf )
								# log 'getWizzifierIncludes.item.ittf', ittf
								_ item.node.children.push
									@ ittf
								r_cb()
				f_cb()
					r_cb( root )

	set md.getWizziIttf
		function
			param input
			param options
			param callback
			# log '++++++++++ jswizzify.options', options

			_ md.getWizziTree
				@ input
				@ options
				f_cb( root ) 
					var ittf = ittfwriter.stringify(root, { lang: 'js' });
					# log "md.getWizziIttf\n" + ittf
					_ callback(null, ittf)