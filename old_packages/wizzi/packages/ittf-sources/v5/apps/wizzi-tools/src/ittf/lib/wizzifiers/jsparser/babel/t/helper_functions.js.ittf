$group

	function processLeadingComments
		param node
		param ittfNode
		param options
		_ processComments
			@ node.leadingComments
			@ node
			@ ittfNode
			@ options
			@ true

	function processTrailingComments
		param node
		param ittfNode
		param options
		_ processComments
			@ node.trailingComments
			@ node
			@ ittfNode
			@ options
			@ false

	function processComments
		param comments
		param node
		param ittfNode
		param options
		param leading
		if verify.isArray(comments) && comments.length > 0
			var hb
			foreach item in comments
				# log 'processComments', item
				if item.type === 'CommentLine'
					if codeReplacer.isKey(item.value, options.replaceds)
						if options.commentManager.checkWritten(item) == true
							_ options.commentManager.removeWritten(item)
						var value = codeReplacer.restoreInside(item.value, options.replaceds)
						set hb
							{
								@ tag '#'
								@ name value
								[ children
						_ ittfNode.children.push
							@ hb
					else
						if options.commentManager.checkWritten(item) == true
							_ options.commentManager.removeWritten(item)
						set hb
							{
								@ tag '#'
								@ name item.value
								[ children
						_ ittfNode.children.push
							@ hb
					_ options.commentManager.addWritten(item, ittfNode.children, hb)
				elif item.type === 'CommentBlock'
					if codeReplacer.isKey(item.value, options.replaceds)
						# log 'codeReplacer.isKey', true
						if options.commentManager.checkWritten(item) == true
							_ options.commentManager.removeWritten(item)
						$* stop
						var tag
							iif leading && options.commentManager.leadingIsInline(item, node)
								then '{{&'
								else
									iif !leading && options.commentManager.trailingIsInline(item, node)
										then '&{{'
										else '{{'
						*$
						set hb
							{
								@ tag '{{'
								@ name codeReplacer.restore(item.value, options.replaceds)
								[ children
						_ ittfNode.children.push
							@ hb
					else
						# log 'codeReplacer.isKey', false
						if options.commentManager.checkWritten(item) == true
							_ options.commentManager.removeWritten(item)
						var ss = item.value.split(/\r\n|\r|\n/)
						set hb
							{
								@ tag '#'
								[ children
						foreach s in ss
							_ hb.children.push
								{
									@ tag '#'
									@ name s
									[ children
						_ ittfNode.children.push(hb)
					_ options.commentManager.addWritten(item, ittfNode.children, hb)
	
	function processParams
		param ittfNode
		var pos = getChildPosByTag(ittfNode, 'params')
		var temp = []
		foreach item in ittfNode.children
			if pos == i
				foreach p in item.children
					var plen = childrenLengthNoProps(p)
					# log 'processParams. p.tag', p.tag, 'plen', plen, JSON.stringify(p, null, 2)
					if p.tag !== '{' && p.tag !== '['
						if isTextualNode(p)
							set p.tag = 'param'
							set p.name = getNodeText(p)
						elif verify.isNotEmpty(p.name)
							set p.tag = 'param'
						else
							set p.tag = 'param'
						#
							else
								throw new Error('processParams.error. Param must be a textual or an ObjectPattern. Node:' + JSON.stringify(ittfNode))
					if plen == 1 && ( p.children[0].tag === ':|' || p.children[0].tag === ':&' )
						# union and intersect
						var temp_children = p.children[0]
						set p.children = []
						foreach ui in temp_children.children
							set ui.tag = temp_children.tag === ':|' ? '|' : '&'
							_ p.children.push
								@ ui
					if plen == 2
						if ['@id', '@expr', 'literal'].indexOf(p.children[1].tag) > -1
							# has simple default value (is AssignmentPattern)
							set p.name = p.children[0].name
							if p.children[0].children.length > 0
								set p.children[0].tag = p.children[0].children[0].tag
								set p.children[0].name = ''
								set p.children[0].children = []
							set p.children[1].tag = ':='
						else
							if p.AST === 'AssignmentPattern'
								# has complex default value (is AssignmentPattern)
								set p.children[1]
									{
										@ tag ':='
										@ name ''
										[ children
											@ p.children[1]
					_ temp.push(p)
			else
				_ temp.push(item)
		# log 'wizzifiers.js.processParams.result', JSON.stringify(temp, null, 2)
		set ittfNode.children = temp

	function getNodeText
		param ittfNode
		return ittfNode.textified || ittfNode.name

	function isTextualNode
		param ittfNode
		return ittfNode && (ittfNode.isText || ittfNode.textified)

	function isTextualChildByTag
		param ittfNode
		param tag
		var item = getChildByTag(ittfNode, tag)
		return item && (item.isText || item.textified)

	function replaceChildTag
		param ittfNode
		param oldTag
		param newTag
		var item = getChildByTag(ittfNode, oldTag)
		set item.tag = newTag

	function removeChildByTag
		param ittfNode
		param tag
		var temp = []
		foreach item in ittfNode.children
			if item.tag !== tag
				_ temp.push(item)
		set ittfNode.children = temp

	function getChildByTag
		param ittfNode
		param tag
		foreach item in ittfNode.children
			if item.tag === tag
				return item
		return null

	function getChildPosByTag
		param ittfNode
		param tag
		foreach item in ittfNode.children
			if item.tag === tag
				return i
		return -1

	function replaceChildrenOfChildWhenText
		param ittfNode
		param childPos
		param textTag
		if childPos < 0
			return
		set ittfNode.children
			_ replaceItemInColl
				@ ittfNode.children
				@ childPos
				_ textifyChildren
					@ ittfNode.children[childPos]
					@ textTag

	function replaceItemInColl
		param coll
		param pos
		param replacers
		var ret = []
		foreach item in coll
			if pos == i
				foreach repl in replacers
					_ ret.push(repl)
			else
				_ ret.push(item)
		return ret

	function textifyChildren
		param ittfNode
		param tag
		var ret = []
		foreach item in ittfNode.children
			if item.isText || item.textified
				# log '@@@@@@@ item.tag.isText', item.tag, item.isText
				_ ret.push
					{
						@ tag tag
						@ name item.isText ? item.name : item.textified
						@ textified item.isText ? item.name : item.textified
						[ children
			else
				_ ret.push(item)
		# log '@@@@@@@@@@@@@@@ textifyChildren', ret
		return ret

	function setTextList
		param ittfNode
		param sep
		var sb = []
		foreach item in ittfNode.children
			# log 'setTextList', item.tag, item.isText, item.textified
			if item.isText
				_ sb.push(item.name)
			elif item.textified
				_ sb.push(item.textified)
			else
				return false
		set ittfNode.textified = sb.join(sep)
		set ittfNode.children = []
		return true

	function getTextList
		param ittfNode
		param sep
		var sb = []
		foreach item in ittfNode.children
			if item.isText
				_ sb.push(item.name)
			elif item.textified
				_ sb.push(item.textified)
			else
				# log 'getTextList failed ***************', item
				return null
		return sb.join(sep)

	function setNameFromChildByTag
		param ittfNode
		param tag
		param forceText
		foreach item in ittfNode.children
			if item.tag === tag
				if forceText
					# log '...................setNameFromChildByTag', item
				if item.isText
					set ittfNode.name = item.name
					_ ittfNode.children.splice(i, 1)
					return
				if forceText && item.textified
					set ittfNode.name = item.textified
					_ ittfNode.children.splice(i, 1)
					return

	function objectDeclareKey
		param key
		return key.indexOf(' ') > 0 ? '["' + key + '"]' : key

	function replaceWithSingleChild
		param ittfNode
		param childTag
		param limit
		if isChildrenCount(ittfNode, 1)
			var childTag = ittfNode.children[0].tag
			var testTag = limit ? childTag.substr(0, limit) : childTag
			if testTag === childTag
				set ittfNode.tag = ittfNode.children[0].tag
				set ittfNode.name = ittfNode.children[0].name
				set ittfNode.textified = ittfNode.children[0].textified
				set ittfNode.children = ittfNode.children[0].children
				return true
		return false

	function isChildrenCount
		param ittfNode
		param count
		return ittfNode.children && ittfNode.children.length == count

	function isChildrenCountGreaterEqualThen
		param ittfNode
		param count
		return ittfNode.children && ittfNode.children.length >= count

	function childrenLengthNoProps
		param ittfNode
		var ret = 0
		foreach item in ittfNode.children
			if [':public', ':protected', ':private', ':readonly', ':optional', ':abstract', 'static'].indexOf(item.tag) < 0
				set ret++
		return ret

	function getLiteral
		param ittfNode
		var sb = [], temp
		foreach item in ittfNode.children
			# log 'getLiteral.item', item
			if item.tag === '+'
				set temp = verify.replaceAll(verify.replaceAll(item.name, '\\n', '\n'), '\\b', ' ')
				_ sb.push(temp)
			if item.tag === '@'
				_ sb.push('${ __dollar}{' + item.name + '}')
		return sb.join('')

	function isFlowPrimitiveTag
		param s
		return [':string', ':number', ':boolean', ':{', ':[', ':func', ':?string', ':?number', ':?boolean', ':?{', ':?[', ':?func', ':void', ':null'].indexOf(s) > -1

	function isTypeReference
		param s
		return [':ref', ':string', ':number', ':boolean', ':{', ':[', ':func', ':void', ':null', ':never'].indexOf(s) > -1

		