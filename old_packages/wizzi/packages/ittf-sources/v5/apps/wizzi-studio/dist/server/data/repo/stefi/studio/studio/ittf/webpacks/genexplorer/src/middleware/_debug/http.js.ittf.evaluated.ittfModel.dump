  module  ids: undefined undefined
    kind react ids: undefined undefined
    +  ids: undefined undefined
    import util ids: undefined undefined
    import querystring ids: undefined undefined
    import axios ids: undefined undefined
    import _ from 'lodash' ids: undefined undefined
    # import { pushState } from 'redux-react-router' ids: undefined undefined
    import utils from '../lib/utils' ids: undefined undefined
    import config from './config' ids: undefined undefined
    import { normalize } from 'normalizr' ids: undefined undefined
    +  ids: undefined undefined
    const { notEmptyString } = utils ids: undefined undefined
    const error = utils.error('dashredux/middleware/http') ids: undefined undefined
    const throwError = utils.throwError('dashredux/middleware/http') ids: undefined undefined
    +  ids: undefined undefined
    +  ids: undefined undefined
    const methods = ['get', 'post', 'put', 'delete', 'create'] ids: undefined undefined
    const trueMethods = ['get', 'post'] ids: undefined undefined
    +  ids: undefined undefined
    function validateCreateAxiosConfig ids: undefined undefined
      param actionHttpRequest ids: undefined undefined
      +  ids: undefined undefined
      var { url } = actionHttpRequest ids: undefined undefined
      const { method, queryParams, payload, responseType, timeout } = actionHttpRequest ids: undefined undefined
      +  ids: undefined undefined
      if typeof url !== 'string' ids: undefined undefined
        _ throwError ids: undefined undefined
          @ 'Specify a string endpoint URL. actionHttpRequest: ' + util.inspect(actionHttpRequest, { depth:null }) ids: undefined undefined
          @ 'validateCreateAxiosConfig' ids: undefined undefined
      +  ids: undefined undefined
      var urlHasParams = url.indexOf('?') > -1 ids: undefined undefined
      +  ids: undefined undefined
      if queryParams ids: undefined undefined
        if !_.isObject(queryParams) ids: undefined undefined
          _ throwError ids: undefined undefined
            @ 'The property queryParams must be an object. actionHttpRequest: ' + util.inspect(actionHttpRequest, { depth:null }) ids: undefined undefined
            @ 'validateCreateAxiosConfig' ids: undefined undefined
        set url = url + (urlHasParams ? '&' : '?') + querystring.stringify(queryParams, '&', '=') ids: undefined undefined
        set urlHasParams = true ids: undefined undefined
      +  ids: undefined undefined
      if methods.indexOf(actionHttpRequest.method) === -1 ids: undefined undefined
        _ throwError ids: undefined undefined
          @ 'Invalid http method: "' + actionHttpRequest.method + '" actionHttpRequest:' + util.inspect(actionHttpRequest, { depth:null }) ids: undefined undefined
          @ 'validateAxiosConfig' ids: undefined undefined
      if trueMethods.indexOf(actionHttpRequest.method) === -1 ids: undefined undefined
        set url = url + (urlHasParams ? '&' : '?') + '_method=' + actionHttpRequest.method ids: undefined undefined
        set actionHttpRequest.method = 'post' ids: undefined undefined
        set urlHasParams = true ids: undefined undefined
      +  ids: undefined undefined
      var ret ids: undefined undefined
        {  ids: undefined undefined
          @ url url ids: undefined undefined
          @ method method ids: undefined undefined
      if method === 'post' && payload ids: undefined undefined
        set ret.data = payload ids: undefined undefined
      set ret.responseType = responseType || config.defaultResponseType ids: undefined undefined
      set ret.timeout = timeout || config.defaultTimeout ids: undefined undefined
      +  ids: undefined undefined
      log 'validateCreateAxiosConfig.ret', ret ids: undefined undefined
      +  ids: undefined undefined
      return ret ids: undefined undefined
    +  ids: undefined undefined
    function createReceiveAction ids: undefined undefined
      param actionType ids: undefined undefined
      param initialAction ids: undefined undefined
      param response ids: undefined undefined
      param schema ids: undefined undefined
      +  ids: undefined undefined
      log 'createReceiveAction.response.data', response.data, response.status ids: undefined undefined
      const payload = schema ? normalize(response.data.data, schema) : response.data.data ids: undefined undefined
      log 'createReceiveAction.payload', payload ids: undefined undefined
      +  ids: undefined undefined
      var finalAction ids: undefined undefined
        _ _.assign ids: undefined undefined
          {  ids: undefined undefined
          @ initialAction ids: undefined undefined
          {  ids: undefined undefined
            @ type actionType ids: undefined undefined
            @ payload payload ids: undefined undefined
            @ status response.status ids: undefined undefined
            @ statusText response.statusText ids: undefined undefined
            @ headers response.headers ids: undefined undefined
      delete finalAction[config.HTTP_REQUEST] ids: undefined undefined
      return finalAction ids: undefined undefined
    +  ids: undefined undefined
    wz-function sendRequest ids: undefined undefined
      param actionHttpRequest ids: undefined undefined
      param initialAction ids: undefined undefined
      param dispatch ids: undefined undefined
      const { schema, types } = actionHttpRequest ids: undefined undefined
      const [ requestType, successType, failureType ] = types ids: undefined undefined
      +  ids: undefined undefined
      var axiosConfig ids: undefined undefined
        _ validateCreateAxiosConfig(actionHttpRequest) ids: undefined undefined
      +  ids: undefined undefined
      log 'middleware/http/sendRequest.axiosConfig', axiosConfig ids: undefined undefined
      +  ids: undefined undefined
      if notEmptyString(requestType) ids: undefined undefined
        _ dispatch ids: undefined undefined
          {  ids: undefined undefined
            @ type requestType ids: undefined undefined
      return  ids: undefined undefined
        _ axios ids: undefined undefined
          @ axiosConfig ids: undefined undefined
          ._ then ids: undefined undefined
            function  ids: undefined undefined
              param response ids: undefined undefined
              _ dispatch ids: undefined undefined
                _ createReceiveAction ids: undefined undefined
                  @ successType ids: undefined undefined
                  @ initialAction ids: undefined undefined
                  @ response ids: undefined undefined
                  @ schema ids: undefined undefined
              log 'sendRequest.then actionHttpRequest.next', actionHttpRequest.next ids: undefined undefined
              if actionHttpRequest.next != null ids: undefined undefined
                _ dispatch(actionHttpRequest.next) ids: undefined undefined
            ._ catch ids: undefined undefined
              function  ids: undefined undefined
                param response ids: undefined undefined
                _ dispatch ids: undefined undefined
                  _ createReceiveAction ids: undefined undefined
                    @ failureType ids: undefined undefined
                    @ initialAction ids: undefined undefined
                    @ response ids: undefined undefined