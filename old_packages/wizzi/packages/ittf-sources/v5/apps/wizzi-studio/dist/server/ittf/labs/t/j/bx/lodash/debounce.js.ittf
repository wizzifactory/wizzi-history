$group

    function debounce
        param func
        param wait
        param options
        
		var 
            decl lastArgs
            decl lastThis
            decl maxWait
            decl result
            decl timerId
            decl lastCallTime
        var lastInvokeTime = 0
        var leading = false
        var maxing = false
        var trailing = true
        
		if typeof (func) != 'function'
            throw 
                new TypeError('Expected a function')
        set wait = (+(wait) || 0)
        
		if isObject(options)
            set leading = !!options.leading
            set maxing = 'maxWait' in options
            set maxWait = maxing ? Math.max((+options.maxWait || 0), wait) : maxWait
            set trailing = 'trailing' in options ? !!options.trailing : trailing
        
		function invokeFunc
            param time
            var args = lastArgs
            var thisArg = lastThis
            set lastArgs = lastThis = undefined
            set lastInvokeTime = time
            set result = func.apply(thisArg, args)
            return result
        
		function leadingEdge
            param time
            set lastInvokeTime = time
            set timerId = setTimeout(timerExpired, wait)
            return 
                iif leading
                    then 
                        _ invokeFunc(time)
                    else result
        
		function remainingWait
            param time
            var timeSinceLastCall = (time - lastCallTime)
            var timeSinceLastInvoke = (time - lastInvokeTime)
            var result = (wait - timeSinceLastCall)
            return 
                iif maxing
                    then 
                        _ Math.min(result, (maxWait - timeSinceLastInvoke))
                    else result
        
		function shouldInvoke
            param time
            var timeSinceLastCall = (time - lastCallTime)
            var timeSinceLastInvoke = (time - lastInvokeTime)
            return lastCallTime === undefined || timeSinceLastCall >= wait
				\b || timeSinceLastCall < 0 || (maxing && timeSinceLastInvoke >= maxWait)
        
		function timerExpired
            var time = Date.now()
            if shouldInvoke(time)
                return trailingEdge(time)
            set timerId = setTimeout(timerExpired, remainingWait(time))
        
		function trailingEdge
            param time
            set timerId = undefined
            if trailing && lastArgs
                return invokeFunc(time)
            set lastArgs = lastThis = undefined
            return result
        function cancel
            if timerId !== undefined
                _ clearTimeout(timerId)
            set lastInvokeTime = 0
            set lastArgs = lastCallTime = lastThis = timerId = undefined
        function flush
            return 
                iif timerId === undefined
                    then result
                    else 
                        _ trailingEdge
                            _ Date.now()
        function debounced
			param ...args
            
			var time = Date.now()
            var isInvoking = shouldInvoke(time)
            set lastArgs = args
            set lastThis = this
            set lastCallTime = time
            if isInvoking
                if timerId === undefined
                    return leadingEdge(lastCallTime)
                if maxing
                    set timerId = setTimeout(timerExpired, wait)
                    return invokeFunc(lastCallTime)
            if timerId === undefined
                set timerId = setTimeout(timerExpired, wait)
            return result
        set debounced.cancel = cancel
        set debounced.flush = flush
        return debounced
