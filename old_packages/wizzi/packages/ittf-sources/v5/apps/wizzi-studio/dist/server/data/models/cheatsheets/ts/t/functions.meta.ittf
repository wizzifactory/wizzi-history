element function
	tag function
	ast 
	category
	
	item
		title Typed functions 1
		expected
			+ function add(x: number, y: number): number {
				+ return x + y;
			+ }
			+ let myAdd = function (x: number, y: number): number { return x + y; };
		ittf
			+
				function add
					param x
						:number 
					param y
						:number 
					:return
						:number 
					return x + y
				let myAdd
					function 
						param x
							:number 
						param y
							:number 
						:return
							:number 
						return x + y

	item
		title Typed functions 2
		expected
			+ let myAdd: (baseValue: number, increment: number) => number =
				+ function (x, y) { return x + y; };
		ittf
			let myAdd
				:=> 
					:number 
					param x
						:number 
					param y
						:number 
				function 
					param x
						:number 
					param y
						:number 
					:return
						:number 
					return x + y

	item
		title Optional parameters
		expected
			+ function buildName(firstName: string, lastName?: string) {
				+ if (lastName)
					+ return firstName + " " + lastName;
				+ else
					+ return firstName;
			+ }
			+ let result1 = buildName("Bob");                  // error, too few parameters
			+ let result2 = buildName("Bob", "Adams", "Sr.");  // error, too many parameters
			+ let result3 = buildName("Bob", "Adams");         // ah, just right

		ittf
			+
				function buildName
					param firstName
						:string 
					param lastName
						:string 
						:optional 
					if lastName
						return firstName + " " + lastName
					else
						return firstName
				# error, too few parameters
				let result1 = buildName("Bob")
				# error, too many parameters
				let result2 = buildName("Bob", "Adams", "Sr.")
				# ah, just right
				let result3 = buildName("Bob", "Adams")

	item
		title Rest parameters
		expected
			+ function buildName(firstName: string, ...restOfName: string[]) {
				+ return firstName + " " + restOfName.join(" ");
			+ }
			+ let buildNameFun: (fname: string, ...rest: string[]) => string = buildName;
		ittf
			+
				function buildName
					param firstName
						:string 
					param ...restOfName
						:[ 
							:string 
					return firstName + " " + restOfName.join(" ")

				let buildNameFun
					:=> 
						:string 
						param fname
							:string 
						param ...rest
							:[ 
								:string 
					:= buildName
    
	item
		title This and arrow functions
		expected
			+ let deck = {
				+ suits: ["hearts", "spades", "clubs", "diamonds"],
				+ cards: Array(52),
				+ createCardPicker: function () {
					+ return () => {
						+ let pickedCard = Math.floor(Math.random() * 52);
						+ let pickedSuit = Math.floor(pickedCard / 13);
						+ return { suit: this.suits[pickedSuit], card: pickedCard % 13 };
					+ }
				+ }
			+ }
			+ let cardPicker = deck.createCardPicker();
			+ let pickedCard = cardPicker();
			+ alert("card: " + pickedCard.card + " of " + pickedCard.suit);

		ittf
			let deck
				{ 
					[ suits
						@ "hearts"
						@ "spades"
						@ "clubs"
						@ "diamonds"
					@ cards Array(52)
					@ createCardPicker
						function 
							# NOTE: the line below is now an arrow function, allowing us to capture 'this' right here
							return 
								=> 
									let pickedCard = Math.floor(Math.random() * 52)
									let pickedSuit = Math.floor(pickedCard / 13)
									return 
										{ 
											@ suit this.suits[pickedSuit]
											@ card pickedCard % 13

	item
		title This parameters in callbacks
		expected
			+ interface UIElement {
				+ addClickListener(onclick: (this: void, e: Event) => void): void;
			+ }
			+ class Handler {
				+ info: string;
				+ onClickBad(this: Handler, e: Event) {
					+ // oops, used this here. using this callback would crash at runtime
					+ this.info = e.message;
				+ }
			+ }

		ittf
			+
				:interface UIElement
					:m addClickListener
						:void 
						param onclick
							:=> 
								:void 
								param this
									:void 
								param e
									:ref Event
    
				class Handler
					p info
						:string 
					m onClickBad
						param this
							:ref Handler
						param e
							:ref Event
						set this.info = e.message

	item
		title Overloads 1
		expected
			+ let suits = ["hearts", "spades", "clubs", "diamonds"];
			+ function pickCard(x): any {
				+ // Check to see if we're working with an object/array
				+ // if so, they gave us the deck and we'll pick the card
				+ if (typeof x == "object") {
					+ let pickedCard = Math.floor(Math.random() * x.length);
					+ return pickedCard;
				+ }
				+ // Otherwise just let them pick the card
				+ else if (typeof x == "number") {
					+ let pickedSuit = Math.floor(x / 13);
					+ return { suit: suits[pickedSuit], card: x % 13 };
				+ }
			+ }

		ittf
			+
				let suits
					[ 
						@ "hearts"
						@ "spades"
						@ "clubs"
						@ "diamonds"
				function pickCard
					param x
					:return
						:any 
					if typeof x == "object"
						let pickedCard = Math.floor(Math.random() * x.length)
						return pickedCard
					else
						# Otherwise just let them pick the card
						if typeof x == "number"
							let pickedSuit = Math.floor(x / 13)
							return 
								{ 
									@ suit suits[pickedSuit]
									@ card x % 13

	item
		title Overloads 2
		expected
			+ let suits = ["hearts", "spades", "clubs", "diamonds"];
			+ function pickCard(x: { suit: string; card: number; }[]): number;
			+ function pickCard(x: number): { suit: string; card: number; };
			+ function pickCard(x): any {
				+ // Check to see if we're working with an object/array
				+ // if so, they gave us the deck and we'll pick the card
				+ if (typeof x == "object") {
					+ let pickedCard = Math.floor(Math.random() * x.length);
					+ return pickedCard;
				+ }
				+ // Otherwise just let them pick the card
				+ else if (typeof x == "number") {
					+ let pickedSuit = Math.floor(x / 13);
					+ return { suit: suits[pickedSuit], card: x % 13 };
				+ }
			+ }
		ittf
			+
				let suits
					[ 
						@ "hearts"
						@ "spades"
						@ "clubs"
						@ "diamonds"
				:function pickCard
					param x
						:[ 
							:{ 
								:p suit
									:string 
								:p card
									:number 
					:return
						:number 

				:function pickCard
					param x
						:number 
					:return
						:{ 
							:p suit
								:string 
							:p card
								:number 
    
				function pickCard
					param x
					:return
						:any 
					# if so, they gave us the deck and we'll pick the card
					if typeof x == "object"
						let pickedCard = Math.floor(Math.random() * x.length)
						return pickedCard
					else
						# Otherwise just let them pick the card
						if typeof x == "number"
							let pickedSuit = Math.floor(x / 13)
							return 
								{ 
									@ suit suits[pickedSuit]
									@ card x % 13