$group

	# Copyright 
	# https://github.com/qix-/color-convert
    
	j/iife-wrapped( BxColorConversions, colorNames )

		var reverseKeywords
			{ 
		
		for var key in colorNames
			if colorNames.hasOwnProperty(key)
				set reverseKeywords[colorNames[key]] = key
		
		var colorConversions
			{ 
				@ rgb
					{ 
						@ channels 3
						@ labels 'rgb'
				@ hsl
					{ 
						@ channels 3
						@ labels 'hsl'
				@ hsv
					{ 
						@ channels 3
						@ labels 'hsv'
				@ hwb
					{ 
						@ channels 3
						@ labels 'hwb'
				@ cmyk
					{ 
						@ channels 4
						@ labels 'cmyk'
				@ xyz
					{ 
						@ channels 3
						@ labels 'xyz'
				@ lab
					{ 
						@ channels 3
						@ labels 'lab'
				@ lch
					{ 
						@ channels 3
						@ labels 'lch'
				@ hex
					{ 
						@ channels 1
						@ labels
							[ 
								@ 'hex'
				@ keyword
					{ 
						@ channels 1
						@ labels
							[ 
								@ 'keyword'
				@ ansi16
					{ 
						@ channels 1
						@ labels
							[ 
								@ 'ansi16'
				@ ansi256
					{ 
						@ channels 1
						@ labels
							[ 
								@ 'ansi256'
				@ hcg
					{ 
						@ channels 3
						@ labels
							[ 
								@ 'h'
								@ 'c'
								@ 'g'
				@ apple
					{ 
						@ channels 3
						@ labels
							[ 
								@ 'r16'
								@ 'g16'
								@ 'b16'
				@ gray
					{ 
						@ channels 1
						@ labels
							[ 
								@ 'gray'
		
		for var model in colorConversions
			if colorConversions.hasOwnProperty(model)
				if ! ('channels' in colorConversions[model])
					throw 
						new Error(('missing channels property: ' + model))
				if ! ('labels' in colorConversions[model])
					throw 
						new Error(('missing channel labels property: ' + model))
				if colorConversions[model].labels.length !== colorConversions[model].channels
					throw 
						new Error(('channel and label counts mismatch: ' + model))
				var channels = colorConversions[model].channels
				var labels = colorConversions[model].labels
				set delete (colorConversions[model].channels)
				set delete (colorConversions[model].labels)
				_ Object.defineProperty
					@ colorConversions[model]
					@ 'channels'
					{ 
						@ value channels
				_ Object.defineProperty
					@ colorConversions[model]
					@ 'labels'
					{ 
						@ value labels
		set colorConversions.rgb.hsl =
			function 
				param rgb
				var r = rgb[0] / 255
				var g = rgb[1] / 255
				var b = rgb[2] / 255
				var min = Math.min(r, g, b)
				var max = Math.max(r, g, b)
				var delta = (max - min)
				var h
				var s
				var l
				if max === min
					set h = 0
				elif r === max
					set h = (((g - b)) / delta)
				elif g === max
					set h = (2 + ((((b - r)) / delta)))
				elif b === max
					set h = (4 + ((((r - g)) / delta)))
				set h = Math.min(h * 60, 360)
				if h < 0
					set h += 360
				set l = (((min + max)) / 2)
				if max === min
					set s = 0
				elif l <= 0.5
					set s = (delta / ((max + min)))
				else 
					set s = (delta / ((((2 - max)) - min)))
				return 
					[ 
						@ h
						@ s * 100
						@ l * 100
		set colorConversions.rgb.hsv =
			function 
				param rgb
				var r = rgb[0]
				var g = rgb[1]
				var b = rgb[2]
				var min = Math.min(r, g, b)
				var max = Math.max(r, g, b)
				var delta = (max - min)
				var h
				var s
				var v
				if max === 0
					set s = 0
				else 
					set s = ((((delta / max) * 1000)) / 10)
				if max === min
					set h = 0
				elif r === max
					set h = (((g - b)) / delta)
				elif g === max
					set h = (2 + ((((b - r)) / delta)))
				elif b === max
					set h = (4 + ((((r - g)) / delta)))
				set h = Math.min(h * 60, 360)
				if h < 0
					set h += 360
				set v = ((((max / 255) * 1000)) / 10)
				return 
					[ 
						@ h
						@ s
						@ v
		set colorConversions.rgb.hwb =
			function 
				param rgb
				var r = rgb[0]
				var g = rgb[1]
				var b = rgb[2]
				var h
					_ colorConversions.rgb.hsl(rgb)
						.[ 
							@ 0
				var w = ((1 / 255) * Math.min(r, Math.min(g, b)))
				set b = (1 - (((1 / 255) * Math.max(r, Math.max(g, b)))))
				return 
					[ 
						@ h
						@ w * 100
						@ b * 100
		set colorConversions.rgb.cmyk =
			function 
				param rgb
				var r = rgb[0] / 255
				var g = rgb[1] / 255
				var b = rgb[2] / 255
				var c
				var m
				var y
				var k
				set k = Math.min((1 - r), (1 - g), (1 - b))
				set c = (((((((1 - r)) - k)) / ((1 - k)))) || 0)
				set m = (((((((1 - g)) - k)) / ((1 - k)))) || 0)
				set y = (((((((1 - b)) - k)) / ((1 - k)))) || 0)
				return 
					[ 
						@ c * 100
						@ m * 100
						@ y * 100
						@ k * 100
		function comparativeDistance
			param x
			param y
			return (((Math.pow((x[0] - y[0]), 2) + Math.pow((x[1] - y[1]), 2))) + Math.pow((x[2] - y[2]), 2))
		set colorConversions.rgb.keyword =
			function 
				param rgb
				var reversed = reverseKeywords[rgb]
				if reversed
					return reversed
				var currentClosestDistance = Infinity
				var currentClosestKeyword
				for var keyword in colorNames
					if colorNames.hasOwnProperty(keyword)
						var value = colorNames[keyword]
						var distance = comparativeDistance(rgb, value)
						if distance < currentClosestDistance
							set currentClosestDistance = distance
							set currentClosestKeyword = keyword
				return currentClosestKeyword
		set colorConversions.keyword.rgb =
			function 
				param keyword
				return colorNames[keyword]
		set colorConversions.rgb.xyz =
			function 
				param rgb
				var r = rgb[0] / 255
				var g = rgb[1] / 255
				var b = rgb[2] / 255
				set r = r > 0.04045 ? Math.pow((((r + 0.055)) / 1.055), 2.4) : r / 12.92
				set g = g > 0.04045 ? Math.pow((((g + 0.055)) / 1.055), 2.4) : g / 12.92
				set b = b > 0.04045 ? Math.pow((((b + 0.055)) / 1.055), 2.4) : b / 12.92
				var x = ((((r * 0.4124) + (g * 0.3576))) + (b * 0.1805))
				var y = ((((r * 0.2126) + (g * 0.7152))) + (b * 0.0722))
				var z = ((((r * 0.0193) + (g * 0.1192))) + (b * 0.9505))
				return 
					[ 
						@ x * 100
						@ y * 100
						@ z * 100
		set colorConversions.rgb.lab =
			function 
				param rgb
				var xyz = colorConversions.rgb.xyz(rgb)
				var x = xyz[0]
				var y = xyz[1]
				var z = xyz[2]
				var l
				var a
				var b
				set x /= 95.047
				set y /= 100
				set z /= 108.883
				set x = x > 0.008856 ? Math.pow(x, 1 / 3) : ((7.787 * x) + (16 / 116))
				set y = y > 0.008856 ? Math.pow(y, 1 / 3) : ((7.787 * y) + (16 / 116))
				set z = z > 0.008856 ? Math.pow(z, 1 / 3) : ((7.787 * z) + (16 / 116))
				set l = ((116 * y) - 16)
				set a = (500 * ((x - y)))
				set b = (200 * ((y - z)))
				return 
					[ 
						@ l
						@ a
						@ b
		set colorConversions.hsl.rgb =
			function 
				param hsl
				var h = hsl[0] / 360
				var s = hsl[1] / 100
				var l = hsl[2] / 100
				var t1
				var t2
				var t3
				var rgb
				var val
				if s === 0
					set val = l * 255
					return 
						[ 
							@ val
							@ val
							@ val
				if l < 0.5
					set t2 = (l * ((1 + s)))
				else 
					set t2 = (((l + s)) - (l * s))
				set t1 = ((2 * l) - t2)
				set rgb = [0, 0, 0]
				for var i = 0; i < 3; i++
					set t3 = (h + (((1 / 3) * - ((i - 1)))))
					if t3 < 0
						set t3++
					if t3 > 1
						set t3--
					if ((6 * t3) < 1)
						set val = (t1 + ((((((t2 - t1)) * 6)) * t3)))
					elif ((2 * t3) < 1)
						set val = t2
					elif ((3 * t3) < 2)
						set val = (t1 + ((((((t2 - t1)) * (((2 / 3) - t3)))) * 6)))
					else 
						set val = t1
					set rgb[i] = val * 255
				return rgb
		set colorConversions.hsl.hsv =
			function 
				param hsl
				var h = hsl[0]
				var s = hsl[1] / 100
				var l = hsl[2] / 100
				var smin = s
				var lmin = Math.max(l, 0.01)
				var sv
				var v
				set l *= 2
				set s *= l <= 1 ? l : (2 - l)
				set smin *= lmin <= 1 ? lmin : (2 - lmin)
				set v = (((l + s)) / 2)
				set sv = l === 0 ? ((2 * smin) / ((lmin + smin))) : ((2 * s) / ((l + s)))
				return 
					[ 
						@ h
						@ sv * 100
						@ v * 100
		set colorConversions.hsv.rgb =
			function 
				param hsv
				var h = hsv[0] / 60
				var s = hsv[1] / 100
				var v = hsv[2] / 100
				var hi = Math.floor(h) % 6
				var f = (h - Math.floor(h))
				var p = ((255 * v) * ((1 - s)))
				var q = ((255 * v) * ((1 - (s * f))))
				var t = ((255 * v) * ((1 - ((s * ((1 - f)))))))
				set v *= 255
				switch hi
					case 0
						return 
							[ 
								@ v
								@ t
								@ p
					case 1
						return 
							[ 
								@ q
								@ v
								@ p
					case 2
						return 
							[ 
								@ p
								@ v
								@ t
					case 3
						return 
							[ 
								@ p
								@ q
								@ v
					case 4
						return 
							[ 
								@ t
								@ p
								@ v
					case 5
						return 
							[ 
								@ v
								@ p
								@ q
		set colorConversions.hsv.hsl =
			function 
				param hsv
				var h = hsv[0]
				var s = hsv[1] / 100
				var v = hsv[2] / 100
				var vmin = Math.max(v, 0.01)
				var lmin
				var sl
				var l
				set l = (((2 - s)) * v)
				set lmin = (((2 - s)) * vmin)
				set sl = s * vmin
				set sl /= lmin <= 1 ? lmin : (2 - lmin)
				set sl = (sl || 0)
				set l /= 2
				return 
					[ 
						@ h
						@ sl * 100
						@ l * 100
		set colorConversions.hwb.rgb =
			function 
				param hwb
				var h = hwb[0] / 360
				var wh = hwb[1] / 100
				var bl = hwb[2] / 100
				var ratio = (wh + bl)
				var i
				var v
				var f
				var n
				if ratio > 1
					set wh /= ratio
					set bl /= ratio
				set i = Math.floor(6 * h)
				set v = (1 - bl)
				set f = ((6 * h) - i)
				if ((i & 0x01) !== 0)
					set f = (1 - f)
				set n = (wh + ((f * ((v - wh)))))
				var r
				var g
				var b
				switch i
					default 
					case 6
					case 0
						set r = v
						set g = n
						set b = wh
						break 
					case 1
						set r = n
						set g = v
						set b = wh
						break 
					case 2
						set r = wh
						set g = v
						set b = n
						break 
					case 3
						set r = wh
						set g = n
						set b = v
						break 
					case 4
						set r = n
						set g = wh
						set b = v
						break 
					case 5
						set r = v
						set g = wh
						set b = n
						break 
				return 
					[ 
						@ r * 255
						@ g * 255
						@ b * 255
		set colorConversions.cmyk.rgb =
			function 
				param cmyk
				var c = cmyk[0] / 100
				var m = cmyk[1] / 100
				var y = cmyk[2] / 100
				var k = cmyk[3] / 100
				var r
				var g
				var b
				set r = (1 - Math.min(1, (((c * ((1 - k)))) + k)))
				set g = (1 - Math.min(1, (((m * ((1 - k)))) + k)))
				set b = (1 - Math.min(1, (((y * ((1 - k)))) + k)))
				return 
					[ 
						@ r * 255
						@ g * 255
						@ b * 255
		set colorConversions.xyz.rgb =
			function 
				param xyz
				var x = xyz[0] / 100
				var y = xyz[1] / 100
				var z = xyz[2] / 100
				var r
				var g
				var b
				set r = ((((x * 3.2406) + (y * - (1.5372)))) + (z * - (0.4986)))
				set g = ((((x * - (0.9689)) + (y * 1.8758))) + (z * 0.0415))
				set b = ((((x * 0.0557) + (y * - (0.2040)))) + (z * 1.0570))
				set r = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055) : r * 12.92
				set g = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055) : g * 12.92
				set b = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055) : b * 12.92
				set r = Math.min(Math.max(0, r), 1)
				set g = Math.min(Math.max(0, g), 1)
				set b = Math.min(Math.max(0, b), 1)
				return 
					[ 
						@ r * 255
						@ g * 255
						@ b * 255
		set colorConversions.xyz.lab =
			function 
				param xyz
				var x = xyz[0]
				var y = xyz[1]
				var z = xyz[2]
				var l
				var a
				var b
				set x /= 95.047
				set y /= 100
				set z /= 108.883
				set x = x > 0.008856 ? Math.pow(x, 1 / 3) : ((7.787 * x) + (16 / 116))
				set y = y > 0.008856 ? Math.pow(y, 1 / 3) : ((7.787 * y) + (16 / 116))
				set z = z > 0.008856 ? Math.pow(z, 1 / 3) : ((7.787 * z) + (16 / 116))
				set l = ((116 * y) - 16)
				set a = (500 * ((x - y)))
				set b = (200 * ((y - z)))
				return 
					[ 
						@ l
						@ a
						@ b
		set colorConversions.lab.xyz =
			function 
				param lab
				var l = lab[0]
				var a = lab[1]
				var b = lab[2]
				var x
				var y
				var z
				set y = (((l + 16)) / 116)
				set x = ((a / 500) + y)
				set z = (y - (b / 200))
				var y2 = Math.pow(y, 3)
				var x2 = Math.pow(x, 3)
				var z2 = Math.pow(z, 3)
				set y = y2 > 0.008856 ? y2 : (((y - (16 / 116))) / 7.787)
				set x = x2 > 0.008856 ? x2 : (((x - (16 / 116))) / 7.787)
				set z = z2 > 0.008856 ? z2 : (((z - (16 / 116))) / 7.787)
				set x *= 95.047
				set y *= 100
				set z *= 108.883
				return 
					[ 
						@ x
						@ y
						@ z
		set colorConversions.lab.lch =
			function 
				param lab
				var l = lab[0]
				var a = lab[1]
				var b = lab[2]
				var hr
				var h
				var c
				set hr = Math.atan2(b, a)
				set h = ((((hr * 360) / 2)) / Math.PI)
				if h < 0
					set h += 360
				set c = Math.sqrt(((a * a) + (b * b)))
				return 
					[ 
						@ l
						@ c
						@ h
		set colorConversions.lch.lab =
			function 
				param lch
				var l = lch[0]
				var c = lch[1]
				var h = lch[2]
				var a
				var b
				var hr
				set hr = ((((h / 360) * 2)) * Math.PI)
				set a = c * Math.cos(hr)
				set b = c * Math.sin(hr)
				return 
					[ 
						@ l
						@ a
						@ b
		set colorConversions.rgb.ansi16 =
			function 
				param args
				var r = args[0]
				var g = args[1]
				var b = args[2]
				var value
					iif 1 in arguments
						then 
							set arguments[1]
						else 
							_ colorConversions.rgb.hsv(args)
								.[ 
									@ 2
				set value = Math.round(value / 50)
				if value === 0
					return 30
				var ansi = (30 + (((((Math.round(b / 255) << 2) | (Math.round(g / 255) << 1))) | Math.round(r / 255))))
				if value === 2
					set ansi += 60
				return ansi
		set colorConversions.hsv.ansi16 =
			function 
				param args
				return 
					_ colorConversions.rgb.ansi16
						_ colorConversions.hsv.rgb(args)
						@ args[2]
		set colorConversions.rgb.ansi256 =
			function 
				param args
				var r = args[0]
				var g = args[1]
				var b = args[2]
				if ((r === g) && (g === b))
					if r < 8
						return 16
					if r > 248
						return 231
					return (Math.round((((((r - 8)) / 247)) * 24)) + 232)
				var ansi = (((((16 + (36 * Math.round(((r / 255) * 5))))) + (6 * Math.round(((g / 255) * 5))))) + Math.round(((b / 255) * 5)))
				return ansi
		set colorConversions.ansi16.rgb =
			function 
				param args
				var color = args % 10
				if ((color === 0) || (color === 7))
					if args > 50
						set color += 3.5
					set color = ((color / 10.5) * 255)
					return 
						[ 
							@ color
							@ color
							@ color
				var mult = (((~ (~ (args > 50)) + 1)) * 0.5)
				var r = ((((color & 1) * mult)) * 255)
				var g = (((((((color >> 1)) & 1)) * mult)) * 255)
				var b = (((((((color >> 2)) & 1)) * mult)) * 255)
				return 
					[ 
						@ r
						@ g
						@ b
		set colorConversions.ansi256.rgb =
			function 
				param args
				if args >= 232
					var c = (((((args - 232)) * 10)) + 8)
					return 
						[ 
							@ c
							@ c
							@ c
				set args -= 16
				var rem
				var r = ((Math.floor(args / 36) / 5) * 255)
				var g = ((Math.floor(((rem = args % 36) / 6)) / 5) * 255)
				var b = ((((rem % 6) / 5)) * 255)
				return 
					[ 
						@ r
						@ g
						@ b
		set colorConversions.rgb.hex =
			function 
				param args
				var integer = ((((((Math.round(args[0]) & 0xFF) << 16)) + (((Math.round(args[1]) & 0xFF) << 8)))) + (Math.round(args[2]) & 0xFF))
				var string
					_ integer.toString(16)
						._ toUpperCase()
				return ('000000'.substring(string.length) + string)
		set colorConversions.hex.rgb =
			function 
				param args
				var match
					_ args.toString(16)
						._ match(/[a-f0-9]{6}|[a-f0-9]{3}/i)
				if ! (match)
					return 
						[ 
							@ 0
							@ 0
							@ 0
				var colorString = match[0]
				if match[0].length === 3
					set colorString = colorString.split('').map(function (char){ (char + char);  }).join('')
				var integer = parseInt(colorString, 16)
				var r = (((integer >> 16)) & 0xFF)
				var g = (((integer >> 8)) & 0xFF)
				var b = integer & 0xFF
				return 
					[ 
						@ r
						@ g
						@ b
		set colorConversions.rgb.hcg =
			function 
				param rgb
				var r = rgb[0] / 255
				var g = rgb[1] / 255
				var b = rgb[2] / 255
				var max
					_ Math.max
						_ Math.max(r, g)
						@ b
				var min
					_ Math.min
						_ Math.min(r, g)
						@ b
				var chroma = (max - min)
				var grayscale
				var hue
				if chroma < 1
					set grayscale = (min / ((1 - chroma)))
				else 
					set grayscale = 0
				if chroma <= 0
					set hue = 0
				elif max === r
					set hue = (((((g - b)) / chroma)) % 6)
				elif max === g
					set hue = (2 + ((((b - r)) / chroma)))
				else 
					set hue = (((4 + ((((r - g)) / chroma)))) + 4)
				set hue /= 6
				set hue %= 1
				return 
					[ 
						@ hue * 360
						@ chroma * 100
						@ grayscale * 100
		set colorConversions.hsl.hcg =
			function 
				param hsl
				var s = hsl[1] / 100
				var l = hsl[2] / 100
				var c = 1
				var f = 0
				if l < 0.5
					set c = ((2.0 * s) * l)
				else 
					set c = ((2.0 * s) * ((1.0 - l)))
				if c < 1.0
					set f = (((l - (0.5 * c))) / ((1.0 - c)))
				return 
					[ 
						@ hsl[0]
						@ c * 100
						@ f * 100
		set colorConversions.hsv.hcg =
			function 
				param hsv
				var s = hsv[1] / 100
				var v = hsv[2] / 100
				var c = s * v
				var f = 0
				if c < 1.0
					set f = (((v - c)) / ((1 - c)))
				return 
					[ 
						@ hsv[0]
						@ c * 100
						@ f * 100
		set colorConversions.hcg.rgb =
			function 
				param hcg
				var h = hcg[0] / 360
				var c = hcg[1] / 100
				var g = hcg[2] / 100
				if c === 0.0
					return 
						[ 
							@ g * 255
							@ g * 255
							@ g * 255
				var pure
					[ 
						@ 0
						@ 0
						@ 0
				var hi = ((h % 1) * 6)
				var v = hi % 1
				var w = (1 - v)
				var mg = 0
				switch Math.floor(hi)
					case 0
						set pure[0] = 1
						set pure[1] = v
						set pure[2] = 0
						break 
					case 1
						set pure[0] = w
						set pure[1] = 1
						set pure[2] = 0
						break 
					case 2
						set pure[0] = 0
						set pure[1] = 1
						set pure[2] = v
						break 
					case 3
						set pure[0] = 0
						set pure[1] = w
						set pure[2] = 1
						break 
					case 4
						set pure[0] = v
						set pure[1] = 0
						set pure[2] = 1
						break 
					default 
						set pure[0] = 1
						set pure[1] = 0
						set pure[2] = w
				set mg = (((1.0 - c)) * g)
				return 
					[ 
						@ ((((c * pure[0]) + mg)) * 255)
						@ ((((c * pure[1]) + mg)) * 255)
						@ ((((c * pure[2]) + mg)) * 255)
		set colorConversions.hcg.hsv =
			function 
				param hcg
				var c = hcg[1] / 100
				var g = hcg[2] / 100
				var v = (c + ((g * ((1.0 - c)))))
				var f = 0
				if v > 0.0
					set f = c / v
				return 
					[ 
						@ hcg[0]
						@ f * 100
						@ v * 100
		set colorConversions.hcg.hsl =
			function 
				param hcg
				var c = hcg[1] / 100
				var g = hcg[2] / 100
				var l = (((g * ((1.0 - c)))) + (0.5 * c))
				var s = 0
				if ((l > 0.0) && (l < 0.5))
					set s = (c / (2 * l))
				elif ((l >= 0.5) && (l < 1.0))
					set s = (c / ((2 * ((1 - l)))))
				return 
					[ 
						@ hcg[0]
						@ s * 100
						@ l * 100
		set colorConversions.hcg.hwb =
			function 
				param hcg
				var c = hcg[1] / 100
				var g = hcg[2] / 100
				var v = (c + ((g * ((1.0 - c)))))
				return 
					[ 
						@ hcg[0]
						@ (((v - c)) * 100)
						@ (((1 - v)) * 100)
		set colorConversions.hwb.hcg =
			function 
				param hwb
				var w = hwb[1] / 100
				var b = hwb[2] / 100
				var v = (1 - b)
				var c = (v - w)
				var g = 0
				if c < 1
					set g = (((v - c)) / ((1 - c)))
				return 
					[ 
						@ hwb[0]
						@ c * 100
						@ g * 100
		set colorConversions.apple.rgb =
			function 
				param apple
				return 
					[ 
						@ ((apple[0] / 65535) * 255)
						@ ((apple[1] / 65535) * 255)
						@ ((apple[2] / 65535) * 255)
		set colorConversions.rgb.apple =
			function 
				param rgb
				return 
					[ 
						@ ((rgb[0] / 255) * 65535)
						@ ((rgb[1] / 255) * 65535)
						@ ((rgb[2] / 255) * 65535)
		set colorConversions.gray.rgb =
			function 
				param args
				return 
					[ 
						@ ((args[0] / 100) * 255)
						@ ((args[0] / 100) * 255)
						@ ((args[0] / 100) * 255)
		set colorConversions.gray.hsl = colorConversions.gray.hsv = function (args){ [0, 0, args[0]];  }
		set colorConversions.gray.hwb =
			function 
				param gray
				return 
					[ 
						@ 0
						@ 100
						@ gray[0]
		set colorConversions.gray.cmyk =
			function 
				param gray
				return 
					[ 
						@ 0
						@ 0
						@ 0
						@ gray[0]
		set colorConversions.gray.lab =
			function 
				param gray
				return 
					[ 
						@ gray[0]
						@ 0
						@ 0
		set colorConversions.gray.hex =
			function 
				param gray
				var val = Math.round(((gray[0] / 100) * 255)) & 0xFF
				var integer = ((((val << 16) + (val << 8))) + val)
				var string
					_ integer.toString(16)
						._ toUpperCase()
				return ('000000'.substring(string.length) + string)
		set colorConversions.rgb.gray =
			function 
				param rgb
				var val = (((((rgb[0] + rgb[1])) + rgb[2])) / 3)
				return 
					[ 
						@ ((val / 255) * 100)
		
		return colorConversions
