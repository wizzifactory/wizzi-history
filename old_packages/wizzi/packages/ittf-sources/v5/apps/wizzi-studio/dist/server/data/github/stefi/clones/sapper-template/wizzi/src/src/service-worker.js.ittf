module
    kind react
    import 
        @ timestamp
        @ files
        @ shell
        @ routes
        from '../__sapper__/service-worker.js'
    const ASSETS
        `lit 
            + cache
            @ timestamp
            + 
    # `shell` is an array of all the files generated by webpack,
    # `files` is an array of everything in the `static` directory
    # `shell` is an array of all the files generated by webpack,
    # `files` is an array of everything in the `static` directory
    const to_cache = shell.concat(files)
    const cached = new Set(to_cache)
    _ self.addEventListener
        @ 'install'
        => 
            param event
            _ event.waitUntil
                _ caches.open(ASSETS).then
                    => 
                        param cache
                        _ cache.addAll(to_cache)
                    ._ then
                        => 
                            _ self.skipWaiting
    _ self.addEventListener
        @ 'activate'
        => 
            param event
            _ event.waitUntil
                _ caches.keys().then
                    async=> 
                        param keys
                        # delete old caches
                        for 
                            if key !== ASSETS
                                await 
                                    _ caches.delete(key)
                        _ self.clients.claim
    _ self.addEventListener
        @ 'fetch'
        => 
            param event
            if event.request.method !== 'GET' || event.request.headers.has('range')
                return 
            const url = new URL(event.request.url)
            # don't try to handle e.g. data: URIs
            # don't try to handle e.g. data: URIs
            if !url.protocol.startsWith('http')
                return 
            # ignore dev server requests
            # ignore dev server requests
            if url.hostname === self.location.hostname && url.port !== self.location.port
                return 
            # always serve assets and webpack-generated files from cache
            # always serve assets and webpack-generated files from cache
            if url.host === self.location.host && cached.has(url.pathname)
                _ event.respondWith(caches.match(event.request))
                return 
            # for pages, you might want to serve a shell `index.html` file,
            # which Sapper has generated for you. It's not right for every
            # app, but if it's right for yours then uncomment this section
            #
                # 
                # if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
                # event.respondWith(caches.match('/index.html'));
                # return;
                # }
                # 
            # for pages, you might want to serve a shell `index.html` file,
            # which Sapper has generated for you. It's not right for every
            # app, but if it's right for yours then uncomment this section
            #
                # 
                # if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
                # event.respondWith(caches.match('/index.html'));
                # return;
                # }
                # 
            if event.request.cache === 'only-if-cached'
                return 
            # for everything else, try the network first, falling back to
            # cache if the user is offline. (If the pages never change, you
            # might prefer a cache-first approach to a network-first one.)
            # for everything else, try the network first, falling back to
            # cache if the user is offline. (If the pages never change, you
            # might prefer a cache-first approach to a network-first one.)
            _ event.respondWith
                _ caches.open
                    `lit 
                        + offline
                        @ timestamp
                        + 
                    ._ then
                        async=> 
                            param cache
                            try 
                                const response
                                    await 
                                        _ fetch(event.request)
                                _ cache.put(event.request, response.clone())
                                return response
                            catch err
                                const response
                                    await 
                                        _ cache.match(event.request)
                                if response
                                    return response
                                throw err
                            finally 
                                undefined
