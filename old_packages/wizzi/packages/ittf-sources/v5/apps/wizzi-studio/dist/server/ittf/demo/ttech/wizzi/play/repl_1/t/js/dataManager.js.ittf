$group

	class DataManager
		ctor
			param props
			set this.props = props
			set this.schemaDatas = {}
			set this.selectedSchema = null
			_ this.initialize

		m initialize
			
			on( schema-selected
				set this.selectedSchema = data.name
				_ this.getSchemaData
					@ data.name

			on( select-tree-node
				if data.treeNode.item.isFolder
					return

				var item = this.schemaDatas[this.selectedSchema].itemsDict[data.treeNode.item.id]
				
				emit( seteditvalue
					@ key 'gen-ittf'
					@ value wz.replace(item.ittfWrapped, '\\n', '\n')
				
				emit( editvaluechanged
					@ key 'gen-ittf'
					@ value wz.replace(item.ittfWrapped, '\\n', '\n')

				emit( seteditvalue
					@ key 'snippet-source'
					@ value
						_ wz.unescapeHtml
							_ wz.replace(item.generated, '\\n', '\n')
				
				emit( editvaluechanged
					@ key 'snippet-source'
					@ value
						_ wz.unescapeHtml
							_ wz.replace(item.generated, '\\n', '\n')

		m getSchemaData
			param name
			
			if this.schemaDatas[name]
			
				emit( schema-selected-ready
						@ name name
						@ data this.schemaDatas[name]
			
			else
			
				_ fetch
					@ 'https://wizzifactory.github.io/cheatsheets/' + name + '.json'
					._ then
						=>
							param response
							return response.json()
					._ then
						=>
							param json
							set json = this.setIds(json)
							set this.schemaDatas[name] = json
							emit( schema-selected-ready
								@ name name
								@ json json
					._ catch
						=>
							param err
							# FIXME
							log 'getSchemaData error', err

		m setIds
			param json
			set json.itemsDict = {}
			var c = 1
			foreach e in json.elements
				foreach item in e.items
					set item.id = 'k' + c++
					set json.itemsDict[item.id] = item
			return json
