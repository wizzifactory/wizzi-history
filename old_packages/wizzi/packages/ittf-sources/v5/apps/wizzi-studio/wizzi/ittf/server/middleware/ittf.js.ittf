module
	kind jsfile

	var util = require('util')
	var path = require('path')
	var fs = require('fs')
	var stringify = require('json-stringify-safe')
	var ittfDocumentScanner = require('wizzi-utils').ittfDocumentScanner
	var textDocumentScanner = require('wizzi-utils').textDocumentScanner
	var folderBrowse = require('wizzi-utils').folderBrowse
	var bundlers = require('wizzi-bundlers')
	var rollupBundler = bundlers.rollupBundler
	var webpackBundler = bundlers.webpackBundler
	var parcelBundler = bundlers.parcelBundler
	var wizzi = require('wizzi')
	var contextLoader = require('./contextLoader')
	#
		# *.html.ittf     wizzi/htmlDocument
		#     ?meta=json
		#     ?meta=html
		#     ?meta=old_html
		# *.bundle.ittf   wizzi-lab-site/bundle
		# *.js.ittf       wizzi/jsModule
		# *.json.ittf     wizzi/jsonDocument
		# *.css.ittf      wizzi/cssDocument
		# *.form.ittf     wizzi-lab-site/formJsonizer
		# *.html
		# *.js
		# *.json
		# *.css
		# *.png | *.jpg |*.gif |*.bmp |*.tiff
		# *.svg
		# *.woff | *.ttf

	set module.exports

		function
			param root
			param routePath
			param options
			if !root
				throw new TypeError('root path required')
			if typeof root !== 'string'
				throw new TypeError('root path must be a string')
			if !routePath
				throw new TypeError('routePath required')
			if typeof routePath !== 'string'
				throw new TypeError('routePath must be a string')

			# log 'middleware.ittf.root', root
			
			return
	
				function
					param req
					param res
					param next

					if req.method !== 'GET' && req.method !== 'HEAD'
						return next()

					var urlPathName = decodeURIComponent(req._parsedUrl.pathname)
    
					var pathname = urlPathName.substr(routePath.length)
					var filePath = path.join(root, pathname);
			
					# log 'ittf.pathname, pathname, filePath', urlPathName, pathname, filePath 
			
					if wizzi.file.exists(filePath) === false
						return next()
			
					if wizzi.file.isFile(filePath) === false
						return 
							_ sendFolderScan
								@ filePath
								@ root
								@ req.query.meta
								@ res

					var ext4 = filePath.substr(-4, 4)
					var ext5 = filePath.substr(-5, 5)
			
					# log 'ext4', ext4

					try
						if filePath.substr(-10, 10) === '.html.ittf'
							render_ittf( html/document )

						elif filePath.substr(-9, 9) === '.css.ittf'
							render_ittf( css/document, text/css )

						elif filePath.substr(-9, 9) === '.scss.ittf'
							render_ittf( scss/document, text/scss )

						elif filePath.substr(-10, 10) === '.json.ittf'
							render_ittf( json/document, application/json )

						elif filePath.substr(-9, 9) === '.svg.ittf'
							render_ittf( svg/document, image/svg+xml )

						elif filePath.substr(-9, 9) === '.vtt.ittf'
							render_ittf( vtt/document, text/vtt )

						elif filePath.substr(-10, 10) === '.site.ittf'
							render_text( text/plain )

						elif filePath.substr(-15, 15) === '.rollup.js.ittf'
							_ rollupBundler.makeBundle
								@ filePath
								{
								f_cb_send_err( rendered, json )
									_ res.setHeader('content-type', 'text/javascript')
									return res.send(rendered)
						
						elif filePath.substr(-16, 16) === '.webpack.js.ittf'
							var basename = path.basename(filePath)
							var oFileName = basename.substr(0, basename.length - 16) + '.js'
							log 'middleware.ittf.webpack.js.ittf.oFile', oFileName
							_ webpackBundler.makeBundle
								@ filePath
								{
									@ outputPath path.dirname(filePath)
									@ outputFileName oFileName
								f_cb_send_err( rendered, json )
									var content
										_ wizzi.file.read
											_ path.join
												@ path.dirname(filePath)
												@ oFileName
									_ res.setHeader('content-type', 'text/javascript')
									return res.send(content)
						
						elif filePath.substr(-15, 15) === '.parcel.js.ittf'
							var basename = path.basename(filePath)
							var oFileName = basename.substr(0, basename.length - 15) + '.js'
							log 'middleware.ittf.parcel.js.ittf.oFile', oFileName
							_ parcelBundler.makeBundle
								@ filePath
								{
									@ outputPath path.dirname(filePath)
									@ outputFileName oFileName
								f_cb_send_err( rendered, json )
									var content
										_ wizzi.file.read
											_ path.join
												@ path.dirname(filePath)
												@ oFileName
									_ res.setHeader('content-type', 'text/javascript')
									return res.send(content)
						
						# this MUST BE AFTER *.(rollup|webpack|parcel).js.ittf
						elif filePath.substr(-8, 8) === '.js.ittf'
							render_ittf( js/module, text/javascript )

						elif filePath.substr(-10, 10) === '.form.ittf'
							_ createWizziFactory
								@ 'stefi'
								@ 'admin'
								{
								f_cb_send_err( wf, json )
									_ wf.loadModelAndGenerateArtifact
										@ filePath
										{
											@ req req
											@ __data  $$ becomes -> genWriter.options.data
												{
										@ 'form/jsonizer'
										f_cb_send_err( jsonized, json )
											_ res.setHeader('content-type', 'application/json')
											return res.json(jsonized)

						elif filePath.substr(-5, 5) == '.html'
							var content = wizzi.file.read(filePath)
							_ res.end(content)
			
						elif filePath.substr(-3, 3) == '.js'
							var content = wizzi.file.read(filePath)
							_ res.setHeader('content-type', 'text/javascript')
							_ res.end(content)
			
						elif filePath.substr(-5, 5) == '.json'
							var content = wizzi.file.read(filePath)
							_ res.setHeader('content-type', 'application/json')
							_ res.end(content)
			
						elif filePath.substr(-4, 4) == '.css'
							var content = wizzi.file.read(filePath)
							_ res.setHeader('content-type', 'text/css')
							_ res.end(content)
					
						elif filePath.substr(-4, 4) == '.svg'
							var content = wizzi.file.read(filePath)
							_ res.setHeader('content-type', 'image/svg+xml')
							_ res.end(content)

						elif ['.png', '.jpg', '.gif', '.bmp'].indexOf(ext4) > -1
							\b || ['.jpeg', '.tiff'].indexOf(ext5) > -1
							var contentType
							if ['.png', '.jpg', '.gif', '.bmp'].indexOf(ext4) > -1
								set contentType = 'image/' + ext4.substr(1)
							else
								set contentType = 'image/' + ext5.substr(1)
							_ fs.readFile
								@ filePath
								f_cb_send_err( data, json )
									_ res.setHeader('content-type', contentType)
									_ res.setHeader('content-length', data.length)
									_ res.end(data)
			
						elif filePath.substr(-5, 5) == '.woff' || filePath.substr(-4, 4) == '.ttf'
				
							var ctype;
				
							if filePath.substr(-5, 5) == '.woff'
								set ctype = 'application/x-font-woff'
				
							if filePath.substr(-4, 4) == '.ttf'
								set ctype = 'application/x-font-ttf'
				
							_ wizzi.file.readFile
								@ filePath
								f_cb_send_err( data, json )
									_ res.setHeader('content-type', ctype)
									_ res.setHeader('content-length', data.length)
									_ res.end(data)

						elif ['.mp4', '.vob', '.mpg'].indexOf(ext4) > -1
							var contentType
							if ['.mp4'].indexOf(ext4) > -1
								set contentType = 'video/' + ext4.substr(1)
							else
								set contentType = 'video/' + ext5.substr(1)
							_ fs.readFile
								@ filePath
								f_cb_send_err( data, json )
									_ res.setHeader('content-type', contentType)
									_ res.setHeader('content-length', data.length)
									_ res.end(data)
						elif filePath.substr(-5, 5) == '.yaml'
							render_text( text/yaml )
						elif filePath.substr(-4, 4) == '.yml'
							render_text( text/yaml )
						elif filePath.substr(-4, 4) == '.vtt'
							render_text( text/vtt )
						else
							return next()
					catch ex
						return
							_ sendError
								@ res
								@ ex
								{
									@ format 'json'

	function sendFolderScan
		param folderPath
		param root
		param meta
		param res

		_ folderBrowse.scan
			@ folderPath
			{
				@ rootFolder path.dirname(root)
			f_cb_send_err( folderState, json )
				if meta === 'json'
					return sendJSONStringified(res, folderState)
				else
					_ createWizziFactory
						@ 'stefi'
						@ 'admin'
						{
						f_cb_send_err( wf, json )
							_ wf.loadModelAndGenerateArtifact
								@ wizzi.config.get('meta-folder-ittf-path')
								{
									{ modelRequestContext
										{ mTreeBuildUpContext
											@ fs folderState
								@ 'html/document'
								f_cb_send_err( rendered, json )
									return res.send(rendered)

	function createWizziFactory
		param user
		param roleOrSubscription
		param globalContext
		param callback
		set globalContext = globalContext || {}
		set globalContext.isWizziStudio = true
		_ wizzi.createFactory
			@ user
			@ roleOrSubscription
			{
				{ repo
					@ storeKind 'filesystem'
				{ plugins
					[ items
						@ 'wizzi-core'
						@ 'wizzi-web'
						@ 'wizzi-js'
				@ globalContext globalContext
				{ test
					{ dumps
						@ dumpsBaseFolder
							_ path.join
								@ __dirname
								@ 'mTreeBuildUpDumps'
						{ mTreeBuildupJsWizziScript
							@ dump true
			@ callback

	function sendJSONStringified
		param res
		param wizziModelInstance
		_ res.send('<pre>' + stringify(cleanCircular(wizziModelInstance, []), null, 2) + '</pre>')

	function cleanCircular
		param obj
		param stock

		if !obj
			return
		
		if stock.indexOf(obj) >= 0
			return
		else
			_ stock.push(obj)
		
		if typeof obj === 'object'
			if obj.length
				foreach item in obj
					_ cleanCircular(item, stock)
				return
			if obj.parent 
				delete obj.parent
			if obj.wzParent 
				delete obj.wzParent
			if obj.nodes 
				delete obj.nodes
			if obj.evalContext 
				delete obj.evalContext
			if obj.loadContext && obj.sourceKey
				delete obj.loadContext
			for var k in obj 
				var item = obj[k]
				if !item
					delete obj[k]
				elif typeof item === 'object' && item.length && item.length == 0
					delete obj[k]
				else
					_ cleanCircular(item, stock)
		return obj

	$include send_error
