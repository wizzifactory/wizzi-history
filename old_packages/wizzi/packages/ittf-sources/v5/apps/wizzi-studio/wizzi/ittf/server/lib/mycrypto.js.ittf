module
	kind jsfile

	var encdec = require('wizzi-utils').encdec
    
	$* VIA
	var randomstring = require("randomstring")
	var Hashids = require("hashids")
	var crypto = require('crypto')
    # Must be 256 bytes (32 characters)
	var ENCRYPTION_KEY = randomstring.generate(32)
    # For AES, this is always 16
    var IV_LENGTH = 16
	# simple
	var hashids = new Hashids("im Anfang toll");
  
    function encrypt
        param text
        var iv = crypto.randomBytes(IV_LENGTH)
        var cipher = crypto.createCipheriv('aes-256-cbc', new Buffer(ENCRYPTION_KEY), iv)
        var encrypted = cipher.update(text)
        set encrypted =
            _ Buffer.concat
                [ 
                    @ encrypted
                    @ cipher.final()
        return iv.toString('hex') + ':' + encrypted.toString('hex')
    
	function decrypt
        param text
        var textParts = text.split(':')
        var iv = new Buffer(textParts.shift(), 'hex')
        var encryptedText = new Buffer(textParts.join(':'), 'hex')
        var decipher = crypto.createDecipheriv('aes-256-cbc', new Buffer(ENCRYPTION_KEY), iv)
        var decrypted = decipher.update(encryptedText)
        set decrypted =
            _ Buffer.concat
                [ 
                    @ decrypted
                    @ decipher.final()
        return decrypted.toString()

    function encryptSimple
        param text
		var hex = Buffer(text).toString('hex')
		return hashids.encodeHex(hex)
    
	function decryptSimple
        param text
		var decodedHex = hashids.decodeHex(text)
		return Buffer(decodedHex, 'hex').toString('utf8')

	*$
	
	set module.exports =
		{ 
			@ decrypt encdec.decrypt
			@ encrypt encdec.encrypt
			@ decryptSimple encdec.decryptSimple
			@ encryptSimple encdec.encryptSimple