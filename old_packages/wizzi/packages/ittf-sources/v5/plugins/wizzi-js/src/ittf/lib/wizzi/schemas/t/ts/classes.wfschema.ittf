$group

	e class : statement
		# A javascript class
		a extends
		a_flag( abstract, :abstract )

		r typeParameter/s
		r superType
			one-to-one

		m findCtor
			return _.find(this.statements, function(item) { return item.wzElement === 'ctor' })

		m wzInitialize
			set ctx.modelState = ctx.modelState || {}
			
			# log 'wizzi-js.model.class.modelState', ctx.modelState
			set ctx.modelState.hasClasses = true
			
			if this.extends && this.extends.length > 0
				set this.super = this.extends
			elif this.superType
				set this.super = this.superType.wzName
			else
				var tokens = this.wzName.split(':')
				if tokens.length == 2
					set this.wzName = tokens[0]
					set this.super = tokens[1]

			set this.extends = []
			var temp = []
			foreach s in this.statements
				if s.wzElement === 'typeExtends'
					_ this.extends.push
						@ s
				else
					_ temp.push
						@ s
			set this.statements = temp

	e superType : statement
		tag super
		r typeReferenceParam/s

	e ctor : function
		a_flag( private, :private )
		a_flag( public, :public )
		a_flag( protected, :protected )

		r base/s

		m getBaseArgs
			var ret = []
			foreach item in this.bases
				_ ret.push(item.wzName)
			return ret

	e base : statement

	e method : function
		tag m
		a_flag( abstract, :abstract )
		a_flag( static )
		a_flag( async )
		a_flag( generator )
		a_flag( private, :private )
		a_flag( public, :public )
		a_flag( protected, :protected )

	e p : statement
		a_flag( abstract, :abstract )
		a_flag( static )
		a_flag( private, :private )
		a_flag( public, :public )
		a_flag( protected, :protected )
		a_flag( readonly, :readonly )

	e new : statement
	
	e type : statement