module wizzi-core.lib.wizzi.models.${schema}-factory.g
	$params schema, schemaLabel
	kind jsfile

	#
		# ${schemaLabel}
	
	var path = require('path')
	var util = require('util')
	var stringify = require('json-stringify-safe')
	var verify = require('wizzi-utils').verify
	+
    var ${schema}model = require('./${schema}-model.g')
	+
    var md = module.exports = {};
	+    
	# called from the wizzi.wizziFactory.getLoadModel method
	# params
		# { wizziObject
			# func loadMTree
				# api-ref wizzi-mtree.loader.loadMTree
			# { file
				# api-ref wizzi-utils.file
			# { verify
				# api-ref wizzi-utils.verify
			# { errors
				# type WizziModelLoadError
	set md.createLoadModel
		function
			{ wizziObject
				func loadMTree
				{ file
				{ errors
			var options = wizziObject.options || {}
			var loadMTree = wizziObject.loadMTree
			var file = wizziObject.file
			var errors = wizziObject.errors
			var wizziFactory = wizziObject.wizziFactory

			function loadModelFromMTree
				param mTree
				param ittfDocumentUri
				param wizziModelRequest
				param options
				param callback

				# log 'wizzi-core.wizzi.models.${schema}-factory.g, loaded from mTree'

				_ ${schema}model(mTree, ittfDocumentUri, wizziModelRequest, callback)

			if options.loadFromMTree
				# Load a WizziModel of type '${schema}' from an mTree
				return
					function
						param mTree
						param wizziModelRequest
						param callback
						if verify.isFunction(callback) !== true 
							set callback = wizziModelRequest
							set wizziModelRequest = {}
						if verify.isFunction(callback) !== true
							throw new TypeError('callback must be a function')
						if verify.isObject(mTree) !== true 
							return
								_ callback
									_ error
										@ 'InvalidArgument'
										@ 'mTree'
										@ 'The mTree parameter must be an object'
						_ loadModelFromMTree
							@ mTree
							@ 'Unavailable (loaded from mTree)'
							@ wizziModelRequest || {}
							{
								@ wizziFactory wizziFactory
							@ callback
			else

				#
					# Load a WizziModel of type ${schema} from an IttfDocument uri
					# params
						# string ittfDocumentUri
						# { requestContext
							# { __productionManager
								# { productionContext
									# { aclstat
							# { __ittfDocumentStore
							# { mTreeBuildUpContext
								# optional
							# { __request
								# This is a legacy that should disappear.
								# See the wizzi.production.productionContext class.
								# boolean dumpAll
								# boolean dumpIttfModel
								# boolean dumpModel
								# boolean dumpModelAfterInitializeAsync
						#   callback

				return
					function loadModel
						param ittfDocumentUri
						param requestContext
						param callback
			
						if typeof callback !== 'function'
							throw new TypeError('callback must be a function')

						if typeof ittfDocumentUri !== 'string'
							return
								_ callback 
									_ error
										@ 999
										@ 'loadModel'
										@ 'ittfDocumentUri parameter must be a string, received: ' + typeof(ittfDocumentUri)
										@ new Error('inner track')

						if verify.isObject(requestContext) !== true
							return
								_ callback
									_ error
										@ 999
										@ 'loadModel'
										@ 'requestContext parameter must be an object'
										@ new Error('inner track')

						if verify.isObject(requestContext.__productionManager) !== true
							return
								_ callback
									_ error
										@ 999
										@ 'loadModel'
										@ 'requestContext.__productionManager parameter must be an object'
										@ new Error('inner track')

						set requestContext.mTreeBuildUpContext
							_ Object.assign
								{
								_ requestContext.__productionManager.globalContext
								@ requestContext.mTreeBuildUpContext
					
						$hook context-settings
					
						var wizziModelRequest = requestContext.__request || {}
						var start = Date.now()
			
						# load the magical tree
						_ loadMTree
							@ ittfDocumentUri
							@ requestContext
							function
								param err
								param mTree
								if err
									return callback(err)
					
								# TODO implement a stats object inside the wizziModelRequest object
								log 'Loaded mTree instance for pseudo schema ${schema} from Ittf document ' + ittfDocumentUri + ' in ' + (Date.now() - start) + ' ms'
					
								if (wizziModelRequest.dumpAll || wizziModelRequest.dumpIttfModel) && file.isFilePath(ittfDocumentUri)
									var ittfDumpPath = path.join(path.dirname(ittfDocumentUri), '_debug', path.basename(ittfDocumentUri) + '.ittf.json')
									_ file.write
										@ ittfDumpPath
										_ stringify
											@ mTree
											@ null
											@ 2
					
								# log 'wizzi-core.wizzi.models.${schema}-factory.g current __dirname', __dirname
								# log 'wizzi-core.wizzi.models.${schema}-factory.g, loaded from ittfDocumentUri: ', ittfDocumentUri, mTree
								_ ${schema}model(mTree, ittfDocumentUri, wizziModelRequest, callback)

	$hook

	$* VIA, autogenerated
	function error
		param code
		param message
		return
			{
				@ __is_error true
				@ module 'wizzi-core.wizzi.models.${schema}-factory.g'
				@ sourcePath __filename
				@ code code
				@ message message
	*$

		
	
