$group

	class ${schema.wzId}Context
		ctor
			set this.validationErrors = []

		m schemaIsValid
			return this.validationErrors.length == 0

		m addError
			param message
			param node
			var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : ''
			_ this.validationErrors.push
				@ message + at

		$foreach require in schema.requiredContextMethods
            
			$if require.wzName === "verifyRequired"

				m verifyFalse
					param valueType
					param valueName
					param value
					param node
					if typeof value === 'undefined' || value === null || (typeof value === 'string' && value.length === 0)
						_ this.validationErrors.push
							@ valueType + ' ' + valueName + ' is required. At ' + node.wzSourceLineInfo.toString(node)

			$if require.wzName == "verifyEnum"

				m verifyEnum
					param valueType
					param valueName
					param value
					param allowed
					param node
					if value && allowed.indexOf(value) < 0
						var allowedStr = 'allowed: ' + allowed.join(', ')
						_ this.validationErrors.push
							@ valueType + ' ' + valueName + ' has an invalid value: ' + value + ' ' + allowedStr + '. At ' + (node.wzSourceLineInfo ? node.wzSourceLineInfo.toString(node) : 'location unavailable')
								

	set _md.${schema.wzId}Context = ${schema.wzId}Context