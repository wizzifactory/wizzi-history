module
	kind jsfile

	#
		# Pseudo schema xml
	var util = require('util')
	var lineparser = require('../../util/lineParser')
	+
    set module.exports
		function
			param mTree
			param ittfDocumentUri
			param request
			param callback

			if !(mTree.nodes && mTree.nodes.length == 1)
				return
					_ callback
						_ error
							@ 'Malformed mTree must have one root node. Found mTree.nodes: ' + mTree.nodes

			var root = mTree.nodes[0]
			if root.n !== "xml"
				return
					_ callback
						_ error
							@ 'The root node of an xml ittf document must be : "xml". Found: ' + root.n + ' ' + root.v

			checked_call( xml )
				_ toXmlElement
					@ 'xml'
					@ root.children
			set xml.wzElement = 'xml'
			
			return
				_ callback
					@ null
					@ xml

	function toXmlElement
		param tag
		param nodes
		# log '===== ++++++ xml.toXmlElement, nodes.length', nodes.length
		var ret
			{
				@ tag tag
				@ attributes []
				@ elements []
		foreach node in nodes
			# log '===== ++++++ xml.toXmlElement, node.n', node.n, node.v, node.children.length
			if node.n === '@'
				var nv
					_ lineparser.parseNameValueRaw
						@ node.v
				if tag === 'xml' && nv.name() === 'encoding'
					set ret.encoding = nv.value()
				elif tag === 'xml' && nv.name() === 'standalone'
					set ret.standalone = nv.value()
				else
					_ ret.attributes.push
						{
							@ name nv.name()
							@ value nv.value()
			elif node.n === '+'
				_ ret.elements.push
					{
						@ text node.v
				if node.children && node.children.length > 0
					checked_call_return( newelement )
						_ toXmlElement
							@ node.n
							@ node.children
					_ ret.elements.push
						@ newelement
			elif node.v && node.v.length > 0
				if tag === 'xml' && node.n === 'encoding'
					set ret.encoding = node.v
				elif tag === 'xml' && node.n === 'standalone'
					set ret.standalone = node.v
				else
					_ ret.elements.push
						{
							@ tag node.n
							@ text node.v
							@ attributes []
							@ elements []
					if node.children && node.children.length > 0
						checked_call_return( newelement )
							_ toXmlElement
								@ node.n
								@ node.children
						_ ret.elements.push
							@ newelement
			else
				if node.children && node.children.length > 0
					checked_call_return( newelement )
						_ toXmlElement
							@ node.n
							@ node.children
					_ ret.elements.push
						@ newelement
		return ret

	function error
		param message
		return
			{
				@ __is_error true
				@ source 'wizzi-core/lib/wizzi/models/xml-model.g'
				@ message message