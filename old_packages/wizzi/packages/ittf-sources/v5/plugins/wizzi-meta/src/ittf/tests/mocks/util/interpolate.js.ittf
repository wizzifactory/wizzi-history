module
    kind jsfile

	#
		# port of http://www.bbc.co.uk/glow/docs/1.7/api/glow.lang.shtml#interpolate
		# Modified to be stand-alone and offer support for delimters of random length
		# @description Replaces placeholders in a string with data from an object
		# @param {String} template The string containing {placeholders}
		# @param {Object} data Object containing the data to be merged in to the template
		#                 The object can contain nested data objects and arrays, with nested object properties and array elements are accessed using dot notation. eg foo.bar or foo.0.
		#                 The data labels in the object cannot contain characters used in the template delimiters, so if the data must be allowed to contain the default { and } delimiters, the delimters must be changed using the option below.
		# @param {Object} opts Options object {
		#     # @param {String} [opts.delimiter="{}"] Alternative label delimiter(s) for the template. 
		#                       Needs to be symmetric, i.e. '{{}}', '<%%>'
		# }
		# @returns {String}
    
	function interpolate
        param template
        param data
        param opts

        var 
            decl regex
            decl lDel
            decl rDel
            decl delLen
            decl lDelLen
			decl rDelLen
            decl delimiter
            decl regexEscape = /([$\^\\\/()|?+*\[\]{}.\-])/g
        
		set opts = (opts || {})
        set delimiter = (opts.delimiter || '{}')
        set delLen = delimiter.length
        set lDelLen = Math.ceil(delLen / 2)
		set rDelLen = delLen - lDelLen
        set lDel = delimiter.substr(0, lDelLen).replace(regexEscape, "\\$1")
        set rDel = delimiter.substr(lDelLen, delLen).replace(regexEscape, "\\$1") || lDel
        set regex = new RegExp(lDel + "[^" + lDel + rDel + "]+" + rDel, "g")
        
		return 
            _ template.replace
                @ regex
                function 
                    param placeholder
                    var
                        decl key = placeholder.slice(lDelLen, -rDelLen)
                        decl keyParts = key.split(".")
                        decl val
                        decl i = 0
                        decl len = keyParts.length
                    if key in data
                        set val = data[key]
                    else 
                        set val = data
                        for ; i<len; i++
                            if keyParts[i] in val
                                set val = val[keyParts[i]]
                            else 
                                return placeholder
                    return val
    
	set module.exports = interpolate
