module 
    kind jsfile

	var file = require('./file')
    
	class IttfTemp
        ctor 
            param name
			param value
			param parent
			set this.name = name
			set this.value = value || ''
			set this.parent = parent || null
            set this.children = []
    
		m preAdd
            param name
			param value
			if {}.toString.call(name) === '[object Object]' && name.name
				set name.parent = this
				return name
			else
				return new IttfTemp(name, value, this)

		m insertAt
            param name
			param value
			param pos
			var node = this.preAdd(name, value)
			if pos > this.children.length
				_ this.children.push(node)
			else
				_ this.children.splice(pos, 0, node);
			return node

		m add
            param name
			param value
			var node = this.preAdd(name, value)
			_ this.children.push(node)
			return node

		m write
			param sb
			param indent
			# log 'sb',sb
			_ sb.push
				@ indentTabs(indent) + this.name + (this.value && this.value.length > 0 ? ' ' + this.value : '')
			foreach node in this.children
				_ node.write(sb, indent + 1)

		m writeFile
			param string_path
			param callback
			var sb = []
			_ this.write(sb, 0)
			var that = this
			_ file.openWrite
				@ string_path
				f_cb( stream )
					_ stream.write(sb.join('\n'))
					_ stream.end()
					_ callback(null)

	function indentTabs
		param num
		var ret = []
		for var i=0; i<num; i++
			_ ret.push('\t')
		return ret.join('')
    
	set module.exports = IttfTemp
