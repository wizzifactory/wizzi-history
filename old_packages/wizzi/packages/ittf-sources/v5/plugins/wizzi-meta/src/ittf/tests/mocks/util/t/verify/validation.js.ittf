$group

	#
		# TODO these Regex(s) are too ingenuous
		#      research stronger solutions
		#
    var 
		decl ipRegex = /^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})$/i
        decl emailRegex = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
        decl base64Regex = /[^a-zA-Z0-9\/\+=]/i
        decl numericDashRegex = /^[\d\-\s]+$/
        decl urlRegex = /^((http|https):\/\/(\w+:{0,1}\w*@)?(\S+)|)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/

	set md.isEmail
		function 
			param value
			return 
				&&
					_ md.isNotEmpty(value)
					_ emailRegex.test
						@ value
	
	set md.isEmails
		function 
			param value
			if md.isNotEmpty(value) == false
				return false
			foreach item in _toArray(value)
				if !emailRegex.test(item)
					return false
			return true
	
	set md.isMinLength
		function 
			param value
			param length
			return _hasLength(value) && value.length >= length
	
	set md.isMaxLength
		function 
			param value
			param length
			return _hasLength(value) && value.length <= length

	set md.isExactLength
		function 
			param value
			param length
			return _hasLength(value) && value.length == length
	
	set md.isGreaterThan
		function 
			param value
			param test
			return md.isNumber(value) && value > test
	
	set md.isLessThan
		function 
			param value
			param test
			return md.isNumber(value) && value < test
	
	set md.isGreaterEqualThan
		function 
			param value
			param test
			return md.isNumber(value) && value >= test
	
	set md.isLessEqualThan
		function 
			param value
			param test
			return md.isNumber(value) && value <= test

	set md.isAlpha
		function 
			param value
			return md.isNotEmpty(value) &&
				\b /^[a-z]+$/i.test(value)
	
	set md.isAlphaNumeric
		function 
			param value
			return md.isNotEmpty(value) &&
				\b /^[a-z0-9]+$/i.test(value)
	
	set md.isIp
		function 
			param value
			return md.isNotEmpty(value) &&
				\b ipRegex.test(value)
	
	set md.isBase64
		function 
			param value
			return md.isNotEmpty(value) &&
				\b base64Regex.test(value)
	
	set md.isUrl
		function 
			param value
			return md.isNotEmpty(value) &&
				\b urlRegex.test(value)
	
	set md.isCreditCard
		function 
			param value
			if !numericDashRegex.test(value)
				return false
			var 
				decl nCheck = 0
				decl nDigit = 0
				decl bEven = false
			var strippedField = value.replace(/\D/g, "")
			for var n = (strippedField.length - 1); n >= 0; n--
				var cDigit = strippedField.charAt(n)
				set nDigit = parseInt(cDigit, 10)
				if bEven
					if nDigit *= 2 > 9
						set nDigit -= 9
				set nCheck += nDigit
				set bEven = !bEven
			return nCheck % 10 === 0
	
	set md.isGreaterThanDate
		function 
			param value
			param date
			var 
				decl enteredDate
					_ this._getValidDate
						@ value
				decl validDate = this._getValidDate(date)
			if !validDate || !enteredDate
				return false
			return enteredDate > validDate
	
	set md.isLessThanDate
		function 
			param value
			param date
			var 
				decl enteredDate
					_ this._getValidDate
						@ value
				decl validDate = this._getValidDate(date)
			if !validDate || !enteredDate
				return false
			return enteredDate < validDate
	
	set md.isGreaterEqualDate
		function 
			param value
			param date
			var 
				decl enteredDate
					_ this._getValidDate
						@ value
				decl validDate = this._getValidDate(date)
			if !validDate || !enteredDate
				return false
			return enteredDate >= validDate
	
	set md.isLessEqualDate
		function 
			param value
			param date
			var 
				decl enteredDate
					_ this._getValidDate
						@ value
				decl validDate = this._getValidDate(date)
			if !validDate || !enteredDate
				return false
			return enteredDate <= validDate

	function _getValidDate
		param date
		if md.isDate(date)
			return date
		elif md.isNumber(date)
			return new Date(date)
		elif md.isNotEmpty(date)
			if !date.match('today') && !date.match(dateRegex)
				return false
			var 
				decl validDate
					new Date()
				decl validDateArray
			if !date.match('today')
				set validDateArray = date.split('-')
				_ validDate.setFullYear
					@ validDateArray[0]
				_ validDate.setMonth((validDateArray[1] - 1))
				_ validDate.setDate
					@ validDateArray[2]
			return validDate
		else
			return false

	function _hasLength
		param value
		return value && md.isNumber(value.length)

	function _toArray
		param value
		if md.isArray(value) 
			return value
		elif md.isNotEmpty(value) 
			return value.split(/\s*,\s*/g)
		else
			return []














