basemain( scss, document, scss

	stm( scss
		gen_items( model.rules
			r_cb()

	stm( typeRule
		_ writeOpenRule( ctx, '', model )
		gen_items_indent( model.rules
			_ ctx.w( '}' )
			r_cb()

	stm( idRule
		_ writeOpenRule( ctx, '#', model )
		gen_items_indent( model.rules
			_ ctx.w( '}' )
			r_cb()

	stm( classRule
		_ writeOpenRule( ctx, '.', model )
		gen_items_indent( model.rules
			_ ctx.w( '}' )
			r_cb()

	stm( parentRule
		_ ctx.w( model.getValue() + ' {')
		gen_items_indent( model.rules
			_ ctx.w( '}' )
			r_cb()

	stm( combinator
		if model.pseudoClasses.length < 1
			_ callback
				_ ctx.error
					@ myname + " error: combinator must have psedoClasses"
					@ model

		_ ctx.write( '>' )
		foreach item in model.pseudoClasses
			_ ctx.write( ' :' + item.wzName )
			if item.rules.length > 0
				_ ctx.write( '(' + item.paramSelectorNames.join(', ') + ')' )
		_ ctx.w( ' {' )
		gen_items_indent( model.rules
			_ ctx.w( '}' )
			r_cb()

	stm( propertyRule
		var p = lineParser.parseNameValueRaw(model.wzName, model)
		if p.hasValue()
			_ ctx.w( p.name() + ': ' + p.value() + ';' )
		else
			_ ctx.write( p.name() )
		r_cb()

	stm( importRule
		_ ctx.w( '@import ' + model.wzName + ';')
		r_cb()

	stm( extendRule
		_ ctx.w( '@extend ' + model.wzName + ';')
		r_cb()

	stm( includeRule
		_ ctx.write( '@include ' + model.wzName)
		if model.rules.length > 0
			_ ctx.write( '(' )
			gen_items( model.rules, 0, comma
				if model.block
					_ ctx.w( ') {' )
					gen_items_indent( model.block.rules
						_ ctx.w( '}' )
						r_cb()
				else
					_ ctx.w( ');' )
					r_cb()
		else
			if model.block
				_ ctx.w( ' {' )
				gen_items_indent( model.block.rules
					_ ctx.w( '}' )
					r_cb()
			else
				_ ctx.w
				r_cb()

	stm( mixinRule
		_ ctx.w( '@mixin ' + model.wzName + '(' + model.paramNames.join(', ') + ') {')
		gen_items_indent( model.rules
			_ ctx.w('}')
			r_cb()

	stm( forRule
		_ ctx.w( '@for ' + model.wzName + ' {')
		gen_items_indent( model.rules
			_ ctx.w('}')
			r_cb()

	stm( eachRule
		_ ctx.w( '@each ' + model.wzName + ' {')
		gen_items_indent( model.rules
			_ ctx.w('}')
			r_cb()

	stm( whileRule
		_ ctx.w( '@while ' + model.wzName + ' {')
		gen_items_indent( model.rules
			_ ctx.w('}')
			r_cb()

	stm( functionRule
		_ ctx.w( '@function ' + model.wzName + '(' + model.paramNames.join(', ') + ') {')
		gen_items_indent( model.rules
			_ ctx.w('}')
			r_cb()

	stm( returnRule
		_ ctx.w( '@return ' + model.wzName + ';')
		r_cb()

	stm( callRule
		_ ctx.write( model.wzName + '(')
		gen_items_indent( model.rules, 0, comma
			_ ctx.write(')')
			r_cb()

	stm( setRule
		var p = lineParser.parseNameValueRaw(model.wzName, model)
		_ ctx.w( '$' + p.name() + ': ' + p.value() + ';' )
		r_cb()

	stm( separator
		_ ctx.write( getSeparator(model.wzName) )
		r_cb()

	function writeOpenRule
		param ctx
		param prefix
		param model
		_ ctx.write( prefix )
		_ ctx.write( model.wzName || '')
		if model.addedSelectorNames.length > 0
			_ ctx.write( ' ' + model.addedSelectorNames.join(' '))
		_ ctx.w( ' {' )

	function getSeparator
		param sep
		return sep === 'comma' ? ', ' : sep