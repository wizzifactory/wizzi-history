basemain( vtt, document, vtt

	stm( vtt
		_ ctx.w( 'WEBVTT' )
		_ ctx.w
		_ writeComments
			@ ctx
			@ model
		gen_items( model.styles
			gen_items( model.regions
				gen_items( model.vttCues
					r_cb()

	stm( vttCue
		_ writeComments
			@ ctx
			@ model
		_ writeCueTime( ctx, model )
		if typeof model.region !== 'undefined'
			_ ctx.write( ' region:' + model.region)
		if typeof model.direction !== 'undefined'
			_ ctx.write( ' vertical:' + model.direction)
		if typeof model.line !== 'undefined'
			_ ctx.write( ' line:' + model.line)
		if typeof model.position !== 'undefined'
			_ ctx.write( ' position:' + model.position)
		if typeof model.size !== 'undefined'
			_ ctx.write( ' size:' + model.size)
		if typeof model.align !== 'undefined'
			_ ctx.write( ' align:' + model.align)
		if typeof model.lineAlign !== 'undefined'
			_ ctx.write( ' line-align:' + model.lineAlign)
		if typeof model.positionAlign !== 'undefined'
			_ ctx.write( ' position-align:' + model.positionAlign)
		_ ctx.w
		gen_items( model.cueTexts
			_ ctx.w
			r_cb()

	stm( cueText
		_ ctx.write( model.wzName )
		var saveIsInsideText = !!ctx.isInsideText
		set ctx.isInsideText = true
		gen_items( model.cueTexts
			if saveIsInsideText == false
				_ ctx.w
			set ctx.isInsideText = saveIsInsideText
			r_cb()

	stm( p
		_ ctx.write( '- ' + model.wzName )
		var saveIsInsideText = !!ctx.isInsideText
		set ctx.isInsideText = true
		gen_items( model.cueTexts
			if saveIsInsideText == false
				_ ctx.w
			set ctx.isInsideText = saveIsInsideText
			r_cb()
	stm( u
		_ writeCueText
			@ ctx
			@ model
			@ 'u'
			@ callback

	stm( i
		_ writeCueText
			@ ctx
			@ model
			@ 'i'
			@ callback

	stm( b
		_ writeCueText
			@ ctx
			@ model
			@ 'b'
			@ callback

	stm( c
		_ writeCueText
			@ ctx
			@ model
			@ 'c'
			@ callback

	stm( voiceSpan
		_ writeCueText
			@ ctx
			@ model
			@ 'v'
			@ callback

	stm( lang
		_ writeCueText
			@ ctx
			@ model
			@ 'lang'
			@ callback

	stm( time
		_ ctx.write( '<' + tag )
		_ ctx.write
			_ formatTime( model.wzName )
		_ ctx.w('<')

	stm( componentClass
		_ ctx.write( '.' + model.wzName )
		r_cb()

	$include style
	$include region

	function writeComments
		param ctx
		param model
		if model.comments.length == 1
			_ ctx.w( 'NOTE ' + model.comments[0].wzName )
			_ ctx.w
		if model.comments.length > 1
			_ ctx.w( 'NOTE' )
			foreach item in model.comments
				_ ctx.w( item.wzName )
			_ ctx.w
	
	function writeCueText
		param ctx
		param model
		param tag
		param callback

		_ ctx.write( '<' + tag )
		gen_items( model.componentClasses
			_ ctx.write( '>' + model.wzName )
			var saveIsInsideText = !!ctx.isInsideText
			set ctx.isInsideText = true
			gen_items( model.cueTexts
				_ ctx.write( '</' + tag + '>' )
				if saveIsInsideText == false
					_ ctx.w
				set ctx.isInsideText = saveIsInsideText
				r_cb()

	function writeCueTime
		param ctx
		param model
		
		if typeof model.id !== 'undefined'
			_ ctx.w( model.id )
		var ss
			_ model.wzName.split(' ').filter
				function
					param el
					return el != null

		_ ctx.write
			_ formatTime( ss.length == 1 ? 0 : ss[0] )
		_ ctx.write
			@ ' --> '
		_ ctx.write
			_ formatTime( ss.length == 1 ? ss[0] : ss[1] )

	function formatTime
		param t
		var ss = t.split(':')
		if ss.length == 1
			return '00:00:' + zeroPad(ss[0], 2) + '.000'
		elif ss.length == 2
			return '00:' + zeroPad(ss[0], 2) + ':' + zeroPad(ss[1], 2) + '.000'
		elif ss.length == 3
			return zeroPad(ss[0], 2) + ':' + zeroPad(ss[1], 2) + ':' + zeroPad(ss[2], 2)
		else
			return zeroPad(ss[0], 2) + ':' + zeroPad(ss[0], 2) + ':' + zeroPad(ss[1], 2) + ':' + zeroPad(ss[2], 3)
			

	function zeroPad
		param n
		param len
		set n = parseInt(n)
		if len == 2
			return n > 9 ? n : '0' + n
		else
			return n > 99 ? n : n > 9 ? '0' + n : '00' + n
