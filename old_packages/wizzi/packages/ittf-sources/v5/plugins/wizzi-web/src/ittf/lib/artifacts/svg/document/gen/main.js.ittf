module wizzi-web.lib.artifacts.svg.document.gen.main
	kind jsfile

	# Example of language artifact that targets
	# the Scalable Vector Graphics (SVG) 1.1 (Second Edition) specification.
	# It implements a minimal set of elements
	#
	# This is a code write based artifact generator.
	#
	+
	var myname = 'wizzi-demo.plugins.lib.artifacts.svg.document.main';
	+
	var util = require('util')
	var async = require('async')
	var verify = require('wizzi-utils').verify;
	+
	var lineParser = require('../../../util/lineParser')
	+
	var md = module.exports = {}
	set md.stm = {}

	set md.gen
		function gen
			{ model
			{ ctx
			callback
			# log myname, 'enter', 'ctx.values', ctx.values
			# check the model is a wizzi model of type 'svg'
			if model.wzElement !== 'svg'
				return
					_ callback
						_ ctx.error
							@ myname + " error: the model paramater should be an 'svg' wizzi model"
							@ model
			_ md.getGenItem
				@ ctx
				(
					@ model
					f_cb( notUsed )
						log 'exit', myname, 'err', err
						return
							_ callback(null, ctx)

	async/md-gen-items( )
		var
			decl opt = options || {}
			decl from = opt.from || 0
			decl indent = typeof opt.indent === 'undefined' ? true : opt.indent

		if indent
			_ ctx.indent()

		var goitems = []
		for var i = from; i < items.length; i++
			_ goitems.push(items[i])

		_ async.mapSeries
			@ goitems
			_ md.getGenItem
				@ ctx
			f_cb( notUsed )
				if indent
					_ ctx.deindent()
				return
					_ callback

	async/md-gen-item( )
		if md.stm[model.wzElement]
			log '***** known element', model.wzElement
			_ md.stm[model.wzElement]
				@ model
				@ ctx
				f_cb( done )
					if done
						# ok, processed
						return
							_ callback
					else
						return
							_ md.stm.standardElement
								@ model
								@ ctx
								@ callback
		else
			return
				_ md.stm.standardElement
					@ model
					@ ctx
					@ callback

	async/md-stm( standardElement )
		_ writeBeginTag
			@ ctx
			@ model.wzTag
		_ writeAttributes(model, ctx)
		if model.items.length > 0
			_ writeCloseBegin
				@ ctx
			if model.wzName && model.wzName.length > 0
				_ ctx.write(model.wzName)
			_ md.genItems
				@ model.items
				@ ctx
				{
					@ indent true
				f_cb( notUsed )
					_ writeEndTag
						@ ctx
						@ model.wzTag
					return
						_ callback
		else
			_ ctx.write
				@ closeSym(ctx)
			_ ctx.write
				@ (model.wzName && model.wzName.length > 0 ? model.wzName : '')
			_ writeEndTag
				@ ctx
				@ model.wzTag
			return
				_ callback


	async/md-stm( svg )
		if ctx.values.forCssImage || ctx.values.forHtmlSvgElement
		else
			_ ctx.w('<?xml version="1.0"?>')
		_ writeBeginTag
			@ ctx
			@ 'svg'
		_ ctx.write(" xmlns='http://www.w3.org/2000/svg'")
		_ writeAttributes(model, ctx)
		_ writeCloseBegin
			@ ctx
		_ md.genItems
			@ model.items
			@ ctx
			{
				@ indent true
			f_cb( notUsed )
				_ writeEndTag
					@ ctx
					@ 'svg'
				_ callback(null, true)
	
	#
		async/md-stm( linearGradient )
			_ writeBeginTag
				@ ctx
				@ 'linearGradient'
			_ writeAttributes(model, ctx)
			_ writeCloseBegin
				@ ctx
			# TODO
			_ writeEndTag
				@ ctx
				@ 'linearGradient'
				_ callback(null, true)

	function writeAttributes
		param model
		param ctx
		var v
		foreach a in model.getAttributes()
			set v = encodeValue(ctx, a.value)
			_ ctx.write
				@ " " + a.name + "='" + v + "'"

		if model.attributes
			foreach a in model.attributes
				var p = lineParser.parseNameValueRaw(a.wzName, a)
				if p.hasValue()
					_ ctx.write
						@ " " + p.name() + "='" + p.value() + "'"
				else
					_ ctx.write
						@ " " + p.name()

		var styles = model.getStyleAttributes()
		if styles.length > 0
			var sb = []
			foreach style in styles
				set v = encodeValue(ctx, style.value)
				_ sb.push
					@ style.tag + ':' + v + ';'
			_ ctx.write
				@ " style='" + sb.join('') + "'"
	
	function encodeValue
		param ctx
		param value
		if ctx.values.forCssImage
			var v = verify.replaceAll(value, '%','%25') 
			return verify.replaceAll(v, '#','%23') 
		else
			return value

	function openSym
		param ctx
		return ctx.values.forCssImage ? '%3C' : '<'

	function closeSym
		param ctx
		return ctx.values.forCssImage ? '%3E' : '>'

	function writeBeginTag
		param ctx
		param name
		_ ctx.write
			@ openSym(ctx) + name

	function writeCloseBegin
		param ctx
		if ctx.values.forCssImage
			_ ctx.write
				@ closeSym(ctx)
		else
			_ ctx.w
				@ closeSym(ctx)

	function writeEndTag
		param ctx
		param name
		if name
			_ __w
				@ ctx
				@ openSym(ctx) + '/' + name + closeSym(ctx)
		else
			_ __w
				@ ctx
				@ '/' + closeSym(ctx)

	function __w
		param ctx
		param text
		if ctx.values.forCssImage
			_ ctx.write(text)
		else
			_ ctx.w(text)

