module
    kind jsfile

	# entry points
	#   validateModel
    #        param ramlObject
    #        param modelRef
    #        param data
    #        param callback
	#   --> composeModel --> processDocument

	# ramlObject is the specification object

    set 'use strict'
    var _
        { 
            @ cloneDeep require('lodash-compat/lang/cloneDeep')
            @ difference require('lodash-compat/array/difference')
            @ each require('lodash-compat/collection/each')
            @ find require('lodash-compat/collection/find')
            @ has require('lodash-compat/object/has')
            @ isArray require('lodash-compat/lang/isArray')
            @ isFunction require('lodash-compat/lang/isFunction')
            @ isPlainObject require('lodash-compat/lang/isPlainObject')
            @ isString require('lodash-compat/lang/isString')
            @ isUndefined require('lodash-compat/lang/isUndefined')
            @ map require('lodash-compat/collection/map')
            @ reduce require('lodash-compat/collection/reduce')
            @ set require('lodash-compat/object/set')
            @ union require('lodash-compat/array/union')
    
	var async = require('async')
    var helpers = require('./helpers')
    var JsonRefs = require('json-refs')
    var SparkMD5 = require('spark-md5')
    var traverse = require('traverse')
    var validators = require('./validators')
    var YAML = require('js-yaml')
    
	var documentCache
        { 
    
	var sanitizeRef
        function 
            param ref
            return ref.replace('#/models/', '')
    
	var validOptionNames
        _ _.map
            @ helpers.swaggerOperationMethods
            function 
                param method
                return method.toLowerCase()
    
    
    
    
	var getOrComposeSchema
        function 
            param documentMetadata
            param modelId
            
			var title = 'Composed ' + modelId
            
			var metadata = documentMetadata.definitions[modelId]
            
			var originalT
                _ traverse
                    @ documentMetadata.original
            
			var resolvedT
                _ traverse
                    @ documentMetadata.resolved
            
			var composed
            var original
            
			if !(metadata)
                return undefined
            
			set original = _.cloneDeep(originalT.get(JsonRefs.pathFromPtr(modelId)))
            set composed = _.cloneDeep(resolvedT.get(JsonRefs.pathFromPtr(modelId)))
            
            set composed =
                _ traverse(composed)
                    ._ map
                        function 
                            param val
                            if this.key === 'id' && _.isString(val)
                                _ this.remove()
            
			set composed.title = title
            
			return composed
    
	var getDocumentCache
        function 
            param ramlObject
            var key
                _ SparkMD5.hash
                    _ JSON.stringify(ramlObject)
            var cacheEntry
                op|| 
                    set documentCache[key]
                    _ _.find
                        @ documentCache
                        function 
                            param cacheEntry
                            return cacheEntry.resolvedId === key
            
			if !cacheEntry
                set cacheEntry = documentCache[key]
					{
						@ definitions {}
						@ original ramlObject
						@ resolved undefined
            
			return cacheEntry
    
	var handleValidationError
        function 
            param results
            param callback
            
			var err
                new Error('The Raml document(s) are invalid')
            set err.errors = results.errors
            set err.failedValidation = true
            set err.warnings = results.warnings
            _ callback(err)
    
	var normalizePath
        function 
            param path
            var matches = path.match(/\{(.*?)\}/g)
            var argNames
                [ 
            var normPath = path
            if matches
                _ _.each
                    @ matches
                    function 
                        param match
                        param index
                        set normPath = normPath.replace(match, ((('{' + index)) + '}'))
                        _ argNames.push
                            _ match.replace(/[{}]/g, '')
            return 
                { 
                    @ path normPath
                    @ args argNames
    
	var removeCirculars
        function 
            param obj
            function walk
                param ancestors
                param node
                param path
                
				function walkItem
                    param item
                    param segment
                    
					_ path.push(segment)
                    _ walk(ancestors, item, path)
                    _ path.pop()
                
				if ancestors.indexOf(node) === -1
                    _ ancestors.push(node)
                    if _.isArray(node) || _.isPlainObject(node)
                        _ _.each
                            @ node
                            function 
                                param member
                                param indexOrKey
                                _ walkItem
                                    @ member
                                    _ indexOrKey.toString()
                else 
                    _ _.set
                        @ obj
                        @ path
                        { 
                _ ancestors.pop()
            
			_ walk
                [ 
                @ obj
                [ 
    
	var validateNoExist
        function 
            param data
            param val
            param codeSuffix
            param msgPrefix
            param path
            param dest
            if !(_.isUndefined(data)) && data.indexOf(val) > -1
                _ createErrorOrWarning
					@ 'DUPLICATE_' + codeSuffix
					@ msgPrefix + ' already defined: ' + val
					@ path
					@ dest
    
	var validateSchemaConstraints
        function 
            param documentMetadata
            param schema
            param path
            param results
            param skip
            try 
                _ validators.validateSchemaConstraints
                    @ schema
                    @ path
                    @ undefined
            catch err
                if !(skip)
                    _ createErrorOrWarning
                        @ err.code
                        @ err.message
                        @ err.path
                        @ results.errors
    
	var validateExist
        function 
            param data
            param val
            param codeSuffix
            param msgPrefix
            param path
            param dest
            if !_.isUndefined(data) && data.indexOf(val) === -1
                _ createErrorOrWarning
					@ 'UNRESOLVABLE_' + codeSuffix
					@ msgPrefix + ' could not be resolved: ' + val
					@ path
					@ dest
    
    var resolveRefs
        function 
            param ramlObject
            param callback

            var cacheEntry = getDocumentCache(ramlObject)

            var jsonRefsOptions
                { 
                    @ includeInvalid true
                    @ loaderOptions
                        { 
                            @ processContent
                                function 
                                    param res
                                    param callback
                                    _ callback
                                        @ undefined
                                        _ YAML.safeLoad
                                            @ res.text
            
			if !cacheEntry.resolved
                _ JsonRefs.resolveRefs(ramlObject, jsonRefsOptions)
                    ._ then
                        function 
                            param results
                            
							_ removeCirculars
                                @ results.resolved
                            
							_ _.each
                                @ results.refs
                                function 
                                    param refDetails
                                    param refPtr
                                    if refDetails.circular
                                        _ _.set
                                            @ results.resolved
                                            _ JsonRefs.pathFromPtr(refPtr)
                                            { 
                            
							set cacheEntry.referencesMetadata = results.refs
                            set cacheEntry.resolved = results.resolved
                            set cacheEntry.resolvedId = SparkMD5.hash(JSON.stringify(results.resolved))
                            _ callback()
                        ._ catch(callback)
            else 
                _ callback()
    
	var validateAgainstSchema
        function 
            param spec
            param schemaOrName
            param data
            param callback
            
			var validator
                iif _.isString(schemaOrName)
                    then 
                        set spec.validators[schemaOrName]
                    else 
                        _ helpers.createJsonValidator()
            
			_ helpers.registerCustomFormats(data)
            
			try 
                _ validators.validateAgainstSchema(schemaOrName, data, validator)
            catch err
                if err.failedValidation
                    return 
                        _ callback
                            @ undefined
                            @ err.results
                else 
                    return callback(err)
            
			_ resolveRefs
                @ data
                function 
                    param err
                    return callback(err)
        
	var Specification
        function 
            var that = this
            var createValidators
                function 
                    param spec
                    param validatorsMap
                    return 
                        _ _.reduce
                            @ validatorsMap
                            function 
                                param result
                                param schemas
                                param schemaName
                                set result[schemaName] = helpers.createJsonValidator(schemas)
                                return result
                            { 
            var fixSchemaId
                function 
                    param schemaName
                    var fixed
                        _ _.cloneDeep
                            @ that.schemas[schemaName]
                    set fixed.id = schemaName
                    return fixed
            
			var primitives
                [ 
                    @ 'string'
                    @ 'number'
                    @ 'boolean'
                    @ 'integer'
                    @ 'array'
            
			set this.docsUrl = 'https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md'
            set this.primitives = _.union(primitives, ['file'])
            set this.schemasUrl = 'https://github.com/swagger-api/swagger-spec/tree/master/schemas/v2.0'
            set this.schemas =
                { 
                    @ 'schema.json' require('../schemas/2.0/schema.json')
            
			set this.validators
				_ createValidators
					@ this
					{
						@ 'schema.json' [fixSchemaId('schema.json')]

    
	set Specification.prototype.composeModel =
        function 
            param ramlObject
            param modelRef
            param callback
            
			var doComposition
                function 
                    param err
                    param results
                    
					
                    if err
                        return callback(err)
                    elif helpers.getErrorCount(results) > 0
                        return handleValidationError(results, callback)
                    
					var documentMetadata
					set documentMetadata = getDocumentCache(ramlObject)
                    set results =
                        { 
                            @ errors
                                [ 
                            @ warnings
                                [ 
                    
					_ processDocument(documentMetadata, results)
                    
					if !(documentMetadata.definitions[modelRef])
                        return callback()
                    
					if helpers.getErrorCount(results) > 0
                        return handleValidationError(results, callback)
                    
					_ callback
                        @ undefined
                        _ getOrComposeSchema(documentMetadata, modelRef)
                
				if _.isUndefined(ramlObject)
                    throw 
                        new Error('ramlObject is required')
                elif ! (_.isPlainObject(ramlObject))
                    throw 
                        new TypeError('ramlObject must be an object')
                if _.isUndefined(modelRef)
                    throw 
                        new Error('modelRef is required')
            if _.isUndefined(callback)
                throw 
                    new Error('callback is required')
            elif ! (_.isFunction(callback))
                throw 
                    new TypeError('callback must be a function')
            
			if modelRef.charAt(0) !== '#'
                throw 
                    new Error('modelRef must be a JSON Pointer')
			
			_ this.validate(ramlObject, doComposition)
    
	set Specification.prototype.validateModel =
        function 
            param ramlObject
            param modelRef
            param data
            param callback
            
			if _.isUndefined(ramlObject)
                throw 
                    new Error('ramlObject is required')
			elif ! (_.isPlainObject(ramlObject))
                throw 
                    new TypeError('ramlObject must be an object')
            
			if _.isUndefined(modelRef)
                throw 
                    new Error('modelRef is required')
            
			if _.isUndefined(data)
                throw 
                    new Error('data is required')
            
			if _.isUndefined(callback)
                throw 
                    new Error('callback is required')
            elif ! (_.isFunction(callback))
                throw 
                    new TypeError('callback must be a function')
            
			var that = this
            _ this.composeModel
                @ ramlObject
                @ modelRef
                function 
                    param err
                    param result
                    if err
                        return callback(err)
                    _ validateAgainstSchema(that, result, data, callback)
    
	set Specification.prototype.resolve =
        function 
            param document
            param ptr
            param callback
            
			var documentMetadata
            
			var respond
                function 
                    param document
                    if _.isString(ptr)
                        return 
                            _ callback
                                @ undefined
                                _ traverse(document)
                                    ._ get
                                        _ JsonRefs.pathFromPtr(ptr)
                    else 
                        return callback(undefined, document)
            
			if _.isUndefined(document)
                throw 
                    new Error('document is required')
            elif ! (_.isPlainObject(document))
                throw 
                    new TypeError('document must be an object')
            
			if arguments.length === 2
                set callback = arguments[1]
                set ptr = undefined
            
			if !(_.isUndefined(ptr)) && !(_.isString(ptr))
                throw 
                    new TypeError('ptr must be a JSON Pointer string')
            
			if _.isUndefined(callback)
                throw 
                    new Error('callback is required')
            elif ! (_.isFunction(callback))
                throw 
                    new TypeError('callback must be a function')
            
			set documentMetadata = getDocumentCache(document)
            
			if !(documentMetadata.resolved)
                _ this.validate
                    @ document
                    function 
                        param err
                        param results
                        if err
                            return callback(err)
                        elif helpers.getErrorCount(results) > 0
                            return handleValidationError(results, callback)
                        return 
                            _ respond
                                @ documentMetadata.resolved
            else 
                return 
                    _ respond
                        @ documentMetadata.resolved
    
    set module.exports = new Specification()
