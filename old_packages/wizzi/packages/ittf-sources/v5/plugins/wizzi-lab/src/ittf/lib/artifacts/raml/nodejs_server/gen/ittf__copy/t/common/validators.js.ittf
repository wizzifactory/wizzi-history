$group

	wz-iife validators
	
		wz-function validateContentType
			param gProducesOrConsumes
			param oProducesOrConsumes
			param reqOrRes
        
			var isResponse = typeof (reqOrRes.end) === 'function'
        
			var contentType
				iif isResponse
					then 
						_ reqOrRes.getHeader('content-type')
					else 
						set reqOrRes.headers['content-type']
        
			var producesOrConsumes
				_ _.map
					_ _.union(gProducesOrConsumes, oProducesOrConsumes)
					function 
						param contentType
						return contentType.split(';')[0]
        
			if !contentType
				if isResponse
					set contentType = 'text/plain'
				else 
					set contentType = 'application/octet-stream'

			set contentType = contentType.split(';')[0]
        
			if producesOrConsumes.length > 0 && 
				\ isResponse 
					\ ? true 
					\ : ['POST', 'PUT'].indexOf(reqOrRes.method) !== -1 && producesOrConsumes.indexOf(contentType) === -1
				throw 
					new Error
						@ 'Invalid content type (' + contentType + ').  These are valid: ' + producesOrConsumes.join(', ')

		getValid( Requiredness, required )
			if required === true && _.isUndefined(val)
				_ throwErrorWithCode
					@ 'REQUIRED'
					@ 'Is required'

		wz-function isValidDate
			param date

			var dateRegExp = /^([0-9]{4})-([0-9]{2})-([0-9]{2})$/

			var day
			var matches
			var month
        
			if _.isDate(date)
				return true
        
			if !(_.isString(date))
				set date = date.toString()
        
			set matches = dateRegExp.exec(date)
        
			if matches === null
				return false
        
			set day = matches[3]
        
			set month = matches[2]
        
			if month < '01' || month > '12' || day < '01' || day > '31'
				return false
        
			return true
    
		wz-function isValidDateTime
			param dateTime
			var hour
			var date
			var time
			var matches
			var minute
			var parts
			var second
			var timezoneHours
			var timezoneMinutes

			var dateTimeRegExp = /^([0-9]{2}):([0-9]{2}):([0-9]{2})(.[0-9]+)?(z|([+-][0-9]{2}):([0-9]{2}))$/
        
			if _.isDate(dateTime)
				return true
        
			if !(_.isString(dateTime))
				set dateTime = dateTime.toString()
        
			set parts = dateTime.toLowerCase().split('t')
			set date = parts[0]
			set time = parts.length > 1 ? parts[1] : undefined
        
			if ! (isValidDate(date))
				return false
        
			set matches = dateTimeRegExp.exec(time)
        
			if matches === null
				return false
        
			set hour = matches[1]
			set minute = matches[2]
			set second = matches[3]
        
			if matches[5] === 'z'
				set timezoneHours = 0
				set timezoneMinutes = 0
			else 
				set timezoneHours = Number(matches[6])
				set timezoneMinutes = Number(matches[7])
        
			var validTimezoneMinutes = timezoneMinutes === 0 || timezoneMinutes === 15 || timezoneMinutes === 30 || timezoneMinutes === 45
        
			if hour > '23' || minute > '59' || second > '59' || timezoneHours > 14 || timezoneHours < - 12 || !validTimezoneMinutes
				return false
        
			return true
    
		wz-function validateAgainstSchema
			param schemaOrName
			param data
			param validator
			var sanitizeError
				function 
					param obj
					var defType
						iif ['additionalProperties', 'items'].indexOf(obj.path[(obj.path.length - 1)]) > - (1)
							then 'schema'
							else 
								set obj.path[(obj.path.length - 2)]
					if ['ANY_OF_MISSING', 'ONE_OF_MISSING'].indexOf(obj.code) > - (1)
						switch defType
							case 'parameters'
								set defType = 'parameter'
								break 
							case 'responses'
								set defType = 'response'
								break 
							case 'schema'
								set defType += (' ' + obj.path[(obj.path.length - 1)])
						set obj.message = ((('Not a valid ' + defType)) + ' definition')
					set delete (obj.params)
					set delete (obj.schemaId)
					if obj.inner
						_ _.each
							@ obj.inner
							function 
								param nObj
								_ sanitizeError(nObj)
			var schema
				iif _.isPlainObject(schemaOrName)
					then 
						_ _.cloneDeep(schemaOrName)
					else schemaOrName
			if _.isUndefined(validator)
				set validator = helpers.createJsonValidator([schema])
			var valid = validator.validate(data, schema)
			if ! (valid)
				try 
					_ throwErrorWithCode('SCHEMA_VALIDATION_FAILED', 'Failed schema validation')
				catch err
					set err.results =
						{ 
							@ errors
								_ _.map
									_ validator.getLastErrors()
									function 
										param err
										_ sanitizeError(err)
										return err
							@ warnings
								[ 
					throw err
    
		# This should go in the schema validator
		wz-function validateArrayType
			param schema
			if schema.type === 'array' && _.isUndefined(schema.items)
				_ throwErrorWithCode
					@ 'OBJECT_MISSING_REQUIRED_PROPERTY'
					@ 'Missing required property: items'
    
    
		getValid( Enum, allowed )
			if !(_.isUndefined(val)) && allowed.indexOf(val) === -1
				_ throwErrorWithCode
					@ 'ENUM_MISMATCH'
					@ 'Not an allowable value (' + allowed.join(', ') + '): ' + val
    
		getValid( Maximum, maximum, type, exclusive )
			var code = exclusive === true ? 'MAXIMUM_EXCLUSIVE' : 'MAXIMUM'
			var testMax
			var testVal
			if _.isUndefined(exclusive)
				set exclusive = false
			if type === 'integer'
				set testVal = parseInt(val, 10)
			elif type === 'number'
				set testVal = parseFloat(val)
			set testMax = parseFloat(maximum)
			if exclusive && testVal >= testMax
				_ throwErrorWithCode
					@ code
					@ 'Greater than or equal to the configured maximum (' + maximum + '): ' + val
			elif testVal > testMax
				_ throwErrorWithCode
					@ code
					@ 'Greater than the configured maximum (' + maximum + '): ' + val

		getValid( MaxItems, maxItems )
			if !(_.isUndefined(maxItems)) && val.length > maxItems
				_ throwErrorWithCode
					@ 'ARRAY_LENGTH_LONG'
					@ 'Array is too long (' + val.length + '), maximum ' + maxItems

		getValid( MaxLength, maxLength )
			if !(_.isUndefined(maxItems)) && val.length > maxLength
				_ throwErrorWithCode
					@ 'MAX_LENGTH'
					@ 'String is too long (' + val.length + ' chars), maximum ' + maxLength
    
		getValid( MaxProperties, maxProperties )
			var propCount
				iif _.isPlainObject(val)
					then 
						_ Object.keys(val)
							. length
					else 0
			if propCount > maxProperties
				_ throwErrorWithCode
					@ 'MAX_PROPERTIES'
					@ 'Number of properties is too many (' + propCount + ' properties), maximum ' + maxProperties
    
		getValid( Minimum, minimum, type, exclusive )
			var code = exclusive === true ? 'MINIMUM_EXCLUSIVE' : 'MINIMUM'
			var testMin
			var testVal
			if _.isUndefined(exclusive)
				set exclusive = false
			if type === 'integer'
				set testVal = parseInt(val, 10)
			elif type === 'number'
				set testVal = parseFloat(val)
			set testMin = parseFloat(minimum)
			if exclusive && testVal <= testMin
				_ throwErrorWithCode
					@ code
					@ 'Less than or equal to the configured minimum (' + minimum + '): ' + val
			elif testVal < testMin
				_ throwErrorWithCode
					@ code
					@ 'Less than the configured minimum (' + minimum + '): ' + val
    
		getValid( MinItems, minItems )
			if val.length < minItems
				_ throwErrorWithCode
					@ 'ARRAY_LENGTH_SHORT'
					@ 'Array is too short (' + val.length + '), minimum ' + minItems
    
		getValid( MinLength, minLength )
			if val.length < minLength
				_ throwErrorWithCode
					@ 'MIN_LENGTH'
					@ 'String is too short (' + val.length + ' chars), minimum ' + minLength
    
		getValid( MinProperties, minProperties )
        
			var propCount
				iif _.isPlainObject(val)
					then 
						_ Object.keys(val)
							. length
					else 0
        
			if propCount < minProperties
				_ throwErrorWithCode
					@ 'MIN_PROPERTIES'
					@ 'Number of properties is too few (' + propCount + ' properties), minimum ' + minProperties
    
		getValid( MultipleOf, multipleOf )
			if val % multipleOf !== 0
				_ throwErrorWithCode
					@ 'MULTIPLE_OF'
					@ 'Not a multiple of ' + multipleOf
    
		getValid( Pattern, pattern )
			if _.isNull(val.match(new RegExp(pattern)))
				_ throwErrorWithCode
					@ 'PATTERN'
					@ 'Does not match required pattern: ' + pattern
    
    
		wz-function validateTypeAndFormat
			param val
			param type
			param format
			param allowEmptyValue
			param skipError

			var result = true
			var oVal = val
        
			if allowEmptyValue === true && val === ''
				return 
        
			if _.isArray(val)
				_ _.each
					@ val
					function 
						param aVal
						param index
						if ! (validateTypeAndFormat(aVal, type, format, allowEmptyValue, true))
							_ throwErrorWithCode
								@ 'INVALID_TYPE'
								@ 'Value at index ' + index + ' is not a valid ' + type + ': ' + aVal
			else 
				switch type
					case 'boolean'
						set result = _.isBoolean(val)
						break 
					case 'integer'
						set result = (_.isFinite(val) && (Math.round(val) === val))
						break 
					case 'number'
						set result = _.isFinite(val)
						break 
					case 'string'
						if ! (_.isUndefined(format))
							switch format
								case 'date'
									set result = isValidDate(val)
									break 
								case 'date-time'
									set result = isValidDateTime(val)
									break 
						break 
					case 'void'
						set result = _.isUndefined(val)
						break 
			if skipError
				return result
			elif !(result)
				_ throwErrorWithCode
					@ 'INVALID_TYPE'
					@ type !== 'void' 
						\ ? 'Not a valid ' + (_.isUndefined(format) ? '' : format + ' ' + type) + ': ' + oVal 
						\ : 'Void does not allow a value'
    
		getValid( UniqueItems, isUnique )
			if _.uniq(val).length !== val.length
				_ throwErrorWithCode
					@ 'ARRAY_UNIQUE'
					@ 'Does not allow duplicate values: ' + val.join(', ')
    
		wz-function validateSchemaConstraints
			param schema
			param path
			param val
        
			var resolveSchema
				function 
					param schema
					var resolved = schema
					if resolved.schema
						set path = path.concat(['schema'])
						set resolved = resolveSchema(resolved.schema)
					return resolved
        
			var type = schema.type
			var allowEmptyValue
        
			if !(type)
				if !(schema.schema)
					if path[(path.length - 2)] === 'responses'
						set type = 'void'
					else 
						set type = 'object'
				else 
					set schema = resolveSchema(schema)
					set type = (schema.type || 'object')
        
			set allowEmptyValue = schema ? schema.allowEmptyValue === true : false
			
			try 
            
				if type === 'array'
					_ validateArrayType(schema)
            
				if _.isUndefined(val)
					set val = schema.default
					set path = path.concat('default')
            
				# TODO ??? and requiredness
				if _.isUndefined(val)
					return 
            
				if type === 'array'
					_ _.each
						@ val
						function 
							param val
							param index
							try 
								_ validateSchemaConstraints
									@ (schema.items || {})
									_ path.concat
										_ index.toString()
									@ val
							catch err
								set err.message = 'Value at index ' + index + ' ' + 
									\ (err.code === 'INVALID_TYPE' 
										\ ? 'is ' 
										\ : '' + err.message.charAt(0).toLowerCase() + err.message.substring(1)
										\ )
								throw err
				else 
					_ validateTypeAndFormat
						@ val
						@ type
						@ schema.format
						@ allowEmptyValue
            
				_ validateEnum
					@ val
					@ schema.enum
				_ validateMaximum
					@ val
					@ schema.maximum
					@ type
					@ schema.exclusiveMaximum
				_ validateMaxItems
					@ val
					@ schema.maxItems
				_ validateMaxLength
					@ val
					@ schema.maxLength
				_ validateMaxProperties
					@ val
					@ schema.maxProperties
				_ validateMinimum
					@ val
					@ schema.minimum
					@ type
					@ schema.exclusiveMinimum
				_ validateMinItems
					@ val
					@ schema.minItems
				_ validateMinLength
					@ val
					@ schema.minLength
				_ validateMinProperties
					@ val
					@ schema.minProperties
				_ validateMultipleOf
					@ val
					@ schema.multipleOf
				_ validatePattern
					@ val
					@ schema.pattern
				_ validateUniqueItems
					@ val
					@ schema.uniqueItems
			catch err
				set err.path = path
				throw err

