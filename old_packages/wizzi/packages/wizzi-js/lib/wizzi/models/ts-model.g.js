/*
    artifact generator: C:\My\wizzi\v6\node_modules\wizzi-legacy-v5\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\v6\node_modules\wizzi-core\lib\artifacts\wfschema\model\gen\ittf\wfschema-model.js.ittf
    utc time: Sat, 13 Apr 2019 08:08:45 GMT
*/
'use strict';
// generated by v5-wizzi-js.artifacts.js.module.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var wzutils = require('wizzi-utils');
var verify = wzutils.verify;
/**
     Schema wide declarations
*/
function isDescendentOf(model, ancestor) {
    if (!model.wzParent) {
        return false;
    }
    if (model.wzParent.wzElement == ancestor) {
        return true;
    }
    return isDescendentOf(model.wzParent, ancestor);
}
var _md = module.exports = {};
var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row, col, sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();

_md.wzSourceLineInfo = wzSourceLineInfo;
var tsBase = (function () {
    function tsBase(name, sourceLineInfo) {
        _classCallCheck(this, tsBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    tsBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    tsBase.prototype.wzSourceFilepath = function(sourceKey) {
        return this.wzRoot().loadHistory.getIttfDocumentUri(sourceKey);
    }
    tsBase.prototype.wzSourceErrorLines = function(node, message) {
        return this.wzRoot().loadHistory.getIttfDocumentErrorLines(node.u, {
                row: node.r, 
                col: node.c, 
                description: message
            }, true);
    }
    tsBase.prototype.wzVerify = function() {
    }
    tsBase.prototype.wzInitialize = function() {
    }
    tsBase.prototype.wzInitializeAsync = function(ctx, callback) {
        callback(null);
    }
    tsBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    tsBase.prototype.wzAddChildToColl = function(node, coll) {
        node.wzParent = this;
        node.wzMoved = true;
        coll.push(node);
    }
    tsBase.prototype.wzMoveChildToColl = function(node, coll, fromColl) {
        var index = fromColl.indexOf(node);
        if (index < 0) {
            this.error('wzMoveChildToColl error. The from collection does not contain the node.', node);
        }
        fromColl.splice(index, 1);
        this.wzAddChildToColl(node, coll);
    }
    tsBase.prototype.wzLoadToChildColl = function(child, type, coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    tsBase.prototype.wzCreateChildColl = function(tag, name, type, coll) {
        var item = new type(name, this.wzSourceLineInfo);
        item.wzTag = tag;
        item.wzParent = this;
        item.wzCreated = true;
        coll.push(item);
        return item;
    }
    tsBase.prototype.wzLoadToChildren = function(child, type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    tsBase.prototype.wzLoadOneToOne = function(child, type, fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    tsBase.prototype.wzRemove = function(fromColl) {
        var index = fromColl.indexOf(this);
        if (index < 0) {
            this.error('wzRemove error. The from collection does not contain the node.', this);
        }
        fromColl.splice(index, 1);
    }
    tsBase.prototype.error = function(message, node) {
        throw new _md.tsModelException(message, node, this);
    }
    return tsBase;
})();

_md.tsBase = tsBase;
/**
    element statement
     The base element for all code nodes, and
     a generic code statement that will be emitted as is.
     The indentation will depend to the node depth.
*/
var statement = (function (tsBase) {
    _inherits(statement, tsBase);
    function statement(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(statement.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, statement);
        this.wzElement = "statement";
        // relation statement
        this.statements = [];
    }
    statement.prototype.addStatement = function(name, sourceLineInfo) {
        var retval = new _md.statement(name, sourceLineInfo);
        retval.wzParent = this;
        this.statements.push(retval);
        return retval;
    }
    statement.prototype.getStatement = function(name) {
        var found = null;
        this.statements.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    statement.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.statements);
            }
        }
        if (_l == 1 && _ch == '(') {
            if (name === '(') {
                return this.wzLoadToChildColl(child, _md.callOnValue, this.statements);
            }
        }
        if (_l == 1 && _ch == '+') {
            if (name === '+') {
                return this.wzLoadToChildColl(child, _md.statement, this.statements);
            }
        }
        if (_l == 1 && _ch == '.') {
            if (name === '.') {
                return this.wzLoadToChildColl(child, _md.memberAccess, this.statements);
            }
        }
        if (_l == 1 && _ch == ':') {
            if (name === ':') {
                return this.wzLoadToChildColl(child, _md.namedCallParam, this.statements);
            }
        }
        if (_l == 1 && _ch == '<') {
            if (name === '<') {
                return this.wzLoadToChildColl(child, _md.htmlelement, this.statements);
            }
        }
        if (_l == 1 && _ch == '=') {
            if (name === '=') {
                return this.wzLoadToChildColl(child, _md.initValue, this.statements);
            }
        }
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, _md.jsPropertyOrValue, this.statements);
            }
        }
        if (_l == 1 && _ch == '[') {
            if (name === '[') {
                return this.wzLoadToChildColl(child, _md.jsArray, this.statements);
            }
        }
        if (_l == 1 && _ch == '_') {
            if (name === '_') {
                return this.wzLoadToChildColl(child, _md.call, this.statements);
            }
        }
        if (_l == 1 && _ch == 'm') {
            if (name === 'm') {
                return this.wzLoadToChildColl(child, _md.method, this.statements);
            }
        }
        if (_l == 1 && _ch == 'p') {
            if (name === 'p') {
                return this.wzLoadToChildColl(child, _md.p, this.statements);
            }
        }
        if (_l == 1 && _ch == '{') {
            if (name === '{') {
                return this.wzLoadToChildColl(child, _md.jsObject, this.statements);
            }
            else if (name === '{') {
                return this.wzLoadToChildColl(child, _md.objectParam, this.statements);
            }
        }
        if (_l == 2 && _ch == '!') {
            if (name === '!=') {
                return this.wzLoadToChildColl(child, _md.op_noteq, this.statements);
            }
        }
        if (_l == 2 && _ch == '&') {
            if (name === '&&') {
                return this.wzLoadToChildColl(child, _md.and, this.statements);
            }
        }
        if (_l == 2 && _ch == '.') {
            if (name === '._') {
                return this.wzLoadToChildColl(child, _md.memberCall, this.statements);
            }
            else if (name === '.[') {
                return this.wzLoadToChildColl(child, _md.memberAccessComputed, this.statements);
            }
        }
        if (_l == 2 && _ch == ':') {
            if (name === ':m') {
                return this.wzLoadToChildColl(child, _md.typeMethod, this.statements);
            }
            else if (name === ':p') {
                return this.wzLoadToChildColl(child, _md.typeProperty, this.statements);
            }
            else if (name === ':[') {
                return this.wzLoadToChildColl(child, _md.typeArray, this.statements);
            }
            else if (name === ':{') {
                return this.wzLoadToChildColl(child, _md.typeObjectLiteral, this.statements);
            }
            else if (name === ':@') {
                return this.wzLoadToChildColl(child, _md.typeObjectValue, this.statements);
            }
            else if (name === ':=') {
                return this.wzLoadToChildColl(child, _md.typeInitValue, this.statements);
            }
            else if (name === ':<') {
                return this.wzLoadToChildColl(child, _md.typeParameterDecl, this.statements);
            }
            else if (name === ':!') {
                return this.wzLoadToChildColl(child, _md.typeNotNull, this.statements);
            }
        }
        if (_l == 2 && _ch == '<') {
            if (name === '<=') {
                return this.wzLoadToChildColl(child, _md.op_le, this.statements);
            }
        }
        if (_l == 2 && _ch == '=') {
            if (name === '==') {
                return this.wzLoadToChildColl(child, _md.op_eq, this.statements);
            }
            else if (name === '=>') {
                return this.wzLoadToChildColl(child, _md.arrowfunction, this.statements);
            }
        }
        if (_l == 2 && _ch == '>') {
            if (name === '>=') {
                return this.wzLoadToChildColl(child, _md.op_ge, this.statements);
            }
        }
        if (_l == 2 && _ch == '@') {
            if (name === '@_') {
                return this.wzLoadToChildColl(child, _md.decoratorCall, this.statements);
            }
        }
        if (_l == 2 && _ch == '_') {
            if (name === '_`') {
                return this.wzLoadToChildColl(child, _md.tagFunctionCall, this.statements);
            }
        }
        if (_l == 2 && _ch == 'd') {
            if (name === 'do') {
                return this.wzLoadToChildColl(child, _md.xdo, this.statements);
            }
        }
        if (_l == 2 && _ch == 'g') {
            if (name === 'gt') {
                return this.wzLoadToChildColl(child, _md.op_gt, this.statements);
            }
        }
        if (_l == 2 && _ch == 'i') {
            if (name === 'if') {
                return this.wzLoadToChildColl(child, _md.xif, this.statements);
            }
        }
        if (_l == 2 && _ch == 'j') {
            if (name === 'js') {
                return this.wzLoadToChildColl(child, _md.js, this.statements);
            }
        }
        if (_l == 2 && _ch == 'l') {
            if (name === 'lt') {
                return this.wzLoadToChildColl(child, _md.op_lt, this.statements);
            }
        }
        if (_l == 2 && _ch == 'o') {
            if (name === 'op') {
                return this.wzLoadToChildColl(child, _md.op_minus, this.statements);
            }
        }
        if (_l == 2 && _ch == '|') {
            if (name === '||') {
                return this.wzLoadToChildColl(child, _md.or, this.statements);
            }
        }
        if (_l == 3 && _ch == '!') {
            if (name === '!==') {
                return this.wzLoadToChildColl(child, _md.op_noteq_strict, this.statements);
            }
        }
        if (_l == 3 && _ch == '.') {
            if (name === '...') {
                return this.wzLoadToChildColl(child, _md.jsRest, this.statements);
            }
        }
        if (_l == 3 && _ch == ':') {
            if (name === ':=>') {
                return this.wzLoadToChildColl(child, _md.typeArrowFunction, this.statements);
            }
            else if (name === ':as') {
                return this.wzLoadToChildColl(child, _md.typeAs, this.statements);
            }
            else if (name === ':[]') {
                return this.wzLoadToChildColl(child, _md.typeIndexedAccess, this.statements);
            }
        }
        if (_l == 3 && _ch == '=') {
            if (name === '===') {
                return this.wzLoadToChildColl(child, _md.op_eq_strict, this.statements);
            }
        }
        if (_l == 3 && _ch == '@') {
            if (name === '@id') {
                return this.wzLoadToChildColl(child, _md.identifier, this.statements);
            }
        }
        if (_l == 3 && _ch == 'c') {
            if (name === 'css') {
                return this.wzLoadToChildColl(child, _md.css, this.statements);
            }
        }
        if (_l == 3 && _ch == 'f') {
            if (name === 'for') {
                return this.wzLoadToChildColl(child, _md.xfor, this.statements);
            }
        }
        if (_l == 3 && _ch == 'g') {
            if (name === 'get') {
                return this.wzLoadToChildColl(child, _md.get, this.statements);
            }
        }
        if (_l == 3 && _ch == 'i') {
            if (name === 'iif') {
                return this.wzLoadToChildColl(child, _md.iif, this.statements);
            }
        }
        if (_l == 3 && _ch == 'j') {
            if (name === 'jst') {
                return this.wzLoadToChildColl(child, _md.jsonStatementTree, this.statements);
            }
        }
        if (_l == 3 && _ch == 'l') {
            if (name === 'let') {
                return this.wzLoadToChildColl(child, _md.xlet, this.statements);
            }
            else if (name === 'log') {
                return this.wzLoadToChildColl(child, _md.log, this.statements);
            }
        }
        if (_l == 3 && _ch == 'm') {
            if (name === 'mod') {
                return this.wzLoadToChildColl(child, _md.op_mod, this.statements);
            }
        }
        if (_l == 3 && _ch == 'n') {
            if (name === 'not') {
                return this.wzLoadToChildColl(child, _md.not, this.statements);
            }
            else if (name === 'new') {
                return this.wzLoadToChildColl(child, _md.xnew, this.statements);
            }
        }
        if (_l == 3 && _ch == 'o') {
            if (name === 'op!') {
                return this.wzLoadToChildColl(child, _md.not, this.statements);
            }
            else if (name === 'op-') {
                return this.wzLoadToChildColl(child, _md.op_minus, this.statements);
            }
            else if (name === 'op+') {
                return this.wzLoadToChildColl(child, _md.op_plus, this.statements);
            }
            else if (name === 'op*') {
                return this.wzLoadToChildColl(child, _md.op_times, this.statements);
            }
            else if (name === 'op/') {
                return this.wzLoadToChildColl(child, _md.op_div, this.statements);
            }
            else if (name === 'op&') {
                return this.wzLoadToChildColl(child, _md.bit_and, this.statements);
            }
            else if (name === 'op|') {
                return this.wzLoadToChildColl(child, _md.bit_or, this.statements);
            }
            else if (name === 'op^') {
                return this.wzLoadToChildColl(child, _md.op_xor, this.statements);
            }
            else if (name === 'op&') {
                return this.wzLoadToChildColl(child, _md.op_xand, this.statements);
            }
            else if (name === 'op~') {
                return this.wzLoadToChildColl(child, _md.bit_not, this.statements);
            }
            else if (name === 'op>') {
                return this.wzLoadToChildColl(child, _md.op_gt, this.statements);
            }
            else if (name === 'op<') {
                return this.wzLoadToChildColl(child, _md.op_lt, this.statements);
            }
        }
        if (_l == 3 && _ch == 's') {
            if (name === 'set') {
                return this.wzLoadToChildColl(child, _md.set, this.statements);
            }
        }
        if (_l == 3 && _ch == 't') {
            if (name === 'try') {
                return this.wzLoadToChildColl(child, _md.xtry, this.statements);
            }
        }
        if (_l == 3 && _ch == 'v') {
            if (name === 'var') {
                return this.wzLoadToChildColl(child, _md.xvar, this.statements);
            }
        }
        if (_l == 3 && _ch == 'x') {
            if (name === 'xor') {
                return this.wzLoadToChildColl(child, _md.op_xor, this.statements);
            }
        }
        if (_l == 4 && _ch == ':') {
            if (name === ':any') {
                return this.wzLoadToChildColl(child, _md.typeAny, this.statements);
            }
            else if (name === ':ref') {
                return this.wzLoadToChildColl(child, _md.typeReference, this.statements);
            }
            else if (name === ':new') {
                return this.wzLoadToChildColl(child, _md.typeCTorDeclare, this.statements);
            }
            else if (name === ':iif') {
                return this.wzLoadToChildColl(child, _md.typeConditional, this.statements);
            }
        }
        if (_l == 4 && _ch == '`') {
            if (name === '`lit') {
                return this.wzLoadToChildColl(child, _md.template, this.statements);
            }
            else if (name === '`tag') {
                return this.wzLoadToChildColl(child, _md.taggedTemplate, this.statements);
            }
        }
        if (_l == 4 && _ch == 'b') {
            if (name === 'base') {
                return this.wzLoadToChildColl(child, _md.base, this.statements);
            }
        }
        if (_l == 4 && _ch == 'c') {
            if (name === 'case') {
                return this.wzLoadToChildColl(child, _md.xcase, this.statements);
            }
            else if (name === 'ctor') {
                return this.wzLoadToChildColl(child, _md.ctor, this.statements);
            }
        }
        if (_l == 4 && _ch == 'd') {
            if (name === 'decl') {
                return this.wzLoadToChildColl(child, _md.decl, this.statements);
            }
        }
        if (_l == 4 && _ch == 'e') {
            if (name === 'elif') {
                return this.wzLoadToChildColl(child, _md.elif, this.statements);
            }
            else if (name === 'else') {
                return this.wzLoadToChildColl(child, _md.xelse, this.statements);
            }
            else if (name === 'each') {
                return this.wzLoadToChildColl(child, _md.each, this.statements);
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'find') {
                return this.wzLoadToChildColl(child, _md.find, this.statements);
            }
        }
        if (_l == 4 && _ch == 'i') {
            if (name === 'iife') {
                return this.wzLoadToChildColl(child, _md.iife, this.statements);
            }
        }
        if (_l == 4 && _ch == 'l') {
            if (name === 'log?') {
                return this.wzLoadToChildColl(child, _md.inspect, this.statements);
            }
        }
        if (_l == 4 && _ch == 'o') {
            if (name === 'op||') {
                return this.wzLoadToChildColl(child, _md.or, this.statements);
            }
            else if (name === 'op&&') {
                return this.wzLoadToChildColl(child, _md.and, this.statements);
            }
            else if (name === 'op==') {
                return this.wzLoadToChildColl(child, _md.op_eq, this.statements);
            }
            else if (name === 'op!=') {
                return this.wzLoadToChildColl(child, _md.op_noteq, this.statements);
            }
            else if (name === 'op**') {
                return this.wzLoadToChildColl(child, _md.op_power, this.statements);
            }
            else if (name === 'op<<') {
                return this.wzLoadToChildColl(child, _md.bit_left_shift, this.statements);
            }
            else if (name === 'op>>') {
                return this.wzLoadToChildColl(child, _md.bit_right_shift, this.statements);
            }
            else if (name === 'op>=') {
                return this.wzLoadToChildColl(child, _md.op_ge, this.statements);
            }
            else if (name === 'op<=') {
                return this.wzLoadToChildColl(child, _md.op_le, this.statements);
            }
        }
        if (_l == 4 && _ch == 'p') {
            if (name === 'plus') {
                return this.wzLoadToChildColl(child, _md.op_plus, this.statements);
            }
            else if (name === 'prop') {
                return this.wzLoadToChildColl(child, _md.prop, this.statements);
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'test') {
                return this.wzLoadToChildColl(child, _md.test, this.statements);
            }
            else if (name === 'then') {
                return this.wzLoadToChildColl(child, _md.then, this.statements);
            }
            else if (name === 'type') {
                return this.wzLoadToChildColl(child, _md.type, this.statements);
            }
        }
        if (_l == 4 && _ch == 'v') {
            if (name === 'void') {
                return this.wzLoadToChildColl(child, _md.xvoid, this.statements);
            }
        }
        if (_l == 4 && _ch == 'w') {
            if (name === 'warn') {
                return this.wzLoadToChildColl(child, _md.warn, this.statements);
            }
        }
        if (_l == 4 && _ch == 'x') {
            if (name === 'xand') {
                return this.wzLoadToChildColl(child, _md.op_xand, this.statements);
            }
        }
        if (_l == 5 && _ch == ':') {
            if (name === ':type') {
                return this.wzLoadToChildColl(child, _md.typeTypeAlias, this.statements);
            }
            else if (name === ':void') {
                return this.wzLoadToChildColl(child, _md.typeVoid, this.statements);
            }
            else if (name === ':null') {
                return this.wzLoadToChildColl(child, _md.typeNull, this.statements);
            }
            else if (name === ':enum') {
                return this.wzLoadToChildColl(child, _md.typeEnum, this.statements);
            }
            else if (name === ':call') {
                return this.wzLoadToChildColl(child, _md.typeCallSignature, this.statements);
            }
            else if (name === ':ctor') {
                return this.wzLoadToChildColl(child, _md.typeCTor, this.statements);
            }
            else if (name === ':then') {
                return this.wzLoadToChildColl(child, _md.typeThen, this.statements);
            }
            else if (name === ':else') {
                return this.wzLoadToChildColl(child, _md.typeElse, this.statements);
            }
        }
        if (_l == 5 && _ch == '@') {
            if (name === '@expr') {
                return this.wzLoadToChildColl(child, _md.expressionMember, this.statements);
            }
        }
        if (_l == 5 && _ch == 'a') {
            if (name === 'await') {
                return this.wzLoadToChildColl(child, _md.xawait, this.statements);
            }
        }
        if (_l == 5 && _ch == 'b') {
            if (name === 'break') {
                return this.wzLoadToChildColl(child, _md.xbreak, this.statements);
            }
        }
        if (_l == 5 && _ch == 'c') {
            if (name === 'const') {
                return this.wzLoadToChildColl(child, _md.xconst, this.statements);
            }
            else if (name === 'catch') {
                return this.wzLoadToChildColl(child, _md.xcatch, this.statements);
            }
            else if (name === 'class') {
                return this.wzLoadToChildColl(child, _md.xclass, this.statements);
            }
            else if (name === 'chalk') {
                return this.wzLoadToChildColl(child, _md.chalk, this.statements);
            }
        }
        if (_l == 5 && _ch == 'e') {
            if (name === 'event') {
                return this.wzLoadToChildColl(child, _md.htmlevent, this.statements);
            }
            else if (name === 'error') {
                return this.wzLoadToChildColl(child, _md.error, this.statements);
            }
        }
        if (_l == 5 && _ch == 'l') {
            if (name === 'label') {
                return this.wzLoadToChildColl(child, _md.label, this.statements);
            }
        }
        if (_l == 5 && _ch == 'm') {
            if (name === 'minus') {
                return this.wzLoadToChildColl(child, _md.op_minus, this.statements);
            }
            else if (name === 'macro') {
                return this.wzLoadToChildColl(child, _md.macroExpr, this.statements);
            }
        }
        if (_l == 5 && _ch == 'o') {
            if (name === 'op===') {
                return this.wzLoadToChildColl(child, _md.op_eq_strict, this.statements);
            }
            else if (name === 'op!==') {
                return this.wzLoadToChildColl(child, _md.op_noteq_strict, this.statements);
            }
            else if (name === 'op>>>') {
                return this.wzLoadToChildColl(child, _md.zero_fill_right_shift, this.statements);
            }
        }
        if (_l == 5 && _ch == 'p') {
            if (name === 'power') {
                return this.wzLoadToChildColl(child, _md.op_power, this.statements);
            }
            else if (name === 'param') {
                return this.wzLoadToChildColl(child, _md.param, this.statements);
            }
        }
        if (_l == 5 && _ch == 'r') {
            if (name === 'react') {
                return this.wzLoadToChildColl(child, _md.reactComponent, this.statements);
            }
            else if (name === 'ready') {
                return this.wzLoadToChildColl(child, _md.ready, this.statements);
            }
        }
        if (_l == 5 && _ch == 's') {
            if (name === 'super') {
                return this.wzLoadToChildColl(child, _md.superType, this.statements);
            }
            else if (name === 'style') {
                return this.wzLoadToChildColl(child, _md.style, this.statements);
            }
            else if (name === 'state') {
                return this.wzLoadToChildColl(child, _md.state, this.statements);
            }
        }
        if (_l == 5 && _ch == 't') {
            if (name === 'times') {
                return this.wzLoadToChildColl(child, _md.op_times, this.statements);
            }
            else if (name === 'throw') {
                return this.wzLoadToChildColl(child, _md.xthrow, this.statements);
            }
        }
        if (_l == 5 && _ch == 'w') {
            if (name === 'while') {
                return this.wzLoadToChildColl(child, _md.xwhile, this.statements);
            }
        }
        if (_l == 5 && _ch == 'y') {
            if (name === 'yield') {
                return this.wzLoadToChildColl(child, _md.xyield, this.statements);
            }
        }
        if (_l == 6 && _ch == ':') {
            if (name === ':param') {
                return this.wzLoadToChildColl(child, _md.typeParameterInst, this.statements);
            }
            else if (name === ':never') {
                return this.wzLoadToChildColl(child, _md.typeNever, this.statements);
            }
            else if (name === ':tuple') {
                return this.wzLoadToChildColl(child, _md.typeTuple, this.statements);
            }
            else if (name === ':union') {
                return this.wzLoadToChildColl(child, _md.typeUnion, this.statements);
            }
            else if (name === ':keyof') {
                return this.wzLoadToChildColl(child, _md.typeKeyOf, this.statements);
            }
            else if (name === ':index') {
                return this.wzLoadToChildColl(child, _md.typeIndex, this.statements);
            }
            else if (name === ':check') {
                return this.wzLoadToChildColl(child, _md.typeCheck, this.statements);
            }
            else if (name === ':paren') {
                return this.wzLoadToChildColl(child, _md.typeParenthesized, this.statements);
            }
            else if (name === ':infer') {
                return this.wzLoadToChildColl(child, _md.typeInfer, this.statements);
            }
            else if (name === ':param') {
                return this.wzLoadToChildColl(child, _md.typeParameterInst, this.statements);
            }
        }
        if (_l == 6 && _ch == '@') {
            if (name === '@param') {
                return this.wzLoadToChildColl(child, _md.htmlParam, this.statements);
            }
        }
        if (_l == 6 && _ch == 'c') {
            if (name === 'concat') {
                return this.wzLoadToChildColl(child, _md.concat, this.statements);
            }
        }
        if (_l == 6 && _ch == 'd') {
            if (name === 'divide') {
                return this.wzLoadToChildColl(child, _md.op_div, this.statements);
            }
            else if (name === 'delete') {
                return this.wzLoadToChildColl(child, _md.xdelete, this.statements);
            }
        }
        if (_l == 6 && _ch == 'e') {
            if (name === 'export') {
                return this.wzLoadToChildColl(child, _md.xexport, this.statements);
            }
        }
        if (_l == 6 && _ch == 'f') {
            if (name === 'filter') {
                return this.wzLoadToChildColl(child, _md.filter, this.statements);
            }
        }
        if (_l == 6 && _ch == 'i') {
            if (name === 'import') {
                return this.wzLoadToChildColl(child, _md.ximport, this.statements);
            }
        }
        if (_l == 6 && _ch == 'm') {
            if (name === 'module') {
                return this.wzLoadToChildColl(child, _md.module, this.statements);
            }
        }
        if (_l == 6 && _ch == 'r') {
            if (name === 'reduce') {
                return this.wzLoadToChildColl(child, _md.reduce, this.statements);
            }
            else if (name === 'return') {
                return this.wzLoadToChildColl(child, _md.xreturn, this.statements);
            }
            else if (name === 'reactf') {
                return this.wzLoadToChildColl(child, _md.reactFunction, this.statements);
            }
            else if (name === 'render') {
                return this.wzLoadToChildColl(child, _md.render, this.statements);
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'switch') {
                return this.wzLoadToChildColl(child, _md.xswitch, this.statements);
            }
        }
        if (_l == 7 && _ch == ':') {
            if (name === ':import') {
                return this.wzLoadToChildColl(child, _md.typeImport, this.statements);
            }
            else if (name === ':export') {
                return this.wzLoadToChildColl(child, _md.typeExport, this.statements);
            }
            else if (name === ':module') {
                return this.wzLoadToChildColl(child, _md.typeModule, this.statements);
            }
            else if (name === ':mapped') {
                return this.wzLoadToChildColl(child, _md.typeMapped, this.statements);
            }
            else if (name === ':number') {
                return this.wzLoadToChildColl(child, _md.typeNumber, this.statements);
            }
            else if (name === ':string') {
                return this.wzLoadToChildColl(child, _md.typeString, this.statements);
            }
            else if (name === ':object') {
                return this.wzLoadToChildColl(child, _md.typeObject, this.statements);
            }
            else if (name === ':typeof') {
                return this.wzLoadToChildColl(child, _md.typeTypeof, this.statements);
            }
            else if (name === ':return') {
                return this.wzLoadToChildColl(child, _md.typeReturn, this.statements);
            }
        }
        if (_l == 7 && _ch == '@') {
            if (name === '@filter') {
                return this.wzLoadToChildColl(child, _md.htmlFilter, this.statements);
            }
        }
        if (_l == 7 && _ch == 'a') {
            if (name === 'async=>') {
                return this.wzLoadToChildColl(child, _md.asyncarrowfunction, this.statements);
            }
        }
        if (_l == 7 && _ch == 'd') {
            if (name === 'default') {
                return this.wzLoadToChildColl(child, _md.xdefault, this.statements);
            }
            else if (name === 'doctype') {
                return this.wzLoadToChildColl(child, _md.doctype, this.statements);
            }
        }
        if (_l == 7 && _ch == 'f') {
            if (name === 'foreach') {
                return this.wzLoadToChildColl(child, _md.foreach, this.statements);
            }
            else if (name === 'finally') {
                return this.wzLoadToChildColl(child, _md.xfinally, this.statements);
            }
        }
        if (_l == 7 && _ch == 'r') {
            if (name === 'require') {
                return this.wzLoadToChildColl(child, _md.xrequire, this.statements);
            }
            else if (name === 'react-f') {
                return this.wzLoadToChildColl(child, _md.reactFunction, this.statements);
            }
        }
        if (_l == 8 && _ch == ':') {
            if (name === ':require') {
                return this.wzLoadToChildColl(child, _md.typeRequire, this.statements);
            }
            else if (name === ':declare') {
                return this.wzLoadToChildColl(child, _md.typeDeclare, this.statements);
            }
            else if (name === ':extends') {
                return this.wzLoadToChildColl(child, _md.typeExtends, this.statements);
            }
            else if (name === ':boolean') {
                return this.wzLoadToChildColl(child, _md.typeBoolean, this.statements);
            }
            else if (name === ':literal') {
                return this.wzLoadToChildColl(child, _md.typeLiteral, this.statements);
            }
        }
        if (_l == 8 && _ch == 'b') {
            if (name === 'backeach') {
                return this.wzLoadToChildColl(child, _md.backeach, this.statements);
            }
        }
        if (_l == 8 && _ch == 'c') {
            if (name === 'continue') {
                return this.wzLoadToChildColl(child, _md.xcontinue, this.statements);
            }
        }
        if (_l == 8 && _ch == 'd') {
            if (name === 'didmount') {
                return this.wzLoadToChildColl(child, _md.didMount, this.statements);
            }
        }
        if (_l == 8 && _ch == 'f') {
            if (name === 'function') {
                return this.wzLoadToChildColl(child, _md.xfunction, this.statements);
            }
        }
        if (_l == 8 && _ch == 's') {
            if (name === 'sequence') {
                return this.wzLoadToChildColl(child, _md.sequence, this.statements);
            }
            else if (name === 'setstate') {
                return this.wzLoadToChildColl(child, _md.setState, this.statements);
            }
            else if (name === 'stylejsx') {
                return this.wzLoadToChildColl(child, _md.styleJsx, this.statements);
            }
        }
        if (_l == 8 && _ch == 't') {
            if (name === 'template') {
                return this.wzLoadToChildColl(child, _md.template, this.statements);
            }
        }
        if (_l == 9 && _ch == ':') {
            if (name === ':exportns') {
                return this.wzLoadToChildColl(child, _md.typeExportNamespace, this.statements);
            }
            else if (name === ':function') {
                return this.wzLoadToChildColl(child, _md.typeFunctionDeclare, this.statements);
            }
        }
        if (_l == 9 && _ch == 'd') {
            if (name === 'did-mount') {
                return this.wzLoadToChildColl(child, _md.didMount, this.statements);
            }
            else if (name === 'didupdate') {
                return this.wzLoadToChildColl(child, _md.didUpdate, this.statements);
            }
        }
        if (_l == 9 && _ch == 'f') {
            if (name === 'function*') {
                return this.wzLoadToChildColl(child, _md.generatorfunction, this.statements);
            }
        }
        if (_l == 9 && _ch == 'h') {
            if (name === 'htmlevent') {
                return this.wzLoadToChildColl(child, _md.htmlevent, this.statements);
            }
        }
        if (_l == 9 && _ch == 's') {
            if (name === 'set-state') {
                return this.wzLoadToChildColl(child, _md.setState, this.statements);
            }
            else if (name === 'style-jsx') {
                return this.wzLoadToChildColl(child, _md.styleJsx, this.statements);
            }
        }
        if (_l == 9 && _ch == 'w') {
            if (name === 'willmount') {
                return this.wzLoadToChildColl(child, _md.willMount, this.statements);
            }
        }
        if (_l == 10 && _ch == ':') {
            if (name === ':export-ns') {
                return this.wzLoadToChildColl(child, _md.typeExportNamespace, this.statements);
            }
            else if (name === ':interface') {
                return this.wzLoadToChildColl(child, _md.typeInterface, this.statements);
            }
            else if (name === ':undefined') {
                return this.wzLoadToChildColl(child, _md.typeUndefined, this.statements);
            }
            else if (name === ':intersect') {
                return this.wzLoadToChildColl(child, _md.typeIntersect, this.statements);
            }
            else if (name === ':predicate') {
                return this.wzLoadToChildColl(child, _md.typePredicate, this.statements);
            }
        }
        if (_l == 10 && _ch == 'd') {
            if (name === 'did-update') {
                return this.wzLoadToChildColl(child, _md.didUpdate, this.statements);
            }
        }
        if (_l == 10 && _ch == 'w') {
            if (name === 'will-mount') {
                return this.wzLoadToChildColl(child, _md.willMount, this.statements);
            }
            else if (name === 'willupdate') {
                return this.wzLoadToChildColl(child, _md.willUpdate, this.statements);
            }
        }
        if (_l == 11 && _ch == ':') {
            if (name === ':implements') {
                return this.wzLoadToChildColl(child, _md.typeImplements, this.statements);
            }
        }
        if (_l == 11 && _ch == 'w') {
            if (name === 'willunmount') {
                return this.wzLoadToChildColl(child, _md.willUnmount, this.statements);
            }
            else if (name === 'will-update') {
                return this.wzLoadToChildColl(child, _md.willUpdate, this.statements);
            }
        }
        if (_l == 12 && _ch == ':') {
            if (name === ':conditional') {
                return this.wzLoadToChildColl(child, _md.typeConditional, this.statements);
            }
        }
        if (_l == 12 && _ch == 's') {
            if (name === 'shouldupdate') {
                return this.wzLoadToChildColl(child, _md.shouldUpdate, this.statements);
            }
        }
        if (_l == 12 && _ch == 'w') {
            if (name === 'will-unmount') {
                return this.wzLoadToChildColl(child, _md.willUnmount, this.statements);
            }
        }
        if (_l == 13 && _ch == 'a') {
            if (name === 'asyncfunction') {
                return this.wzLoadToChildColl(child, _md.asyncfunction, this.statements);
            }
        }
        if (_l == 13 && _ch == 'e') {
            if (name === 'exportdefault') {
                return this.wzLoadToChildColl(child, _md.exportDefault, this.statements);
            }
        }
        if (_l == 13 && _ch == 's') {
            if (name === 'should-update') {
                return this.wzLoadToChildColl(child, _md.shouldUpdate, this.statements);
            }
        }
        if (_l == 14 && _ch == 'a') {
            if (name === 'async-function') {
                return this.wzLoadToChildColl(child, _md.asyncfunction, this.statements);
            }
        }
        if (_l == 14 && _ch == 'e') {
            if (name === 'export-default') {
                return this.wzLoadToChildColl(child, _md.exportDefault, this.statements);
            }
        }
        if (_l == 16 && _ch == 'w') {
            if (name === 'willreceiveprops') {
                return this.wzLoadToChildColl(child, _md.willReceiveProps, this.statements);
            }
        }
        if (_l == 18 && _ch == 'w') {
            if (name === 'will-receive-props') {
                return this.wzLoadToChildColl(child, _md.willReceiveProps, this.statements);
            }
        }
        return ok;
    }
    statement.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    statement.prototype.wzVerify = function(ctx) {
        var i, i_items=this.statements, i_len=this.statements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.statements[i];
            item.wzVerify(ctx);
        }
        _md.tsBase.prototype.wzVerify.call(this, ctx);
    }
    statement.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.statements, i_len=this.statements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.statements[i];
            item.wzInitialize(ctx);
        }
        _md.tsBase.prototype.wzInitialize.call(this, ctx);
    }
    return statement;
})(tsBase);

_md.statement = statement;
// element comment
var comment = (function (statement) {
    _inherits(comment, statement);
    function comment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(comment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, comment);
        this.wzElement = "comment";
    }
    return comment;
})(statement);

_md.comment = comment;
/**
    element module
     The root element of the ts schema.
*/
var module = (function (statement) {
    _inherits(module, statement);
    function module(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(module.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, module);
        this.wzElement = "module";
        // relation feature
        this.features = [];
    }
    module.prototype.addFeature = function(name, sourceLineInfo) {
        var retval = new _md.feature(name, sourceLineInfo);
        retval.wzParent = this;
        this.features.push(retval);
        return retval;
    }
    module.prototype.getFeature = function(name) {
        var found = null;
        this.features.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    module.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 7 && _ch == 'f') {
            if (name === 'feature') {
                return this.wzLoadToChildColl(child, _md.feature, this.features);
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    module.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    module.prototype.wzVerify = function(ctx) {
        var i, i_items=this.features, i_len=this.features.length, item;
        for (i=0; i<i_len; i++) {
            item = this.features[i];
            item.wzVerify(ctx);
        }
        _md.statement.prototype.wzVerify.call(this, ctx);
    }
    module.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.features, i_len=this.features.length, item;
        for (i=0; i<i_len; i++) {
            item = this.features[i];
            item.wzInitialize(ctx);
        }
        this.wzModelState = ctx.modelState = {};
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    module.prototype.hasFeature = function(name) {
        var i, i_items=this.features, i_len=this.features.length, f;
        for (i=0; i<i_len; i++) {
            f = this.features[i];
            if (f.wzName === name) {
                return true;
            }
        }
        return false;
    }
    return module;
})(statement);

_md.module = module;
/**
    element feature
     A known feature that this module require.
*/
var feature = (function (tsBase) {
    _inherits(feature, tsBase);
    function feature(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feature.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feature);
        this.wzElement = "feature";
    }
    return feature;
})(tsBase);

_md.feature = feature;
/**
    element xvar
     ittf:
     var i
     var i = 0
     var f_alpha
     function
     param p
     var obj_beta
     {                |
     @ name stefi
     js:
     var i;
     var i = 0;
     var alpha = function(p) {
     ...
     };
     var obj_beta = { name: 'stefi' };
*/
var xvar = (function (statement) {
    _inherits(xvar, statement);
    function xvar(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xvar.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xvar);
        this.wzElement = "xvar";
    }
    return xvar;
})(statement);

_md.xvar = xvar;
/**
    element decl
     ittf:
     var i
     decl x = 0
     decl a
     {
     js:
     var i, x = 0, a = {};
*/
var decl = (function (statement) {
    _inherits(decl, statement);
    function decl(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(decl.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, decl);
        this.wzElement = "decl";
    }
    return decl;
})(statement);

_md.decl = decl;
/**
    element xconst
     ittf
     same as var element
*/
var xconst = (function (statement) {
    _inherits(xconst, statement);
    function xconst(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xconst.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xconst);
        this.wzElement = "xconst";
    }
    return xconst;
})(statement);

_md.xconst = xconst;
/**
    element xlet
     ittf
     same as var element
*/
var xlet = (function (statement) {
    _inherits(xlet, statement);
    function xlet(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xlet.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xlet);
        this.wzElement = "xlet";
    }
    return xlet;
})(statement);

_md.xlet = xlet;
// element initValue
var initValue = (function (statement) {
    _inherits(initValue, statement);
    function initValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(initValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, initValue);
        this.wzElement = "initValue";
    }
    return initValue;
})(statement);

_md.initValue = initValue;
// element identifier
var identifier = (function (statement) {
    _inherits(identifier, statement);
    function identifier(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(identifier.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, identifier);
        this.wzElement = "identifier";
    }
    return identifier;
})(statement);

_md.identifier = identifier;
// element expressionMember
var expressionMember = (function (statement) {
    _inherits(expressionMember, statement);
    function expressionMember(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(expressionMember.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, expressionMember);
        this.wzElement = "expressionMember";
    }
    return expressionMember;
})(statement);

_md.expressionMember = expressionMember;
/**
    element iif
     ittf:
     iif a === b
     then 0
     else 1
     js:
     ( a === b ) ? 0 : 1
*/
var iif = (function (statement) {
    _inherits(iif, statement);
    function iif(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(iif.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, iif);
        this.wzElement = "iif";
    }
    return iif;
})(statement);

_md.iif = iif;
// element test
var test = (function (statement) {
    _inherits(test, statement);
    function test(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(test.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, test);
        this.wzElement = "test";
    }
    return test;
})(statement);

_md.test = test;
// element then
var then = (function (statement) {
    _inherits(then, statement);
    function then(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(then.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, then);
        this.wzElement = "then";
    }
    return then;
})(statement);

_md.then = then;
// element xvoid
var xvoid = (function (statement) {
    _inherits(xvoid, statement);
    function xvoid(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xvoid.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xvoid);
        this.wzElement = "xvoid";
    }
    return xvoid;
})(statement);

_md.xvoid = xvoid;
// element not
var not = (function (statement) {
    _inherits(not, statement);
    function not(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(not.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, not);
        this.wzElement = "not";
    }
    return not;
})(statement);

_md.not = not;
// element or
var or = (function (statement) {
    _inherits(or, statement);
    function or(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(or.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, or);
        this.wzElement = "or";
    }
    return or;
})(statement);

_md.or = or;
// element and
var and = (function (statement) {
    _inherits(and, statement);
    function and(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(and.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, and);
        this.wzElement = "and";
    }
    return and;
})(statement);

_md.and = and;
// element op_eq_strict
var op_eq_strict = (function (statement) {
    _inherits(op_eq_strict, statement);
    function op_eq_strict(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(op_eq_strict.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, op_eq_strict);
        this.wzElement = "op_eq_strict";
    }
    return op_eq_strict;
})(statement);

_md.op_eq_strict = op_eq_strict;
// element op_noteq_strict
var op_noteq_strict = (function (statement) {
    _inherits(op_noteq_strict, statement);
    function op_noteq_strict(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(op_noteq_strict.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, op_noteq_strict);
        this.wzElement = "op_noteq_strict";
    }
    return op_noteq_strict;
})(statement);

_md.op_noteq_strict = op_noteq_strict;
// element op_eq
var op_eq = (function (statement) {
    _inherits(op_eq, statement);
    function op_eq(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(op_eq.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, op_eq);
        this.wzElement = "op_eq";
    }
    return op_eq;
})(statement);

_md.op_eq = op_eq;
// element op_noteq
var op_noteq = (function (statement) {
    _inherits(op_noteq, statement);
    function op_noteq(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(op_noteq.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, op_noteq);
        this.wzElement = "op_noteq";
    }
    return op_noteq;
})(statement);

_md.op_noteq = op_noteq;
// element op_minus
var op_minus = (function (statement) {
    _inherits(op_minus, statement);
    function op_minus(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(op_minus.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, op_minus);
        this.wzElement = "op_minus";
    }
    return op_minus;
})(statement);

_md.op_minus = op_minus;
// element op_plus
var op_plus = (function (statement) {
    _inherits(op_plus, statement);
    function op_plus(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(op_plus.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, op_plus);
        this.wzElement = "op_plus";
    }
    return op_plus;
})(statement);

_md.op_plus = op_plus;
// element op_times
var op_times = (function (statement) {
    _inherits(op_times, statement);
    function op_times(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(op_times.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, op_times);
        this.wzElement = "op_times";
    }
    return op_times;
})(statement);

_md.op_times = op_times;
// element op_div
var op_div = (function (statement) {
    _inherits(op_div, statement);
    function op_div(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(op_div.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, op_div);
        this.wzElement = "op_div";
    }
    return op_div;
})(statement);

_md.op_div = op_div;
// element op_power
var op_power = (function (statement) {
    _inherits(op_power, statement);
    function op_power(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(op_power.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, op_power);
        this.wzElement = "op_power";
    }
    return op_power;
})(statement);

_md.op_power = op_power;
// element op_mod
var op_mod = (function (statement) {
    _inherits(op_mod, statement);
    function op_mod(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(op_mod.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, op_mod);
        this.wzElement = "op_mod";
    }
    return op_mod;
})(statement);

_md.op_mod = op_mod;
// element bit_and
var bit_and = (function (statement) {
    _inherits(bit_and, statement);
    function bit_and(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(bit_and.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, bit_and);
        this.wzElement = "bit_and";
    }
    return bit_and;
})(statement);

_md.bit_and = bit_and;
// element bit_or
var bit_or = (function (statement) {
    _inherits(bit_or, statement);
    function bit_or(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(bit_or.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, bit_or);
        this.wzElement = "bit_or";
    }
    return bit_or;
})(statement);

_md.bit_or = bit_or;
// element op_xor
var op_xor = (function (statement) {
    _inherits(op_xor, statement);
    function op_xor(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(op_xor.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, op_xor);
        this.wzElement = "op_xor";
    }
    return op_xor;
})(statement);

_md.op_xor = op_xor;
// element op_xand
var op_xand = (function (statement) {
    _inherits(op_xand, statement);
    function op_xand(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(op_xand.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, op_xand);
        this.wzElement = "op_xand";
    }
    return op_xand;
})(statement);

_md.op_xand = op_xand;
// element bit_not
var bit_not = (function (statement) {
    _inherits(bit_not, statement);
    function bit_not(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(bit_not.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, bit_not);
        this.wzElement = "bit_not";
    }
    return bit_not;
})(statement);

_md.bit_not = bit_not;
// element bit_left_shift
var bit_left_shift = (function (statement) {
    _inherits(bit_left_shift, statement);
    function bit_left_shift(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(bit_left_shift.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, bit_left_shift);
        this.wzElement = "bit_left_shift";
    }
    return bit_left_shift;
})(statement);

_md.bit_left_shift = bit_left_shift;
// element bit_right_shift
var bit_right_shift = (function (statement) {
    _inherits(bit_right_shift, statement);
    function bit_right_shift(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(bit_right_shift.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, bit_right_shift);
        this.wzElement = "bit_right_shift";
    }
    return bit_right_shift;
})(statement);

_md.bit_right_shift = bit_right_shift;
// element zero_fill_right_shift
var zero_fill_right_shift = (function (statement) {
    _inherits(zero_fill_right_shift, statement);
    function zero_fill_right_shift(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(zero_fill_right_shift.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, zero_fill_right_shift);
        this.wzElement = "zero_fill_right_shift";
    }
    return zero_fill_right_shift;
})(statement);

_md.zero_fill_right_shift = zero_fill_right_shift;
/**
    element op_gt
     ittf
     var foo
     gt
     _ price
     @ id
     @ 100
*/
var op_gt = (function (statement) {
    _inherits(op_gt, statement);
    function op_gt(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(op_gt.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, op_gt);
        this.wzElement = "op_gt";
    }
    return op_gt;
})(statement);

_md.op_gt = op_gt;
/**
    element op_ge
     ittf
     var foo
     >=
     _ price
     @ id
     @ 100
*/
var op_ge = (function (statement) {
    _inherits(op_ge, statement);
    function op_ge(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(op_ge.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, op_ge);
        this.wzElement = "op_ge";
    }
    return op_ge;
})(statement);

_md.op_ge = op_ge;
/**
    element op_lt
     ittf
     var foo
     lt
     _ price
     @ id
     @ 100
*/
var op_lt = (function (statement) {
    _inherits(op_lt, statement);
    function op_lt(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(op_lt.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, op_lt);
        this.wzElement = "op_lt";
    }
    return op_lt;
})(statement);

_md.op_lt = op_lt;
/**
    element op_le
     ittf
     var foo
     <=
     _ price
     @ id
     @ 100
*/
var op_le = (function (statement) {
    _inherits(op_le, statement);
    function op_le(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(op_le.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, op_le);
        this.wzElement = "op_le";
    }
    return op_le;
})(statement);

_md.op_le = op_le;
// element xrequire
var xrequire = (function (statement) {
    _inherits(xrequire, statement);
    function xrequire(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xrequire.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xrequire);
        this.wzElement = "xrequire";
    }
    return xrequire;
})(statement);

_md.xrequire = xrequire;
/**
    element set
    
     The set element do not relate to any javascript synthax element but is
     fundamental in the 'js' language schema.
     A wizzi schema cannot have free node names (tags). User names
     cannot be node names but always must be node values.
     Whenever javascript has a left hand side item that is an user name
     must be preceded by set.
    
     ittf
     set user.name = 'stefi'
     js
     user.name = 'stefi';
    
     In a 'set' element the wzName is written as is. If it is a top statement
     the semicolon is added.
    
*/
var set = (function (statement) {
    _inherits(set, statement);
    function set(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(set.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, set);
        this.wzElement = "set";
    }
    return set;
})(statement);

_md.set = set;
/**
    element ximport
     reference http://2ality.com/2014/09/es6-modules-final.html
*/
var ximport = (function (statement) {
    _inherits(ximport, statement);
    function ximport(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ximport.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ximport);
        this.wzElement = "ximport";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.from = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.xas = null
    }
    ximport.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 2 && _ch == 'a') {
            if (name === 'as') {
                this.xas = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'from') {
                this.from = child.v; return true;
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    ximport.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    ximport.prototype.wzInitialize = function(ctx) {
        this.specifiers = [];
        var temp = [];
        var i, i_items=this.statements, i_len=this.statements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.statements[i];
            if (item.wzElement === 'jsPropertyOrValue') {
                this.specifiers.push(item);
            }
            else {
                temp.push(item);
            }
        }
        this.statements = temp;
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return ximport;
})(statement);

_md.ximport = ximport;
// element typeImport
var typeImport = (function (statement) {
    _inherits(typeImport, statement);
    function typeImport(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeImport.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeImport);
        this.wzElement = "typeImport";
    }
    return typeImport;
})(statement);

_md.typeImport = typeImport;
/**
    element xexport
     reference http://2ality.com/2014/09/es6-modules-final.html
     ittf
     export var|let|const foo = Math.sqrt(2)
     export
     var|let|const foo = Math.sqrt(2)
     export
     var|let|const foo
     {
     @ name 'stefi'
     export
     function foo
     param x
     export default
     function
     { options
*/
var xexport = (function (statement) {
    _inherits(xexport, statement);
    function xexport(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xexport.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xexport);
        this.wzElement = "xexport";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.from = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.xas = null
    }
    xexport.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 2 && _ch == 'a') {
            if (name === 'as') {
                this.xas = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'from') {
                this.from = child.v; return true;
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    xexport.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    xexport.prototype.wzInitialize = function(ctx) {
        this.specifiers = [];
        var temp = [];
        var i, i_items=this.statements, i_len=this.statements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.statements[i];
            if (item.wzElement === 'jsPropertyOrValue') {
                this.specifiers.push(item);
            }
            else {
                temp.push(item);
            }
        }
        this.statements = temp;
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return xexport;
})(statement);

_md.xexport = xexport;
// element exportDefault
var exportDefault = (function (statement) {
    _inherits(exportDefault, statement);
    function exportDefault(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(exportDefault.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, exportDefault);
        this.wzElement = "exportDefault";
    }
    return exportDefault;
})(statement);

_md.exportDefault = exportDefault;
// element typeExport
var typeExport = (function (statement) {
    _inherits(typeExport, statement);
    function typeExport(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeExport.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeExport);
        this.wzElement = "typeExport";
    }
    return typeExport;
})(statement);

_md.typeExport = typeExport;
// element typeExportNamespace
var typeExportNamespace = (function (statement) {
    _inherits(typeExportNamespace, statement);
    function typeExportNamespace(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeExportNamespace.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeExportNamespace);
        this.wzElement = "typeExportNamespace";
    }
    return typeExportNamespace;
})(statement);

_md.typeExportNamespace = typeExportNamespace;
// element typeRequire
var typeRequire = (function (statement) {
    _inherits(typeRequire, statement);
    function typeRequire(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeRequire.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeRequire);
        this.wzElement = "typeRequire";
    }
    return typeRequire;
})(statement);

_md.typeRequire = typeRequire;
/**
    element xif
    
     ittf:
     if a === b
     elif a === c
     else
     js:
     if ( a === b ) {
     }
     else if ( a === c ) {
     }
     else {
     }
    
*/
var xif = (function (statement) {
    _inherits(xif, statement);
    function xif(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xif.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xif);
        this.wzElement = "xif";
    }
    return xif;
})(statement);

_md.xif = xif;
/**
    element elif
     ittf
     see 'if' element
*/
var elif = (function (statement) {
    _inherits(elif, statement);
    function elif(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(elif.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, elif);
        this.wzElement = "elif";
    }
    return elif;
})(statement);

_md.elif = elif;
/**
    element xelse
     ittf
     see 'if' element
*/
var xelse = (function (statement) {
    _inherits(xelse, statement);
    function xelse(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xelse.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xelse);
        this.wzElement = "xelse";
    }
    return xelse;
})(statement);

_md.xelse = xelse;
/**
    element xfor
     ittf
     for var k in object3
     log k, object3[k]
    
*/
var xfor = (function (statement) {
    _inherits(xfor, statement);
    function xfor(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xfor.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xfor);
        this.wzElement = "xfor";
    }
    return xfor;
})(statement);

_md.xfor = xfor;
/**
    element foreach
     ittf
     foreach item in arr5
     log 'item ', i, item
    
     js
     var i, i_len=arr5.length, item;
     for (i=0; i<i_len; i++) {
     item = arr5[i];
     console.log('item ', i, item);
     }
    
*/
var foreach = (function (statement) {
    _inherits(foreach, statement);
    function foreach(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(foreach.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, foreach);
        this.wzElement = "foreach";
    }
    return foreach;
})(statement);

_md.foreach = foreach;
/**
    element backeach
     ittf
     backeach item in arr5
     log 'item ', i, item
     js
     var i, i_len=arr5.length, item;
     for (i= (i_len-1); i>-1; i--) {
     item = arr5[i];
     console.log('item ', i, item);
     }
    
*/
var backeach = (function (statement) {
    _inherits(backeach, statement);
    function backeach(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(backeach.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, backeach);
        this.wzElement = "backeach";
    }
    return backeach;
})(statement);

_md.backeach = backeach;
/**
    element each
     ittf
     each item in arr5 [this]
     log 'item ', i, item
     js
     arr5.forEach(function(item, i, array) {
     console.log('item ', i, item);
     }, this);
    
*/
var each = (function (statement) {
    _inherits(each, statement);
    function each(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(each.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, each);
        this.wzElement = "each";
    }
    return each;
})(statement);

_md.each = each;
/**
    element filter
     ittf
     filter item in arr5 [this]
     return item > 20
     js
     arr5.filter(function(item, i, array) {
     return item > 20
     }, this);
    
*/
var filter = (function (statement) {
    _inherits(filter, statement);
    function filter(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(filter.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, filter);
        this.wzElement = "filter";
    }
    return filter;
})(statement);

_md.filter = filter;
/**
    element find
     ittf
     find item in arr5 [this]
     return item == 20
     js
     arr5.item(function(item, i, array) {
     return item == 20
     }, this);
    
*/
var find = (function (statement) {
    _inherits(find, statement);
    function find(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(find.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, find);
        this.wzElement = "find";
    }
    return find;
})(statement);

_md.find = find;
/**
    element reduce
     ittf
     reduce item in arr5 0
     return item_acc + item
     js
     arr5.reduce(function(acc, item, item_index, array) {
     return item_acc + item
     }, 0);
    
*/
var reduce = (function (statement) {
    _inherits(reduce, statement);
    function reduce(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(reduce.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, reduce);
        this.wzElement = "reduce";
    }
    return reduce;
})(statement);

_md.reduce = reduce;
/**
    element concat
     ittf
     concat arr5
     @ 'item1'
     [
     @ 'item2'
     @ 'item3'
     js
     arr5.concat('item1', ['item2', 'item3']);
    
*/
var concat = (function (statement) {
    _inherits(concat, statement);
    function concat(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(concat.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, concat);
        this.wzElement = "concat";
    }
    return concat;
})(statement);

_md.concat = concat;
/**
    element xbreak
     ittf
     foreach item in arr5
     ...
     break
    
*/
var xbreak = (function (statement) {
    _inherits(xbreak, statement);
    function xbreak(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xbreak.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xbreak);
        this.wzElement = "xbreak";
    }
    return xbreak;
})(statement);

_md.xbreak = xbreak;
/**
    element xcontinue
     ittf
     foreach item in arr5
     ...
     continue
    
*/
var xcontinue = (function (statement) {
    _inherits(xcontinue, statement);
    function xcontinue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xcontinue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xcontinue);
        this.wzElement = "xcontinue";
    }
    return xcontinue;
})(statement);

_md.xcontinue = xcontinue;
/**
    element label
     ittf
     var i, j
     label loop1
     for i = 0; i < 3; i++
     # The first for statement is labeled "loop1"
     label loop2
     for j = 0; j < 3; j++
     # The second for statement is labeled "loop2"
     if i === 1 && j === 1
     continue loop1
     log 'i = ' + i + ', j = ' + j
*/
var label = (function (statement) {
    _inherits(label, statement);
    function label(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(label.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, label);
        this.wzElement = "label";
    }
    return label;
})(statement);

_md.label = label;
/**
    element xwhile
    
     ittf
     set parent = node.parent
     while parent
     set parent = parent.parent
    
*/
var xwhile = (function (statement) {
    _inherits(xwhile, statement);
    function xwhile(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xwhile.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xwhile);
        this.wzElement = "xwhile";
    }
    return xwhile;
})(statement);

_md.xwhile = xwhile;
/**
    element xdo
    
     ittf
     var result = ''
     var i = 0
     do i < 5
     set i += 1
     set result += i + ' '
    
     js
     var result = '';
     var i = 0;
     do {
     i += 1;
     result += i + ' ';
     } while (i < 5);
    
*/
var xdo = (function (statement) {
    _inherits(xdo, statement);
    function xdo(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xdo.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xdo);
        this.wzElement = "xdo";
    }
    return xdo;
})(statement);

_md.xdo = xdo;
/**
    element xswitch
    
     ittf
     switch key
     case 1
     _ first()
     case 2
     _ second()
     default
     _ last()
    
*/
var xswitch = (function (statement) {
    _inherits(xswitch, statement);
    function xswitch(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xswitch.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xswitch);
        this.wzElement = "xswitch";
    }
    return xswitch;
})(statement);

_md.xswitch = xswitch;
/**
    element xcase
     ittf
     see 'switch' element
*/
var xcase = (function (statement) {
    _inherits(xcase, statement);
    function xcase(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xcase.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xcase);
        this.wzElement = "xcase";
    }
    return xcase;
})(statement);

_md.xcase = xcase;
/**
    element xdefault
     ittf
     see 'switch' element
*/
var xdefault = (function (statement) {
    _inherits(xdefault, statement);
    function xdefault(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xdefault.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xdefault);
        this.wzElement = "xdefault";
    }
    return xdefault;
})(statement);

_md.xdefault = xdefault;
/**
    element xtry
    
     ittf
     try
     set num =/ 0
     catch ex
     log ex.message
     finally
     _ reset()
    
*/
var xtry = (function (statement) {
    _inherits(xtry, statement);
    function xtry(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xtry.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xtry);
        this.wzElement = "xtry";
    }
    return xtry;
})(statement);

_md.xtry = xtry;
/**
    element xcatch
     ittf
     see 'try' element
*/
var xcatch = (function (statement) {
    _inherits(xcatch, statement);
    function xcatch(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xcatch.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xcatch);
        this.wzElement = "xcatch";
    }
    return xcatch;
})(statement);

_md.xcatch = xcatch;
/**
    element xfinally
     ittf
     see 'try' element
*/
var xfinally = (function (statement) {
    _inherits(xfinally, statement);
    function xfinally(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xfinally.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xfinally);
        this.wzElement = "xfinally";
    }
    return xfinally;
})(statement);

_md.xfinally = xfinally;
/**
    element xthrow
     ittf
     see 'try' element
*/
var xthrow = (function (statement) {
    _inherits(xthrow, statement);
    function xthrow(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xthrow.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xthrow);
        this.wzElement = "xthrow";
    }
    return xthrow;
})(statement);

_md.xthrow = xthrow;
/**
    element xdelete
     ittf
     delete myvar
*/
var xdelete = (function (statement) {
    _inherits(xdelete, statement);
    function xdelete(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xdelete.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xdelete);
        this.wzElement = "xdelete";
    }
    return xdelete;
})(statement);

_md.xdelete = xdelete;
// element sequence
var sequence = (function (statement) {
    _inherits(sequence, statement);
    function sequence(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(sequence.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, sequence);
        this.wzElement = "sequence";
    }
    return sequence;
})(statement);

_md.sequence = sequence;
// element typeParameterInst
var typeParameterInst = (function (statement) {
    _inherits(typeParameterInst, statement);
    function typeParameterInst(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeParameterInst.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeParameterInst);
        this.wzElement = "typeParameterInst";
    }
    return typeParameterInst;
})(statement);

_md.typeParameterInst = typeParameterInst;
/**
    element call
     A function call.
     ittf:
     _ sayHello('stefi', 10)
     _ init
     {
     @ key 0
     function
     param value
     return calc(value)
*/
var call = (function (statement) {
    _inherits(call, statement);
    function call(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(call.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, call);
        this.wzElement = "call";
        // relation typeParameterInst
        this.typeParameterInsts = [];
    }
    call.prototype.addTypeParameterInst = function(name, sourceLineInfo) {
        var retval = new _md.typeParameterInst(name, sourceLineInfo);
        retval.wzParent = this;
        this.typeParameterInsts.push(retval);
        return retval;
    }
    call.prototype.getTypeParameterInst = function(name) {
        var found = null;
        this.typeParameterInsts.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    call.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 6 && _ch == ':') {
            if (name === ':param') {
                return this.wzLoadToChildColl(child, _md.typeParameterInst, this.typeParameterInsts);
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    call.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    call.prototype.wzVerify = function(ctx) {
        var i, i_items=this.typeParameterInsts, i_len=this.typeParameterInsts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeParameterInsts[i];
            item.wzVerify(ctx);
        }
        _md.statement.prototype.wzVerify.call(this, ctx);
    }
    call.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.typeParameterInsts, i_len=this.typeParameterInsts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeParameterInsts[i];
            item.wzInitialize(ctx);
        }
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return call;
})(statement);

_md.call = call;
/**
    element memberCall
     ittf:
     set value
     _ init
     ._calc
     js:
     value = init().calc()
*/
var memberCall = (function (statement) {
    _inherits(memberCall, statement);
    function memberCall(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(memberCall.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, memberCall);
        this.wzElement = "memberCall";
        // relation typeParameterInst
        this.typeParameterInsts = [];
    }
    memberCall.prototype.addTypeParameterInst = function(name, sourceLineInfo) {
        var retval = new _md.typeParameterInst(name, sourceLineInfo);
        retval.wzParent = this;
        this.typeParameterInsts.push(retval);
        return retval;
    }
    memberCall.prototype.getTypeParameterInst = function(name) {
        var found = null;
        this.typeParameterInsts.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    memberCall.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 6 && _ch == ':') {
            if (name === ':param') {
                return this.wzLoadToChildColl(child, _md.typeParameterInst, this.typeParameterInsts);
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    memberCall.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    memberCall.prototype.wzVerify = function(ctx) {
        var i, i_items=this.typeParameterInsts, i_len=this.typeParameterInsts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeParameterInsts[i];
            item.wzVerify(ctx);
        }
        _md.statement.prototype.wzVerify.call(this, ctx);
    }
    memberCall.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.typeParameterInsts, i_len=this.typeParameterInsts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeParameterInsts[i];
            item.wzInitialize(ctx);
        }
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return memberCall;
})(statement);

_md.memberCall = memberCall;
/**
    element decoratorCall
     ittf:
     @_ alpha
     @ 200
     function
     return 'a';
     js:
     @alpha(200, function() { return 'a'; })
*/
var decoratorCall = (function (statement) {
    _inherits(decoratorCall, statement);
    function decoratorCall(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(decoratorCall.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, decoratorCall);
        this.wzElement = "decoratorCall";
        // relation typeParameterInst
        this.typeParameterInsts = [];
    }
    decoratorCall.prototype.addTypeParameterInst = function(name, sourceLineInfo) {
        var retval = new _md.typeParameterInst(name, sourceLineInfo);
        retval.wzParent = this;
        this.typeParameterInsts.push(retval);
        return retval;
    }
    decoratorCall.prototype.getTypeParameterInst = function(name) {
        var found = null;
        this.typeParameterInsts.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    decoratorCall.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 6 && _ch == ':') {
            if (name === ':param') {
                return this.wzLoadToChildColl(child, _md.typeParameterInst, this.typeParameterInsts);
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    decoratorCall.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    decoratorCall.prototype.wzVerify = function(ctx) {
        var i, i_items=this.typeParameterInsts, i_len=this.typeParameterInsts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeParameterInsts[i];
            item.wzVerify(ctx);
        }
        _md.statement.prototype.wzVerify.call(this, ctx);
    }
    decoratorCall.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.typeParameterInsts, i_len=this.typeParameterInsts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeParameterInsts[i];
            item.wzInitialize(ctx);
        }
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return decoratorCall;
})(statement);

_md.decoratorCall = decoratorCall;
/**
    element callOnValue
     ittf:
     _ getFunction()
     (
     @ 'stefi'
     js:
     getFunction()('stefi')
*/
var callOnValue = (function (statement) {
    _inherits(callOnValue, statement);
    function callOnValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(callOnValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, callOnValue);
        this.wzElement = "callOnValue";
    }
    return callOnValue;
})(statement);

_md.callOnValue = callOnValue;
/**
    element memberAccess
     ittf:
     set name = obj
     . name
     js:
     name = obj.name
*/
var memberAccess = (function (statement) {
    _inherits(memberAccess, statement);
    function memberAccess(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(memberAccess.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, memberAccess);
        this.wzElement = "memberAccess";
    }
    return memberAccess;
})(statement);

_md.memberAccess = memberAccess;
/**
    element memberAccessComputed
     ittf:
     set name = obj
     .[ name
     js:
     name = obj[name]
*/
var memberAccessComputed = (function (statement) {
    _inherits(memberAccessComputed, statement);
    function memberAccessComputed(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(memberAccessComputed.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, memberAccessComputed);
        this.wzElement = "memberAccessComputed";
    }
    return memberAccessComputed;
})(statement);

_md.memberAccessComputed = memberAccessComputed;
/**
    element jsObject
     Declares an object structure.
     ittf:
     var user
     {
     @ name 'stefi'
     @ birth 1957
    
     It can be used everywhere an object can be used
     ittf
     var user
     _ db.getUser
     {
     @ name 'arthur'
    
*/
var jsObject = (function (statement) {
    _inherits(jsObject, statement);
    function jsObject(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(jsObject.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsObject);
        this.wzElement = "jsObject";
    }
    jsObject.prototype.wzInitialize = function(ctx) {
        this.isDslCall = false;
        var i, i_items=this.statements, i_len=this.statements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.statements[i];
            if (item.wzElement === 'namedCallParam') {
                this.isDslCall = true;
            }
        }
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return jsObject;
})(statement);

_md.jsObject = jsObject;
/**
    element jsArray
     Declares an array structure.
     ittf:
     var users
     [
     {
     @ name 'stefi'
     @ birth 1957
     {
     @ name 'arthur'
     @ birth 1955
    
*/
var jsArray = (function (statement) {
    _inherits(jsArray, statement);
    function jsArray(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(jsArray.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsArray);
        this.wzElement = "jsArray";
    }
    return jsArray;
})(statement);

_md.jsArray = jsArray;
/**
    element jsPropertyOrValue
     used by import/export specifiers
     This element is used in many contexts with a different semantic.
    
     As children of a 'jsObject' element it is an object property.
     ittf
     var user
     {
     @ name 'annie'
    
     As children of a 'call', 'memberCall', 'decoratorCall', 'callOnValue' element
     is a function call argument.
     ittf
     var user
     _ db.getUser
     @ name 'annie'
    
     As a children of an element derived from the 'htmlelement' element
     is an html element attribute.
     ittf
     m render
     return
     div
     button Press me
     @ onClick { this.handleClick() }
    
     As a children of a 'import' element
     ittf
     import
     @ functionX
     from 'module-a'
    
*/
var jsPropertyOrValue = (function (statement) {
    _inherits(jsPropertyOrValue, statement);
    function jsPropertyOrValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(jsPropertyOrValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsPropertyOrValue);
        this.wzElement = "jsPropertyOrValue";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.xas = null
    }
    jsPropertyOrValue.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 2 && _ch == 'a') {
            if (name === 'as') {
                this.xas = child.v; return true;
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    jsPropertyOrValue.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    jsPropertyOrValue.prototype.wzInitialize = function(ctx) {
        this.isDslCall = false;
        var i, i_items=this.statements, i_len=this.statements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.statements[i];
            if (item.wzElement === 'namedCallParam') {
                this.isDslCall = true;
            }
        }
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return jsPropertyOrValue;
})(statement);

_md.jsPropertyOrValue = jsPropertyOrValue;
// element jsRest
var jsRest = (function (statement) {
    _inherits(jsRest, statement);
    function jsRest(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(jsRest.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsRest);
        this.wzElement = "jsRest";
    }
    return jsRest;
})(statement);

_md.jsRest = jsRest;
/**
    element namedCallParam
     graphql-query
     { allMarkdownRemark
     : sort
     {
     @ order DESC
     @ fields
     [
     @ frontmatter___date
     : limit 1000
*/
var namedCallParam = (function (statement) {
    _inherits(namedCallParam, statement);
    function namedCallParam(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(namedCallParam.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, namedCallParam);
        this.wzElement = "namedCallParam";
    }
    return namedCallParam;
})(statement);

_md.namedCallParam = namedCallParam;
/**
    element jsonStatementTree
     Contains the stringified tree structure of a statement element.
     Normally this element is generated and is usefull when the 'js' ittf document
     is itself a generated artifact.
    
     The artifact generator will JSON.parse the wzName property
     of this element and will obtain a 'statement' element to process.
*/
var jsonStatementTree = (function (statement) {
    _inherits(jsonStatementTree, statement);
    function jsonStatementTree(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(jsonStatementTree.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsonStatementTree);
        this.wzElement = "jsonStatementTree";
    }
    return jsonStatementTree;
})(statement);

_md.jsonStatementTree = jsonStatementTree;
// element param
var param = (function (statement) {
    _inherits(param, statement);
    function param(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(param.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, param);
        this.wzElement = "param";
        this.typeReadonly = false;
        this.typeOptional = false;
        this.typePrivate = false;
        this.typePublic = false;
        this.typeProtected = false;
    }
    param.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 7 && _ch == ':') {
            if (name === ':public') {
                this.typePublic = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 8 && _ch == ':') {
            if (name === ':private') {
                this.typePrivate = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 9 && _ch == ':') {
            if (name === ':readonly') {
                this.typeReadonly = parseboolean(child.v, true, child); return true;
            }
            else if (name === ':optional') {
                this.typeOptional = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 10 && _ch == ':') {
            if (name === ':protected') {
                this.typeProtected = parseboolean(child.v, true, child); return true;
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    param.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return param;
})(statement);

_md.param = param;
// element objectParam
var objectParam = (function (param) {
    _inherits(objectParam, param);
    function objectParam(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(objectParam.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, objectParam);
        this.wzElement = "objectParam";
    }
    return objectParam;
})(param);

_md.objectParam = objectParam;
// element xfunction
var xfunction = (function (statement) {
    _inherits(xfunction, statement);
    function xfunction(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xfunction.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xfunction);
        this.wzElement = "xfunction";
        this.xasync = false;
        this.generator = false;
        // relation typeParameterDecl
        this.typeParameterDecls = [];
        // relation param
        this.params = [];
        // relation typeReturn
        this.typeReturn = null;
    }
    xfunction.prototype.addTypeParameterDecl = function(name, sourceLineInfo) {
        var retval = new _md.typeParameterDecl(name, sourceLineInfo);
        retval.wzParent = this;
        this.typeParameterDecls.push(retval);
        return retval;
    }
    xfunction.prototype.getTypeParameterDecl = function(name) {
        var found = null;
        this.typeParameterDecls.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xfunction.prototype.addParam = function(name, sourceLineInfo) {
        var retval = new _md.param(name, sourceLineInfo);
        retval.wzParent = this;
        this.params.push(retval);
        return retval;
    }
    xfunction.prototype.getParam = function(name) {
        var found = null;
        this.params.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xfunction.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '{') {
            if (name === '{') {
                return this.wzLoadToChildColl(child, _md.objectParam, this.params);
            }
        }
        if (_l == 2 && _ch == ':') {
            if (name === ':<') {
                return this.wzLoadToChildColl(child, _md.typeParameterDecl, this.typeParameterDecls);
            }
        }
        if (_l == 5 && _ch == 'a') {
            if (name === 'async') {
                this.xasync = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 5 && _ch == 'p') {
            if (name === 'param') {
                return this.wzLoadToChildColl(child, _md.param, this.params);
            }
        }
        if (_l == 7 && _ch == ':') {
            if (name === ':return') {
                return this.wzLoadOneToOne(child, _md.typeReturn, 'typeReturn');
            }
        }
        if (_l == 9 && _ch == 'g') {
            if (name === 'generator') {
                this.generator = parseboolean(child.v, true, child); return true;
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    xfunction.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    xfunction.prototype.wzVerify = function(ctx) {
        var i, i_items=this.typeParameterDecls, i_len=this.typeParameterDecls.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeParameterDecls[i];
            item.wzVerify(ctx);
        }
        var i, i_items=this.params, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzVerify(ctx);
        }
        if (this.typeReturn != null) {
            this.typeReturn.wzVerify(ctx);
        }
        _md.statement.prototype.wzVerify.call(this, ctx);
    }
    xfunction.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.typeParameterDecls, i_len=this.typeParameterDecls.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeParameterDecls[i];
            item.wzInitialize(ctx);
        }
        var i, i_items=this.params, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzInitialize(ctx);
        }
        if (this.typeReturn != null) {
            this.typeReturn.wzInitialize(ctx);
        }
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return xfunction;
})(statement);

_md.xfunction = xfunction;
/**
    element iife
     ittf
     iife
     unary-prefix ;
     param x
     param y
     return alpha = x + ': ' + y
     (
     @ key
     @ id
     js
     ;(function(x, y) {
     return alpha = x + ': ' + y;
     })(key, id)
    
*/
var iife = (function (xfunction) {
    _inherits(iife, xfunction);
    function iife(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(iife.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, iife);
        this.wzElement = "iife";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.unary_prefix = null
    }
    iife.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 12 && _ch == 'u') {
            if (name === 'unary-prefix') {
                this.unary_prefix = child.v; return true;
            }
            else if (name === 'unary_prefix') {
                this.unary_prefix = child.v; return true;
            }
        }
        ok = _md.xfunction.prototype.loadChild.call(this, child);
        return ok;
    }
    iife.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return iife;
})(xfunction);

_md.iife = iife;
/**
    element arrowfunction
     es6 feature
    
     ittf
     var handler
     =>
     param event
    
*/
var arrowfunction = (function (xfunction) {
    _inherits(arrowfunction, xfunction);
    function arrowfunction(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(arrowfunction.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, arrowfunction);
        this.wzElement = "arrowfunction";
        this.xasync = false;
    }
    arrowfunction.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'a') {
            if (name === 'async') {
                this.xasync = parseboolean(child.v, true, child); return true;
            }
        }
        ok = _md.xfunction.prototype.loadChild.call(this, child);
        return ok;
    }
    arrowfunction.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return arrowfunction;
})(xfunction);

_md.arrowfunction = arrowfunction;
/**
    element asyncarrowfunction
     es6 feature
    
     ittf
     var handler
     async=>
     param event
    
*/
var asyncarrowfunction = (function (xfunction) {
    _inherits(asyncarrowfunction, xfunction);
    function asyncarrowfunction(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(asyncarrowfunction.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, asyncarrowfunction);
        this.wzElement = "asyncarrowfunction";
    }
    return asyncarrowfunction;
})(xfunction);

_md.asyncarrowfunction = asyncarrowfunction;
/**
    element generatorfunction
     es6 feature
     reference https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Operators/yield
     ittf
     function* foo
     var index = 0
     while index <= 2
     yield index++
    
*/
var generatorfunction = (function (xfunction) {
    _inherits(generatorfunction, xfunction);
    function generatorfunction(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(generatorfunction.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, generatorfunction);
        this.wzElement = "generatorfunction";
    }
    return generatorfunction;
})(xfunction);

_md.generatorfunction = generatorfunction;
/**
    element asyncfunction
     es6 feature
     reference https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function
     ittf
     async-function foo
*/
var asyncfunction = (function (xfunction) {
    _inherits(asyncfunction, xfunction);
    function asyncfunction(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(asyncfunction.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, asyncfunction);
        this.wzElement = "asyncfunction";
    }
    return asyncfunction;
})(xfunction);

_md.asyncfunction = asyncfunction;
/**
    element xyield
     es6 feature
     reference https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Operators/yield
     ittf
     function* foo
     var index = 0
     while index <= 2
     yield index++
*/
var xyield = (function (statement) {
    _inherits(xyield, statement);
    function xyield(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xyield.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xyield);
        this.wzElement = "xyield";
    }
    return xyield;
})(statement);

_md.xyield = xyield;
/**
    element xawait
     es6 feature
     reference https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await
     ittf
     async-function foo
     var index
     await
     _ mypromisefunc
    
*/
var xawait = (function (statement) {
    _inherits(xawait, statement);
    function xawait(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xawait.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xawait);
        this.wzElement = "xawait";
    }
    return xawait;
})(statement);

_md.xawait = xawait;
/**
    element xreturn
     Can return any object or function.
    
     ittf
     return 0
     return
     {
     @ result a + b
    
     return
     _ Math.sum
     @ a
     @ b
    
     return
     function
     param a
     param b
     ...
*/
var xreturn = (function (statement) {
    _inherits(xreturn, statement);
    function xreturn(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xreturn.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xreturn);
        this.wzElement = "xreturn";
    }
    return xreturn;
})(statement);

_md.xreturn = xreturn;
// element typeDeclare
var typeDeclare = (function (statement) {
    _inherits(typeDeclare, statement);
    function typeDeclare(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeDeclare.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeDeclare);
        this.wzElement = "typeDeclare";
    }
    return typeDeclare;
})(statement);

_md.typeDeclare = typeDeclare;
// element typeModule
var typeModule = (function (statement) {
    _inherits(typeModule, statement);
    function typeModule(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeModule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeModule);
        this.wzElement = "typeModule";
    }
    return typeModule;
})(statement);

_md.typeModule = typeModule;
// element typeTypeAlias
var typeTypeAlias = (function (statement) {
    _inherits(typeTypeAlias, statement);
    function typeTypeAlias(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeTypeAlias.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeTypeAlias);
        this.wzElement = "typeTypeAlias";
        // relation typeParameterDecl
        this.typeParameterDecls = [];
    }
    typeTypeAlias.prototype.addTypeParameterDecl = function(name, sourceLineInfo) {
        var retval = new _md.typeParameterDecl(name, sourceLineInfo);
        retval.wzParent = this;
        this.typeParameterDecls.push(retval);
        return retval;
    }
    typeTypeAlias.prototype.getTypeParameterDecl = function(name) {
        var found = null;
        this.typeParameterDecls.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    typeTypeAlias.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 2 && _ch == ':') {
            if (name === ':<') {
                return this.wzLoadToChildColl(child, _md.typeParameterDecl, this.typeParameterDecls);
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    typeTypeAlias.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    typeTypeAlias.prototype.wzVerify = function(ctx) {
        var i, i_items=this.typeParameterDecls, i_len=this.typeParameterDecls.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeParameterDecls[i];
            item.wzVerify(ctx);
        }
        _md.statement.prototype.wzVerify.call(this, ctx);
    }
    typeTypeAlias.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.typeParameterDecls, i_len=this.typeParameterDecls.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeParameterDecls[i];
            item.wzInitialize(ctx);
        }
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return typeTypeAlias;
})(statement);

_md.typeTypeAlias = typeTypeAlias;
// element typeFunctionDeclare
var typeFunctionDeclare = (function (statement) {
    _inherits(typeFunctionDeclare, statement);
    function typeFunctionDeclare(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeFunctionDeclare.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeFunctionDeclare);
        this.wzElement = "typeFunctionDeclare";
        // relation typeParameterDecl
        this.typeParameterDecls = [];
        // relation param
        this.params = [];
        // relation typeReturn
        this.typeReturn = null;
    }
    typeFunctionDeclare.prototype.addTypeParameterDecl = function(name, sourceLineInfo) {
        var retval = new _md.typeParameterDecl(name, sourceLineInfo);
        retval.wzParent = this;
        this.typeParameterDecls.push(retval);
        return retval;
    }
    typeFunctionDeclare.prototype.getTypeParameterDecl = function(name) {
        var found = null;
        this.typeParameterDecls.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    typeFunctionDeclare.prototype.addParam = function(name, sourceLineInfo) {
        var retval = new _md.param(name, sourceLineInfo);
        retval.wzParent = this;
        this.params.push(retval);
        return retval;
    }
    typeFunctionDeclare.prototype.getParam = function(name) {
        var found = null;
        this.params.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    typeFunctionDeclare.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '{') {
            if (name === '{') {
                return this.wzLoadToChildColl(child, _md.objectParam, this.params);
            }
        }
        if (_l == 2 && _ch == ':') {
            if (name === ':<') {
                return this.wzLoadToChildColl(child, _md.typeParameterDecl, this.typeParameterDecls);
            }
        }
        if (_l == 5 && _ch == 'p') {
            if (name === 'param') {
                return this.wzLoadToChildColl(child, _md.param, this.params);
            }
        }
        if (_l == 7 && _ch == ':') {
            if (name === ':return') {
                return this.wzLoadOneToOne(child, _md.typeReturn, 'typeReturn');
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    typeFunctionDeclare.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    typeFunctionDeclare.prototype.wzVerify = function(ctx) {
        var i, i_items=this.typeParameterDecls, i_len=this.typeParameterDecls.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeParameterDecls[i];
            item.wzVerify(ctx);
        }
        var i, i_items=this.params, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzVerify(ctx);
        }
        if (this.typeReturn != null) {
            this.typeReturn.wzVerify(ctx);
        }
        _md.statement.prototype.wzVerify.call(this, ctx);
    }
    typeFunctionDeclare.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.typeParameterDecls, i_len=this.typeParameterDecls.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeParameterDecls[i];
            item.wzInitialize(ctx);
        }
        var i, i_items=this.params, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzInitialize(ctx);
        }
        if (this.typeReturn != null) {
            this.typeReturn.wzInitialize(ctx);
        }
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return typeFunctionDeclare;
})(statement);

_md.typeFunctionDeclare = typeFunctionDeclare;
// element typeInterface
var typeInterface = (function (statement) {
    _inherits(typeInterface, statement);
    function typeInterface(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeInterface.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeInterface);
        this.wzElement = "typeInterface";
        // relation typeParameterDecl
        this.typeParameterDecls = [];
    }
    typeInterface.prototype.addTypeParameterDecl = function(name, sourceLineInfo) {
        var retval = new _md.typeParameterDecl(name, sourceLineInfo);
        retval.wzParent = this;
        this.typeParameterDecls.push(retval);
        return retval;
    }
    typeInterface.prototype.getTypeParameterDecl = function(name) {
        var found = null;
        this.typeParameterDecls.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    typeInterface.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 2 && _ch == ':') {
            if (name === ':<') {
                return this.wzLoadToChildColl(child, _md.typeParameterDecl, this.typeParameterDecls);
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    typeInterface.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    typeInterface.prototype.wzVerify = function(ctx) {
        var i, i_items=this.typeParameterDecls, i_len=this.typeParameterDecls.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeParameterDecls[i];
            item.wzVerify(ctx);
        }
        _md.statement.prototype.wzVerify.call(this, ctx);
    }
    typeInterface.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.typeParameterDecls, i_len=this.typeParameterDecls.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeParameterDecls[i];
            item.wzInitialize(ctx);
        }
        this.extends = [];
        var temp = [];
        var i, i_items=this.statements, i_len=this.statements.length, s;
        for (i=0; i<i_len; i++) {
            s = this.statements[i];
            if (s.wzElement === 'typeExtends') {
                this.extends.push(s);
            }
            else {
                temp.push(s);
            }
        }
        this.statements = temp;
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return typeInterface;
})(statement);

_md.typeInterface = typeInterface;
// element typeExtends
var typeExtends = (function (statement) {
    _inherits(typeExtends, statement);
    function typeExtends(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeExtends.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeExtends);
        this.wzElement = "typeExtends";
    }
    return typeExtends;
})(statement);

_md.typeExtends = typeExtends;
// element typeProperty
var typeProperty = (function (statement) {
    _inherits(typeProperty, statement);
    function typeProperty(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeProperty.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeProperty);
        this.wzElement = "typeProperty";
        this.typeOptional = false;
    }
    typeProperty.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 9 && _ch == ':') {
            if (name === ':optional') {
                this.typeOptional = parseboolean(child.v, true, child); return true;
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    typeProperty.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return typeProperty;
})(statement);

_md.typeProperty = typeProperty;
// element typeMethod
var typeMethod = (function (xfunction) {
    _inherits(typeMethod, xfunction);
    function typeMethod(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeMethod.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeMethod);
        this.wzElement = "typeMethod";
        this.typeAbstract = false;
        this.typePrivate = false;
        this.typePublic = false;
        this.typeProtected = false;
    }
    typeMethod.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 7 && _ch == ':') {
            if (name === ':public') {
                this.typePublic = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 8 && _ch == ':') {
            if (name === ':private') {
                this.typePrivate = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 9 && _ch == ':') {
            if (name === ':abstract') {
                this.typeAbstract = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 10 && _ch == ':') {
            if (name === ':protected') {
                this.typeProtected = parseboolean(child.v, true, child); return true;
            }
        }
        ok = _md.xfunction.prototype.loadChild.call(this, child);
        return ok;
    }
    typeMethod.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return typeMethod;
})(xfunction);

_md.typeMethod = typeMethod;
// element typeMapped
var typeMapped = (function (statement) {
    _inherits(typeMapped, statement);
    function typeMapped(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeMapped.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeMapped);
        this.wzElement = "typeMapped";
        this.typeOptional = false;
    }
    typeMapped.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 9 && _ch == ':') {
            if (name === ':optional') {
                this.typeOptional = parseboolean(child.v, true, child); return true;
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    typeMapped.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return typeMapped;
})(statement);

_md.typeMapped = typeMapped;
// element typeConditional
var typeConditional = (function (statement) {
    _inherits(typeConditional, statement);
    function typeConditional(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeConditional.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeConditional);
        this.wzElement = "typeConditional";
    }
    return typeConditional;
})(statement);

_md.typeConditional = typeConditional;
// element typeImplements
var typeImplements = (function (statement) {
    _inherits(typeImplements, statement);
    function typeImplements(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeImplements.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeImplements);
        this.wzElement = "typeImplements";
    }
    return typeImplements;
})(statement);

_md.typeImplements = typeImplements;
/**
    element xclass
     A javascript class
*/
var xclass = (function (statement) {
    _inherits(xclass, statement);
    function xclass(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xclass.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xclass);
        this.wzElement = "xclass";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.extends = null
        this.typeAbstract = false;
        // relation typeParameterDecl
        this.typeParameterDecls = [];
        // relation superType
        this.superType = null;
    }
    xclass.prototype.addTypeParameterDecl = function(name, sourceLineInfo) {
        var retval = new _md.typeParameterDecl(name, sourceLineInfo);
        retval.wzParent = this;
        this.typeParameterDecls.push(retval);
        return retval;
    }
    xclass.prototype.getTypeParameterDecl = function(name) {
        var found = null;
        this.typeParameterDecls.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xclass.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 2 && _ch == ':') {
            if (name === ':<') {
                return this.wzLoadToChildColl(child, _md.typeParameterDecl, this.typeParameterDecls);
            }
        }
        if (_l == 5 && _ch == 's') {
            if (name === 'super') {
                return this.wzLoadOneToOne(child, _md.superType, 'superType');
            }
        }
        if (_l == 7 && _ch == 'e') {
            if (name === 'extends') {
                this.extends = child.v; return true;
            }
        }
        if (_l == 9 && _ch == ':') {
            if (name === ':abstract') {
                this.typeAbstract = parseboolean(child.v, true, child); return true;
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    xclass.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    xclass.prototype.wzVerify = function(ctx) {
        var i, i_items=this.typeParameterDecls, i_len=this.typeParameterDecls.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeParameterDecls[i];
            item.wzVerify(ctx);
        }
        if (this.superType != null) {
            this.superType.wzVerify(ctx);
        }
        _md.statement.prototype.wzVerify.call(this, ctx);
    }
    xclass.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.typeParameterDecls, i_len=this.typeParameterDecls.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeParameterDecls[i];
            item.wzInitialize(ctx);
        }
        if (this.superType != null) {
            this.superType.wzInitialize(ctx);
        }
        ctx.modelState = ctx.modelState || {};
        ctx.modelState.hasClasses = true;
        if (this.extends && this.extends.length > 0) {
            this.super = this.extends;
        }
        else if (this.superType) {
            this.super = this.superType.wzName;
        }
        else {
            var tokens = this.wzName.split(':');
            if (tokens.length == 2) {
                this.wzName = tokens[0];
                this.super = tokens[1];
            }
        }
        this.extends = [];
        this.implements = [];
        var temp = [];
        var i, i_items=this.statements, i_len=this.statements.length, s;
        for (i=0; i<i_len; i++) {
            s = this.statements[i];
            if (s.wzElement === 'typeExtends') {
                this.extends.push(s);
            }
            else if (s.wzElement === 'typeImplements') {
                this.implements.push(s);
            }
            else {
                temp.push(s);
            }
        }
        this.statements = temp;
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    xclass.prototype.findCtor = function() {
        return _.find(this.statements, function(item) { return item.wzElement === 'ctor' });
    }
    return xclass;
})(statement);

_md.xclass = xclass;
// element superType
var superType = (function (statement) {
    _inherits(superType, statement);
    function superType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(superType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, superType);
        this.wzElement = "superType";
        // relation typeParameterInst
        this.typeParameterInsts = [];
    }
    superType.prototype.addTypeParameterInst = function(name, sourceLineInfo) {
        var retval = new _md.typeParameterInst(name, sourceLineInfo);
        retval.wzParent = this;
        this.typeParameterInsts.push(retval);
        return retval;
    }
    superType.prototype.getTypeParameterInst = function(name) {
        var found = null;
        this.typeParameterInsts.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    superType.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 6 && _ch == ':') {
            if (name === ':param') {
                return this.wzLoadToChildColl(child, _md.typeParameterInst, this.typeParameterInsts);
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    superType.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    superType.prototype.wzVerify = function(ctx) {
        var i, i_items=this.typeParameterInsts, i_len=this.typeParameterInsts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeParameterInsts[i];
            item.wzVerify(ctx);
        }
        _md.statement.prototype.wzVerify.call(this, ctx);
    }
    superType.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.typeParameterInsts, i_len=this.typeParameterInsts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeParameterInsts[i];
            item.wzInitialize(ctx);
        }
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return superType;
})(statement);

_md.superType = superType;
// element ctor
var ctor = (function (xfunction) {
    _inherits(ctor, xfunction);
    function ctor(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ctor.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ctor);
        this.wzElement = "ctor";
        this.typePrivate = false;
        this.typePublic = false;
        this.typeProtected = false;
        // relation base
        this.bases = [];
    }
    ctor.prototype.addBase = function(name, sourceLineInfo) {
        var retval = new _md.base(name, sourceLineInfo);
        retval.wzParent = this;
        this.bases.push(retval);
        return retval;
    }
    ctor.prototype.getBase = function(name) {
        var found = null;
        this.bases.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    ctor.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'b') {
            if (name === 'base') {
                return this.wzLoadToChildColl(child, _md.base, this.bases);
            }
        }
        if (_l == 7 && _ch == ':') {
            if (name === ':public') {
                this.typePublic = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 8 && _ch == ':') {
            if (name === ':private') {
                this.typePrivate = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 10 && _ch == ':') {
            if (name === ':protected') {
                this.typeProtected = parseboolean(child.v, true, child); return true;
            }
        }
        ok = _md.xfunction.prototype.loadChild.call(this, child);
        return ok;
    }
    ctor.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    ctor.prototype.wzVerify = function(ctx) {
        var i, i_items=this.bases, i_len=this.bases.length, item;
        for (i=0; i<i_len; i++) {
            item = this.bases[i];
            item.wzVerify(ctx);
        }
        _md.xfunction.prototype.wzVerify.call(this, ctx);
    }
    ctor.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.bases, i_len=this.bases.length, item;
        for (i=0; i<i_len; i++) {
            item = this.bases[i];
            item.wzInitialize(ctx);
        }
        _md.xfunction.prototype.wzInitialize.call(this, ctx);
    }
    ctor.prototype.getBaseArgs = function() {
        var ret = [];
        var i, i_items=this.bases, i_len=this.bases.length, item;
        for (i=0; i<i_len; i++) {
            item = this.bases[i];
            ret.push(item.wzName);
        }
        return ret;
    }
    return ctor;
})(xfunction);

_md.ctor = ctor;
// element base
var base = (function (statement) {
    _inherits(base, statement);
    function base(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(base.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, base);
        this.wzElement = "base";
    }
    return base;
})(statement);

_md.base = base;
/**
    element get
     es6 - Defines a getter on a new object in the object initializer
     reference https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Functions/get
    
     ittf
     var obj
     {
     @ log ['test']
     get latest
     if this.log.length == 0
     return undefined
     return this.log[this.log.length - 1]
    
*/
var get = (function (xfunction) {
    _inherits(get, xfunction);
    function get(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(get.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, get);
        this.wzElement = "get";
    }
    return get;
})(xfunction);

_md.get = get;
// element method
var method = (function (xfunction) {
    _inherits(method, xfunction);
    function method(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(method.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, method);
        this.wzElement = "method";
        this.typeAbstract = false;
        this.static = false;
        this.async = false;
        this.generator = false;
        this.typePrivate = false;
        this.typePublic = false;
        this.typeProtected = false;
    }
    method.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'a') {
            if (name === 'async') {
                this.async = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'static') {
                this.static = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 7 && _ch == ':') {
            if (name === ':public') {
                this.typePublic = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 8 && _ch == ':') {
            if (name === ':private') {
                this.typePrivate = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 9 && _ch == ':') {
            if (name === ':abstract') {
                this.typeAbstract = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 9 && _ch == 'g') {
            if (name === 'generator') {
                this.generator = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 10 && _ch == ':') {
            if (name === ':protected') {
                this.typeProtected = parseboolean(child.v, true, child); return true;
            }
        }
        ok = _md.xfunction.prototype.loadChild.call(this, child);
        return ok;
    }
    method.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return method;
})(xfunction);

_md.method = method;
// element p
var p = (function (statement) {
    _inherits(p, statement);
    function p(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(p.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, p);
        this.wzElement = "p";
        this.typeAbstract = false;
        this.static = false;
        this.typePrivate = false;
        this.typePublic = false;
        this.typeProtected = false;
        this.typeReadonly = false;
    }
    p.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 6 && _ch == 's') {
            if (name === 'static') {
                this.static = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 7 && _ch == ':') {
            if (name === ':public') {
                this.typePublic = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 8 && _ch == ':') {
            if (name === ':private') {
                this.typePrivate = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 9 && _ch == ':') {
            if (name === ':abstract') {
                this.typeAbstract = parseboolean(child.v, true, child); return true;
            }
            else if (name === ':readonly') {
                this.typeReadonly = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 10 && _ch == ':') {
            if (name === ':protected') {
                this.typeProtected = parseboolean(child.v, true, child); return true;
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    p.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return p;
})(statement);

_md.p = p;
// element xnew
var xnew = (function (statement) {
    _inherits(xnew, statement);
    function xnew(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xnew.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xnew);
        this.wzElement = "xnew";
    }
    return xnew;
})(statement);

_md.xnew = xnew;
// element type
var type = (function (statement) {
    _inherits(type, statement);
    function type(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(type.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, type);
        this.wzElement = "type";
    }
    return type;
})(statement);

_md.type = type;
// element reactComponent
var reactComponent = (function (statement) {
    _inherits(reactComponent, statement);
    function reactComponent(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(reactComponent.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, reactComponent);
        this.wzElement = "reactComponent";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.super = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.extends = null
    }
    reactComponent.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 's') {
            if (name === 'super') {
                this.super = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'e') {
            if (name === 'extends') {
                this.extends = child.v; return true;
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    reactComponent.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    reactComponent.prototype.wzInitialize = function(ctx) {
        ctx.modelState = ctx.modelState || {};
        ctx.modelState.hasClasses = true;
        if (this.extends && this.extends.length > 0) {
            this.super = this.extends;
        }
        else {
            var tokens = this.wzName.split(':');
            if (tokens.length == 2) {
                this.wzName = tokens[0];
                this.super = tokens[1];
            }
        }
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return reactComponent;
})(statement);

_md.reactComponent = reactComponent;
// element reactFunction
var reactFunction = (function (statement) {
    _inherits(reactFunction, statement);
    function reactFunction(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(reactFunction.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, reactFunction);
        this.wzElement = "reactFunction";
    }
    return reactFunction;
})(statement);

_md.reactFunction = reactFunction;
// element style
var style = (function (statement) {
    _inherits(style, statement);
    function style(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(style.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, style);
        this.wzElement = "style";
    }
    return style;
})(statement);

_md.style = style;
// element prop
var prop = (function (statement) {
    _inherits(prop, statement);
    function prop(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(prop.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, prop);
        this.wzElement = "prop";
        this.isRequired = false;
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.defaultValue = null
        // relation param
        // react propType
        this.param = null;
    }
    prop.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '{') {
            if (name === '{') {
                return this.wzLoadOneToOne(child, _md.objectParam, 'param');
            }
        }
        if (_l == 5 && _ch == 'p') {
            if (name === 'param') {
                return this.wzLoadOneToOne(child, _md.param, 'param');
            }
        }
        if (_l == 7 && _ch == 'd') {
            if (name === 'default') {
                this.defaultValue = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'r') {
            if (name === 'required') {
                this.isRequired = parseboolean(child.v, true, child); return true;
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    prop.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    prop.prototype.wzVerify = function(ctx) {
        if (this.param != null) {
            this.param.wzVerify(ctx);
        }
        _md.statement.prototype.wzVerify.call(this, ctx);
    }
    prop.prototype.wzInitialize = function(ctx) {
        if (this.param != null) {
            this.param.wzInitialize(ctx);
        }
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return prop;
})(statement);

_md.prop = prop;
// element reactMember
var reactMember = (function (statement) {
    _inherits(reactMember, statement);
    function reactMember(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(reactMember.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, reactMember);
        this.wzElement = "reactMember";
    }
    reactMember.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    reactMember.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return reactMember;
})(statement);

_md.reactMember = reactMember;
// element state
var state = (function (reactMember) {
    _inherits(state, reactMember);
    function state(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(state.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, state);
        this.wzElement = "state";
    }
    return state;
})(reactMember);

_md.state = state;
// element setState
var setState = (function (reactMember) {
    _inherits(setState, reactMember);
    function setState(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(setState.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, setState);
        this.wzElement = "setState";
    }
    return setState;
})(reactMember);

_md.setState = setState;
// element render
var render = (function (reactMember) {
    _inherits(render, reactMember);
    function render(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(render.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, render);
        this.wzElement = "render";
    }
    return render;
})(reactMember);

_md.render = render;
// element willMount
var willMount = (function (reactMember) {
    _inherits(willMount, reactMember);
    function willMount(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(willMount.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, willMount);
        this.wzElement = "willMount";
    }
    return willMount;
})(reactMember);

_md.willMount = willMount;
// element didMount
var didMount = (function (reactMember) {
    _inherits(didMount, reactMember);
    function didMount(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(didMount.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, didMount);
        this.wzElement = "didMount";
    }
    return didMount;
})(reactMember);

_md.didMount = didMount;
// element willUnmount
var willUnmount = (function (reactMember) {
    _inherits(willUnmount, reactMember);
    function willUnmount(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(willUnmount.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, willUnmount);
        this.wzElement = "willUnmount";
    }
    return willUnmount;
})(reactMember);

_md.willUnmount = willUnmount;
// element shouldUpdate
var shouldUpdate = (function (reactMember) {
    _inherits(shouldUpdate, reactMember);
    function shouldUpdate(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(shouldUpdate.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, shouldUpdate);
        this.wzElement = "shouldUpdate";
    }
    return shouldUpdate;
})(reactMember);

_md.shouldUpdate = shouldUpdate;
// element didUpdate
var didUpdate = (function (reactMember) {
    _inherits(didUpdate, reactMember);
    function didUpdate(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(didUpdate.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, didUpdate);
        this.wzElement = "didUpdate";
    }
    return didUpdate;
})(reactMember);

_md.didUpdate = didUpdate;
// element willUpdate
var willUpdate = (function (reactMember) {
    _inherits(willUpdate, reactMember);
    function willUpdate(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(willUpdate.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, willUpdate);
        this.wzElement = "willUpdate";
    }
    return willUpdate;
})(reactMember);

_md.willUpdate = willUpdate;
// element willReceiveProps
var willReceiveProps = (function (reactMember) {
    _inherits(willReceiveProps, reactMember);
    function willReceiveProps(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(willReceiveProps.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, willReceiveProps);
        this.wzElement = "willReceiveProps";
    }
    return willReceiveProps;
})(reactMember);

_md.willReceiveProps = willReceiveProps;
// element htmlevent
var htmlevent = (function (statement) {
    _inherits(htmlevent, statement);
    function htmlevent(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(htmlevent.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, htmlevent);
        this.wzElement = "htmlevent";
    }
    return htmlevent;
})(statement);

_md.htmlevent = htmlevent;
// element htmlelement
var htmlelement = (function (statement) {
    _inherits(htmlelement, statement);
    function htmlelement(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(htmlelement.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, htmlelement);
        this.wzElement = "htmlelement";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.autoCapitalize = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.autoCorrect = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.property = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.itemProp = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.itemScope = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.itemType = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.itemRef = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.itemID = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.unselectable = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.results = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.autoSave = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.class = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.aria__ = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.data__ = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.accept = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.acceptCharset = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.accessKey = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.action = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.allowFullScreen = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.allowTransparency = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.alt = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.async = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.autoComplete = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.autoFocus = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.autoPlay = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.capture = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.cellPadding = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.cellSpacing = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.charSet = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.challenge = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.checked = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.classID = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.className = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.cols = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.colSpan = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.content = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.contentEditable = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.contextMenu = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.controls = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.coords = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.crossOrigin = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.data = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.dateTime = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.defer = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.dir = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.disabled = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.download = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.draggable = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.encType = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.form = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.formAction = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.formEncType = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.formMethod = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.formNoValidate = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.formTarget = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.frameBorder = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.headers = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.height = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.hidden = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.high = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.href = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.hrefLang = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.htmlFor = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.httpEquiv = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.icon = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.id = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.inputMode = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.keyParams = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.keyType = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this._label = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.lang = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.list = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.loop = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.low = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.manifest = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.marginHeight = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.marginWidth = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.max = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.maxLength = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.media = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.mediaGroup = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.method = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.min = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.minLength = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.multiple = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.muted = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.name = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.noValidate = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.open = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.optimum = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.pattern = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.placeholder = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.poster = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.preload = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.radioGroup = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.readOnly = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.rel = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.required = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.role = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.rows = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.rowSpan = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.sandbox = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.scope = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.scoped = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.scrolling = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.seamless = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.selected = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.shape = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.size = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.sizes = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this._span = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.spellCheck = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.src = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.srcDoc = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.srcSet = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.start = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.step = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.style = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this._summary = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.tabIndex = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.target = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.title = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.useMap = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.value = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.width = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.wmode = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.wrap = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.static = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.accentHeight = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.accumulate = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.additive = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.alignmentBaseline = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.allowReorder = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.alphabetic = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.amplitude = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.arabicForm = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.ascent = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.attributeName = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.attributeType = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.autoReverse = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.azimuth = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.baseFrequency = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.baseProfile = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.baselineShift = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.bbox = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.begin = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.bias = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.by = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.calcMode = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.capHeight = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.clip = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.clipPath = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.clipPathUnits = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.clipRule = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.colorInterpolation = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.colorInterpolationFilters = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.colorProfile = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.colorRendering = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.contentScriptType = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.contentStyleType = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.cursor = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.cx = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.cy = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.d = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.decelerate = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.descent = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.diffuseConstant = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.direction = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.display = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.divisor = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.dominantBaseline = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.dur = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.dx = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.dy = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.edgeMode = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.elevation = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.enableBackground = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.end = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.exponent = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.externalResourcesRequired = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.fill = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.fillOpacity = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.fillRule = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this._filter = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.filterRes = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.filterUnits = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.floodColor = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.floodOpacity = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.focusable = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.fontFamily = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.fontSize = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.fontSizeAdjust = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.fontStretch = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.fontStyle = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.fontVariant = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.fontWeight = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.format = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.from = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.fx = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.fy = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.g1 = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.g2 = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.glyphName = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.glyphOrientationHorizontal = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.glyphOrientationVertical = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.glyphRef = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.gradientTransform = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.gradientUnits = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.hanging = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.horizAdvX = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.horizOriginX = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.ideographic = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.imageRendering = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.in = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.in2 = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.intercept = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.k = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.k1 = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.k2 = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.k3 = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.k4 = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.kernelMatrix = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.kernelUnitLength = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.kerning = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.keyPoints = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.keySplines = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.keyTimes = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.lengthAdjust = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.letterSpacing = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.lightingColor = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.limitingConeAngle = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.local = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.markerEnd = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.markerHeight = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.markerMid = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.markerStart = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.markerUnits = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.markerWidth = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.mask = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.maskContentUnits = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.maskUnits = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.mathematical = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.mode = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.numOctaves = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.offset = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.opacity = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.operator = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.order = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.orient = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.orientation = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.origin = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.overflow = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.overlinePosition = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.overlineThickness = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.paintOrder = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.panose1 = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.pathLength = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.patternContentUnits = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.patternTransform = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.patternUnits = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.pointerEvents = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.points = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.pointsAtX = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.pointsAtY = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.pointsAtZ = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.preserveAlpha = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.preserveAspectRatio = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.primitiveUnits = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.r = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.radius = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.refX = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.refY = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.renderingIntent = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.repeatCount = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.repeatDur = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.requiredExtensions = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.requiredFeatures = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.restart = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.result = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.rotate = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.rx = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.ry = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.scale = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.seed = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.shapeRendering = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.slope = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.spacing = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.specularConstant = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.specularExponent = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.speed = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.spreadMethod = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.startOffset = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.stdDeviation = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.stemh = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.stemv = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.stitchTiles = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.stopColor = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.stopOpacity = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.strikethroughPosition = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.strikethroughThickness = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.string = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.stroke = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.strokeDasharray = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.strokeDashoffset = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.strokeLinecap = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.strokeLinejoin = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.strokeMiterlimit = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.strokeOpacity = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.strokeWidth = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.surfaceScale = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.systemLanguage = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.tableValues = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.targetX = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.targetY = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.textAnchor = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.textDecoration = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.textLength = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.textRendering = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.to = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.transform = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.u1 = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.u2 = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.underlinePosition = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.underlineThickness = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.unicode = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.unicodeBidi = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.unicodeRange = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.unitsPerEm = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.vAlphabetic = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.vHanging = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.vIdeographic = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.vMathematical = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.values = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.vectorEffect = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.version = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.vertAdvY = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.vertOriginX = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.vertOriginY = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.viewBox = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.viewTarget = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.visibility = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.widths = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.wordSpacing = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.writingMode = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.x = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.x1 = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.x2 = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.xChannelSelector = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.xHeight = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.xlinkActuate = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.xlinkArcrole = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.xlinkHref = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.xlinkRole = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.xlinkShow = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.xlinkTitle = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.xlinkType = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.xmlns = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.xmlnsXlink = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.xmlBase = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.xmlLang = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.xmlSpace = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.y = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.y1 = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.y2 = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.yChannelSelector = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.z = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.zoomAndPan = null
    }
    htmlelement.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == 'd') {
            if (name === 'd') {
                this.d = child.v; return true;
            }
        }
        if (_l == 1 && _ch == 'k') {
            if (name === 'k') {
                this.k = child.v; return true;
            }
        }
        if (_l == 1 && _ch == 'r') {
            if (name === 'r') {
                this.r = child.v; return true;
            }
        }
        if (_l == 1 && _ch == 'x') {
            if (name === 'x') {
                this.x = child.v; return true;
            }
        }
        if (_l == 1 && _ch == 'y') {
            if (name === 'y') {
                this.y = child.v; return true;
            }
        }
        if (_l == 1 && _ch == 'z') {
            if (name === 'z') {
                this.z = child.v; return true;
            }
        }
        if (_l == 2 && _ch == 'b') {
            if (name === 'by') {
                this.by = child.v; return true;
            }
        }
        if (_l == 2 && _ch == 'c') {
            if (name === 'cx') {
                this.cx = child.v; return true;
            }
            else if (name === 'cy') {
                this.cy = child.v; return true;
            }
        }
        if (_l == 2 && _ch == 'd') {
            if (name === 'dx') {
                this.dx = child.v; return true;
            }
            else if (name === 'dy') {
                this.dy = child.v; return true;
            }
        }
        if (_l == 2 && _ch == 'f') {
            if (name === 'fx') {
                this.fx = child.v; return true;
            }
            else if (name === 'fy') {
                this.fy = child.v; return true;
            }
        }
        if (_l == 2 && _ch == 'g') {
            if (name === 'g1') {
                this.g1 = child.v; return true;
            }
            else if (name === 'g2') {
                this.g2 = child.v; return true;
            }
        }
        if (_l == 2 && _ch == 'i') {
            if (name === 'id') {
                this.id = child.v; return true;
            }
            else if (name === 'in') {
                this.in = child.v; return true;
            }
        }
        if (_l == 2 && _ch == 'k') {
            if (name === 'k1') {
                this.k1 = child.v; return true;
            }
            else if (name === 'k2') {
                this.k2 = child.v; return true;
            }
            else if (name === 'k3') {
                this.k3 = child.v; return true;
            }
            else if (name === 'k4') {
                this.k4 = child.v; return true;
            }
        }
        if (_l == 2 && _ch == 'r') {
            if (name === 'rx') {
                this.rx = child.v; return true;
            }
            else if (name === 'ry') {
                this.ry = child.v; return true;
            }
        }
        if (_l == 2 && _ch == 't') {
            if (name === 'to') {
                this.to = child.v; return true;
            }
        }
        if (_l == 2 && _ch == 'u') {
            if (name === 'u1') {
                this.u1 = child.v; return true;
            }
            else if (name === 'u2') {
                this.u2 = child.v; return true;
            }
        }
        if (_l == 2 && _ch == 'x') {
            if (name === 'x1') {
                this.x1 = child.v; return true;
            }
            else if (name === 'x2') {
                this.x2 = child.v; return true;
            }
        }
        if (_l == 2 && _ch == 'y') {
            if (name === 'y1') {
                this.y1 = child.v; return true;
            }
            else if (name === 'y2') {
                this.y2 = child.v; return true;
            }
        }
        if (_l == 3 && _ch == 'a') {
            if (name === 'alt') {
                this.alt = child.v; return true;
            }
        }
        if (_l == 3 && _ch == 'd') {
            if (name === 'dir') {
                this.dir = child.v; return true;
            }
            else if (name === 'dur') {
                this.dur = child.v; return true;
            }
        }
        if (_l == 3 && _ch == 'e') {
            if (name === 'end') {
                this.end = child.v; return true;
            }
        }
        if (_l == 3 && _ch == 'i') {
            if (name === 'in2') {
                this.in2 = child.v; return true;
            }
        }
        if (_l == 3 && _ch == 'l') {
            if (name === 'low') {
                this.low = child.v; return true;
            }
        }
        if (_l == 3 && _ch == 'm') {
            if (name === 'max') {
                this.max = child.v; return true;
            }
            else if (name === 'min') {
                this.min = child.v; return true;
            }
        }
        if (_l == 3 && _ch == 'r') {
            if (name === 'rel') {
                this.rel = child.v; return true;
            }
        }
        if (_l == 3 && _ch == 's') {
            if (name === 'src') {
                this.src = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'b') {
            if (name === 'bbox') {
                this.bbox = child.v; return true;
            }
            else if (name === 'bias') {
                this.bias = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'c') {
            if (name === 'cols') {
                this.cols = child.v; return true;
            }
            else if (name === 'clip') {
                this.clip = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'd') {
            if (name === 'data') {
                this.data = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'form') {
                this.form = child.v; return true;
            }
            else if (name === 'fill') {
                this.fill = child.v; return true;
            }
            else if (name === 'from') {
                this.from = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'h') {
            if (name === 'high') {
                this.high = child.v; return true;
            }
            else if (name === 'href') {
                this.href = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'i') {
            if (name === 'icon') {
                this.icon = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'l') {
            if (name === 'lang') {
                this.lang = child.v; return true;
            }
            else if (name === 'list') {
                this.list = child.v; return true;
            }
            else if (name === 'loop') {
                this.loop = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'm') {
            if (name === 'mask') {
                this.mask = child.v; return true;
            }
            else if (name === 'mode') {
                this.mode = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'n') {
            if (name === 'name') {
                this.name = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'o') {
            if (name === 'open') {
                this.open = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'r') {
            if (name === 'role') {
                this.role = child.v; return true;
            }
            else if (name === 'rows') {
                this.rows = child.v; return true;
            }
            else if (name === 'refx') {
                this.refX = child.v; return true;
            }
            else if (name === 'refy') {
                this.refY = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 's') {
            if (name === 'size') {
                this.size = child.v; return true;
            }
            else if (name === 'step') {
                this.step = child.v; return true;
            }
            else if (name === 'seed') {
                this.seed = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'w') {
            if (name === 'wrap') {
                this.wrap = child.v; return true;
            }
        }
        if (_l == 5 && _ch == '@') {
            if (name === '@span') {
                this._span = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'a') {
            if (name === 'async') {
                this.async = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'b') {
            if (name === 'begin') {
                this.begin = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'c') {
            if (name === 'class') {
                this.class = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'd') {
            if (name === 'defer') {
                this.defer = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'l') {
            if (name === 'local') {
                this.local = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'm') {
            if (name === 'media') {
                this.media = child.v; return true;
            }
            else if (name === 'muted') {
                this.muted = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'o') {
            if (name === 'order') {
                this.order = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 's') {
            if (name === 'scope') {
                this.scope = child.v; return true;
            }
            else if (name === 'shape') {
                this.shape = child.v; return true;
            }
            else if (name === 'sizes') {
                this.sizes = child.v; return true;
            }
            else if (name === 'start') {
                this.start = child.v; return true;
            }
            else if (name === 'style') {
                this.style = child.v; return true;
            }
            else if (name === 'scale') {
                this.scale = child.v; return true;
            }
            else if (name === 'slope') {
                this.slope = child.v; return true;
            }
            else if (name === 'speed') {
                this.speed = child.v; return true;
            }
            else if (name === 'stemh') {
                this.stemh = child.v; return true;
            }
            else if (name === 'stemv') {
                this.stemv = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 't') {
            if (name === 'title') {
                this.title = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                this.value = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'w') {
            if (name === 'width') {
                this.width = child.v; return true;
            }
            else if (name === 'wmode') {
                this.wmode = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'x') {
            if (name === 'xmlns') {
                this.xmlns = child.v; return true;
            }
        }
        if (_l == 6 && _ch == '@') {
            if (name === '@label') {
                this._label = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'a') {
            if (name === 'accept') {
                this.accept = child.v; return true;
            }
            else if (name === 'action') {
                this.action = child.v; return true;
            }
            else if (name === 'ascent') {
                this.ascent = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'c') {
            if (name === 'coords') {
                this.coords = child.v; return true;
            }
            else if (name === 'cursor') {
                this.cursor = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'f') {
            if (name === 'format') {
                this.format = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'h') {
            if (name === 'height') {
                this.height = child.v; return true;
            }
            else if (name === 'hidden') {
                this.hidden = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'i') {
            if (name === 'itemid') {
                this.itemID = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'm') {
            if (name === 'method') {
                this.method = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'o') {
            if (name === 'offset') {
                this.offset = child.v; return true;
            }
            else if (name === 'orient') {
                this.orient = child.v; return true;
            }
            else if (name === 'origin') {
                this.origin = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'p') {
            if (name === 'poster') {
                this.poster = child.v; return true;
            }
            else if (name === 'points') {
                this.points = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'r') {
            if (name === 'radius') {
                this.radius = child.v; return true;
            }
            else if (name === 'result') {
                this.result = child.v; return true;
            }
            else if (name === 'rotate') {
                this.rotate = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'scoped') {
                this.scoped = child.v; return true;
            }
            else if (name === 'srcdoc') {
                this.srcDoc = child.v; return true;
            }
            else if (name === 'srcset') {
                this.srcSet = child.v; return true;
            }
            else if (name === 'static') {
                this.static = child.v; return true;
            }
            else if (name === 'string') {
                this.string = child.v; return true;
            }
            else if (name === 'stroke') {
                this.stroke = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 't') {
            if (name === 'target') {
                this.target = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'u') {
            if (name === 'usemap') {
                this.useMap = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'v') {
            if (name === 'values') {
                this.values = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'w') {
            if (name === 'widths') {
                this.widths = child.v; return true;
            }
        }
        if (_l == 7 && _ch == '@') {
            if (name === '@filter') {
                this._filter = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'a') {
            if (name === 'azimuth') {
                this.azimuth = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'c') {
            if (name === 'capture') {
                this.capture = child.v; return true;
            }
            else if (name === 'charset') {
                this.charSet = child.v; return true;
            }
            else if (name === 'checked') {
                this.checked = child.v; return true;
            }
            else if (name === 'classid') {
                this.classID = child.v; return true;
            }
            else if (name === 'colspan') {
                this.colSpan = child.v; return true;
            }
            else if (name === 'content') {
                this.content = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'd') {
            if (name === 'descent') {
                this.descent = child.v; return true;
            }
            else if (name === 'display') {
                this.display = child.v; return true;
            }
            else if (name === 'divisor') {
                this.divisor = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'e') {
            if (name === 'enctype') {
                this.encType = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'h') {
            if (name === 'headers') {
                this.headers = child.v; return true;
            }
            else if (name === 'htmlfor') {
                this.htmlFor = child.v; return true;
            }
            else if (name === 'hanging') {
                this.hanging = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'i') {
            if (name === 'itemref') {
                this.itemRef = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'k') {
            if (name === 'keytype') {
                this.keyType = child.v; return true;
            }
            else if (name === 'kerning') {
                this.kerning = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'o') {
            if (name === 'optimum') {
                this.optimum = child.v; return true;
            }
            else if (name === 'opacity') {
                this.opacity = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'p') {
            if (name === 'pattern') {
                this.pattern = child.v; return true;
            }
            else if (name === 'preload') {
                this.preload = child.v; return true;
            }
            else if (name === 'panose1') {
                this.panose1 = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'r') {
            if (name === 'results') {
                this.results = child.v; return true;
            }
            else if (name === 'rowspan') {
                this.rowSpan = child.v; return true;
            }
            else if (name === 'restart') {
                this.restart = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 's') {
            if (name === 'sandbox') {
                this.sandbox = child.v; return true;
            }
            else if (name === 'spacing') {
                this.spacing = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 't') {
            if (name === 'targetx') {
                this.targetX = child.v; return true;
            }
            else if (name === 'targety') {
                this.targetY = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'u') {
            if (name === 'unicode') {
                this.unicode = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'v') {
            if (name === 'version') {
                this.version = child.v; return true;
            }
            else if (name === 'viewbox') {
                this.viewBox = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'x') {
            if (name === 'xheight') {
                this.xHeight = child.v; return true;
            }
            else if (name === 'xmlbase') {
                this.xmlBase = child.v; return true;
            }
            else if (name === 'xmllang') {
                this.xmlLang = child.v; return true;
            }
        }
        if (_l == 8 && _ch == '@') {
            if (name === '@summary') {
                this._summary = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'a') {
            if (name === 'autosave') {
                this.autoSave = child.v; return true;
            }
            else if (name === 'autoplay') {
                this.autoPlay = child.v; return true;
            }
            else if (name === 'additive') {
                this.additive = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'c') {
            if (name === 'controls') {
                this.controls = child.v; return true;
            }
            else if (name === 'calcmode') {
                this.calcMode = child.v; return true;
            }
            else if (name === 'clippath') {
                this.clipPath = child.v; return true;
            }
            else if (name === 'cliprule') {
                this.clipRule = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'd') {
            if (name === 'datetime') {
                this.dateTime = child.v; return true;
            }
            else if (name === 'disabled') {
                this.disabled = child.v; return true;
            }
            else if (name === 'download') {
                this.download = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'e') {
            if (name === 'edgemode') {
                this.edgeMode = child.v; return true;
            }
            else if (name === 'exponent') {
                this.exponent = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'f') {
            if (name === 'fillrule') {
                this.fillRule = child.v; return true;
            }
            else if (name === 'fontsize') {
                this.fontSize = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'g') {
            if (name === 'glyphref') {
                this.glyphRef = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'h') {
            if (name === 'hreflang') {
                this.hrefLang = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'i') {
            if (name === 'itemprop') {
                this.itemProp = child.v; return true;
            }
            else if (name === 'itemtype') {
                this.itemType = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'k') {
            if (name === 'keytimes') {
                this.keyTimes = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'm') {
            if (name === 'manifest') {
                this.manifest = child.v; return true;
            }
            else if (name === 'multiple') {
                this.multiple = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'o') {
            if (name === 'operator') {
                this.operator = child.v; return true;
            }
            else if (name === 'overflow') {
                this.overflow = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'p') {
            if (name === 'property') {
                this.property = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'r') {
            if (name === 'readonly') {
                this.readOnly = child.v; return true;
            }
            else if (name === 'required') {
                this.required = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 's') {
            if (name === 'seamless') {
                this.seamless = child.v; return true;
            }
            else if (name === 'selected') {
                this.selected = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 't') {
            if (name === 'tabindex') {
                this.tabIndex = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'v') {
            if (name === 'vhanging') {
                this.vHanging = child.v; return true;
            }
            else if (name === 'vertadvy') {
                this.vertAdvY = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'x') {
            if (name === 'xmlspace') {
                this.xmlSpace = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'a') {
            if (name === 'accesskey') {
                this.accessKey = child.v; return true;
            }
            else if (name === 'autofocus') {
                this.autoFocus = child.v; return true;
            }
            else if (name === 'amplitude') {
                this.amplitude = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'c') {
            if (name === 'challenge') {
                this.challenge = child.v; return true;
            }
            else if (name === 'classname') {
                this.className = child.v; return true;
            }
            else if (name === 'capheight') {
                this.capHeight = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'd') {
            if (name === 'draggable') {
                this.draggable = child.v; return true;
            }
            else if (name === 'direction') {
                this.direction = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'e') {
            if (name === 'elevation') {
                this.elevation = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'f') {
            if (name === 'filterres') {
                this.filterRes = child.v; return true;
            }
            else if (name === 'focusable') {
                this.focusable = child.v; return true;
            }
            else if (name === 'fontstyle') {
                this.fontStyle = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'g') {
            if (name === 'glyphname') {
                this.glyphName = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'h') {
            if (name === 'httpequiv') {
                this.httpEquiv = child.v; return true;
            }
            else if (name === 'horizadvx') {
                this.horizAdvX = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'i') {
            if (name === 'itemscope') {
                this.itemScope = child.v; return true;
            }
            else if (name === 'inputmode') {
                this.inputMode = child.v; return true;
            }
            else if (name === 'intercept') {
                this.intercept = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'k') {
            if (name === 'keyparams') {
                this.keyParams = child.v; return true;
            }
            else if (name === 'keypoints') {
                this.keyPoints = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'm') {
            if (name === 'maxlength') {
                this.maxLength = child.v; return true;
            }
            else if (name === 'minlength') {
                this.minLength = child.v; return true;
            }
            else if (name === 'markerend') {
                this.markerEnd = child.v; return true;
            }
            else if (name === 'markermid') {
                this.markerMid = child.v; return true;
            }
            else if (name === 'maskunits') {
                this.maskUnits = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'p') {
            if (name === 'pointsatx') {
                this.pointsAtX = child.v; return true;
            }
            else if (name === 'pointsaty') {
                this.pointsAtY = child.v; return true;
            }
            else if (name === 'pointsatz') {
                this.pointsAtZ = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'r') {
            if (name === 'repeatdur') {
                this.repeatDur = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 's') {
            if (name === 'scrolling') {
                this.scrolling = child.v; return true;
            }
            else if (name === 'stopcolor') {
                this.stopColor = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 't') {
            if (name === 'transform') {
                this.transform = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'x') {
            if (name === 'xlinkhref') {
                this.xlinkHref = child.v; return true;
            }
            else if (name === 'xlinkrole') {
                this.xlinkRole = child.v; return true;
            }
            else if (name === 'xlinkshow') {
                this.xlinkShow = child.v; return true;
            }
            else if (name === 'xlinktype') {
                this.xlinkType = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'a') {
            if (name === 'accumulate') {
                this.accumulate = child.v; return true;
            }
            else if (name === 'alphabetic') {
                this.alphabetic = child.v; return true;
            }
            else if (name === 'arabicform') {
                this.arabicForm = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'd') {
            if (name === 'decelerate') {
                this.decelerate = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'f') {
            if (name === 'formaction') {
                this.formAction = child.v; return true;
            }
            else if (name === 'formmethod') {
                this.formMethod = child.v; return true;
            }
            else if (name === 'formtarget') {
                this.formTarget = child.v; return true;
            }
            else if (name === 'floodcolor') {
                this.floodColor = child.v; return true;
            }
            else if (name === 'fontfamily') {
                this.fontFamily = child.v; return true;
            }
            else if (name === 'fontweight') {
                this.fontWeight = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'k') {
            if (name === 'keysplines') {
                this.keySplines = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'm') {
            if (name === 'mediagroup') {
                this.mediaGroup = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'n') {
            if (name === 'novalidate') {
                this.noValidate = child.v; return true;
            }
            else if (name === 'numoctaves') {
                this.numOctaves = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'p') {
            if (name === 'paintorder') {
                this.paintOrder = child.v; return true;
            }
            else if (name === 'pathlength') {
                this.pathLength = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'r') {
            if (name === 'radiogroup') {
                this.radioGroup = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 's') {
            if (name === 'spellcheck') {
                this.spellCheck = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 't') {
            if (name === 'textanchor') {
                this.textAnchor = child.v; return true;
            }
            else if (name === 'textlength') {
                this.textLength = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'u') {
            if (name === 'unitsperem') {
                this.unitsPerEm = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'v') {
            if (name === 'viewtarget') {
                this.viewTarget = child.v; return true;
            }
            else if (name === 'visibility') {
                this.visibility = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'x') {
            if (name === 'xlinktitle') {
                this.xlinkTitle = child.v; return true;
            }
            else if (name === 'xmlnsxlink') {
                this.xmlnsXlink = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'z') {
            if (name === 'zoomandpan') {
                this.zoomAndPan = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'a') {
            if (name === 'autocorrect') {
                this.autoCorrect = child.v; return true;
            }
            else if (name === 'autoreverse') {
                this.autoReverse = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'b') {
            if (name === 'baseprofile') {
                this.baseProfile = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'c') {
            if (name === 'cellpadding') {
                this.cellPadding = child.v; return true;
            }
            else if (name === 'cellspacing') {
                this.cellSpacing = child.v; return true;
            }
            else if (name === 'contextmenu') {
                this.contextMenu = child.v; return true;
            }
            else if (name === 'crossorigin') {
                this.crossOrigin = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'f') {
            if (name === 'formenctype') {
                this.formEncType = child.v; return true;
            }
            else if (name === 'frameborder') {
                this.frameBorder = child.v; return true;
            }
            else if (name === 'fillopacity') {
                this.fillOpacity = child.v; return true;
            }
            else if (name === 'filterunits') {
                this.filterUnits = child.v; return true;
            }
            else if (name === 'fontstretch') {
                this.fontStretch = child.v; return true;
            }
            else if (name === 'fontvariant') {
                this.fontVariant = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'i') {
            if (name === 'ideographic') {
                this.ideographic = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'm') {
            if (name === 'marginwidth') {
                this.marginWidth = child.v; return true;
            }
            else if (name === 'markerstart') {
                this.markerStart = child.v; return true;
            }
            else if (name === 'markerunits') {
                this.markerUnits = child.v; return true;
            }
            else if (name === 'markerwidth') {
                this.markerWidth = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'o') {
            if (name === 'orientation') {
                this.orientation = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'p') {
            if (name === 'placeholder') {
                this.placeholder = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'r') {
            if (name === 'repeatcount') {
                this.repeatCount = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 's') {
            if (name === 'startoffset') {
                this.startOffset = child.v; return true;
            }
            else if (name === 'stitchtiles') {
                this.stitchTiles = child.v; return true;
            }
            else if (name === 'stopopacity') {
                this.stopOpacity = child.v; return true;
            }
            else if (name === 'strokewidth') {
                this.strokeWidth = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 't') {
            if (name === 'tablevalues') {
                this.tableValues = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'u') {
            if (name === 'unicodebidi') {
                this.unicodeBidi = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'v') {
            if (name === 'valphabetic') {
                this.vAlphabetic = child.v; return true;
            }
            else if (name === 'vertoriginx') {
                this.vertOriginX = child.v; return true;
            }
            else if (name === 'vertoriginy') {
                this.vertOriginY = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'w') {
            if (name === 'wordspacing') {
                this.wordSpacing = child.v; return true;
            }
            else if (name === 'writingmode') {
                this.writingMode = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 'a') {
            if (name === 'autocomplete') {
                this.autoComplete = child.v; return true;
            }
            else if (name === 'accentheight') {
                this.accentHeight = child.v; return true;
            }
            else if (name === 'allowreorder') {
                this.allowReorder = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 'c') {
            if (name === 'colorprofile') {
                this.colorProfile = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 'f') {
            if (name === 'floodopacity') {
                this.floodOpacity = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 'h') {
            if (name === 'horizoriginx') {
                this.horizOriginX = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 'k') {
            if (name === 'kernelmatrix') {
                this.kernelMatrix = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 'l') {
            if (name === 'lengthadjust') {
                this.lengthAdjust = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 'm') {
            if (name === 'marginheight') {
                this.marginHeight = child.v; return true;
            }
            else if (name === 'markerheight') {
                this.markerHeight = child.v; return true;
            }
            else if (name === 'mathematical') {
                this.mathematical = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 'p') {
            if (name === 'patternunits') {
                this.patternUnits = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 's') {
            if (name === 'spreadmethod') {
                this.spreadMethod = child.v; return true;
            }
            else if (name === 'stddeviation') {
                this.stdDeviation = child.v; return true;
            }
            else if (name === 'surfacescale') {
                this.surfaceScale = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 'u') {
            if (name === 'unselectable') {
                this.unselectable = child.v; return true;
            }
            else if (name === 'unicoderange') {
                this.unicodeRange = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 'v') {
            if (name === 'videographic') {
                this.vIdeographic = child.v; return true;
            }
            else if (name === 'vectoreffect') {
                this.vectorEffect = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 'x') {
            if (name === 'xlinkactuate') {
                this.xlinkActuate = child.v; return true;
            }
            else if (name === 'xlinkarcrole') {
                this.xlinkArcrole = child.v; return true;
            }
        }
        if (_l == 13 && _ch == 'a') {
            if (name === 'acceptcharset') {
                this.acceptCharset = child.v; return true;
            }
            else if (name === 'attributename') {
                this.attributeName = child.v; return true;
            }
            else if (name === 'attributetype') {
                this.attributeType = child.v; return true;
            }
        }
        if (_l == 13 && _ch == 'b') {
            if (name === 'basefrequency') {
                this.baseFrequency = child.v; return true;
            }
            else if (name === 'baselineshift') {
                this.baselineShift = child.v; return true;
            }
        }
        if (_l == 13 && _ch == 'c') {
            if (name === 'clippathunits') {
                this.clipPathUnits = child.v; return true;
            }
        }
        if (_l == 13 && _ch == 'g') {
            if (name === 'gradientunits') {
                this.gradientUnits = child.v; return true;
            }
        }
        if (_l == 13 && _ch == 'l') {
            if (name === 'letterspacing') {
                this.letterSpacing = child.v; return true;
            }
            else if (name === 'lightingcolor') {
                this.lightingColor = child.v; return true;
            }
        }
        if (_l == 13 && _ch == 'p') {
            if (name === 'pointerevents') {
                this.pointerEvents = child.v; return true;
            }
            else if (name === 'preservealpha') {
                this.preserveAlpha = child.v; return true;
            }
        }
        if (_l == 13 && _ch == 's') {
            if (name === 'strokelinecap') {
                this.strokeLinecap = child.v; return true;
            }
            else if (name === 'strokeopacity') {
                this.strokeOpacity = child.v; return true;
            }
        }
        if (_l == 13 && _ch == 't') {
            if (name === 'textrendering') {
                this.textRendering = child.v; return true;
            }
        }
        if (_l == 13 && _ch == 'v') {
            if (name === 'vmathematical') {
                this.vMathematical = child.v; return true;
            }
        }
        if (_l == 14 && _ch == 'a') {
            if (name === 'autocapitalize') {
                this.autoCapitalize = child.v; return true;
            }
        }
        if (_l == 14 && _ch == 'c') {
            if (name === 'colorrendering') {
                this.colorRendering = child.v; return true;
            }
        }
        if (_l == 14 && _ch == 'f') {
            if (name === 'formnovalidate') {
                this.formNoValidate = child.v; return true;
            }
            else if (name === 'fontsizeadjust') {
                this.fontSizeAdjust = child.v; return true;
            }
        }
        if (_l == 14 && _ch == 'i') {
            if (name === 'imagerendering') {
                this.imageRendering = child.v; return true;
            }
        }
        if (_l == 14 && _ch == 'p') {
            if (name === 'primitiveunits') {
                this.primitiveUnits = child.v; return true;
            }
        }
        if (_l == 14 && _ch == 's') {
            if (name === 'shaperendering') {
                this.shapeRendering = child.v; return true;
            }
            else if (name === 'strokelinejoin') {
                this.strokeLinejoin = child.v; return true;
            }
            else if (name === 'systemlanguage') {
                this.systemLanguage = child.v; return true;
            }
        }
        if (_l == 14 && _ch == 't') {
            if (name === 'textdecoration') {
                this.textDecoration = child.v; return true;
            }
        }
        if (_l == 15 && _ch == 'a') {
            if (name === 'allowfullscreen') {
                this.allowFullScreen = child.v; return true;
            }
        }
        if (_l == 15 && _ch == 'c') {
            if (name === 'contenteditable') {
                this.contentEditable = child.v; return true;
            }
        }
        if (_l == 15 && _ch == 'd') {
            if (name === 'diffuseconstant') {
                this.diffuseConstant = child.v; return true;
            }
        }
        if (_l == 15 && _ch == 'r') {
            if (name === 'renderingintent') {
                this.renderingIntent = child.v; return true;
            }
        }
        if (_l == 15 && _ch == 's') {
            if (name === 'strokedasharray') {
                this.strokeDasharray = child.v; return true;
            }
        }
        if (_l == 16 && _ch == 'c') {
            if (name === 'contentstyletype') {
                this.contentStyleType = child.v; return true;
            }
        }
        if (_l == 16 && _ch == 'd') {
            if (name === 'dominantbaseline') {
                this.dominantBaseline = child.v; return true;
            }
        }
        if (_l == 16 && _ch == 'e') {
            if (name === 'enablebackground') {
                this.enableBackground = child.v; return true;
            }
        }
        if (_l == 16 && _ch == 'k') {
            if (name === 'kernelunitlength') {
                this.kernelUnitLength = child.v; return true;
            }
        }
        if (_l == 16 && _ch == 'm') {
            if (name === 'maskcontentunits') {
                this.maskContentUnits = child.v; return true;
            }
        }
        if (_l == 16 && _ch == 'o') {
            if (name === 'overlineposition') {
                this.overlinePosition = child.v; return true;
            }
        }
        if (_l == 16 && _ch == 'p') {
            if (name === 'patterntransform') {
                this.patternTransform = child.v; return true;
            }
        }
        if (_l == 16 && _ch == 'r') {
            if (name === 'requiredfeatures') {
                this.requiredFeatures = child.v; return true;
            }
        }
        if (_l == 16 && _ch == 's') {
            if (name === 'specularconstant') {
                this.specularConstant = child.v; return true;
            }
            else if (name === 'specularexponent') {
                this.specularExponent = child.v; return true;
            }
            else if (name === 'strokedashoffset') {
                this.strokeDashoffset = child.v; return true;
            }
            else if (name === 'strokemiterlimit') {
                this.strokeMiterlimit = child.v; return true;
            }
        }
        if (_l == 16 && _ch == 'x') {
            if (name === 'xchannelselector') {
                this.xChannelSelector = child.v; return true;
            }
        }
        if (_l == 16 && _ch == 'y') {
            if (name === 'ychannelselector') {
                this.yChannelSelector = child.v; return true;
            }
        }
        if (_l == 17 && _ch == 'a') {
            if (name === 'allowtransparency') {
                this.allowTransparency = child.v; return true;
            }
            else if (name === 'alignmentbaseline') {
                this.alignmentBaseline = child.v; return true;
            }
        }
        if (_l == 17 && _ch == 'c') {
            if (name === 'contentscripttype') {
                this.contentScriptType = child.v; return true;
            }
        }
        if (_l == 17 && _ch == 'g') {
            if (name === 'gradienttransform') {
                this.gradientTransform = child.v; return true;
            }
        }
        if (_l == 17 && _ch == 'l') {
            if (name === 'limitingconeangle') {
                this.limitingConeAngle = child.v; return true;
            }
        }
        if (_l == 17 && _ch == 'o') {
            if (name === 'overlinethickness') {
                this.overlineThickness = child.v; return true;
            }
        }
        if (_l == 17 && _ch == 'u') {
            if (name === 'underlineposition') {
                this.underlinePosition = child.v; return true;
            }
        }
        if (_l == 18 && _ch == 'c') {
            if (name === 'colorinterpolation') {
                this.colorInterpolation = child.v; return true;
            }
        }
        if (_l == 18 && _ch == 'r') {
            if (name === 'requiredextensions') {
                this.requiredExtensions = child.v; return true;
            }
        }
        if (_l == 18 && _ch == 'u') {
            if (name === 'underlinethickness') {
                this.underlineThickness = child.v; return true;
            }
        }
        if (_l == 19 && _ch == 'p') {
            if (name === 'patterncontentunits') {
                this.patternContentUnits = child.v; return true;
            }
            else if (name === 'preserveaspectratio') {
                this.preserveAspectRatio = child.v; return true;
            }
        }
        if (_l == 21 && _ch == 's') {
            if (name === 'strikethroughposition') {
                this.strikethroughPosition = child.v; return true;
            }
        }
        if (_l == 22 && _ch == 's') {
            if (name === 'strikethroughthickness') {
                this.strikethroughThickness = child.v; return true;
            }
        }
        if (_l == 24 && _ch == 'g') {
            if (name === 'glyphorientationvertical') {
                this.glyphOrientationVertical = child.v; return true;
            }
        }
        if (_l == 25 && _ch == 'c') {
            if (name === 'colorinterpolationfilters') {
                this.colorInterpolationFilters = child.v; return true;
            }
        }
        if (_l == 25 && _ch == 'e') {
            if (name === 'externalresourcesrequired') {
                this.externalResourcesRequired = child.v; return true;
            }
        }
        if (_l == 26 && _ch == 'g') {
            if (name === 'glyphorientationhorizontal') {
                this.glyphOrientationHorizontal = child.v; return true;
            }
        }
        if (name.substr(0, 5) == "aria-") {
            this[name] = child.v;
            return true;
        }
        if (name.substr(0, 5) == "data-") {
            this[name] = child.v;
            return true;
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    htmlelement.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return htmlelement;
})(statement);

_md.htmlelement = htmlelement;
// element doctype
var doctype = (function (htmlelement) {
    _inherits(doctype, htmlelement);
    function doctype(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(doctype.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, doctype);
        this.wzElement = "doctype";
    }
    return doctype;
})(htmlelement);

_md.doctype = doctype;
// element htmlevent
var htmlevent = (function (htmlelement) {
    _inherits(htmlevent, htmlelement);
    function htmlevent(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(htmlevent.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, htmlevent);
        this.wzElement = "htmlevent";
        this.isEvent = true;
    }
    htmlevent.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 7 && _ch == 'i') {
            if (name === 'isevent') {
                this.isEvent = parseboolean(child.v, null, child); return true;
            }
        }
        ok = _md.htmlelement.prototype.loadChild.call(this, child);
        return ok;
    }
    htmlevent.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return htmlevent;
})(htmlelement);

_md.htmlevent = htmlevent;
// element js
var js = (function (htmlelement) {
    _inherits(js, htmlelement);
    function js(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(js.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, js);
        this.wzElement = "js";
    }
    return js;
})(htmlelement);

_md.js = js;
// element css
var css = (function (htmlelement) {
    _inherits(css, htmlelement);
    function css(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(css.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, css);
        this.wzElement = "css";
    }
    return css;
})(htmlelement);

_md.css = css;
// element styleJsx
var styleJsx = (function (htmlelement) {
    _inherits(styleJsx, htmlelement);
    function styleJsx(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(styleJsx.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, styleJsx);
        this.wzElement = "styleJsx";
        this.global = false;
        this.css_css_items = [];
    }
    styleJsx.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'c') {
            if (name === 'css') {
                // generated by wizzi/lib/wizzi/models/bootstrap/t/wfschema/t/element_load;
                this.css_css_items.push(child);
                var err, wizziModel;
                this.wzRoot().wzFactory.loadModelFromMtree( //;
                    'css',  //;
                    { nodes: [ child ], loadHistory: this.wzRoot().loadHistory }, //;
                    function(cberr, cbwizziModel) { //;
                        err = cberr;
                        wizziModel = cbwizziModel;
                    });
                this.get_css = function(callback) { //;
                    // We must wait until the async loadModelFromMtree(..) has returned a wizziModel or an err;
                    var iv = setInterval(function() { //;
                        if (err || wizziModel) { //;
                            clearInterval(iv);
                            if (callback) { //;
                                callback(err, wizziModel);
                                callback = null;
                            } //;
                        } //;
                    }, 100);
                };
                return true;
            }
        }
        if (_l == 6 && _ch == 'g') {
            if (name === 'global') {
                this.global = parseboolean(child.v, true, child); return true;
            }
        }
        ok = _md.htmlelement.prototype.loadChild.call(this, child);
        return ok;
    }
    styleJsx.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return styleJsx;
})(htmlelement);

_md.styleJsx = styleJsx;
// element htmlParam
var htmlParam = (function (htmlelement) {
    _inherits(htmlParam, htmlelement);
    function htmlParam(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(htmlParam.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, htmlParam);
        this.wzElement = "htmlParam";
    }
    return htmlParam;
})(htmlelement);

_md.htmlParam = htmlParam;
// element htmlFilter
var htmlFilter = (function (htmlelement) {
    _inherits(htmlFilter, htmlelement);
    function htmlFilter(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(htmlFilter.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, htmlFilter);
        this.wzElement = "htmlFilter";
    }
    return htmlFilter;
})(htmlelement);

_md.htmlFilter = htmlFilter;
// element ready
var ready = (function (statement) {
    _inherits(ready, statement);
    function ready(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ready.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ready);
        this.allowedKINDS = [ "jquery", "window"];
        this.KIND_JQUERY = "jquery";
        this.KIND_WINDOW = "window";
        this.wzElement = "ready";
        this.kind = "jquery";
    }
    ready.KIND_JQUERY = "jquery";ready.KIND_WINDOW = "window";ready.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'k') {
            if (name === 'kind') {
                this.kind = child.v; return true;
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    ready.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    ready.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("ready", "kind", this.kind, this.allowedKINDS, this);
        _md.statement.prototype.wzVerify.call(this, ctx);
    }
    return ready;
})(statement);

_md.ready = ready;
// element template
var template = (function (statement) {
    _inherits(template, statement);
    function template(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(template.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, template);
        this.wzElement = "template";
    }
    template.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.statements, i_len=this.statements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.statements[i];
            item.__templateChild = true;
        }
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return template;
})(statement);

_md.template = template;
// element taggedTemplate
var taggedTemplate = (function (statement) {
    _inherits(taggedTemplate, statement);
    function taggedTemplate(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(taggedTemplate.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, taggedTemplate);
        this.wzElement = "taggedTemplate";
    }
    taggedTemplate.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.statements, i_len=this.statements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.statements[i];
            item.__templateChild = true;
        }
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return taggedTemplate;
})(statement);

_md.taggedTemplate = taggedTemplate;
/**
    element tagFunctionCall
     ittf:
     _` fname
     + bla bla
     + bla bla
     js:
     fname`
     bla bla
     bla bla
     `;
*/
var tagFunctionCall = (function (statement) {
    _inherits(tagFunctionCall, statement);
    function tagFunctionCall(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(tagFunctionCall.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, tagFunctionCall);
        this.wzElement = "tagFunctionCall";
    }
    tagFunctionCall.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.statements, i_len=this.statements.length, item;
        for (i=0; i<i_len; i++) {
            item = this.statements[i];
            item.__templateChild = true;
        }
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return tagFunctionCall;
})(statement);

_md.tagFunctionCall = tagFunctionCall;
// element macroExpr
var macroExpr = (function (statement) {
    _inherits(macroExpr, statement);
    function macroExpr(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(macroExpr.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, macroExpr);
        this.wzElement = "macroExpr";
    }
    return macroExpr;
})(statement);

_md.macroExpr = macroExpr;
/**
    element log
     ittf:
     log 'xxx', yyy, ...
     js:
     console.log( 'xxx', yyy, ... );
    
*/
var log = (function (statement) {
    _inherits(log, statement);
    function log(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(log.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, log);
        this.wzElement = "log";
    }
    return log;
})(statement);

_md.log = log;
/**
    element inspect
     TODO ensure require('util')
     ittf:
     log? xxx
     js:
     console.log('xxx', util.inspect(xxx, { depth: null } );
    
     ittf:
     log? label xxx
     js:
     console.log('label', util.inspect(xxx, { depth: null } );
    
*/
var inspect = (function (statement) {
    _inherits(inspect, statement);
    function inspect(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(inspect.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, inspect);
        this.wzElement = "inspect";
    }
    return inspect;
})(statement);

_md.inspect = inspect;
/**
    element warn
     ittf:
     warn 'xxx', yyy, ...
     js:
     console.warn( 'xxx', yyy, ... );
    
*/
var warn = (function (statement) {
    _inherits(warn, statement);
    function warn(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(warn.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, warn);
        this.wzElement = "warn";
    }
    return warn;
})(statement);

_md.warn = warn;
/**
    element error
     ittf:
     error 'xxx', yyy, ...
     js:
     console.error( 'xxx', yyy, ... );
    
*/
var error = (function (statement) {
    _inherits(error, statement);
    function error(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(error.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, error);
        this.wzElement = "error";
    }
    return error;
})(statement);

_md.error = error;
/**
    element chalk
     TODO ensure require('chalk')
     ittf:
     chalk green 'xxx'
     chalk green 'obj', red obj.name
     js:
     console.log(chalk.green('xxx');
     console.log(chalk.green('obj'), chalk.red(obj.name));
    
*/
var chalk = (function (statement) {
    _inherits(chalk, statement);
    function chalk(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(chalk.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, chalk);
        this.wzElement = "chalk";
    }
    return chalk;
})(statement);

_md.chalk = chalk;
// element typeSimple
var typeSimple = (function (statement) {
    _inherits(typeSimple, statement);
    function typeSimple(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeSimple.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeSimple);
        this.wzElement = "typeSimple";
    }
    typeSimple.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    typeSimple.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return typeSimple;
})(statement);

_md.typeSimple = typeSimple;
// element typeNumber
var typeNumber = (function (typeSimple) {
    _inherits(typeNumber, typeSimple);
    function typeNumber(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeNumber.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeNumber);
        this.wzElement = "typeNumber";
    }
    return typeNumber;
})(typeSimple);

_md.typeNumber = typeNumber;
// element typeString
var typeString = (function (typeSimple) {
    _inherits(typeString, typeSimple);
    function typeString(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeString.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeString);
        this.wzElement = "typeString";
    }
    return typeString;
})(typeSimple);

_md.typeString = typeString;
// element typeBoolean
var typeBoolean = (function (typeSimple) {
    _inherits(typeBoolean, typeSimple);
    function typeBoolean(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeBoolean.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeBoolean);
        this.wzElement = "typeBoolean";
    }
    return typeBoolean;
})(typeSimple);

_md.typeBoolean = typeBoolean;
// element typeAny
var typeAny = (function (typeSimple) {
    _inherits(typeAny, typeSimple);
    function typeAny(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeAny.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeAny);
        this.wzElement = "typeAny";
    }
    return typeAny;
})(typeSimple);

_md.typeAny = typeAny;
// element typeArray
var typeArray = (function (typeSimple) {
    _inherits(typeArray, typeSimple);
    function typeArray(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeArray.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeArray);
        this.wzElement = "typeArray";
    }
    return typeArray;
})(typeSimple);

_md.typeArray = typeArray;
// element typeObject
var typeObject = (function (typeSimple) {
    _inherits(typeObject, typeSimple);
    function typeObject(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeObject.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeObject);
        this.wzElement = "typeObject";
    }
    return typeObject;
})(typeSimple);

_md.typeObject = typeObject;
// element typeObjectLiteral
var typeObjectLiteral = (function (typeSimple) {
    _inherits(typeObjectLiteral, typeSimple);
    function typeObjectLiteral(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeObjectLiteral.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeObjectLiteral);
        this.wzElement = "typeObjectLiteral";
    }
    return typeObjectLiteral;
})(typeSimple);

_md.typeObjectLiteral = typeObjectLiteral;
// element typeObjectValue
var typeObjectValue = (function (statement) {
    _inherits(typeObjectValue, statement);
    function typeObjectValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeObjectValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeObjectValue);
        this.wzElement = "typeObjectValue";
    }
    return typeObjectValue;
})(statement);

_md.typeObjectValue = typeObjectValue;
// element typeVoid
var typeVoid = (function (typeSimple) {
    _inherits(typeVoid, typeSimple);
    function typeVoid(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeVoid.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeVoid);
        this.wzElement = "typeVoid";
    }
    return typeVoid;
})(typeSimple);

_md.typeVoid = typeVoid;
// element typeNull
var typeNull = (function (typeSimple) {
    _inherits(typeNull, typeSimple);
    function typeNull(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeNull.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeNull);
        this.wzElement = "typeNull";
    }
    return typeNull;
})(typeSimple);

_md.typeNull = typeNull;
// element typeUndefined
var typeUndefined = (function (typeSimple) {
    _inherits(typeUndefined, typeSimple);
    function typeUndefined(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeUndefined.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeUndefined);
        this.wzElement = "typeUndefined";
    }
    return typeUndefined;
})(typeSimple);

_md.typeUndefined = typeUndefined;
// element typeNever
var typeNever = (function (typeSimple) {
    _inherits(typeNever, typeSimple);
    function typeNever(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeNever.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeNever);
        this.wzElement = "typeNever";
    }
    return typeNever;
})(typeSimple);

_md.typeNever = typeNever;
// element typeTypeof
var typeTypeof = (function (typeSimple) {
    _inherits(typeTypeof, typeSimple);
    function typeTypeof(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeTypeof.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeTypeof);
        this.wzElement = "typeTypeof";
    }
    return typeTypeof;
})(typeSimple);

_md.typeTypeof = typeTypeof;
// element typeAs
var typeAs = (function (typeSimple) {
    _inherits(typeAs, typeSimple);
    function typeAs(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeAs.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeAs);
        this.wzElement = "typeAs";
    }
    return typeAs;
})(typeSimple);

_md.typeAs = typeAs;
// element typeInitValue
var typeInitValue = (function (statement) {
    _inherits(typeInitValue, statement);
    function typeInitValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeInitValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeInitValue);
        this.wzElement = "typeInitValue";
    }
    return typeInitValue;
})(statement);

_md.typeInitValue = typeInitValue;
// element typeParameterDecl
var typeParameterDecl = (function (statement) {
    _inherits(typeParameterDecl, statement);
    function typeParameterDecl(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeParameterDecl.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeParameterDecl);
        this.wzElement = "typeParameterDecl";
    }
    return typeParameterDecl;
})(statement);

_md.typeParameterDecl = typeParameterDecl;
// element typeEnum
var typeEnum = (function (statement) {
    _inherits(typeEnum, statement);
    function typeEnum(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeEnum.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeEnum);
        this.wzElement = "typeEnum";
    }
    return typeEnum;
})(statement);

_md.typeEnum = typeEnum;
// element typeArrowFunction
var typeArrowFunction = (function (xfunction) {
    _inherits(typeArrowFunction, xfunction);
    function typeArrowFunction(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeArrowFunction.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeArrowFunction);
        this.wzElement = "typeArrowFunction";
    }
    return typeArrowFunction;
})(xfunction);

_md.typeArrowFunction = typeArrowFunction;
// element typeReturn
var typeReturn = (function (statement) {
    _inherits(typeReturn, statement);
    function typeReturn(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeReturn.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeReturn);
        this.wzElement = "typeReturn";
    }
    return typeReturn;
})(statement);

_md.typeReturn = typeReturn;
// element typeTuple
var typeTuple = (function (statement) {
    _inherits(typeTuple, statement);
    function typeTuple(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeTuple.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeTuple);
        this.wzElement = "typeTuple";
    }
    return typeTuple;
})(statement);

_md.typeTuple = typeTuple;
// element typeUnion
var typeUnion = (function (statement) {
    _inherits(typeUnion, statement);
    function typeUnion(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeUnion.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeUnion);
        this.wzElement = "typeUnion";
    }
    return typeUnion;
})(statement);

_md.typeUnion = typeUnion;
// element typeIntersect
var typeIntersect = (function (statement) {
    _inherits(typeIntersect, statement);
    function typeIntersect(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeIntersect.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeIntersect);
        this.wzElement = "typeIntersect";
    }
    return typeIntersect;
})(statement);

_md.typeIntersect = typeIntersect;
// element typeReference
var typeReference = (function (statement) {
    _inherits(typeReference, statement);
    function typeReference(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeReference.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeReference);
        this.wzElement = "typeReference";
        // relation typeParameterInst
        this.typeParameterInsts = [];
    }
    typeReference.prototype.addTypeParameterInst = function(name, sourceLineInfo) {
        var retval = new _md.typeParameterInst(name, sourceLineInfo);
        retval.wzParent = this;
        this.typeParameterInsts.push(retval);
        return retval;
    }
    typeReference.prototype.getTypeParameterInst = function(name) {
        var found = null;
        this.typeParameterInsts.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    typeReference.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 6 && _ch == ':') {
            if (name === ':param') {
                return this.wzLoadToChildColl(child, _md.typeParameterInst, this.typeParameterInsts);
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    typeReference.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    typeReference.prototype.wzVerify = function(ctx) {
        var i, i_items=this.typeParameterInsts, i_len=this.typeParameterInsts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeParameterInsts[i];
            item.wzVerify(ctx);
        }
        _md.statement.prototype.wzVerify.call(this, ctx);
    }
    typeReference.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.typeParameterInsts, i_len=this.typeParameterInsts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeParameterInsts[i];
            item.wzInitialize(ctx);
        }
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return typeReference;
})(statement);

_md.typeReference = typeReference;
// element typeLiteral
var typeLiteral = (function (statement) {
    _inherits(typeLiteral, statement);
    function typeLiteral(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeLiteral.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeLiteral);
        this.wzElement = "typeLiteral";
    }
    return typeLiteral;
})(statement);

_md.typeLiteral = typeLiteral;
// element typeCallSignature
var typeCallSignature = (function (statement) {
    _inherits(typeCallSignature, statement);
    function typeCallSignature(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeCallSignature.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeCallSignature);
        this.wzElement = "typeCallSignature";
        // relation param
        this.params = [];
    }
    typeCallSignature.prototype.addParam = function(name, sourceLineInfo) {
        var retval = new _md.param(name, sourceLineInfo);
        retval.wzParent = this;
        this.params.push(retval);
        return retval;
    }
    typeCallSignature.prototype.getParam = function(name) {
        var found = null;
        this.params.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    typeCallSignature.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '{') {
            if (name === '{') {
                return this.wzLoadToChildColl(child, _md.objectParam, this.params);
            }
        }
        if (_l == 5 && _ch == 'p') {
            if (name === 'param') {
                return this.wzLoadToChildColl(child, _md.param, this.params);
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    typeCallSignature.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    typeCallSignature.prototype.wzVerify = function(ctx) {
        var i, i_items=this.params, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzVerify(ctx);
        }
        _md.statement.prototype.wzVerify.call(this, ctx);
    }
    typeCallSignature.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.params, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzInitialize(ctx);
        }
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return typeCallSignature;
})(statement);

_md.typeCallSignature = typeCallSignature;
// element typeKeyOf
var typeKeyOf = (function (statement) {
    _inherits(typeKeyOf, statement);
    function typeKeyOf(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeKeyOf.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeKeyOf);
        this.wzElement = "typeKeyOf";
    }
    return typeKeyOf;
})(statement);

_md.typeKeyOf = typeKeyOf;
// element typePredicate
var typePredicate = (function (statement) {
    _inherits(typePredicate, statement);
    function typePredicate(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typePredicate.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typePredicate);
        this.wzElement = "typePredicate";
    }
    return typePredicate;
})(statement);

_md.typePredicate = typePredicate;
// element typeNotNull
var typeNotNull = (function (statement) {
    _inherits(typeNotNull, statement);
    function typeNotNull(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeNotNull.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeNotNull);
        this.wzElement = "typeNotNull";
    }
    return typeNotNull;
})(statement);

_md.typeNotNull = typeNotNull;
// element typeCTorDeclare
var typeCTorDeclare = (function (statement) {
    _inherits(typeCTorDeclare, statement);
    function typeCTorDeclare(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeCTorDeclare.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeCTorDeclare);
        this.wzElement = "typeCTorDeclare";
        // relation param
        this.params = [];
    }
    typeCTorDeclare.prototype.addParam = function(name, sourceLineInfo) {
        var retval = new _md.param(name, sourceLineInfo);
        retval.wzParent = this;
        this.params.push(retval);
        return retval;
    }
    typeCTorDeclare.prototype.getParam = function(name) {
        var found = null;
        this.params.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    typeCTorDeclare.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '{') {
            if (name === '{') {
                return this.wzLoadToChildColl(child, _md.objectParam, this.params);
            }
        }
        if (_l == 5 && _ch == 'p') {
            if (name === 'param') {
                return this.wzLoadToChildColl(child, _md.param, this.params);
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    typeCTorDeclare.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    typeCTorDeclare.prototype.wzVerify = function(ctx) {
        var i, i_items=this.params, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzVerify(ctx);
        }
        _md.statement.prototype.wzVerify.call(this, ctx);
    }
    typeCTorDeclare.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.params, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzInitialize(ctx);
        }
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return typeCTorDeclare;
})(statement);

_md.typeCTorDeclare = typeCTorDeclare;
// element typeCTor
var typeCTor = (function (statement) {
    _inherits(typeCTor, statement);
    function typeCTor(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeCTor.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeCTor);
        this.wzElement = "typeCTor";
    }
    return typeCTor;
})(statement);

_md.typeCTor = typeCTor;
// element typeIndexedAccess
var typeIndexedAccess = (function (statement) {
    _inherits(typeIndexedAccess, statement);
    function typeIndexedAccess(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeIndexedAccess.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeIndexedAccess);
        this.wzElement = "typeIndexedAccess";
    }
    return typeIndexedAccess;
})(statement);

_md.typeIndexedAccess = typeIndexedAccess;
// element typeIndex
var typeIndex = (function (statement) {
    _inherits(typeIndex, statement);
    function typeIndex(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeIndex.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeIndex);
        this.wzElement = "typeIndex";
        this.typeReadonly = false;
        // relation param
        this.params = [];
    }
    typeIndex.prototype.addParam = function(name, sourceLineInfo) {
        var retval = new _md.param(name, sourceLineInfo);
        retval.wzParent = this;
        this.params.push(retval);
        return retval;
    }
    typeIndex.prototype.getParam = function(name) {
        var found = null;
        this.params.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    typeIndex.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '{') {
            if (name === '{') {
                return this.wzLoadToChildColl(child, _md.objectParam, this.params);
            }
        }
        if (_l == 5 && _ch == 'p') {
            if (name === 'param') {
                return this.wzLoadToChildColl(child, _md.param, this.params);
            }
        }
        if (_l == 9 && _ch == ':') {
            if (name === ':readonly') {
                this.typeReadonly = parseboolean(child.v, true, child); return true;
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    typeIndex.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    typeIndex.prototype.wzVerify = function(ctx) {
        var i, i_items=this.params, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzVerify(ctx);
        }
        _md.statement.prototype.wzVerify.call(this, ctx);
    }
    typeIndex.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.params, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzInitialize(ctx);
        }
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return typeIndex;
})(statement);

_md.typeIndex = typeIndex;
// element typeCheck
var typeCheck = (function (statement) {
    _inherits(typeCheck, statement);
    function typeCheck(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeCheck.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeCheck);
        this.wzElement = "typeCheck";
    }
    return typeCheck;
})(statement);

_md.typeCheck = typeCheck;
// element typeThen
var typeThen = (function (statement) {
    _inherits(typeThen, statement);
    function typeThen(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeThen.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeThen);
        this.wzElement = "typeThen";
    }
    return typeThen;
})(statement);

_md.typeThen = typeThen;
// element typeElse
var typeElse = (function (statement) {
    _inherits(typeElse, statement);
    function typeElse(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeElse.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeElse);
        this.wzElement = "typeElse";
    }
    return typeElse;
})(statement);

_md.typeElse = typeElse;
// element typeConditional
var typeConditional = (function (statement) {
    _inherits(typeConditional, statement);
    function typeConditional(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeConditional.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeConditional);
        this.wzElement = "typeConditional";
        // relation typeCheck
        this.typeCheck = null;
        // relation typeExtends
        this.typeExtends = null;
        // relation typeThen
        this.typeThen = null;
        // relation typeElse
        this.typeElse = null;
    }
    typeConditional.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == ':') {
            if (name === ':then') {
                return this.wzLoadOneToOne(child, _md.typeThen, 'typeThen');
            }
            else if (name === ':else') {
                return this.wzLoadOneToOne(child, _md.typeElse, 'typeElse');
            }
        }
        if (_l == 6 && _ch == ':') {
            if (name === ':check') {
                return this.wzLoadOneToOne(child, _md.typeCheck, 'typeCheck');
            }
        }
        if (_l == 8 && _ch == ':') {
            if (name === ':extends') {
                return this.wzLoadOneToOne(child, _md.typeExtends, 'typeExtends');
            }
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    typeConditional.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.tsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    typeConditional.prototype.wzVerify = function(ctx) {
        if (this.typeCheck != null) {
            this.typeCheck.wzVerify(ctx);
        }
        if (this.typeExtends != null) {
            this.typeExtends.wzVerify(ctx);
        }
        if (this.typeThen != null) {
            this.typeThen.wzVerify(ctx);
        }
        if (this.typeElse != null) {
            this.typeElse.wzVerify(ctx);
        }
        _md.statement.prototype.wzVerify.call(this, ctx);
    }
    typeConditional.prototype.wzInitialize = function(ctx) {
        if (this.typeCheck != null) {
            this.typeCheck.wzInitialize(ctx);
        }
        if (this.typeExtends != null) {
            this.typeExtends.wzInitialize(ctx);
        }
        if (this.typeThen != null) {
            this.typeThen.wzInitialize(ctx);
        }
        if (this.typeElse != null) {
            this.typeElse.wzInitialize(ctx);
        }
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return typeConditional;
})(statement);

_md.typeConditional = typeConditional;
// element typeParenthesized
var typeParenthesized = (function (statement) {
    _inherits(typeParenthesized, statement);
    function typeParenthesized(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeParenthesized.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeParenthesized);
        this.wzElement = "typeParenthesized";
    }
    return typeParenthesized;
})(statement);

_md.typeParenthesized = typeParenthesized;
// element typeInfer
var typeInfer = (function (statement) {
    _inherits(typeInfer, statement);
    function typeInfer(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeInfer.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeInfer);
        this.wzElement = "typeInfer";
    }
    return typeInfer;
})(statement);

_md.typeInfer = typeInfer;
// element typeParameterInst
var typeParameterInst = (function (statement) {
    _inherits(typeParameterInst, statement);
    function typeParameterInst(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeParameterInst.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeParameterInst);
        this.wzElement = "typeParameterInst";
    }
    return typeParameterInst;
})(statement);

_md.typeParameterInst = typeParameterInst;
// element typeExportAssignment
var typeExportAssignment = (function (tsBase) {
    _inherits(typeExportAssignment, tsBase);
    function typeExportAssignment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeExportAssignment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeExportAssignment);
        this.wzElement = "typeExportAssignment";
    }
    return typeExportAssignment;
})(tsBase);

_md.typeExportAssignment = typeExportAssignment;
// element typeImportEqualsDeclaration
var typeImportEqualsDeclaration = (function (tsBase) {
    _inherits(typeImportEqualsDeclaration, tsBase);
    function typeImportEqualsDeclaration(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeImportEqualsDeclaration.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeImportEqualsDeclaration);
        this.wzElement = "typeImportEqualsDeclaration";
    }
    return typeImportEqualsDeclaration;
})(tsBase);

_md.typeImportEqualsDeclaration = typeImportEqualsDeclaration;
// element typeNamespaceExportDeclaration
var typeNamespaceExportDeclaration = (function (tsBase) {
    _inherits(typeNamespaceExportDeclaration, tsBase);
    function typeNamespaceExportDeclaration(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeNamespaceExportDeclaration.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeNamespaceExportDeclaration);
        this.wzElement = "typeNamespaceExportDeclaration";
    }
    return typeNamespaceExportDeclaration;
})(tsBase);

_md.typeNamespaceExportDeclaration = typeNamespaceExportDeclaration;
// element typeExternalModuleReference
var typeExternalModuleReference = (function (tsBase) {
    _inherits(typeExternalModuleReference, tsBase);
    function typeExternalModuleReference(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeExternalModuleReference.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeExternalModuleReference);
        this.wzElement = "typeExternalModuleReference";
    }
    return typeExternalModuleReference;
})(tsBase);

_md.typeExternalModuleReference = typeExternalModuleReference;
_md.__tagElementMapping = { '+': 'statement', '#': 'comment', 'var': 'xvar', 'const': 'xconst', 'let': 'xlet', '=': 'initValue', '@id': 'identifier', '@expr': 'expressionMember', 'void': 'xvoid', 'op!': 'not', '||': 'or', 'op||': 'or', '&&': 'and', 'op&&': 'and', '===': 'op_eq_strict', 'op===': 'op_eq_strict', '!==': 'op_noteq_strict', 'op!==': 'op_noteq_strict', '==': 'op_eq', 'op==': 'op_eq', '!=': 'op_noteq', 'op!=': 'op_noteq', 'minus': 'op_minus', 'op-': 'op_minus', 'op': 'op_minus', 'plus': 'op_plus', 'op+': 'op_plus', 'times': 'op_times', 'op*': 'op_times', 'divide': 'op_div', 'op/': 'op_div', 'power': 'op_power', 'op**': 'op_power', 'mod': 'op_mod', 'op&': 'bit_and', 'op|': 'bit_or', 'xor': 'op_xor', 'op^': 'op_xor', 'xand': 'op_xand', 'op~': 'bit_not', 'op<<': 'bit_left_shift', 'op>>': 'bit_right_shift', 'op>>>': 'zero_fill_right_shift', 'gt': 'op_gt', 'op>': 'op_gt', '>=': 'op_ge', 'op>=': 'op_ge', 'lt': 'op_lt', 'op<': 'op_lt', '<=': 'op_le', 'op<=': 'op_le', 'require': 'xrequire', 'import': 'ximport', ':import': 'typeImport', 'export': 'xexport', 'export-default': 'exportDefault', 'exportdefault': 'exportDefault', ':export': 'typeExport', ':export-ns': 'typeExportNamespace', ':exportns': 'typeExportNamespace', ':require': 'typeRequire', 'if': 'xif', 'else': 'xelse', 'for': 'xfor', 'break': 'xbreak', 'continue': 'xcontinue', 'while': 'xwhile', 'do': 'xdo', 'switch': 'xswitch', 'case': 'xcase', 'default': 'xdefault', 'try': 'xtry', 'catch': 'xcatch', 'finally': 'xfinally', 'throw': 'xthrow', 'delete': 'xdelete', ':param': 'typeParameterInst', '_': 'call', '._': 'memberCall', '@_': 'decoratorCall', '(': 'callOnValue', '.': 'memberAccess', '.[': 'memberAccessComputed', '{': 'jsObject', '[': 'jsArray', '@': 'jsPropertyOrValue', '...': 'jsRest', ':': 'namedCallParam', 'jst': 'jsonStatementTree', 'function': 'xfunction', '=>': 'arrowfunction', 'async=>': 'asyncarrowfunction', 'function*': 'generatorfunction', 'async-function': 'asyncfunction', ':m': 'typeMethod', 'm': 'method', ':=>': 'typeArrowFunction', 'yield': 'xyield', 'await': 'xawait', 'return': 'xreturn', ':declare': 'typeDeclare', ':module': 'typeModule', ':type': 'typeTypeAlias', ':function': 'typeFunctionDeclare', ':interface': 'typeInterface', ':extends': 'typeExtends', ':p': 'typeProperty', ':mapped': 'typeMapped', ':conditional': 'typeConditional', ':implements': 'typeImplements', 'class': 'xclass', 'super': 'superType', 'new': 'xnew', 'react': 'reactComponent', 'react-f': 'reactFunction', 'reactf': 'reactFunction', 'set-state': 'setState', 'setstate': 'setState', 'will-mount': 'willMount', 'willmount': 'willMount', 'did-mount': 'didMount', 'didmount': 'didMount', 'will-unmount': 'willUnmount', 'willunmount': 'willUnmount', 'should-update': 'shouldUpdate', 'shouldupdate': 'shouldUpdate', 'did-update': 'didUpdate', 'didupdate': 'didUpdate', 'will-update': 'willUpdate', 'willupdate': 'willUpdate', 'will-receive-props': 'willReceiveProps', 'willreceiveprops': 'willReceiveProps', 'event': 'htmlevent', '<': 'htmlelement', 'style-jsx': 'styleJsx', 'stylejsx': 'styleJsx', '@param': 'htmlParam', '@filter': 'htmlFilter', '`lit': 'template', '`tag': 'taggedTemplate', '_`': 'tagFunctionCall', 'macro': 'macroExpr', 'log?': 'inspect', ':number': 'typeNumber', ':string': 'typeString', ':boolean': 'typeBoolean', ':any': 'typeAny', ':[': 'typeArray', ':object': 'typeObject', ':{': 'typeObjectLiteral', ':void': 'typeVoid', ':null': 'typeNull', ':undefined': 'typeUndefined', ':never': 'typeNever', ':typeof': 'typeTypeof', ':as': 'typeAs', ':@': 'typeObjectValue', ':=': 'typeInitValue', ':<': 'typeParameterDecl', ':enum': 'typeEnum', ':return': 'typeReturn', ':tuple': 'typeTuple', ':union': 'typeUnion', ':intersect': 'typeIntersect', ':ref': 'typeReference', ':literal': 'typeLiteral', ':call': 'typeCallSignature', ':keyof': 'typeKeyOf', ':predicate': 'typePredicate', ':!': 'typeNotNull', ':new': 'typeCTorDeclare', ':ctor': 'typeCTor', ':[]': 'typeIndexedAccess', ':index': 'typeIndex', ':check': 'typeCheck', ':then': 'typeThen', ':else': 'typeElse', ':iif': 'typeConditional', ':paren': 'typeParenthesized', ':infer': 'typeInfer' };
// model/replaceUnknownElement( )
var tsModelException = (function () {
    function tsModelException(message, node, instance) {
        _classCallCheck(this, tsModelException);
        // TODO node seems superflous
        if (node && instance) {
            this.message = message + ', wzElement: ' + node.wzElement + ', wzName:' + (node.wzName || '') + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
            this.errorLines = instance.wzSourceErrorLines(node, message);
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        console.log('message', this.message);
        this.stack = (new Error()).stack;
        this.node = node;
    }
    return tsModelException;
})();

_md.tsModelException = tsModelException;
var tsContext = (function () {
    function tsContext() {
        _classCallCheck(this, tsContext);
        this.validationErrors = [];
    }
    tsContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    tsContext.prototype.addError = function(message, node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at);
    }
    tsContext.prototype.verifyEnum = function(valueType, valueName, value, allowed, node) {
        if (value && allowed.indexOf(value) < 0) {
            var allowedStr = 'allowed: ' + allowed.join(', ');
            this.validationErrors.push(valueType + ' ' + valueName + ' has an invalid value: ' + value + ' ' + allowedStr + '. At ' + (node.wzSourceLineInfo ? node.wzSourceLineInfo.toString(node) : 'location unavailable'));
        }
    }
    return tsContext;
})();

_md.tsContext = tsContext;
function parsestring(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}
function parseboolean(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    if (!isBoolean(value)) {
        throw new tsModelException('Must be a boolean value (\"true\" or \"false\"), got:' + value, node);
    }
    return value === 'true' ? true : false;
}
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}
function isBoolean(value) {
    return value === 'true' || value === 'false';
}

