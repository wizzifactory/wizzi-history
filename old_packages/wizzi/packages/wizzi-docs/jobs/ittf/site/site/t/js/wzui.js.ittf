$group

	iife
		var wzui = window.wzui = {}

		var rclass = /[\n\t\r]/g
		var rnotwhite = (/\S+/g)

		set wzui.element
			function
				param element
				return typeof element === 'string' ? document.querySelector(element) : element

		set wzui.hasClass
			function
				param element
				param selector
				if (" " + element.className + " ").replace(rclass, " ").indexOf(" " + selector + " ") > -1
					return true
				return false

		set wzui.addClass
			function
				param element
				param value

				var classes, cur, finalValue

				if value && typeof value === "string"

					set classes = ( value || "" ).match( rnotwhite ) || []
					if !element.className && classes.length === 1
						set element.className = value
				
					else
				
						set cur = " " + element.className + " "
				
						foreach clazz in classes
							if cur.indexOf( " " + clazz + " " ) < 0
								set cur += clazz + " "
				
						set finalValue = cur.trim()
						if element.className !== finalValue
							set element.className = finalValue

		set wzui.removeClass
			function
				param element
				param value

				var classes, cur, finalValue

				if value && typeof value === "string"

					set classes = ( value || "" ).match( rnotwhite ) || []

					set cur = element.className ? ( " " + element.className + " " ).replace( rclass, " " ) : ""

					foreach clazz in classes
						while cur.indexOf( " " + clazz + " " ) >= 0 
							set cur = cur.replace( " " + clazz + " ", " " )

					set finalValue = cur.trim()
					if element.className !== finalValue
						set element.className = finalValue

		set wzui.text
			function
				param element
				param value
				if typeof value === 'undefined'
					return element.textContent
				elif element.textContent !== value
					set element.textContent = value

			
		set wzui.click
			function
				param element
				param handler
				param useCapture
				_ window.addEvent
					@ wzui.element(element)
					@ 'click'
					@ handler
					@ useCapture
			
		set wzui.contentLoaded
			function
				param fn
				# from Diego Perini https://raw.githubusercontent.com/dperini/ContentLoaded/master/src/contentloaded.js
				var 
					decl done = false
					decl top = true
					decl doc = window.document
					decl root = doc.documentElement
					decl modern = doc.addEventListener
					decl add = modern ? 'addEventListener' : 'attachEvent'
					decl rem = modern ? 'removeEventListener' : 'detachEvent'
					decl pre = modern ? '' : 'on'
					decl init
						function 
							param e
							if (e.type == 'readystatechange') && (doc.readyState != 'complete')
								return 
							_ (e.type == 'load' ? window : doc)[rem]((pre + e.type), init, false)
							if !(done) && (done = true)
								_ fn.call(window, (e.type || e))
					decl poll
						function 
							try 
								_ root.doScroll('left')
							catch e
								_ setTimeout(poll, 50)
								return 
							_ init('poll')
				if doc.readyState == 'complete'
					_ fn.call(window, 'lazy')
				else 
					if !(modern) && root.doScroll
						try 
							set top = ! (window.frameElement)
						catch e
						if top
							_ poll()
					_ doc[add]((pre + 'DOMContentLoaded'), init, false)
					_ doc[add]((pre + 'readystatechange'), init, false)
					_ window[add]((pre + 'load'), init, false)
		(