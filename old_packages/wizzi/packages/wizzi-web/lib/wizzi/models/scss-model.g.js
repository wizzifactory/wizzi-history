/*
    artifact generator: C:\My\wizzi\v6\node_modules\wizzi-legacy-v5\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\v6\node_modules\wizzi-core\lib\artifacts\wfschema\model\gen\ittf\wfschema-model.js.ittf
    utc time: Sat, 22 Dec 2018 13:51:59 GMT
*/
'use strict';
// generated by v5-wizzi-js.artifacts.js.module.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var wzutils = require('wizzi-utils');
var verify = wzutils.verify;
/**
     Schema wide declarations
*/
var ruleSelectors = [
    'typeRule', 
    'classRule', 
    'idRule', 
    'parentRule', 
    'combinator'
];
function isRuleSelector(el) {
    return ruleSelectors.indexOf(el) > -1;
}
function getSelectorName(model) {
    if (model.wzElement === 'typeRule') {
        return model.wzName;
    }
    else if (model.wzElement === 'classRule') {
        return '.' + model.wzName;
    }
    else if (model.wzElement === 'idRule') {
        return '#' + model.wzName;
    }
    else if (model.wzElement === 'combinator') {
        return '>';
    }
    else if (model.wzElement === 'parentRule') {
        return '&';
    }
    else if (model.wzElement === 'pseudoClass') {
        return ':' + model.wzName;
    }
}
var _md = module.exports = {};
var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row, col, sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();

_md.wzSourceLineInfo = wzSourceLineInfo;
var scssBase = (function () {
    function scssBase(name, sourceLineInfo) {
        _classCallCheck(this, scssBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    scssBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    scssBase.prototype.wzSourceFilepath = function(sourceKey) {
        return this.wzRoot().loadHistory.getIttfDocumentUri(sourceKey);
    }
    scssBase.prototype.wzSourceErrorLines = function(node, message) {
        return this.wzRoot().loadHistory.getIttfDocumentErrorLines(node.u, {
                row: node.r, 
                col: node.c, 
                description: message
            }, true);
    }
    scssBase.prototype.wzVerify = function() {
    }
    scssBase.prototype.wzInitialize = function() {
    }
    scssBase.prototype.wzInitializeAsync = function(ctx, callback) {
        callback(null);
    }
    scssBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    scssBase.prototype.wzAddChildToColl = function(node, coll) {
        node.wzParent = this;
        node.wzMoved = true;
        coll.push(node);
    }
    scssBase.prototype.wzMoveChildToColl = function(node, coll, fromColl) {
        var index = fromColl.indexOf(node);
        if (index < 0) {
            this.error('wzMoveChildToColl error. The from collection does not contain the node.', node);
        }
        fromColl.splice(index, 1);
        this.wzAddChildToColl(node, coll);
    }
    scssBase.prototype.wzLoadToChildColl = function(child, type, coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    scssBase.prototype.wzCreateChildColl = function(tag, name, type, coll) {
        var item = new type(name, this.wzSourceLineInfo);
        item.wzTag = tag;
        item.wzParent = this;
        item.wzCreated = true;
        coll.push(item);
        return item;
    }
    scssBase.prototype.wzLoadToChildren = function(child, type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    scssBase.prototype.wzLoadOneToOne = function(child, type, fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    scssBase.prototype.wzRemove = function(fromColl) {
        var index = fromColl.indexOf(this);
        if (index < 0) {
            this.error('wzRemove error. The from collection does not contain the node.', this);
        }
        fromColl.splice(index, 1);
    }
    scssBase.prototype.error = function(message, node) {
        throw new _md.scssModelException(message, node, this);
    }
    return scssBase;
})();

_md.scssBase = scssBase;
// element commentable
var commentable = (function (scssBase) {
    _inherits(commentable, scssBase);
    function commentable(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(commentable.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, commentable);
        this.wzElement = "commentable";
        // relation commentable
        this.commentables = [];
    }
    commentable.prototype.addCommentable = function(name, sourceLineInfo) {
        var retval = new _md.commentable(name, sourceLineInfo);
        retval.wzParent = this;
        this.commentables.push(retval);
        return retval;
    }
    commentable.prototype.getCommentable = function(name) {
        var found = null;
        this.commentables.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    commentable.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.idRule, this.commentables);
            }
        }
        if (_l == 1 && _ch == '&') {
            if (name === '&') {
                return this.wzLoadToChildColl(child, _md.parentRule, this.commentables);
            }
        }
        if (_l == 1 && _ch == '.') {
            if (name === '.') {
                return this.wzLoadToChildColl(child, _md.classRule, this.commentables);
            }
        }
        if (_l == 1 && _ch == ':') {
            if (name === ':') {
                return this.wzLoadToChildColl(child, _md.pseudoClass, this.commentables);
            }
        }
        if (_l == 1 && _ch == '<') {
            if (name === '<') {
                return this.wzLoadToChildColl(child, _md.typeRule, this.commentables);
            }
        }
        if (_l == 1 && _ch == '>') {
            if (name === '>') {
                return this.wzLoadToChildColl(child, _md.combinator, this.commentables);
            }
        }
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, _md.propertyRule, this.commentables);
            }
        }
        if (_l == 1 && _ch == '_') {
            if (name === '_') {
                return this.wzLoadToChildColl(child, _md.callRule, this.commentables);
            }
        }
        if (_l == 1 && _ch == '{') {
            if (name === '{') {
                return this.wzLoadToChildColl(child, _md.block, this.commentables);
            }
        }
        if (_l == 2 && _ch == '/') {
            if (name === '/*') {
                return this.wzLoadToChildColl(child, _md.commentable, this.commentables);
            }
        }
        if (_l == 3 && _ch == 's') {
            if (name === 'set') {
                return this.wzLoadToChildColl(child, _md.setRule, this.commentables);
            }
        }
        if (_l == 4 && _ch == '@') {
            if (name === '@for') {
                return this.wzLoadToChildColl(child, _md.forRule, this.commentables);
            }
        }
        if (_l == 4 && _ch == 'r') {
            if (name === 'rule') {
                return this.wzLoadToChildColl(child, _md.rule, this.commentables);
            }
        }
        if (_l == 4 && _ch == 's') {
            if (name === 'scss') {
                return this.wzLoadToChildColl(child, _md.scss, this.commentables);
            }
        }
        if (_l == 5 && _ch == '@') {
            if (name === '@each') {
                return this.wzLoadToChildColl(child, _md.eachRule, this.commentables);
            }
        }
        if (_l == 5 && _ch == 'p') {
            if (name === 'param') {
                return this.wzLoadToChildColl(child, _md.param, this.commentables);
            }
        }
        if (_l == 6 && _ch == '@') {
            if (name === '@mixin') {
                return this.wzLoadToChildColl(child, _md.mixinRule, this.commentables);
            }
            else if (name === '@while') {
                return this.wzLoadToChildColl(child, _md.whileRule, this.commentables);
            }
        }
        if (_l == 7 && _ch == '@') {
            if (name === '@extend') {
                return this.wzLoadToChildColl(child, _md.extendRule, this.commentables);
            }
            else if (name === '@import') {
                return this.wzLoadToChildColl(child, _md.importRule, this.commentables);
            }
            else if (name === '@return') {
                return this.wzLoadToChildColl(child, _md.returnRule, this.commentables);
            }
        }
        if (_l == 8 && _ch == '@') {
            if (name === '@include') {
                return this.wzLoadToChildColl(child, _md.includeRule, this.commentables);
            }
        }
        if (_l == 9 && _ch == '@') {
            if (name === '@function') {
                return this.wzLoadToChildColl(child, _md.functionRule, this.commentables);
            }
        }
        return ok;
    }
    commentable.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.scssModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    commentable.prototype.wzVerify = function(ctx) {
        var i, i_items=this.commentables, i_len=this.commentables.length, item;
        for (i=0; i<i_len; i++) {
            item = this.commentables[i];
            item.wzVerify(ctx);
        }
        _md.scssBase.prototype.wzVerify.call(this, ctx);
    }
    commentable.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.commentables, i_len=this.commentables.length, item;
        for (i=0; i<i_len; i++) {
            item = this.commentables[i];
            item.wzInitialize(ctx);
        }
        _md.scssBase.prototype.wzInitialize.call(this, ctx);
    }
    return commentable;
})(scssBase);

_md.commentable = commentable;
/**
    element scss
     The root element
*/
var scss = (function (commentable) {
    _inherits(scss, commentable);
    function scss(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(scss.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, scss);
        this.wzElement = "scss";
        // relation rule
        this.rules = [];
    }
    scss.prototype.addRule = function(name, sourceLineInfo) {
        var retval = new _md.rule(name, sourceLineInfo);
        retval.wzParent = this;
        this.rules.push(retval);
        return retval;
    }
    scss.prototype.getRule = function(name) {
        var found = null;
        this.rules.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    scss.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.idRule, this.rules);
            }
        }
        if (_l == 1 && _ch == '&') {
            if (name === '&') {
                return this.wzLoadToChildColl(child, _md.parentRule, this.rules);
            }
        }
        if (_l == 1 && _ch == '.') {
            if (name === '.') {
                return this.wzLoadToChildColl(child, _md.classRule, this.rules);
            }
        }
        if (_l == 1 && _ch == ':') {
            if (name === ':') {
                return this.wzLoadToChildColl(child, _md.pseudoClass, this.rules);
            }
        }
        if (_l == 1 && _ch == '<') {
            if (name === '<') {
                return this.wzLoadToChildColl(child, _md.typeRule, this.rules);
            }
        }
        if (_l == 1 && _ch == '>') {
            if (name === '>') {
                return this.wzLoadToChildColl(child, _md.combinator, this.rules);
            }
        }
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, _md.propertyRule, this.rules);
            }
        }
        if (_l == 1 && _ch == '_') {
            if (name === '_') {
                return this.wzLoadToChildColl(child, _md.callRule, this.rules);
            }
        }
        if (_l == 3 && _ch == 's') {
            if (name === 'set') {
                return this.wzLoadToChildColl(child, _md.setRule, this.rules);
            }
        }
        if (_l == 4 && _ch == '@') {
            if (name === '@for') {
                return this.wzLoadToChildColl(child, _md.forRule, this.rules);
            }
        }
        if (_l == 4 && _ch == 'r') {
            if (name === 'rule') {
                return this.wzLoadToChildColl(child, _md.rule, this.rules);
            }
        }
        if (_l == 5 && _ch == '@') {
            if (name === '@each') {
                return this.wzLoadToChildColl(child, _md.eachRule, this.rules);
            }
        }
        if (_l == 6 && _ch == '@') {
            if (name === '@mixin') {
                return this.wzLoadToChildColl(child, _md.mixinRule, this.rules);
            }
            else if (name === '@while') {
                return this.wzLoadToChildColl(child, _md.whileRule, this.rules);
            }
        }
        if (_l == 7 && _ch == '@') {
            if (name === '@extend') {
                return this.wzLoadToChildColl(child, _md.extendRule, this.rules);
            }
            else if (name === '@import') {
                return this.wzLoadToChildColl(child, _md.importRule, this.rules);
            }
            else if (name === '@return') {
                return this.wzLoadToChildColl(child, _md.returnRule, this.rules);
            }
        }
        if (_l == 8 && _ch == '@') {
            if (name === '@include') {
                return this.wzLoadToChildColl(child, _md.includeRule, this.rules);
            }
        }
        if (_l == 9 && _ch == '@') {
            if (name === '@function') {
                return this.wzLoadToChildColl(child, _md.functionRule, this.rules);
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    scss.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.scssModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    scss.prototype.wzVerify = function(ctx) {
        var i, i_items=this.rules, i_len=this.rules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.rules[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    scss.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.rules, i_len=this.rules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.rules[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return scss;
})(commentable);

_md.scss = scss;
// element rule
var rule = (function (commentable) {
    _inherits(rule, commentable);
    function rule(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(rule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, rule);
        this.wzElement = "rule";
        // relation rule
        this.rules = [];
    }
    rule.prototype.addRule = function(name, sourceLineInfo) {
        var retval = new _md.rule(name, sourceLineInfo);
        retval.wzParent = this;
        this.rules.push(retval);
        return retval;
    }
    rule.prototype.getRule = function(name) {
        var found = null;
        this.rules.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    rule.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.idRule, this.rules);
            }
        }
        if (_l == 1 && _ch == '&') {
            if (name === '&') {
                return this.wzLoadToChildColl(child, _md.parentRule, this.rules);
            }
        }
        if (_l == 1 && _ch == '.') {
            if (name === '.') {
                return this.wzLoadToChildColl(child, _md.classRule, this.rules);
            }
        }
        if (_l == 1 && _ch == ':') {
            if (name === ':') {
                return this.wzLoadToChildColl(child, _md.pseudoClass, this.rules);
            }
        }
        if (_l == 1 && _ch == '<') {
            if (name === '<') {
                return this.wzLoadToChildColl(child, _md.typeRule, this.rules);
            }
        }
        if (_l == 1 && _ch == '>') {
            if (name === '>') {
                return this.wzLoadToChildColl(child, _md.combinator, this.rules);
            }
        }
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, _md.propertyRule, this.rules);
            }
        }
        if (_l == 1 && _ch == '_') {
            if (name === '_') {
                return this.wzLoadToChildColl(child, _md.callRule, this.rules);
            }
        }
        if (_l == 3 && _ch == 's') {
            if (name === 'set') {
                return this.wzLoadToChildColl(child, _md.setRule, this.rules);
            }
        }
        if (_l == 4 && _ch == '@') {
            if (name === '@for') {
                return this.wzLoadToChildColl(child, _md.forRule, this.rules);
            }
        }
        if (_l == 4 && _ch == 'r') {
            if (name === 'rule') {
                return this.wzLoadToChildColl(child, _md.rule, this.rules);
            }
        }
        if (_l == 5 && _ch == '@') {
            if (name === '@each') {
                return this.wzLoadToChildColl(child, _md.eachRule, this.rules);
            }
        }
        if (_l == 6 && _ch == '@') {
            if (name === '@mixin') {
                return this.wzLoadToChildColl(child, _md.mixinRule, this.rules);
            }
            else if (name === '@while') {
                return this.wzLoadToChildColl(child, _md.whileRule, this.rules);
            }
        }
        if (_l == 7 && _ch == '@') {
            if (name === '@extend') {
                return this.wzLoadToChildColl(child, _md.extendRule, this.rules);
            }
            else if (name === '@import') {
                return this.wzLoadToChildColl(child, _md.importRule, this.rules);
            }
            else if (name === '@return') {
                return this.wzLoadToChildColl(child, _md.returnRule, this.rules);
            }
        }
        if (_l == 8 && _ch == '@') {
            if (name === '@include') {
                return this.wzLoadToChildColl(child, _md.includeRule, this.rules);
            }
        }
        if (_l == 9 && _ch == '@') {
            if (name === '@function') {
                return this.wzLoadToChildColl(child, _md.functionRule, this.rules);
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    rule.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.scssModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    rule.prototype.wzVerify = function(ctx) {
        var i, i_items=this.rules, i_len=this.rules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.rules[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    rule.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.rules, i_len=this.rules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.rules[i];
            item.wzInitialize(ctx);
        }
        if (isRuleSelector(this.wzElement)) {
            var acc = [];
            var selectors = [];
            var selectorNames = [];
            var seenProp = false;
            var i, i_items=this.rules, i_len=this.rules.length, item;
            for (i=0; i<i_len; i++) {
                item = this.rules[i];
                if (seenProp == false && isRuleSelector(item.wzElement)) {
                    selectors.push(item);
                    selectorNames.push(getSelectorName(item));
                }
                else {
                    acc.push(item);
                    seenProp = true;
                }
            }
            this.rules = acc;
            this.addedSelectors = selectors;
            this.addedSelectorNames = selectorNames;
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return rule;
})(commentable);

_md.rule = rule;
// element typeRule
var typeRule = (function (rule) {
    _inherits(typeRule, rule);
    function typeRule(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeRule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeRule);
        this.wzElement = "typeRule";
    }
    return typeRule;
})(rule);

_md.typeRule = typeRule;
// element classRule
var classRule = (function (rule) {
    _inherits(classRule, rule);
    function classRule(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(classRule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, classRule);
        this.wzElement = "classRule";
    }
    return classRule;
})(rule);

_md.classRule = classRule;
// element idRule
var idRule = (function (rule) {
    _inherits(idRule, rule);
    function idRule(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(idRule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, idRule);
        this.wzElement = "idRule";
    }
    return idRule;
})(rule);

_md.idRule = idRule;
// element propertyRule
var propertyRule = (function (rule) {
    _inherits(propertyRule, rule);
    function propertyRule(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(propertyRule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, propertyRule);
        this.wzElement = "propertyRule";
    }
    return propertyRule;
})(rule);

_md.propertyRule = propertyRule;
// element combinator
var combinator = (function (rule) {
    _inherits(combinator, rule);
    function combinator(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(combinator.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, combinator);
        this.wzElement = "combinator";
    }
    combinator.prototype.wzInitialize = function(ctx) {
        _md.rule.prototype.wzInitialize.call(this, ctx);
        console.log('wzinitialize.combinator', this.wzName);
        var acc = [];
        var pseudoClasses = [];
        var seenProp = false;
        var i, i_items=this.rules, i_len=this.rules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.rules[i];
            if (seenProp == false && item.wzElement === 'pseudoClass') {
                pseudoClasses.push(item);
            }
            else {
                acc.push(item);
                seenProp = true;
            }
        }
        this.rules = acc;
        this.pseudoClasses = pseudoClasses;
        _md.rule.prototype.wzInitialize.call(this, ctx);
    }
    return combinator;
})(rule);

_md.combinator = combinator;
// element parentRule
var parentRule = (function (rule) {
    _inherits(parentRule, rule);
    function parentRule(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(parentRule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, parentRule);
        this.wzElement = "parentRule";
    }
    parentRule.prototype.wzInitialize = function(ctx) {
        console.log('wzinitialize.parentRule', this.wzName);
        var acc = [];
        var selectorNames = [];
        var seenProp = false;
        var i, i_items=this.rules, i_len=this.rules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.rules[i];
            if (seenProp) {
                acc.push(item);
            }
            else if (item.wzElement === 'pseudoClass') {
                item.wzInitialize(ctx);
                selectorNames.push(item);
            }
            else if (item.wzElement === 'parentRule') {
                acc.push(item);
                seenProp = true;
            }
            else {
                var temp = getSelectorName(item);
                if (temp) {
                    selectorNames.push(temp);
                }
                else {
                    acc.push(item);
                    seenProp = true;
                }
            }
        }
        this.selectorNames = selectorNames;
        this.rules = acc;
        _md.rule.prototype.wzInitialize.call(this, ctx);
    }
    parentRule.prototype.getValue = function() {
        var acc = [ '&' ];
        acc.push( this.wzName || '' );
        var i, i_items=this.selectorNames, i_len=this.selectorNames.length, item;
        for (i=0; i<i_len; i++) {
            item = this.selectorNames[i];
            if (item.getValue) {
                acc.push(item.getValue());
            }
            else {
                acc.push(item);
            }
        }
        return acc.join('');
    }
    return parentRule;
})(rule);

_md.parentRule = parentRule;
// element pseudoClass
var pseudoClass = (function (rule) {
    _inherits(pseudoClass, rule);
    function pseudoClass(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(pseudoClass.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, pseudoClass);
        this.wzElement = "pseudoClass";
    }
    pseudoClass.prototype.wzInitialize = function(ctx) {
        console.log('wzinitialize.pseudoClass', this.wzName);
        var paramSelectorNames = [];
        var i, i_items=this.rules, i_len=this.rules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.rules[i];
            paramSelectorNames.push(getSelectorName(item));
        }
        this.paramSelectorNames = paramSelectorNames;
        _md.rule.prototype.wzInitialize.call(this, ctx);
    }
    pseudoClass.prototype.getValue = function() {
        var acc = [ ':' ];
        acc.push( this.wzName );
        if (this.paramSelectorNames.length > 0) {
            acc.push( '(' + this.paramSelectorNames.join(', ') + ')' );
        }
        return acc.join('');
    }
    return pseudoClass;
})(rule);

_md.pseudoClass = pseudoClass;
// element mixinRule
var mixinRule = (function (rule) {
    _inherits(mixinRule, rule);
    function mixinRule(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(mixinRule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, mixinRule);
        this.wzElement = "mixinRule";
        // relation param
        this.params = [];
    }
    mixinRule.prototype.addParam = function(name, sourceLineInfo) {
        var retval = new _md.param(name, sourceLineInfo);
        retval.wzParent = this;
        this.params.push(retval);
        return retval;
    }
    mixinRule.prototype.getParam = function(name) {
        var found = null;
        this.params.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    mixinRule.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'p') {
            if (name === 'param') {
                return this.wzLoadToChildColl(child, _md.param, this.params);
            }
        }
        ok = _md.rule.prototype.loadChild.call(this, child);
        return ok;
    }
    mixinRule.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.scssModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    mixinRule.prototype.wzVerify = function(ctx) {
        var i, i_items=this.params, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzVerify(ctx);
        }
        _md.rule.prototype.wzVerify.call(this, ctx);
    }
    mixinRule.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.params, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzInitialize(ctx);
        }
        var paramNames = [];
        var i, i_items=this.params, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            paramNames.push(item.wzName);
        }
        this.paramNames = paramNames;
        _md.rule.prototype.wzInitialize.call(this, ctx);
    }
    return mixinRule;
})(rule);

_md.mixinRule = mixinRule;
// element includeRule
var includeRule = (function (rule) {
    _inherits(includeRule, rule);
    function includeRule(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(includeRule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, includeRule);
        this.wzElement = "includeRule";
        // relation block
        this.block = null;
    }
    includeRule.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '{') {
            if (name === '{') {
                return this.wzLoadOneToOne(child, _md.block, 'block');
            }
        }
        ok = _md.rule.prototype.loadChild.call(this, child);
        return ok;
    }
    includeRule.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.scssModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    includeRule.prototype.wzVerify = function(ctx) {
        if (this.block != null) {
            this.block.wzVerify(ctx);
        }
        _md.rule.prototype.wzVerify.call(this, ctx);
    }
    includeRule.prototype.wzInitialize = function(ctx) {
        if (this.block != null) {
            this.block.wzInitialize(ctx);
        }
        _md.rule.prototype.wzInitialize.call(this, ctx);
    }
    return includeRule;
})(rule);

_md.includeRule = includeRule;
// element extendRule
var extendRule = (function (rule) {
    _inherits(extendRule, rule);
    function extendRule(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(extendRule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, extendRule);
        this.wzElement = "extendRule";
    }
    return extendRule;
})(rule);

_md.extendRule = extendRule;
// element importRule
var importRule = (function (rule) {
    _inherits(importRule, rule);
    function importRule(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(importRule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, importRule);
        this.wzElement = "importRule";
    }
    return importRule;
})(rule);

_md.importRule = importRule;
// element forRule
var forRule = (function (rule) {
    _inherits(forRule, rule);
    function forRule(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(forRule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, forRule);
        this.wzElement = "forRule";
    }
    return forRule;
})(rule);

_md.forRule = forRule;
// element eachRule
var eachRule = (function (rule) {
    _inherits(eachRule, rule);
    function eachRule(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(eachRule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, eachRule);
        this.wzElement = "eachRule";
    }
    return eachRule;
})(rule);

_md.eachRule = eachRule;
// element whileRule
var whileRule = (function (rule) {
    _inherits(whileRule, rule);
    function whileRule(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(whileRule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, whileRule);
        this.wzElement = "whileRule";
    }
    return whileRule;
})(rule);

_md.whileRule = whileRule;
// element callRule
var callRule = (function (rule) {
    _inherits(callRule, rule);
    function callRule(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(callRule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, callRule);
        this.wzElement = "callRule";
    }
    return callRule;
})(rule);

_md.callRule = callRule;
// element functionRule
var functionRule = (function (rule) {
    _inherits(functionRule, rule);
    function functionRule(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(functionRule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, functionRule);
        this.wzElement = "functionRule";
        // relation param
        this.params = [];
    }
    functionRule.prototype.addParam = function(name, sourceLineInfo) {
        var retval = new _md.param(name, sourceLineInfo);
        retval.wzParent = this;
        this.params.push(retval);
        return retval;
    }
    functionRule.prototype.getParam = function(name) {
        var found = null;
        this.params.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    functionRule.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'p') {
            if (name === 'param') {
                return this.wzLoadToChildColl(child, _md.param, this.params);
            }
        }
        ok = _md.rule.prototype.loadChild.call(this, child);
        return ok;
    }
    functionRule.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.scssModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    functionRule.prototype.wzVerify = function(ctx) {
        var i, i_items=this.params, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzVerify(ctx);
        }
        _md.rule.prototype.wzVerify.call(this, ctx);
    }
    functionRule.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.params, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzInitialize(ctx);
        }
        var paramNames = [];
        var i, i_items=this.params, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            paramNames.push(item.wzName);
        }
        this.paramNames = paramNames;
        _md.rule.prototype.wzInitialize.call(this, ctx);
    }
    return functionRule;
})(rule);

_md.functionRule = functionRule;
// element returnRule
var returnRule = (function (rule) {
    _inherits(returnRule, rule);
    function returnRule(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(returnRule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, returnRule);
        this.wzElement = "returnRule";
    }
    return returnRule;
})(rule);

_md.returnRule = returnRule;
// element setRule
var setRule = (function (rule) {
    _inherits(setRule, rule);
    function setRule(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(setRule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, setRule);
        this.wzElement = "setRule";
    }
    return setRule;
})(rule);

_md.setRule = setRule;
// element param
var param = (function (commentable) {
    _inherits(param, commentable);
    function param(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(param.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, param);
        this.wzElement = "param";
    }
    return param;
})(commentable);

_md.param = param;
// element block
var block = (function (commentable) {
    _inherits(block, commentable);
    function block(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(block.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, block);
        this.wzElement = "block";
        // relation rule
        this.rules = [];
    }
    block.prototype.addRule = function(name, sourceLineInfo) {
        var retval = new _md.rule(name, sourceLineInfo);
        retval.wzParent = this;
        this.rules.push(retval);
        return retval;
    }
    block.prototype.getRule = function(name) {
        var found = null;
        this.rules.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    block.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.idRule, this.rules);
            }
        }
        if (_l == 1 && _ch == '&') {
            if (name === '&') {
                return this.wzLoadToChildColl(child, _md.parentRule, this.rules);
            }
        }
        if (_l == 1 && _ch == '.') {
            if (name === '.') {
                return this.wzLoadToChildColl(child, _md.classRule, this.rules);
            }
        }
        if (_l == 1 && _ch == ':') {
            if (name === ':') {
                return this.wzLoadToChildColl(child, _md.pseudoClass, this.rules);
            }
        }
        if (_l == 1 && _ch == '<') {
            if (name === '<') {
                return this.wzLoadToChildColl(child, _md.typeRule, this.rules);
            }
        }
        if (_l == 1 && _ch == '>') {
            if (name === '>') {
                return this.wzLoadToChildColl(child, _md.combinator, this.rules);
            }
        }
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, _md.propertyRule, this.rules);
            }
        }
        if (_l == 1 && _ch == '_') {
            if (name === '_') {
                return this.wzLoadToChildColl(child, _md.callRule, this.rules);
            }
        }
        if (_l == 3 && _ch == 's') {
            if (name === 'set') {
                return this.wzLoadToChildColl(child, _md.setRule, this.rules);
            }
        }
        if (_l == 4 && _ch == '@') {
            if (name === '@for') {
                return this.wzLoadToChildColl(child, _md.forRule, this.rules);
            }
        }
        if (_l == 4 && _ch == 'r') {
            if (name === 'rule') {
                return this.wzLoadToChildColl(child, _md.rule, this.rules);
            }
        }
        if (_l == 5 && _ch == '@') {
            if (name === '@each') {
                return this.wzLoadToChildColl(child, _md.eachRule, this.rules);
            }
        }
        if (_l == 6 && _ch == '@') {
            if (name === '@mixin') {
                return this.wzLoadToChildColl(child, _md.mixinRule, this.rules);
            }
            else if (name === '@while') {
                return this.wzLoadToChildColl(child, _md.whileRule, this.rules);
            }
        }
        if (_l == 7 && _ch == '@') {
            if (name === '@extend') {
                return this.wzLoadToChildColl(child, _md.extendRule, this.rules);
            }
            else if (name === '@import') {
                return this.wzLoadToChildColl(child, _md.importRule, this.rules);
            }
            else if (name === '@return') {
                return this.wzLoadToChildColl(child, _md.returnRule, this.rules);
            }
        }
        if (_l == 8 && _ch == '@') {
            if (name === '@include') {
                return this.wzLoadToChildColl(child, _md.includeRule, this.rules);
            }
        }
        if (_l == 9 && _ch == '@') {
            if (name === '@function') {
                return this.wzLoadToChildColl(child, _md.functionRule, this.rules);
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    block.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_items=children, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.scssModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    block.prototype.wzVerify = function(ctx) {
        var i, i_items=this.rules, i_len=this.rules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.rules[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    block.prototype.wzInitialize = function(ctx) {
        var i, i_items=this.rules, i_len=this.rules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.rules[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return block;
})(commentable);

_md.block = block;
_md.__tagElementMapping = { '/*': 'commentable', '<': 'typeRule', '.': 'classRule', '#': 'idRule', '@': 'propertyRule', '>': 'combinator', '&': 'parentRule', ':': 'pseudoClass', '@mixin': 'mixinRule', '@include': 'includeRule', '@extend': 'extendRule', '@import': 'importRule', '@for': 'forRule', '@each': 'eachRule', '@while': 'whileRule', '_': 'callRule', '@function': 'functionRule', '@return': 'returnRule', 'set': 'setRule', '{': 'block' };
// model/replaceUnknownElement( )
var scssModelException = (function () {
    function scssModelException(message, node, instance) {
        _classCallCheck(this, scssModelException);
        // TODO node seems superflous
        if (node && instance) {
            this.message = message + ', wzElement: ' + node.wzElement + ', wzName:' + (node.wzName || '') + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
            this.errorLines = instance.wzSourceErrorLines(node, message);
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        console.log('message', this.message);
        this.stack = (new Error()).stack;
        this.node = node;
    }
    return scssModelException;
})();

_md.scssModelException = scssModelException;
var scssContext = (function () {
    function scssContext() {
        _classCallCheck(this, scssContext);
        this.validationErrors = [];
    }
    scssContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    scssContext.prototype.addError = function(message, node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at);
    }
    return scssContext;
})();

_md.scssContext = scssContext;

