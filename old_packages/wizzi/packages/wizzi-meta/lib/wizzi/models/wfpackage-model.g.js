/*
    artifact generator: C:\My\wizzi\v5\node_modules\wizzi-legacy-v4\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\v5\node_modules\wizzi-core\lib\artifacts\wfschema\model\gen\ittf\wfschema-model.js.ittf
    utc time: Mon, 07 Jan 2019 16:48:04 GMT
*/
'use strict';
// generated by wizzi.codegen.js.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var wzutils = require('wizzi-utils');
var verify = wzutils.verify;


var _md = module.exports = {};

var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row, col, sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();

_md.wzSourceLineInfo = wzSourceLineInfo;
var wfpackageBase = (function () {
    function wfpackageBase(name, sourceLineInfo) {
        _classCallCheck(this, wfpackageBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    wfpackageBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    wfpackageBase.prototype.wzSourceFilepath = function(sourceKey) {
        return this.wzRoot().loadHistory.getIttfDocumentUri(sourceKey);
    }
    wfpackageBase.prototype.wzVerify = function() {
    }
    wfpackageBase.prototype.wzInitialize = function() {
    }
    wfpackageBase.prototype.wzInitializeAsync = function(ctx, callback) {
        callback(null);
    }
    wfpackageBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    wfpackageBase.prototype.wzAddChildToColl = function(node, coll) {
        node.wzParent = this;
        node.wzMoved = true;
        coll.push(node);
    }
    wfpackageBase.prototype.wzMoveChildToColl = function(node, coll, fromColl) {
        var index = fromColl.indexOf(node);
        if (index < 0) {
            this.error('wzMoveChildToColl error. The from collection does not contain the node.', node);
        }
        fromColl.splice(index, 1);
        this.wzAddChildToColl(node, coll);
    }
    wfpackageBase.prototype.wzLoadToChildColl = function(child, type, coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    wfpackageBase.prototype.wzCreateChildColl = function(tag, name, type, coll) {
        var item = new type(name, this.wzSourceLineInfo);
        item.wzTag = tag;
        item.wzParent = this;
        item.wzCreated = true;
        coll.push(item);
        return item;
    }
    wfpackageBase.prototype.wzLoadToChildren = function(child, type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    wfpackageBase.prototype.wzLoadOneToOne = function(child, type, fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    wfpackageBase.prototype.wzRemove = function(fromColl) {
        var index = fromColl.indexOf(this);
        if (index < 0) {
            this.error('wzRemove error. The from collection does not contain the node.', this);
        }
        fromColl.splice(index, 1);
    }
    wfpackageBase.prototype.error = function(message, node) {
        throw new _md.wfpackageModelException(message, node, this);
    }
    wfpackageBase.prototype.toJsonProperties = function(result) {
        result.wzElement = this.wzElement;
        result.wzTag = this.wzTag;
        result.wzName = this.wzName;
    }
    wfpackageBase.prototype.toJsonChildren = function(result) {
        if (this.wzChildren.length > 0) {
            var children = [];
            var i, i_len=this.wzChildren.length, item;
            for (i=0; i<i_len; i++) {
                item = this.wzChildren[i];
                children.push(item.toJson());
            }
            result.wzChildren = children;
        }
    }
    return wfpackageBase;
})();

_md.wfpackageBase = wfpackageBase;

// element comment
var comment = (function (wfpackageBase) {
    _inherits(comment, wfpackageBase);
    function comment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(comment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, comment);
        this.wzElement = "comment";
        // relation comment
        this.comments = [];
    }
    comment.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    comment.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    comment.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    comment.prototype.toJsonProperties = function(result) {
        _md.wfpackageBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    comment.prototype.toJsonChildren = function(result) {
        _md.wfpackageBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    comment.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.comments);
            }
        }
        return ok;
    }
    comment.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfpackageModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    comment.prototype.wzVerify = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        _md.wfpackageBase.prototype.wzVerify.call(this, ctx);
    }
    comment.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        _md.wfpackageBase.prototype.wzInitialize.call(this, ctx);
    }
    return comment;
})(wfpackageBase);

_md.comment = comment;
// element commentable
var commentable = (function (wfpackageBase) {
    _inherits(commentable, wfpackageBase);
    function commentable(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(commentable.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, commentable);
        this.wzElement = "commentable";
        // relation comment
        this.comments = [];
    }
    commentable.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    commentable.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    commentable.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    commentable.prototype.toJsonProperties = function(result) {
        _md.wfpackageBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    commentable.prototype.toJsonChildren = function(result) {
        _md.wfpackageBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    commentable.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.comments);
            }
        }
        return ok;
    }
    commentable.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfpackageModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    commentable.prototype.wzVerify = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        _md.wfpackageBase.prototype.wzVerify.call(this, ctx);
    }
    commentable.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        _md.wfpackageBase.prototype.wzInitialize.call(this, ctx);
    }
    return commentable;
})(wfpackageBase);

_md.commentable = commentable;
/**
    element wfpackage
     The root tag of the wfpackage schema.
*/
var wfpackage = (function (commentable) {
    _inherits(wfpackage, commentable);
    function wfpackage(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(wfpackage.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, wfpackage);
        this.allowedKINDS = [ "ittfsource", "kernel", "plugin", "demo"];
        this.KIND_ITTFSOURCE = "ittfsource";
        this.KIND_KERNEL = "kernel";
        this.KIND_PLUGIN = "plugin";
        this.KIND_DEMO = "demo";
        this.wzElement = "wfpackage";
        this.kind = "ittfsource";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.version = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.title = null
        this.license = "MIT";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.fsBaseUri = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.packageBaseUri = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.gitBaseUri = null
        // relation schema
        this.schemas = [];
        // relation generatedPackage
        this.generatedPackages = [];
        // relation fsInfo
        this.fsInfo = null;
        // relation folder
        this.folders = [];
        // relation document
        this.documents = [];
    }
    wfpackage.KIND_ITTFSOURCE = "ittfsource";
    wfpackage.KIND_KERNEL = "kernel";
    wfpackage.KIND_PLUGIN = "plugin";
    wfpackage.KIND_DEMO = "demo";
    wfpackage.prototype.addSchema = function(name, sourceLineInfo) {
        var retval = new _md.schema(name, sourceLineInfo);
        retval.wzParent = this;
        this.schemas.push(retval);
        return retval;
    }
    wfpackage.prototype.getSchema = function(name) {
        var found = null;
        this.schemas.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    wfpackage.prototype.addGeneratedPackage = function(name, sourceLineInfo) {
        var retval = new _md.generatedPackage(name, sourceLineInfo);
        retval.wzParent = this;
        this.generatedPackages.push(retval);
        return retval;
    }
    wfpackage.prototype.getGeneratedPackage = function(name) {
        var found = null;
        this.generatedPackages.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    wfpackage.prototype.addFolder = function(name, sourceLineInfo) {
        var retval = new _md.folder(name, sourceLineInfo);
        retval.wzParent = this;
        this.folders.push(retval);
        return retval;
    }
    wfpackage.prototype.getFolder = function(name) {
        var found = null;
        this.folders.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    wfpackage.prototype.addDocument = function(name, sourceLineInfo) {
        var retval = new _md.document(name, sourceLineInfo);
        retval.wzParent = this;
        this.documents.push(retval);
        return retval;
    }
    wfpackage.prototype.getDocument = function(name) {
        var found = null;
        this.documents.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    wfpackage.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    wfpackage.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.kind)) {
            result["kind"] = this.kind;
        }
        if (!isEmpty(this.version)) {
            result["version"] = this.version;
        }
        if (!isEmpty(this.title)) {
            result["title"] = this.title;
        }
        if (!isEmpty(this.license)) {
            result["license"] = this.license;
        }
        if (!isEmpty(this.fsBaseUri)) {
            result["fsBaseUri"] = this.fsBaseUri;
        }
        if (!isEmpty(this.packageBaseUri)) {
            result["packageBaseUri"] = this.packageBaseUri;
        }
        if (!isEmpty(this.gitBaseUri)) {
            result["gitBaseUri"] = this.gitBaseUri;
        }
    }
    wfpackage.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.schemas.length, item;
        for (i=0; i<i_len; i++) {
            item = this.schemas[i];
            items.push(item.toJson());
        }
        result['schemas'] = items;
        items = [];
        var i, i_len=this.generatedPackages.length, item;
        for (i=0; i<i_len; i++) {
            item = this.generatedPackages[i];
            items.push(item.toJson());
        }
        result['generatedPackages'] = items;
        if (this.fsInfo != null) {
            result['fsInfo'] = this.fsInfo.toJson();
        }
        else {
            result['fsInfo'] = null;
        }
        items = [];
        var i, i_len=this.folders.length, item;
        for (i=0; i<i_len; i++) {
            item = this.folders[i];
            items.push(item.toJson());
        }
        result['folders'] = items;
        items = [];
        var i, i_len=this.documents.length, item;
        for (i=0; i<i_len; i++) {
            item = this.documents[i];
            items.push(item.toJson());
        }
        result['documents'] = items;
    }
    wfpackage.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == 'd') {
            if (name === 'd') {
                return this.wzLoadToChildColl(child, _md.document, this.documents);
            }
        }
        if (_l == 1 && _ch == 'f') {
            if (name === 'f') {
                return this.wzLoadToChildColl(child, _md.folder, this.folders);
            }
        }
        if (_l == 4 && _ch == 'k') {
            if (name === 'kind') {
                this.kind = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 't') {
            if (name === 'title') {
                this.title = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'f') {
            if (name === 'fsinfo') {
                return this.wzLoadOneToOne(child, _md.fsInfo, 'fsInfo');
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'schema') {
                return this.wzLoadToChildColl(child, _md.schema, this.schemas);
            }
        }
        if (_l == 7 && _ch == 'f') {
            if (name === 'fs-info') {
                return this.wzLoadOneToOne(child, _md.fsInfo, 'fsInfo');
            }
        }
        if (_l == 7 && _ch == 'l') {
            if (name === 'license') {
                this.license = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'v') {
            if (name === 'version') {
                this.version = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'f') {
            if (name === 'fs-base-uri') {
                this.fsBaseUri = child.v; return true;
            }
            else if (name === 'fs_base_uri') {
                this.fsBaseUri = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 'g') {
            if (name === 'git-base-uri') {
                this.gitBaseUri = child.v; return true;
            }
            else if (name === 'git_base_uri') {
                this.gitBaseUri = child.v; return true;
            }
        }
        if (_l == 16 && _ch == 'g') {
            if (name === 'generatedpackage') {
                return this.wzLoadToChildColl(child, _md.generatedPackage, this.generatedPackages);
            }
        }
        if (_l == 16 && _ch == 'p') {
            if (name === 'package-base-uri') {
                this.packageBaseUri = child.v; return true;
            }
            else if (name === 'package_base_uri') {
                this.packageBaseUri = child.v; return true;
            }
        }
        if (_l == 17 && _ch == 'g') {
            if (name === 'generated-package') {
                return this.wzLoadToChildColl(child, _md.generatedPackage, this.generatedPackages);
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    wfpackage.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfpackageModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    wfpackage.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("wfpackage", "kind", this.kind, this.allowedKINDS, this);
        var i, i_len=this.schemas.length, item;
        for (i=0; i<i_len; i++) {
            item = this.schemas[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.generatedPackages.length, item;
        for (i=0; i<i_len; i++) {
            item = this.generatedPackages[i];
            item.wzVerify(ctx);
        }
        if (this.fsInfo != null) {
            this.fsInfo.wzVerify(ctx);
        }
        var i, i_len=this.folders.length, item;
        for (i=0; i<i_len; i++) {
            item = this.folders[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.documents.length, item;
        for (i=0; i<i_len; i++) {
            item = this.documents[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    wfpackage.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.schemas.length, item;
        for (i=0; i<i_len; i++) {
            item = this.schemas[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.generatedPackages.length, item;
        for (i=0; i<i_len; i++) {
            item = this.generatedPackages[i];
            item.wzInitialize(ctx);
        }
        if (this.fsInfo != null) {
            this.fsInfo.wzInitialize(ctx);
        }
        var i, i_len=this.folders.length, item;
        for (i=0; i<i_len; i++) {
            item = this.folders[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.documents.length, item;
        for (i=0; i<i_len; i++) {
            item = this.documents[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    wfpackage.prototype.getJobs = function() {
        var ret = {
            name: this.wzName, 
            title: this.title, 
            srcCwd: this.srcCwd, 
            assetsCwd: this.assetsCwd, 
            buildCwds: [], 
            schemas: [], 
            jobs: [
                {
                    title: 'build ' + this.wzName + ' assets', 
                    exe: 'node', 
                    cwd: this.srcCwd, 
                    args: 'index'
                }
            ]
        };
        if (this.schemas.length > 0) {
            ret.jobs.push({
                title: 'generate ' + this.wzName + ' wizzi model types in the assets folder', 
                exe: 'node', 
                cwd: this.assetsCwd, 
                args: 'schemas'
            });
            var i, i_len=this.schemas.length, item;
            for (i=0; i<i_len; i++) {
                item = this.schemas[i];
                ret.schemas.push({
                    name: item.wzName
                });
            }
        }
        var i, i_len=this.buildCwds.length, item;
        for (i=0; i<i_len; i++) {
            item = this.buildCwds[i];
            ret.buildCwds.push({
                cwd: item.wzName, 
                title: item.title
            });
        }
        return ret;
    }
    return wfpackage;
})(commentable);

_md.wfpackage = wfpackage;
/**
    element schema
     A wizzi schema defined by this wizzi package of kind plugin
*/
var schema = (function (commentable) {
    _inherits(schema, commentable);
    function schema(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(schema.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, schema);
        this.wzElement = "schema";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.title = null
        // relation transformer
        this.transformers = [];
        // relation artifact
        this.artifacts = [];
        // relation example
        this.examples = [];
    }
    schema.prototype.addTransformer = function(name, sourceLineInfo) {
        var retval = new _md.transformer(name, sourceLineInfo);
        retval.wzParent = this;
        this.transformers.push(retval);
        return retval;
    }
    schema.prototype.getTransformer = function(name) {
        var found = null;
        this.transformers.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    schema.prototype.addArtifact = function(name, sourceLineInfo) {
        var retval = new _md.artifact(name, sourceLineInfo);
        retval.wzParent = this;
        this.artifacts.push(retval);
        return retval;
    }
    schema.prototype.getArtifact = function(name) {
        var found = null;
        this.artifacts.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    schema.prototype.addExample = function(name, sourceLineInfo) {
        var retval = new _md.example(name, sourceLineInfo);
        retval.wzParent = this;
        this.examples.push(retval);
        return retval;
    }
    schema.prototype.getExample = function(name) {
        var found = null;
        this.examples.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    schema.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    schema.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.title)) {
            result["title"] = this.title;
        }
    }
    schema.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.transformers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.transformers[i];
            items.push(item.toJson());
        }
        result['transformers'] = items;
        items = [];
        var i, i_len=this.artifacts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.artifacts[i];
            items.push(item.toJson());
        }
        result['artifacts'] = items;
        items = [];
        var i, i_len=this.examples.length, item;
        for (i=0; i<i_len; i++) {
            item = this.examples[i];
            items.push(item.toJson());
        }
        result['examples'] = items;
    }
    schema.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 't') {
            if (name === 'title') {
                this.title = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'e') {
            if (name === 'example') {
                return this.wzLoadToChildColl(child, _md.example, this.examples);
            }
        }
        if (_l == 8 && _ch == 'a') {
            if (name === 'artifact') {
                return this.wzLoadToChildColl(child, _md.artifact, this.artifacts);
            }
        }
        if (_l == 11 && _ch == 'i') {
            if (name === 'ittfexample') {
                return this.wzLoadToChildColl(child, _md.ittfExample, this.examples);
            }
        }
        if (_l == 11 && _ch == 't') {
            if (name === 'transformer') {
                return this.wzLoadToChildColl(child, _md.transformer, this.transformers);
            }
        }
        if (_l == 12 && _ch == 'i') {
            if (name === 'ittf-example') {
                return this.wzLoadToChildColl(child, _md.ittfExample, this.examples);
            }
        }
        if (_l == 15 && _ch == 'a') {
            if (name === 'artifactexample') {
                return this.wzLoadToChildColl(child, _md.artifactExample, this.examples);
            }
        }
        if (_l == 16 && _ch == 'a') {
            if (name === 'artifact-example') {
                return this.wzLoadToChildColl(child, _md.artifactExample, this.examples);
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    schema.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfpackageModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    schema.prototype.wzVerify = function(ctx) {
        var i, i_len=this.transformers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.transformers[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.artifacts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.artifacts[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.examples.length, item;
        for (i=0; i<i_len; i++) {
            item = this.examples[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    schema.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.transformers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.transformers[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.artifacts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.artifacts[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.examples.length, item;
        for (i=0; i<i_len; i++) {
            item = this.examples[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return schema;
})(commentable);

_md.schema = schema;
/**
    element transformer
     A model transformer
*/
var transformer = (function (commentable) {
    _inherits(transformer, commentable);
    function transformer(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(transformer.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, transformer);
        this.wzElement = "transformer";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.title = null
    }
    transformer.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    transformer.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.title)) {
            result["title"] = this.title;
        }
    }
    transformer.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    transformer.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 't') {
            if (name === 'title') {
                this.title = child.v; return true;
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    transformer.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfpackageModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return transformer;
})(commentable);

_md.transformer = transformer;
/**
    element artifact
     An artifact generator
*/
var artifact = (function (commentable) {
    _inherits(artifact, commentable);
    function artifact(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(artifact.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, artifact);
        this.allowedKINDS = [ "ittf", "codewrite"];
        this.KIND_ITTF = "ittf";
        this.KIND_CODEWRITE = "codewrite";
        this.wzElement = "artifact";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.title = null
        this.kind = "ittf";
    }
    artifact.KIND_ITTF = "ittf";
    artifact.KIND_CODEWRITE = "codewrite";
    artifact.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    artifact.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.title)) {
            result["title"] = this.title;
        }
        if (!isEmpty(this.kind)) {
            result["kind"] = this.kind;
        }
    }
    artifact.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    artifact.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'k') {
            if (name === 'kind') {
                this.kind = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 't') {
            if (name === 'title') {
                this.title = child.v; return true;
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    artifact.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfpackageModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    artifact.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("artifact", "kind", this.kind, this.allowedKINDS, this);
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    return artifact;
})(commentable);

_md.artifact = artifact;
/**
    element generatedPackage
     When the package kind is 'ittfsource' the element 'generatedPackage'
        main contain the description of generated packages.
*/
var generatedPackage = (function (commentable) {
    _inherits(generatedPackage, commentable);
    function generatedPackage(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(generatedPackage.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, generatedPackage);
        this.allowedKINDS = [ "kernel", "plugin", "demo"];
        this.KIND_KERNEL = "kernel";
        this.KIND_PLUGIN = "plugin";
        this.KIND_DEMO = "demo";
        this.wzElement = "generatedPackage";
        this.kind = "kernel";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.version = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.title = null
        // The full path is: (parent ittfsource package) package-base-uri / (this) sourceFolder
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.sourceFolder = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.gitBaseUri = null
        // relation buildCwd
        this.buildCwds = [];
    }
    generatedPackage.KIND_KERNEL = "kernel";
    generatedPackage.KIND_PLUGIN = "plugin";
    generatedPackage.KIND_DEMO = "demo";
    generatedPackage.prototype.addBuildCwd = function(name, sourceLineInfo) {
        var retval = new _md.buildCwd(name, sourceLineInfo);
        retval.wzParent = this;
        this.buildCwds.push(retval);
        return retval;
    }
    generatedPackage.prototype.getBuildCwd = function(name) {
        var found = null;
        this.buildCwds.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    generatedPackage.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    generatedPackage.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.kind)) {
            result["kind"] = this.kind;
        }
        if (!isEmpty(this.version)) {
            result["version"] = this.version;
        }
        if (!isEmpty(this.title)) {
            result["title"] = this.title;
        }
        if (!isEmpty(this.sourceFolder)) {
            result["sourceFolder"] = this.sourceFolder;
        }
        if (!isEmpty(this.gitBaseUri)) {
            result["gitBaseUri"] = this.gitBaseUri;
        }
    }
    generatedPackage.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.buildCwds.length, item;
        for (i=0; i<i_len; i++) {
            item = this.buildCwds[i];
            items.push(item.toJson());
        }
        result['buildCwds'] = items;
    }
    generatedPackage.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'k') {
            if (name === 'kind') {
                this.kind = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 't') {
            if (name === 'title') {
                this.title = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'v') {
            if (name === 'version') {
                this.version = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'b') {
            if (name === 'buildcwd') {
                return this.wzLoadToChildColl(child, _md.buildCwd, this.buildCwds);
            }
        }
        if (_l == 9 && _ch == 'b') {
            if (name === 'build-cwd') {
                return this.wzLoadToChildColl(child, _md.buildCwd, this.buildCwds);
            }
        }
        if (_l == 12 && _ch == 'g') {
            if (name === 'git-base-uri') {
                this.gitBaseUri = child.v; return true;
            }
            else if (name === 'git_base_uri') {
                this.gitBaseUri = child.v; return true;
            }
        }
        if (_l == 13 && _ch == 's') {
            if (name === 'source-folder') {
                this.sourceFolder = child.v; return true;
            }
            else if (name === 'source_folder') {
                this.sourceFolder = child.v; return true;
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    generatedPackage.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfpackageModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    generatedPackage.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("generatedPackage", "kind", this.kind, this.allowedKINDS, this);
        var i, i_len=this.buildCwds.length, item;
        for (i=0; i<i_len; i++) {
            item = this.buildCwds[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    generatedPackage.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.buildCwds.length, item;
        for (i=0; i<i_len; i++) {
            item = this.buildCwds[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return generatedPackage;
})(commentable);

_md.generatedPackage = generatedPackage;
/**
    element example
     The base node for examples
*/
var example = (function (commentable) {
    _inherits(example, commentable);
    function example(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(example.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, example);
        this.wzElement = "example";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.title = null
        // relation node
        this.nodes = [];
    }
    example.prototype.addNode = function(name, sourceLineInfo) {
        var retval = new _md.node(name, sourceLineInfo);
        retval.wzParent = this;
        this.nodes.push(retval);
        return retval;
    }
    example.prototype.getNode = function(name) {
        var found = null;
        this.nodes.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    example.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    example.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.title)) {
            result["title"] = this.title;
        }
    }
    example.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.nodes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.nodes[i];
            items.push(item.toJson());
        }
        result['nodes'] = items;
    }
    example.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'n') {
            if (name === 'node') {
                return this.wzLoadToChildColl(child, _md.node, this.nodes);
            }
        }
        if (_l == 5 && _ch == 't') {
            if (name === 'title') {
                this.title = child.v; return true;
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    example.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfpackageModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    example.prototype.wzVerify = function(ctx) {
        var i, i_len=this.nodes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.nodes[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    example.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.nodes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.nodes[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return example;
})(commentable);

_md.example = example;
/**
    element ittfExample
     An IttfDocument example
*/
var ittfExample = (function (example) {
    _inherits(ittfExample, example);
    function ittfExample(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ittfExample.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ittfExample);
        this.wzElement = "ittfExample";
    }
    ittfExample.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    ittfExample.prototype.toJsonProperties = function(result) {
        _md.example.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    ittfExample.prototype.toJsonChildren = function(result) {
        _md.example.prototype.toJsonChildren.call(this, result);
    }
    return ittfExample;
})(example);

_md.ittfExample = ittfExample;
/**
    element artifactExample
     An artifact generation example
*/
var artifactExample = (function (example) {
    _inherits(artifactExample, example);
    function artifactExample(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(artifactExample.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, artifactExample);
        this.wzElement = "artifactExample";
    }
    artifactExample.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    artifactExample.prototype.toJsonProperties = function(result) {
        _md.example.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    artifactExample.prototype.toJsonChildren = function(result) {
        _md.example.prototype.toJsonChildren.call(this, result);
    }
    return artifactExample;
})(example);

_md.artifactExample = artifactExample;
// element node
var node = (function (commentable) {
    _inherits(node, commentable);
    function node(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(node.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, node);
        this.wzElement = "node";
    }
    node.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    node.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    node.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    return node;
})(commentable);

_md.node = node;
// element buildCwd
var buildCwd = (function (commentable) {
    _inherits(buildCwd, commentable);
    function buildCwd(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(buildCwd.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, buildCwd);
        this.wzElement = "buildCwd";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.title = null
    }
    buildCwd.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    buildCwd.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.title)) {
            result["title"] = this.title;
        }
    }
    buildCwd.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    buildCwd.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 't') {
            if (name === 'title') {
                this.title = child.v; return true;
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    buildCwd.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfpackageModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return buildCwd;
})(commentable);

_md.buildCwd = buildCwd;
// element fsInfo
var fsInfo = (function (commentable) {
    _inherits(fsInfo, commentable);
    function fsInfo(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(fsInfo.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, fsInfo);
        this.wzElement = "fsInfo";
        // relation documentGroup
        this.documentGroups = [];
    }
    fsInfo.prototype.addDocumentGroup = function(name, sourceLineInfo) {
        var retval = new _md.documentGroup(name, sourceLineInfo);
        retval.wzParent = this;
        this.documentGroups.push(retval);
        return retval;
    }
    fsInfo.prototype.getDocumentGroup = function(name) {
        var found = null;
        this.documentGroups.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    fsInfo.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    fsInfo.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    fsInfo.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.documentGroups.length, item;
        for (i=0; i<i_len; i++) {
            item = this.documentGroups[i];
            items.push(item.toJson());
        }
        result['documentGroups'] = items;
    }
    fsInfo.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 6 && _ch == 'd') {
            if (name === 'dgroup') {
                return this.wzLoadToChildColl(child, _md.documentGroup, this.documentGroups);
            }
        }
        if (_l == 7 && _ch == 'd') {
            if (name === 'd-group') {
                return this.wzLoadToChildColl(child, _md.documentGroup, this.documentGroups);
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    fsInfo.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfpackageModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    fsInfo.prototype.wzVerify = function(ctx) {
        var i, i_len=this.documentGroups.length, item;
        for (i=0; i<i_len; i++) {
            item = this.documentGroups[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    fsInfo.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.documentGroups.length, item;
        for (i=0; i<i_len; i++) {
            item = this.documentGroups[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return fsInfo;
})(commentable);

_md.fsInfo = fsInfo;
// element documentGroup
var documentGroup = (function (commentable) {
    _inherits(documentGroup, commentable);
    function documentGroup(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(documentGroup.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, documentGroup);
        this.allowedTYPES = [ "schema", "folder"];
        this.TYPE_SCHEMA = "schema";
        this.TYPE_FOLDER = "folder";
        this.wzElement = "documentGroup";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
        // relation document
        this.documents = [];
    }
    documentGroup.TYPE_SCHEMA = "schema";
    documentGroup.TYPE_FOLDER = "folder";
    documentGroup.prototype.addDocument = function(name, sourceLineInfo) {
        var retval = new _md.document(name, sourceLineInfo);
        retval.wzParent = this;
        this.documents.push(retval);
        return retval;
    }
    documentGroup.prototype.getDocument = function(name) {
        var found = null;
        this.documents.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    documentGroup.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    documentGroup.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
    }
    documentGroup.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.documents.length, item;
        for (i=0; i<i_len; i++) {
            item = this.documents[i];
            items.push(item.toJson());
        }
        result['documents'] = items;
    }
    documentGroup.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == 'd') {
            if (name === 'd') {
                return this.wzLoadToChildColl(child, _md.document, this.documents);
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    documentGroup.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfpackageModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    documentGroup.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("documentGroup", "type", this.type, this.allowedTYPES, this);
        var i, i_len=this.documents.length, item;
        for (i=0; i<i_len; i++) {
            item = this.documents[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    documentGroup.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.documents.length, item;
        for (i=0; i<i_len; i++) {
            item = this.documents[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return documentGroup;
})(commentable);

_md.documentGroup = documentGroup;
// element fsitem
var fsitem = (function (commentable) {
    _inherits(fsitem, commentable);
    function fsitem(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(fsitem.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, fsitem);
        this.wzElement = "fsitem";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.id = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.dirname = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.path = null
        // relative to package.fsBaseUri
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.relDirname = null
        // relative to package.fsBaseUri
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.relUri = null
        this.isPackageRoot = false;
        this.isTFolder = false;
        this.isInsideTFolder = false;
        this.isExample = false;
        this.isTest = false;
        this.isUtil = false;
    }
    fsitem.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    fsitem.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.id)) {
            result["id"] = this.id;
        }
        if (!isEmpty(this.dirname)) {
            result["dirname"] = this.dirname;
        }
        if (!isEmpty(this.path)) {
            result["path"] = this.path;
        }
        if (!isEmpty(this.relDirname)) {
            result["relDirname"] = this.relDirname;
        }
        if (!isEmpty(this.relUri)) {
            result["relUri"] = this.relUri;
        }
        result["isPackageRoot"] = this.isPackageRoot;
        result["isTFolder"] = this.isTFolder;
        result["isInsideTFolder"] = this.isInsideTFolder;
        result["isExample"] = this.isExample;
        result["isTest"] = this.isTest;
        result["isUtil"] = this.isUtil;
    }
    fsitem.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    fsitem.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 2 && _ch == 'i') {
            if (name === 'id') {
                this.id = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'p') {
            if (name === 'path') {
                this.path = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'd') {
            if (name === 'dirname') {
                this.dirname = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'i') {
            if (name === 'is-test') {
                this.isTest = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_test') {
                this.isTest = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is-util') {
                this.isUtil = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_util') {
                this.isUtil = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 7 && _ch == 'r') {
            if (name === 'rel-uri') {
                this.relUri = child.v; return true;
            }
            else if (name === 'rel_uri') {
                this.relUri = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'i') {
            if (name === 'is-example') {
                this.isExample = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_example') {
                this.isExample = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 11 && _ch == 'i') {
            if (name === 'is-t-folder') {
                this.isTFolder = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_t_folder') {
                this.isTFolder = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 11 && _ch == 'r') {
            if (name === 'rel-dirname') {
                this.relDirname = child.v; return true;
            }
            else if (name === 'rel_dirname') {
                this.relDirname = child.v; return true;
            }
        }
        if (_l == 15 && _ch == 'i') {
            if (name === 'is-package-root') {
                this.isPackageRoot = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_package_root') {
                this.isPackageRoot = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 18 && _ch == 'i') {
            if (name === 'is-inside-t-folder') {
                this.isInsideTFolder = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_inside_t_folder') {
                this.isInsideTFolder = parseboolean(child.v, true, child); return true;
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    fsitem.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfpackageModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return fsitem;
})(commentable);

_md.fsitem = fsitem;
// element folder
var folder = (function (fsitem) {
    _inherits(folder, fsitem);
    function folder(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(folder.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, folder);
        this.wzElement = "folder";
        // relation folder
        this.folders = [];
        // relation document
        this.documents = [];
    }
    folder.prototype.addFolder = function(name, sourceLineInfo) {
        var retval = new _md.folder(name, sourceLineInfo);
        retval.wzParent = this;
        this.folders.push(retval);
        return retval;
    }
    folder.prototype.getFolder = function(name) {
        var found = null;
        this.folders.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    folder.prototype.addDocument = function(name, sourceLineInfo) {
        var retval = new _md.document(name, sourceLineInfo);
        retval.wzParent = this;
        this.documents.push(retval);
        return retval;
    }
    folder.prototype.getDocument = function(name) {
        var found = null;
        this.documents.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    folder.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    folder.prototype.toJsonProperties = function(result) {
        _md.fsitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    folder.prototype.toJsonChildren = function(result) {
        _md.fsitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.folders.length, item;
        for (i=0; i<i_len; i++) {
            item = this.folders[i];
            items.push(item.toJson());
        }
        result['folders'] = items;
        items = [];
        var i, i_len=this.documents.length, item;
        for (i=0; i<i_len; i++) {
            item = this.documents[i];
            items.push(item.toJson());
        }
        result['documents'] = items;
    }
    folder.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == 'd') {
            if (name === 'd') {
                return this.wzLoadToChildColl(child, _md.document, this.documents);
            }
        }
        if (_l == 1 && _ch == 'f') {
            if (name === 'f') {
                return this.wzLoadToChildColl(child, _md.folder, this.folders);
            }
        }
        ok = _md.fsitem.prototype.loadChild.call(this, child);
        return ok;
    }
    folder.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfpackageModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    folder.prototype.wzVerify = function(ctx) {
        var i, i_len=this.folders.length, item;
        for (i=0; i<i_len; i++) {
            item = this.folders[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.documents.length, item;
        for (i=0; i<i_len; i++) {
            item = this.documents[i];
            item.wzVerify(ctx);
        }
        _md.fsitem.prototype.wzVerify.call(this, ctx);
    }
    folder.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.folders.length, item;
        for (i=0; i<i_len; i++) {
            item = this.folders[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.documents.length, item;
        for (i=0; i<i_len; i++) {
            item = this.documents[i];
            item.wzInitialize(ctx);
        }
        _md.fsitem.prototype.wzInitialize.call(this, ctx);
    }
    return folder;
})(fsitem);

_md.folder = folder;
// element document
var document = (function (fsitem) {
    _inherits(document, fsitem);
    function document(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(document.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, document);
        this.wzElement = "document";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.schema = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.jsCode = null
        this.isFragment = false;
        this.isExternal = false;
        // relation ittf
        this.ittf = null;
    }
    document.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    document.prototype.toJsonProperties = function(result) {
        _md.fsitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.schema)) {
            result["schema"] = this.schema;
        }
        if (!isEmpty(this.jsCode)) {
            result["jsCode"] = this.jsCode;
        }
        result["isFragment"] = this.isFragment;
        result["isExternal"] = this.isExternal;
    }
    document.prototype.toJsonChildren = function(result) {
        _md.fsitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.ittf != null) {
            result['ittf'] = this.ittf.toJson();
        }
        else {
            result['ittf'] = null;
        }
    }
    document.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 2 && _ch == 'j') {
            if (name === 'js') {
                this.jsCode = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'i') {
            if (name === 'ittf') {
                return this.wzLoadOneToOne(child, _md.ittf, 'ittf');
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'schema') {
                this.schema = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'i') {
            if (name === 'is-fragment') {
                this.isFragment = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_fragment') {
                this.isFragment = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is-external') {
                this.isExternal = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_external') {
                this.isExternal = parseboolean(child.v, true, child); return true;
            }
        }
        ok = _md.fsitem.prototype.loadChild.call(this, child);
        return ok;
    }
    document.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfpackageModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    document.prototype.wzVerify = function(ctx) {
        if (this.ittf != null) {
            this.ittf.wzVerify(ctx);
        }
        _md.fsitem.prototype.wzVerify.call(this, ctx);
    }
    document.prototype.wzInitialize = function(ctx) {
        if (this.ittf != null) {
            this.ittf.wzInitialize(ctx);
        }
        _md.fsitem.prototype.wzInitialize.call(this, ctx);
    }
    return document;
})(fsitem);

_md.document = document;
// element ittf
var ittf = (function (commentable) {
    _inherits(ittf, commentable);
    function ittf(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ittf.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ittf);
        this.wzElement = "ittf";
        // relation fragmentRef
        this.fragmentRefs = [];
    }
    ittf.prototype.addFragmentRef = function(name, sourceLineInfo) {
        var retval = new _md.fragmentRef(name, sourceLineInfo);
        retval.wzParent = this;
        this.fragmentRefs.push(retval);
        return retval;
    }
    ittf.prototype.getFragmentRef = function(name) {
        var found = null;
        this.fragmentRefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    ittf.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    ittf.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    ittf.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.fragmentRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.fragmentRefs[i];
            items.push(item.toJson());
        }
        result['fragmentRefs'] = items;
    }
    ittf.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 8 && _ch == 'f') {
            if (name === 'fragment') {
                return this.wzLoadToChildColl(child, _md.fragmentRef, this.fragmentRefs);
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    ittf.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfpackageModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    ittf.prototype.wzVerify = function(ctx) {
        var i, i_len=this.fragmentRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.fragmentRefs[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    ittf.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.fragmentRefs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.fragmentRefs[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return ittf;
})(commentable);

_md.ittf = ittf;
// element fragmentRef
var fragmentRef = (function (commentable) {
    _inherits(fragmentRef, commentable);
    function fragmentRef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(fragmentRef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, fragmentRef);
        this.wzElement = "fragmentRef";
        // The id of the fragment document
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.documentId = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.uri = null
        // relative to package.fsBaseUri
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.relUri = null
    }
    fragmentRef.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    fragmentRef.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.documentId)) {
            result["documentId"] = this.documentId;
        }
        if (!isEmpty(this.uri)) {
            result["uri"] = this.uri;
        }
        if (!isEmpty(this.relUri)) {
            result["relUri"] = this.relUri;
        }
    }
    fragmentRef.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    fragmentRef.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'u') {
            if (name === 'uri') {
                this.uri = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'd') {
            if (name === 'd-id') {
                this.documentId = child.v; return true;
            }
            else if (name === 'd_id') {
                this.documentId = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'r') {
            if (name === 'rel-uri') {
                this.relUri = child.v; return true;
            }
            else if (name === 'rel_uri') {
                this.relUri = child.v; return true;
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    fragmentRef.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfpackageModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return fragmentRef;
})(commentable);

_md.fragmentRef = fragmentRef;
_md.__tagElementMapping = { '#': 'comment', 'generated-package': 'generatedPackage', 'generatedpackage': 'generatedPackage', 'fs-info': 'fsInfo', 'fsinfo': 'fsInfo', 'f': 'folder', 'd': 'document', 'ittf-example': 'ittfExample', 'ittfexample': 'ittfExample', 'artifact-example': 'artifactExample', 'artifactexample': 'artifactExample', 'build-cwd': 'buildCwd', 'buildcwd': 'buildCwd', 'd-group': 'documentGroup', 'dgroup': 'documentGroup', 'fragment': 'fragmentRef' };
// model/replaceUnknownElement( )
var wfpackageModelException = (function () {
    function wfpackageModelException(message, node, instance) {
        _classCallCheck(this, wfpackageModelException);
        // TODO node seems superflous
        if (node && instance) {
            this.message = message + ', wzElement: ' + node.wzElement + ', wzName:' + (node.wzName || '') + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        console.log('message', this.message);
        this.stack = (new Error()).stack;
        this.node = node;
    }
    return wfpackageModelException;
})();

_md.wfpackageModelException = wfpackageModelException;
var wfpackageContext = (function () {
    function wfpackageContext() {
        _classCallCheck(this, wfpackageContext);
        this.validationErrors = [];
    }
    wfpackageContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    wfpackageContext.prototype.addError = function(message, node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at);
    }
    wfpackageContext.prototype.verifyEnum = function(valueType, valueName, value, allowed, node) {
        if (value && allowed.indexOf(value) < 0) {
            var allowedStr = 'allowed: ' + allowed.join(', ');
            this.validationErrors.push(valueType + ' ' + valueName + ' has an invalid value: ' + value + ' ' + allowedStr + '. At ' + (node.wzSourceLineInfo ? node.wzSourceLineInfo.toString(node) : 'location unavailable'));
        }
    }
    return wfpackageContext;
})();

_md.wfpackageContext = wfpackageContext;
function parsestring(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}
function parseboolean(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    if (!isBoolean(value)) {
        throw new wfpackageModelException('Must be a boolean value (\"true\" or \"false\"), got:' + value, node);
    }
    return value === 'true' ? true : false;
}
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}
function isBoolean(value) {
    return value === 'true' || value === 'false';
}

