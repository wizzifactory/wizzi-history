/*
    artifact generator: C:\My\wizzi\v5\node_modules\wizzi-legacy-v4\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\v5\node_modules\wizzi-core\lib\artifacts\wfschema\model\gen\ittf\wfschema-model.js.ittf
    utc time: Mon, 07 Jan 2019 16:48:04 GMT
*/
'use strict';
// generated by wizzi.codegen.js.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var wzutils = require('wizzi-utils');
var verify = wzutils.verify;


var _md = module.exports = {};

var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row, col, sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();

_md.wzSourceLineInfo = wzSourceLineInfo;
var wfsystemBase = (function () {
    function wfsystemBase(name, sourceLineInfo) {
        _classCallCheck(this, wfsystemBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    wfsystemBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    wfsystemBase.prototype.wzSourceFilepath = function(sourceKey) {
        return this.wzRoot().loadHistory.getIttfDocumentUri(sourceKey);
    }
    wfsystemBase.prototype.wzVerify = function() {
    }
    wfsystemBase.prototype.wzInitialize = function() {
    }
    wfsystemBase.prototype.wzInitializeAsync = function(ctx, callback) {
        callback(null);
    }
    wfsystemBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    wfsystemBase.prototype.wzAddChildToColl = function(node, coll) {
        node.wzParent = this;
        node.wzMoved = true;
        coll.push(node);
    }
    wfsystemBase.prototype.wzMoveChildToColl = function(node, coll, fromColl) {
        var index = fromColl.indexOf(node);
        if (index < 0) {
            this.error('wzMoveChildToColl error. The from collection does not contain the node.', node);
        }
        fromColl.splice(index, 1);
        this.wzAddChildToColl(node, coll);
    }
    wfsystemBase.prototype.wzLoadToChildColl = function(child, type, coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    wfsystemBase.prototype.wzCreateChildColl = function(tag, name, type, coll) {
        var item = new type(name, this.wzSourceLineInfo);
        item.wzTag = tag;
        item.wzParent = this;
        item.wzCreated = true;
        coll.push(item);
        return item;
    }
    wfsystemBase.prototype.wzLoadToChildren = function(child, type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    wfsystemBase.prototype.wzLoadOneToOne = function(child, type, fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    wfsystemBase.prototype.wzRemove = function(fromColl) {
        var index = fromColl.indexOf(this);
        if (index < 0) {
            this.error('wzRemove error. The from collection does not contain the node.', this);
        }
        fromColl.splice(index, 1);
    }
    wfsystemBase.prototype.error = function(message, node) {
        throw new _md.wfsystemModelException(message, node, this);
    }
    wfsystemBase.prototype.toJsonProperties = function(result) {
        result.wzElement = this.wzElement;
        result.wzTag = this.wzTag;
        result.wzName = this.wzName;
    }
    wfsystemBase.prototype.toJsonChildren = function(result) {
        if (this.wzChildren.length > 0) {
            var children = [];
            var i, i_len=this.wzChildren.length, item;
            for (i=0; i<i_len; i++) {
                item = this.wzChildren[i];
                children.push(item.toJson());
            }
            result.wzChildren = children;
        }
    }
    return wfsystemBase;
})();

_md.wfsystemBase = wfsystemBase;

// element comment
var comment = (function (wfsystemBase) {
    _inherits(comment, wfsystemBase);
    function comment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(comment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, comment);
        this.wzElement = "comment";
        // relation comment
        this.comments = [];
    }
    comment.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    comment.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    comment.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    comment.prototype.toJsonProperties = function(result) {
        _md.wfsystemBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    comment.prototype.toJsonChildren = function(result) {
        _md.wfsystemBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    comment.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.comments);
            }
        }
        return ok;
    }
    comment.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    comment.prototype.wzVerify = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        _md.wfsystemBase.prototype.wzVerify.call(this, ctx);
    }
    comment.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        _md.wfsystemBase.prototype.wzInitialize.call(this, ctx);
    }
    return comment;
})(wfsystemBase);

_md.comment = comment;
// element commentable
var commentable = (function (wfsystemBase) {
    _inherits(commentable, wfsystemBase);
    function commentable(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(commentable.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, commentable);
        this.wzElement = "commentable";
        // relation comment
        this.comments = [];
    }
    commentable.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    commentable.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    commentable.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    commentable.prototype.toJsonProperties = function(result) {
        _md.wfsystemBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    commentable.prototype.toJsonChildren = function(result) {
        _md.wfsystemBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    commentable.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.comments);
            }
        }
        return ok;
    }
    commentable.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    commentable.prototype.wzVerify = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        _md.wfsystemBase.prototype.wzVerify.call(this, ctx);
    }
    commentable.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        _md.wfsystemBase.prototype.wzInitialize.call(this, ctx);
    }
    return commentable;
})(wfsystemBase);

_md.commentable = commentable;
/**
    element wfsystem
     The root tag of the wfsystem schema.
*/
var wfsystem = (function (commentable) {
    _inherits(wfsystem, commentable);
    function wfsystem(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(wfsystem.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, wfsystem);
        this.wzElement = "wfsystem";
        // relation xpackage
        this.packages = [];
        // relation api
        this.apis = [];
    }
    wfsystem.prototype.addXpackage = function(name, sourceLineInfo) {
        var retval = new _md.xpackage(name, sourceLineInfo);
        retval.wzParent = this;
        this.packages.push(retval);
        return retval;
    }
    wfsystem.prototype.getXpackage = function(name) {
        var found = null;
        this.packages.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    wfsystem.prototype.addApi = function(name, sourceLineInfo) {
        var retval = new _md.api(name, sourceLineInfo);
        retval.wzParent = this;
        this.apis.push(retval);
        return retval;
    }
    wfsystem.prototype.getApi = function(name) {
        var found = null;
        this.apis.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    wfsystem.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    wfsystem.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    wfsystem.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.packages.length, item;
        for (i=0; i<i_len; i++) {
            item = this.packages[i];
            items.push(item.toJson());
        }
        result['packages'] = items;
        items = [];
        var i, i_len=this.apis.length, item;
        for (i=0; i<i_len; i++) {
            item = this.apis[i];
            items.push(item.toJson());
        }
        result['apis'] = items;
    }
    wfsystem.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'a') {
            if (name === 'api') {
                return this.wzLoadToChildColl(child, _md.api, this.apis);
            }
        }
        if (_l == 7 && _ch == 'p') {
            if (name === 'package') {
                return this.wzLoadToChildColl(child, _md.xpackage, this.packages);
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    wfsystem.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    wfsystem.prototype.wzVerify = function(ctx) {
        var i, i_len=this.packages.length, item;
        for (i=0; i<i_len; i++) {
            item = this.packages[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.apis.length, item;
        for (i=0; i<i_len; i++) {
            item = this.apis[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    wfsystem.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.packages.length, item;
        for (i=0; i<i_len; i++) {
            item = this.packages[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.apis.length, item;
        for (i=0; i<i_len; i++) {
            item = this.apis[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return wfsystem;
})(commentable);

_md.wfsystem = wfsystem;
/**
    element xpackage
     The root tag of the wfpackage schema.
*/
var xpackage = (function (commentable) {
    _inherits(xpackage, commentable);
    function xpackage(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xpackage.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xpackage);
        this.allowedKINDS = [ "ittfsource", "kernel", "plugin", "demo"];
        this.KIND_ITTFSOURCE = "ittfsource";
        this.KIND_KERNEL = "kernel";
        this.KIND_PLUGIN = "plugin";
        this.KIND_DEMO = "demo";
        this.wzElement = "xpackage";
        this.kind = "ittfsource";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.version = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.title = null
        this.license = "MIT";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.fsBaseUri = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.packageBaseUri = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.gitBaseUri = null
        // relation schema
        this.schemas = [];
        // relation generatedPackage
        this.generatedPackages = [];
    }
    xpackage.KIND_ITTFSOURCE = "ittfsource";
    xpackage.KIND_KERNEL = "kernel";
    xpackage.KIND_PLUGIN = "plugin";
    xpackage.KIND_DEMO = "demo";
    xpackage.prototype.addSchema = function(name, sourceLineInfo) {
        var retval = new _md.schema(name, sourceLineInfo);
        retval.wzParent = this;
        this.schemas.push(retval);
        return retval;
    }
    xpackage.prototype.getSchema = function(name) {
        var found = null;
        this.schemas.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xpackage.prototype.addGeneratedPackage = function(name, sourceLineInfo) {
        var retval = new _md.generatedPackage(name, sourceLineInfo);
        retval.wzParent = this;
        this.generatedPackages.push(retval);
        return retval;
    }
    xpackage.prototype.getGeneratedPackage = function(name) {
        var found = null;
        this.generatedPackages.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xpackage.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    xpackage.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.kind)) {
            result["kind"] = this.kind;
        }
        if (!isEmpty(this.version)) {
            result["version"] = this.version;
        }
        if (!isEmpty(this.title)) {
            result["title"] = this.title;
        }
        if (!isEmpty(this.license)) {
            result["license"] = this.license;
        }
        if (!isEmpty(this.fsBaseUri)) {
            result["fsBaseUri"] = this.fsBaseUri;
        }
        if (!isEmpty(this.packageBaseUri)) {
            result["packageBaseUri"] = this.packageBaseUri;
        }
        if (!isEmpty(this.gitBaseUri)) {
            result["gitBaseUri"] = this.gitBaseUri;
        }
    }
    xpackage.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.schemas.length, item;
        for (i=0; i<i_len; i++) {
            item = this.schemas[i];
            items.push(item.toJson());
        }
        result['schemas'] = items;
        items = [];
        var i, i_len=this.generatedPackages.length, item;
        for (i=0; i<i_len; i++) {
            item = this.generatedPackages[i];
            items.push(item.toJson());
        }
        result['generatedPackages'] = items;
    }
    xpackage.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'k') {
            if (name === 'kind') {
                this.kind = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 't') {
            if (name === 'title') {
                this.title = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'schema') {
                return this.wzLoadToChildColl(child, _md.schema, this.schemas);
            }
        }
        if (_l == 7 && _ch == 'l') {
            if (name === 'license') {
                this.license = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'v') {
            if (name === 'version') {
                this.version = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'f') {
            if (name === 'fs-base-uri') {
                this.fsBaseUri = child.v; return true;
            }
            else if (name === 'fs_base_uri') {
                this.fsBaseUri = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 'g') {
            if (name === 'git-base-uri') {
                this.gitBaseUri = child.v; return true;
            }
            else if (name === 'git_base_uri') {
                this.gitBaseUri = child.v; return true;
            }
        }
        if (_l == 16 && _ch == 'g') {
            if (name === 'generatedpackage') {
                return this.wzLoadToChildColl(child, _md.generatedPackage, this.generatedPackages);
            }
        }
        if (_l == 16 && _ch == 'p') {
            if (name === 'package-base-uri') {
                this.packageBaseUri = child.v; return true;
            }
            else if (name === 'package_base_uri') {
                this.packageBaseUri = child.v; return true;
            }
        }
        if (_l == 17 && _ch == 'g') {
            if (name === 'generated-package') {
                return this.wzLoadToChildColl(child, _md.generatedPackage, this.generatedPackages);
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    xpackage.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    xpackage.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("xpackage", "kind", this.kind, this.allowedKINDS, this);
        var i, i_len=this.schemas.length, item;
        for (i=0; i<i_len; i++) {
            item = this.schemas[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.generatedPackages.length, item;
        for (i=0; i<i_len; i++) {
            item = this.generatedPackages[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    xpackage.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.schemas.length, item;
        for (i=0; i<i_len; i++) {
            item = this.schemas[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.generatedPackages.length, item;
        for (i=0; i<i_len; i++) {
            item = this.generatedPackages[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    xpackage.prototype.getJobs = function() {
        var ret = {
            name: this.wzName, 
            title: this.title, 
            srcCwd: this.srcCwd, 
            assetsCwd: this.assetsCwd, 
            buildCwds: [], 
            schemas: [], 
            jobs: [
                {
                    title: 'build ' + this.wzName + ' assets', 
                    exe: 'node', 
                    cwd: this.srcCwd, 
                    args: 'index'
                }
            ]
        };
        if (this.schemas.length > 0) {
            ret.jobs.push({
                title: 'generate ' + this.wzName + ' wizzi model types in the assets folder', 
                exe: 'node', 
                cwd: this.assetsCwd, 
                args: 'schemas'
            });
            var i, i_len=this.schemas.length, item;
            for (i=0; i<i_len; i++) {
                item = this.schemas[i];
                ret.schemas.push({
                    name: item.wzName
                });
            }
        }
        var i, i_len=this.buildCwds.length, item;
        for (i=0; i<i_len; i++) {
            item = this.buildCwds[i];
            ret.buildCwds.push({
                cwd: item.wzName, 
                title: item.title
            });
        }
        return ret;
    }
    return xpackage;
})(commentable);

_md.xpackage = xpackage;
/**
    element schema
     A wizzi schema defined by this wizzi package of kind plugin
*/
var schema = (function (commentable) {
    _inherits(schema, commentable);
    function schema(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(schema.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, schema);
        this.wzElement = "schema";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.title = null
        // relation transformer
        this.transformers = [];
        // relation artifact
        this.artifacts = [];
        // relation example
        this.examples = [];
    }
    schema.prototype.addTransformer = function(name, sourceLineInfo) {
        var retval = new _md.transformer(name, sourceLineInfo);
        retval.wzParent = this;
        this.transformers.push(retval);
        return retval;
    }
    schema.prototype.getTransformer = function(name) {
        var found = null;
        this.transformers.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    schema.prototype.addArtifact = function(name, sourceLineInfo) {
        var retval = new _md.artifact(name, sourceLineInfo);
        retval.wzParent = this;
        this.artifacts.push(retval);
        return retval;
    }
    schema.prototype.getArtifact = function(name) {
        var found = null;
        this.artifacts.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    schema.prototype.addExample = function(name, sourceLineInfo) {
        var retval = new _md.example(name, sourceLineInfo);
        retval.wzParent = this;
        this.examples.push(retval);
        return retval;
    }
    schema.prototype.getExample = function(name) {
        var found = null;
        this.examples.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    schema.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    schema.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.title)) {
            result["title"] = this.title;
        }
    }
    schema.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.transformers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.transformers[i];
            items.push(item.toJson());
        }
        result['transformers'] = items;
        items = [];
        var i, i_len=this.artifacts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.artifacts[i];
            items.push(item.toJson());
        }
        result['artifacts'] = items;
        items = [];
        var i, i_len=this.examples.length, item;
        for (i=0; i<i_len; i++) {
            item = this.examples[i];
            items.push(item.toJson());
        }
        result['examples'] = items;
    }
    schema.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 't') {
            if (name === 'title') {
                this.title = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'e') {
            if (name === 'example') {
                return this.wzLoadToChildColl(child, _md.example, this.examples);
            }
        }
        if (_l == 8 && _ch == 'a') {
            if (name === 'artifact') {
                return this.wzLoadToChildColl(child, _md.artifact, this.artifacts);
            }
        }
        if (_l == 11 && _ch == 'i') {
            if (name === 'ittfexample') {
                return this.wzLoadToChildColl(child, _md.ittfExample, this.examples);
            }
        }
        if (_l == 11 && _ch == 't') {
            if (name === 'transformer') {
                return this.wzLoadToChildColl(child, _md.transformer, this.transformers);
            }
        }
        if (_l == 12 && _ch == 'i') {
            if (name === 'ittf-example') {
                return this.wzLoadToChildColl(child, _md.ittfExample, this.examples);
            }
        }
        if (_l == 15 && _ch == 'a') {
            if (name === 'artifactexample') {
                return this.wzLoadToChildColl(child, _md.artifactExample, this.examples);
            }
        }
        if (_l == 16 && _ch == 'a') {
            if (name === 'artifact-example') {
                return this.wzLoadToChildColl(child, _md.artifactExample, this.examples);
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    schema.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    schema.prototype.wzVerify = function(ctx) {
        var i, i_len=this.transformers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.transformers[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.artifacts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.artifacts[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.examples.length, item;
        for (i=0; i<i_len; i++) {
            item = this.examples[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    schema.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.transformers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.transformers[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.artifacts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.artifacts[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.examples.length, item;
        for (i=0; i<i_len; i++) {
            item = this.examples[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return schema;
})(commentable);

_md.schema = schema;
/**
    element transformer
     A model transformer
*/
var transformer = (function (commentable) {
    _inherits(transformer, commentable);
    function transformer(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(transformer.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, transformer);
        this.wzElement = "transformer";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.title = null
    }
    transformer.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    transformer.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.title)) {
            result["title"] = this.title;
        }
    }
    transformer.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    transformer.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 't') {
            if (name === 'title') {
                this.title = child.v; return true;
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    transformer.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return transformer;
})(commentable);

_md.transformer = transformer;
/**
    element artifact
     An artifact generator
*/
var artifact = (function (commentable) {
    _inherits(artifact, commentable);
    function artifact(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(artifact.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, artifact);
        this.allowedKINDS = [ "ittf", "codewrite"];
        this.KIND_ITTF = "ittf";
        this.KIND_CODEWRITE = "codewrite";
        this.wzElement = "artifact";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.title = null
        this.kind = "ittf";
    }
    artifact.KIND_ITTF = "ittf";
    artifact.KIND_CODEWRITE = "codewrite";
    artifact.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    artifact.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.title)) {
            result["title"] = this.title;
        }
        if (!isEmpty(this.kind)) {
            result["kind"] = this.kind;
        }
    }
    artifact.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    artifact.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'k') {
            if (name === 'kind') {
                this.kind = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 't') {
            if (name === 'title') {
                this.title = child.v; return true;
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    artifact.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    artifact.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("artifact", "kind", this.kind, this.allowedKINDS, this);
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    return artifact;
})(commentable);

_md.artifact = artifact;
/**
    element generatedPackage
     When the package kind is 'ittfsource' the element 'generatedPackage'
        main contain the description of generated packages.
*/
var generatedPackage = (function (commentable) {
    _inherits(generatedPackage, commentable);
    function generatedPackage(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(generatedPackage.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, generatedPackage);
        this.allowedKINDS = [ "kernel", "plugin", "demo"];
        this.KIND_KERNEL = "kernel";
        this.KIND_PLUGIN = "plugin";
        this.KIND_DEMO = "demo";
        this.wzElement = "generatedPackage";
        this.kind = "kernel";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.version = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.title = null
        // The full path is: (parent ittfsource package) package-base-uri / (this) sourceFolder
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.sourceFolder = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.gitBaseUri = null
        // relation buildCwd
        this.buildCwds = [];
    }
    generatedPackage.KIND_KERNEL = "kernel";
    generatedPackage.KIND_PLUGIN = "plugin";
    generatedPackage.KIND_DEMO = "demo";
    generatedPackage.prototype.addBuildCwd = function(name, sourceLineInfo) {
        var retval = new _md.buildCwd(name, sourceLineInfo);
        retval.wzParent = this;
        this.buildCwds.push(retval);
        return retval;
    }
    generatedPackage.prototype.getBuildCwd = function(name) {
        var found = null;
        this.buildCwds.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    generatedPackage.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    generatedPackage.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.kind)) {
            result["kind"] = this.kind;
        }
        if (!isEmpty(this.version)) {
            result["version"] = this.version;
        }
        if (!isEmpty(this.title)) {
            result["title"] = this.title;
        }
        if (!isEmpty(this.sourceFolder)) {
            result["sourceFolder"] = this.sourceFolder;
        }
        if (!isEmpty(this.gitBaseUri)) {
            result["gitBaseUri"] = this.gitBaseUri;
        }
    }
    generatedPackage.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.buildCwds.length, item;
        for (i=0; i<i_len; i++) {
            item = this.buildCwds[i];
            items.push(item.toJson());
        }
        result['buildCwds'] = items;
    }
    generatedPackage.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'k') {
            if (name === 'kind') {
                this.kind = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 't') {
            if (name === 'title') {
                this.title = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'v') {
            if (name === 'version') {
                this.version = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'b') {
            if (name === 'buildcwd') {
                return this.wzLoadToChildColl(child, _md.buildCwd, this.buildCwds);
            }
        }
        if (_l == 9 && _ch == 'b') {
            if (name === 'build-cwd') {
                return this.wzLoadToChildColl(child, _md.buildCwd, this.buildCwds);
            }
        }
        if (_l == 12 && _ch == 'g') {
            if (name === 'git-base-uri') {
                this.gitBaseUri = child.v; return true;
            }
            else if (name === 'git_base_uri') {
                this.gitBaseUri = child.v; return true;
            }
        }
        if (_l == 13 && _ch == 's') {
            if (name === 'source-folder') {
                this.sourceFolder = child.v; return true;
            }
            else if (name === 'source_folder') {
                this.sourceFolder = child.v; return true;
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    generatedPackage.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    generatedPackage.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("generatedPackage", "kind", this.kind, this.allowedKINDS, this);
        var i, i_len=this.buildCwds.length, item;
        for (i=0; i<i_len; i++) {
            item = this.buildCwds[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    generatedPackage.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.buildCwds.length, item;
        for (i=0; i<i_len; i++) {
            item = this.buildCwds[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return generatedPackage;
})(commentable);

_md.generatedPackage = generatedPackage;
/**
    element example
     The base node for examples
*/
var example = (function (commentable) {
    _inherits(example, commentable);
    function example(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(example.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, example);
        this.wzElement = "example";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.title = null
        // relation node
        this.nodes = [];
    }
    example.prototype.addNode = function(name, sourceLineInfo) {
        var retval = new _md.node(name, sourceLineInfo);
        retval.wzParent = this;
        this.nodes.push(retval);
        return retval;
    }
    example.prototype.getNode = function(name) {
        var found = null;
        this.nodes.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    example.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    example.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.title)) {
            result["title"] = this.title;
        }
    }
    example.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.nodes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.nodes[i];
            items.push(item.toJson());
        }
        result['nodes'] = items;
    }
    example.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'n') {
            if (name === 'node') {
                return this.wzLoadToChildColl(child, _md.node, this.nodes);
            }
        }
        if (_l == 5 && _ch == 't') {
            if (name === 'title') {
                this.title = child.v; return true;
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    example.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    example.prototype.wzVerify = function(ctx) {
        var i, i_len=this.nodes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.nodes[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    example.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.nodes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.nodes[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return example;
})(commentable);

_md.example = example;
/**
    element ittfExample
     An IttfDocument example
*/
var ittfExample = (function (example) {
    _inherits(ittfExample, example);
    function ittfExample(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ittfExample.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ittfExample);
        this.wzElement = "ittfExample";
    }
    ittfExample.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    ittfExample.prototype.toJsonProperties = function(result) {
        _md.example.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    ittfExample.prototype.toJsonChildren = function(result) {
        _md.example.prototype.toJsonChildren.call(this, result);
    }
    return ittfExample;
})(example);

_md.ittfExample = ittfExample;
/**
    element artifactExample
     An artifact generation example
*/
var artifactExample = (function (example) {
    _inherits(artifactExample, example);
    function artifactExample(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(artifactExample.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, artifactExample);
        this.wzElement = "artifactExample";
    }
    artifactExample.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    artifactExample.prototype.toJsonProperties = function(result) {
        _md.example.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    artifactExample.prototype.toJsonChildren = function(result) {
        _md.example.prototype.toJsonChildren.call(this, result);
    }
    return artifactExample;
})(example);

_md.artifactExample = artifactExample;
// element node
var node = (function (commentable) {
    _inherits(node, commentable);
    function node(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(node.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, node);
        this.wzElement = "node";
    }
    node.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    node.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    node.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    return node;
})(commentable);

_md.node = node;
// element buildCwd
var buildCwd = (function (commentable) {
    _inherits(buildCwd, commentable);
    function buildCwd(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(buildCwd.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, buildCwd);
        this.wzElement = "buildCwd";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.title = null
    }
    buildCwd.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    buildCwd.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.title)) {
            result["title"] = this.title;
        }
    }
    buildCwd.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    buildCwd.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 't') {
            if (name === 'title') {
                this.title = child.v; return true;
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    buildCwd.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return buildCwd;
})(commentable);

_md.buildCwd = buildCwd;
// element api
var api = (function (commentable) {
    _inherits(api, commentable);
    function api(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(api.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, api);
        this.allowedKINDS = [ "kernel", "plugin"];
        this.KIND_KERNEL = "kernel";
        this.KIND_PLUGIN = "plugin";
        this.wzElement = "api";
        this.kind = "kernel";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.id = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.extends = null
        // relation implementation
        this.implementation = null;
        // relation xinterface
        this.interface = null;
        // relation type
        this.type = null;
    }
    api.KIND_KERNEL = "kernel";
    api.KIND_PLUGIN = "plugin";
    api.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    api.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.kind)) {
            result["kind"] = this.kind;
        }
        if (!isEmpty(this.id)) {
            result["id"] = this.id;
        }
        if (!isEmpty(this.extends)) {
            result["extends"] = this.extends;
        }
    }
    api.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.implementation != null) {
            result['implementation'] = this.implementation.toJson();
        }
        else {
            result['implementation'] = null;
        }
        if (this.interface != null) {
            result['interface'] = this.interface.toJson();
        }
        else {
            result['interface'] = null;
        }
        if (this.type != null) {
            result['type'] = this.type.toJson();
        }
        else {
            result['type'] = null;
        }
    }
    api.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 2 && _ch == 'i') {
            if (name === 'id') {
                this.id = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'k') {
            if (name === 'kind') {
                this.kind = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                return this.wzLoadOneToOne(child, _md.type, 'type');
            }
        }
        if (_l == 7 && _ch == 'e') {
            if (name === 'extends') {
                this.extends = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'i') {
            if (name === 'interface') {
                return this.wzLoadOneToOne(child, _md.xinterface, 'interface');
            }
        }
        if (_l == 14 && _ch == 'i') {
            if (name === 'implementation') {
                return this.wzLoadOneToOne(child, _md.implementation, 'implementation');
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    api.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    api.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("api", "kind", this.kind, this.allowedKINDS, this);
        if (this.implementation != null) {
            this.implementation.wzVerify(ctx);
        }
        if (this.interface != null) {
            this.interface.wzVerify(ctx);
        }
        if (this.type != null) {
            this.type.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    api.prototype.wzInitialize = function(ctx) {
        if (this.implementation != null) {
            this.implementation.wzInitialize(ctx);
        }
        if (this.interface != null) {
            this.interface.wzInitialize(ctx);
        }
        if (this.type != null) {
            this.type.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return api;
})(commentable);

_md.api = api;
// element implementation
var implementation = (function (commentable) {
    _inherits(implementation, commentable);
    function implementation(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(implementation.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, implementation);
        this.allowedTYPES = [ "module", "pojo", "class-instance"];
        this.TYPE_MODULE = "module";
        this.TYPE_POJO = "pojo";
        this.TYPE_CLASS_INSTANCE = "class-instance";
        this.wzElement = "implementation";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.path = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.standardPath = null
    }
    implementation.TYPE_MODULE = "module";
    implementation.TYPE_POJO = "pojo";
    implementation.TYPE_CLASS_INSTANCE = "class-instance";
    implementation.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    implementation.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
        if (!isEmpty(this.path)) {
            result["path"] = this.path;
        }
        if (!isEmpty(this.standardPath)) {
            result["standardPath"] = this.standardPath;
        }
    }
    implementation.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    implementation.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'p') {
            if (name === 'path') {
                this.path = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 13 && _ch == 's') {
            if (name === 'standard-path') {
                this.standardPath = child.v; return true;
            }
            else if (name === 'standard_path') {
                this.standardPath = child.v; return true;
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    implementation.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    implementation.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("implementation", "type", this.type, this.allowedTYPES, this);
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    return implementation;
})(commentable);

_md.implementation = implementation;
// element xinterface
var xinterface = (function (commentable) {
    _inherits(xinterface, commentable);
    function xinterface(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xinterface.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xinterface);
        this.wzElement = "xinterface";
        // relation property
        this.properties = [];
        // relation method
        this.methods = [];
    }
    xinterface.prototype.addProperty = function(name, sourceLineInfo) {
        var retval = new _md.property(name, sourceLineInfo);
        retval.wzParent = this;
        this.properties.push(retval);
        return retval;
    }
    xinterface.prototype.getProperty = function(name) {
        var found = null;
        this.properties.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xinterface.prototype.addMethod = function(name, sourceLineInfo) {
        var retval = new _md.method(name, sourceLineInfo);
        retval.wzParent = this;
        this.methods.push(retval);
        return retval;
    }
    xinterface.prototype.getMethod = function(name) {
        var found = null;
        this.methods.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xinterface.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    xinterface.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    xinterface.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            items.push(item.toJson());
        }
        result['properties'] = items;
        items = [];
        var i, i_len=this.methods.length, item;
        for (i=0; i<i_len; i++) {
            item = this.methods[i];
            items.push(item.toJson());
        }
        result['methods'] = items;
    }
    xinterface.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'c') {
            if (name === 'ctor') {
                return this.wzLoadToChildColl(child, _md.ctor, this.methods);
            }
        }
        if (_l == 6 && _ch == 'm') {
            if (name === 'method') {
                return this.wzLoadToChildColl(child, _md.method, this.methods);
            }
        }
        if (_l == 8 && _ch == 'p') {
            if (name === 'property') {
                return this.wzLoadToChildColl(child, _md.property, this.properties);
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    xinterface.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    xinterface.prototype.wzVerify = function(ctx) {
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.methods.length, item;
        for (i=0; i<i_len; i++) {
            item = this.methods[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    xinterface.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.methods.length, item;
        for (i=0; i<i_len; i++) {
            item = this.methods[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return xinterface;
})(commentable);

_md.xinterface = xinterface;
// element type
var type = (function (commentable) {
    _inherits(type, commentable);
    function type(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(type.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, type);
        this.wzElement = "type";
        // relation property
        this.properties = [];
        // relation method
        this.methods = [];
    }
    type.prototype.addProperty = function(name, sourceLineInfo) {
        var retval = new _md.property(name, sourceLineInfo);
        retval.wzParent = this;
        this.properties.push(retval);
        return retval;
    }
    type.prototype.getProperty = function(name) {
        var found = null;
        this.properties.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    type.prototype.addMethod = function(name, sourceLineInfo) {
        var retval = new _md.method(name, sourceLineInfo);
        retval.wzParent = this;
        this.methods.push(retval);
        return retval;
    }
    type.prototype.getMethod = function(name) {
        var found = null;
        this.methods.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    type.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    type.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    type.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            items.push(item.toJson());
        }
        result['properties'] = items;
        items = [];
        var i, i_len=this.methods.length, item;
        for (i=0; i<i_len; i++) {
            item = this.methods[i];
            items.push(item.toJson());
        }
        result['methods'] = items;
    }
    type.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'c') {
            if (name === 'ctor') {
                return this.wzLoadToChildColl(child, _md.ctor, this.methods);
            }
        }
        if (_l == 6 && _ch == 'm') {
            if (name === 'method') {
                return this.wzLoadToChildColl(child, _md.method, this.methods);
            }
        }
        if (_l == 8 && _ch == 'p') {
            if (name === 'property') {
                return this.wzLoadToChildColl(child, _md.property, this.properties);
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    type.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    type.prototype.wzVerify = function(ctx) {
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.methods.length, item;
        for (i=0; i<i_len; i++) {
            item = this.methods[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    type.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.methods.length, item;
        for (i=0; i<i_len; i++) {
            item = this.methods[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return type;
})(commentable);

_md.type = type;
// element method
var method = (function (commentable) {
    _inherits(method, commentable);
    function method(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(method.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, method);
        this.allowedTYPES = [ "function", "high-order-function", "facade-function"];
        this.TYPE_XFUNCTION = "function";
        this.TYPE_HIGH_ORDER_FUNCTION = "high-order-function";
        this.TYPE_FACADE_FUNCTION = "facade-function";
        this.wzElement = "method";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
        this.isAsync = false;
        this.isInternal = false;
        // when type == facade-function
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.implementedBy = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.calledBy = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.throwIf = null
        // relation param
        this.params = [];
        // relation xreturn
        this.return = null;
        // relation info
        this.info = null;
    }
    method.TYPE_XFUNCTION = "function";
    method.TYPE_HIGH_ORDER_FUNCTION = "high-order-function";
    method.TYPE_FACADE_FUNCTION = "facade-function";
    method.prototype.addParam = function(name, sourceLineInfo) {
        var retval = new _md.param(name, sourceLineInfo);
        retval.wzParent = this;
        this.params.push(retval);
        return retval;
    }
    method.prototype.getParam = function(name) {
        var found = null;
        this.params.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    method.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    method.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
        result["isAsync"] = this.isAsync;
        result["isInternal"] = this.isInternal;
        if (!isEmpty(this.implementedBy)) {
            result["implementedBy"] = this.implementedBy;
        }
        if (!isEmpty(this.calledBy)) {
            result["calledBy"] = this.calledBy;
        }
        if (!isEmpty(this.throwIf)) {
            result["throwIf"] = this.throwIf;
        }
    }
    method.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            items.push(item.toJson());
        }
        result['params'] = items;
        if (this.return != null) {
            result['return'] = this.return.toJson();
        }
        else {
            result['return'] = null;
        }
        if (this.info != null) {
            result['info'] = this.info.toJson();
        }
        else {
            result['info'] = null;
        }
    }
    method.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'i') {
            if (name === 'info') {
                return this.wzLoadOneToOne(child, _md.info, 'info');
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'p') {
            if (name === 'param') {
                return this.wzLoadToChildColl(child, _md.param, this.params);
            }
        }
        if (_l == 6 && _ch == 'r') {
            if (name === 'return') {
                return this.wzLoadOneToOne(child, _md.xreturn, 'return');
            }
        }
        if (_l == 8 && _ch == 'i') {
            if (name === 'is-async') {
                this.isAsync = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_async') {
                this.isAsync = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 8 && _ch == 't') {
            if (name === 'throw-if') {
                this.throwIf = child.v; return true;
            }
            else if (name === 'throw_if') {
                this.throwIf = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'c') {
            if (name === 'called-by') {
                this.calledBy = child.v; return true;
            }
            else if (name === 'called_by') {
                this.calledBy = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'i') {
            if (name === 'is-internal') {
                this.isInternal = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_internal') {
                this.isInternal = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 14 && _ch == 'i') {
            if (name === 'implemented-by') {
                this.implementedBy = child.v; return true;
            }
            else if (name === 'implemented_by') {
                this.implementedBy = child.v; return true;
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    method.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    method.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("method", "type", this.type, this.allowedTYPES, this);
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzVerify(ctx);
        }
        if (this.return != null) {
            this.return.wzVerify(ctx);
        }
        if (this.info != null) {
            this.info.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    method.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzInitialize(ctx);
        }
        if (this.return != null) {
            this.return.wzInitialize(ctx);
        }
        if (this.info != null) {
            this.info.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return method;
})(commentable);

_md.method = method;
// element ctor
var ctor = (function (method) {
    _inherits(ctor, method);
    function ctor(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ctor.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ctor);
        this.wzElement = "ctor";
    }
    ctor.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    ctor.prototype.toJsonProperties = function(result) {
        _md.method.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    ctor.prototype.toJsonChildren = function(result) {
        _md.method.prototype.toJsonChildren.call(this, result);
    }
    return ctor;
})(method);

_md.ctor = ctor;
// element param
var param = (function (commentable) {
    _inherits(param, commentable);
    function param(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(param.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, param);
        this.allowedTYPES = [ "string", "boolean", "integer", "float", "date", "object", "any", "array", "function", "alternative", "callback-function"];
        this.TYPE_STRING = "string";
        this.TYPE_XBOOLEAN = "boolean";
        this.TYPE_INTEGER = "integer";
        this.TYPE_XFLOAT = "float";
        this.TYPE_DATE = "date";
        this.TYPE_OBJECT = "object";
        this.TYPE_ANY = "any";
        this.TYPE_ARRAY = "array";
        this.TYPE_XFUNCTION = "function";
        this.TYPE_ALTERNATIVE = "alternative";
        this.TYPE_CALLBACK_FUNCTION = "callback-function";
        this.wzElement = "param";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.defaultValue = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.isRequired = null
        this.isPOJO = false;
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.apiRef = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.iface = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.apiRef = null
        // relation value
        // when type == alternative
        this.values = [];
        // relation argument
        // when type == callback-function
        this.xarguments = [];
        // relation property
        // when type == object
        this.properties = [];
        // relation item
        // when type == array
        this.items = [];
        // relation restrict
        this.restrict = null;
    }
    param.TYPE_STRING = "string";
    param.TYPE_XBOOLEAN = "boolean";
    param.TYPE_INTEGER = "integer";
    param.TYPE_XFLOAT = "float";
    param.TYPE_DATE = "date";
    param.TYPE_OBJECT = "object";
    param.TYPE_ANY = "any";
    param.TYPE_ARRAY = "array";
    param.TYPE_XFUNCTION = "function";
    param.TYPE_ALTERNATIVE = "alternative";
    param.TYPE_CALLBACK_FUNCTION = "callback-function";
    param.prototype.addValue = function(name, sourceLineInfo) {
        var retval = new _md.value(name, sourceLineInfo);
        retval.wzParent = this;
        this.values.push(retval);
        return retval;
    }
    param.prototype.getValue = function(name) {
        var found = null;
        this.values.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    param.prototype.addArgument = function(name, sourceLineInfo) {
        var retval = new _md.argument(name, sourceLineInfo);
        retval.wzParent = this;
        this.xarguments.push(retval);
        return retval;
    }
    param.prototype.getArgument = function(name) {
        var found = null;
        this.xarguments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    param.prototype.addProperty = function(name, sourceLineInfo) {
        var retval = new _md.property(name, sourceLineInfo);
        retval.wzParent = this;
        this.properties.push(retval);
        return retval;
    }
    param.prototype.getProperty = function(name) {
        var found = null;
        this.properties.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    param.prototype.addItem = function(name, sourceLineInfo) {
        var retval = new _md.item(name, sourceLineInfo);
        retval.wzParent = this;
        this.items.push(retval);
        return retval;
    }
    param.prototype.getItem = function(name) {
        var found = null;
        this.items.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    param.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    param.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
        if (!isEmpty(this.defaultValue)) {
            result["defaultValue"] = this.defaultValue;
        }
        if (!isEmpty(this.isRequired)) {
            result["isRequired"] = this.isRequired;
        }
        result["isPOJO"] = this.isPOJO;
        if (!isEmpty(this.apiRef)) {
            result["apiRef"] = this.apiRef;
        }
        if (!isEmpty(this.iface)) {
            result["iface"] = this.iface;
        }
        if (!isEmpty(this.apiRef)) {
            result["apiRef"] = this.apiRef;
        }
    }
    param.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            items.push(item.toJson());
        }
        result['values'] = items;
        items = [];
        var i, i_len=this.xarguments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.xarguments[i];
            items.push(item.toJson());
        }
        result['xarguments'] = items;
        items = [];
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            items.push(item.toJson());
        }
        result['properties'] = items;
        items = [];
        var i, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            items.push(item.toJson());
        }
        result['items'] = items;
        if (this.restrict != null) {
            result['restrict'] = this.restrict.toJson();
        }
        else {
            result['restrict'] = null;
        }
    }
    param.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'i') {
            if (name === 'item') {
                return this.wzLoadToChildColl(child, _md.item, this.items);
            }
        }
        if (_l == 4 && _ch == 'p') {
            if (name === 'pojo') {
                this.isPOJO = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'i') {
            if (name === 'iface') {
                this.iface = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                return this.wzLoadToChildColl(child, _md.value, this.values);
            }
        }
        if (_l == 7 && _ch == 'a') {
            if (name === 'api-ref') {
                this.apiRef = child.v; return true;
            }
            else if (name === 'api_ref') {
                this.apiRef = child.v; return true;
            }
            else if (name === 'api-ref') {
                this.apiRef = child.v; return true;
            }
            else if (name === 'api_ref') {
                this.apiRef = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'd') {
            if (name === 'default') {
                this.defaultValue = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'a') {
            if (name === 'argument') {
                return this.wzLoadToChildColl(child, _md.argument, this.xarguments);
            }
        }
        if (_l == 8 && _ch == 'p') {
            if (name === 'property') {
                return this.wzLoadToChildColl(child, _md.property, this.properties);
            }
        }
        if (_l == 8 && _ch == 'r') {
            if (name === 'restrict') {
                return this.wzLoadOneToOne(child, _md.restrict, 'restrict');
            }
        }
        if (_l == 11 && _ch == 'i') {
            if (name === 'is-required') {
                this.isRequired = child.v; return true;
            }
            else if (name === 'is_required') {
                this.isRequired = child.v; return true;
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    param.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    param.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("param", "type", this.type, this.allowedTYPES, this);
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.xarguments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.xarguments[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            item.wzVerify(ctx);
        }
        if (this.restrict != null) {
            this.restrict.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    param.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.xarguments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.xarguments[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            item.wzInitialize(ctx);
        }
        if (this.restrict != null) {
            this.restrict.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return param;
})(commentable);

_md.param = param;
// element on
var on = (function (commentable) {
    _inherits(on, commentable);
    function on(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(on.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, on);
        this.wzElement = "on";
        // relation value
        this.values = [];
    }
    on.prototype.addValue = function(name, sourceLineInfo) {
        var retval = new _md.value(name, sourceLineInfo);
        retval.wzParent = this;
        this.values.push(retval);
        return retval;
    }
    on.prototype.getValue = function(name) {
        var found = null;
        this.values.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    on.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    on.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    on.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            items.push(item.toJson());
        }
        result['values'] = items;
    }
    on.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                return this.wzLoadToChildColl(child, _md.value, this.values);
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    on.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    on.prototype.wzVerify = function(ctx) {
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    on.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return on;
})(commentable);

_md.on = on;
// element error
var error = (function (commentable) {
    _inherits(error, commentable);
    function error(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(error.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, error);
        this.wzElement = "error";
    }
    error.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    error.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    error.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    return error;
})(commentable);

_md.error = error;
// element argument
var argument = (function (commentable) {
    _inherits(argument, commentable);
    function argument(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(argument.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, argument);
        this.allowedTYPES = [ "string", "boolean", "integer", "float", "date", "object", "any", "array", "function", "alternative", "switch", "exception"];
        this.TYPE_STRING = "string";
        this.TYPE_XBOOLEAN = "boolean";
        this.TYPE_INTEGER = "integer";
        this.TYPE_XFLOAT = "float";
        this.TYPE_DATE = "date";
        this.TYPE_OBJECT = "object";
        this.TYPE_ANY = "any";
        this.TYPE_ARRAY = "array";
        this.TYPE_XFUNCTION = "function";
        this.TYPE_ALTERNATIVE = "alternative";
        this.TYPE_XSWITCH = "switch";
        this.TYPE_EXCEPTION = "exception";
        this.wzElement = "argument";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.defaultValue = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.isRequired = null
        this.isPOJO = false;
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.apiRef = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.iface = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.apiRef = null
        // relation value
        // when type == alternative
        this.values = [];
        // relation on
        // when type == switch
        this.ons = [];
        // relation property
        // when type == object
        this.properties = [];
        // relation item
        // when type == array
        this.items = [];
        // relation restrict
        this.restrict = null;
    }
    argument.TYPE_STRING = "string";
    argument.TYPE_XBOOLEAN = "boolean";
    argument.TYPE_INTEGER = "integer";
    argument.TYPE_XFLOAT = "float";
    argument.TYPE_DATE = "date";
    argument.TYPE_OBJECT = "object";
    argument.TYPE_ANY = "any";
    argument.TYPE_ARRAY = "array";
    argument.TYPE_XFUNCTION = "function";
    argument.TYPE_ALTERNATIVE = "alternative";
    argument.TYPE_XSWITCH = "switch";
    argument.TYPE_EXCEPTION = "exception";
    argument.prototype.addValue = function(name, sourceLineInfo) {
        var retval = new _md.value(name, sourceLineInfo);
        retval.wzParent = this;
        this.values.push(retval);
        return retval;
    }
    argument.prototype.getValue = function(name) {
        var found = null;
        this.values.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    argument.prototype.addOn = function(name, sourceLineInfo) {
        var retval = new _md.on(name, sourceLineInfo);
        retval.wzParent = this;
        this.ons.push(retval);
        return retval;
    }
    argument.prototype.getOn = function(name) {
        var found = null;
        this.ons.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    argument.prototype.addProperty = function(name, sourceLineInfo) {
        var retval = new _md.property(name, sourceLineInfo);
        retval.wzParent = this;
        this.properties.push(retval);
        return retval;
    }
    argument.prototype.getProperty = function(name) {
        var found = null;
        this.properties.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    argument.prototype.addItem = function(name, sourceLineInfo) {
        var retval = new _md.item(name, sourceLineInfo);
        retval.wzParent = this;
        this.items.push(retval);
        return retval;
    }
    argument.prototype.getItem = function(name) {
        var found = null;
        this.items.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    argument.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    argument.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
        if (!isEmpty(this.defaultValue)) {
            result["defaultValue"] = this.defaultValue;
        }
        if (!isEmpty(this.isRequired)) {
            result["isRequired"] = this.isRequired;
        }
        result["isPOJO"] = this.isPOJO;
        if (!isEmpty(this.apiRef)) {
            result["apiRef"] = this.apiRef;
        }
        if (!isEmpty(this.iface)) {
            result["iface"] = this.iface;
        }
        if (!isEmpty(this.apiRef)) {
            result["apiRef"] = this.apiRef;
        }
    }
    argument.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            items.push(item.toJson());
        }
        result['values'] = items;
        items = [];
        var i, i_len=this.ons.length, item;
        for (i=0; i<i_len; i++) {
            item = this.ons[i];
            items.push(item.toJson());
        }
        result['ons'] = items;
        items = [];
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            items.push(item.toJson());
        }
        result['properties'] = items;
        items = [];
        var i, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            items.push(item.toJson());
        }
        result['items'] = items;
        if (this.restrict != null) {
            result['restrict'] = this.restrict.toJson();
        }
        else {
            result['restrict'] = null;
        }
    }
    argument.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 2 && _ch == 'o') {
            if (name === 'on') {
                return this.wzLoadToChildColl(child, _md.on, this.ons);
            }
        }
        if (_l == 4 && _ch == 'i') {
            if (name === 'item') {
                return this.wzLoadToChildColl(child, _md.item, this.items);
            }
        }
        if (_l == 4 && _ch == 'p') {
            if (name === 'pojo') {
                this.isPOJO = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'i') {
            if (name === 'iface') {
                this.iface = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                return this.wzLoadToChildColl(child, _md.value, this.values);
            }
        }
        if (_l == 7 && _ch == 'a') {
            if (name === 'api-ref') {
                this.apiRef = child.v; return true;
            }
            else if (name === 'api_ref') {
                this.apiRef = child.v; return true;
            }
            else if (name === 'api-ref') {
                this.apiRef = child.v; return true;
            }
            else if (name === 'api_ref') {
                this.apiRef = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'd') {
            if (name === 'default') {
                this.defaultValue = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'p') {
            if (name === 'property') {
                return this.wzLoadToChildColl(child, _md.property, this.properties);
            }
        }
        if (_l == 8 && _ch == 'r') {
            if (name === 'restrict') {
                return this.wzLoadOneToOne(child, _md.restrict, 'restrict');
            }
        }
        if (_l == 11 && _ch == 'i') {
            if (name === 'is-required') {
                this.isRequired = child.v; return true;
            }
            else if (name === 'is_required') {
                this.isRequired = child.v; return true;
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    argument.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    argument.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("argument", "type", this.type, this.allowedTYPES, this);
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.ons.length, item;
        for (i=0; i<i_len; i++) {
            item = this.ons[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            item.wzVerify(ctx);
        }
        if (this.restrict != null) {
            this.restrict.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    argument.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.ons.length, item;
        for (i=0; i<i_len; i++) {
            item = this.ons[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            item.wzInitialize(ctx);
        }
        if (this.restrict != null) {
            this.restrict.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return argument;
})(commentable);

_md.argument = argument;
// element on
var on = (function (commentable) {
    _inherits(on, commentable);
    function on(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(on.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, on);
        this.wzElement = "on";
        // relation value
        this.values = [];
    }
    on.prototype.addValue = function(name, sourceLineInfo) {
        var retval = new _md.value(name, sourceLineInfo);
        retval.wzParent = this;
        this.values.push(retval);
        return retval;
    }
    on.prototype.getValue = function(name) {
        var found = null;
        this.values.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    on.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    on.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    on.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            items.push(item.toJson());
        }
        result['values'] = items;
    }
    on.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                return this.wzLoadToChildColl(child, _md.value, this.values);
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    on.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    on.prototype.wzVerify = function(ctx) {
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    on.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return on;
})(commentable);

_md.on = on;
// element error
var error = (function (commentable) {
    _inherits(error, commentable);
    function error(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(error.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, error);
        this.wzElement = "error";
    }
    error.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    error.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    error.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    return error;
})(commentable);

_md.error = error;
// element value
var value = (function (commentable) {
    _inherits(value, commentable);
    function value(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(value.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, value);
        this.allowedTYPES = [ "string", "boolean", "integer", "float", "date", "object", "any", "array", "function", "null", "json", "exception"];
        this.TYPE_STRING = "string";
        this.TYPE_XBOOLEAN = "boolean";
        this.TYPE_INTEGER = "integer";
        this.TYPE_XFLOAT = "float";
        this.TYPE_DATE = "date";
        this.TYPE_OBJECT = "object";
        this.TYPE_ANY = "any";
        this.TYPE_ARRAY = "array";
        this.TYPE_XFUNCTION = "function";
        this.TYPE_XNULL = "null";
        this.TYPE_JSON = "json";
        this.TYPE_EXCEPTION = "exception";
        this.wzElement = "value";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.defaultValue = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.isRequired = null
        this.isPOJO = false;
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.apiRef = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.iface = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.apiRef = null
        // relation property
        // when type == object
        this.properties = [];
        // relation item
        // when type == array
        this.items = [];
        // relation error
        // when type == exception
        this.errors = [];
        // relation restrict
        this.restrict = null;
    }
    value.TYPE_STRING = "string";
    value.TYPE_XBOOLEAN = "boolean";
    value.TYPE_INTEGER = "integer";
    value.TYPE_XFLOAT = "float";
    value.TYPE_DATE = "date";
    value.TYPE_OBJECT = "object";
    value.TYPE_ANY = "any";
    value.TYPE_ARRAY = "array";
    value.TYPE_XFUNCTION = "function";
    value.TYPE_XNULL = "null";
    value.TYPE_JSON = "json";
    value.TYPE_EXCEPTION = "exception";
    value.prototype.addProperty = function(name, sourceLineInfo) {
        var retval = new _md.property(name, sourceLineInfo);
        retval.wzParent = this;
        this.properties.push(retval);
        return retval;
    }
    value.prototype.getProperty = function(name) {
        var found = null;
        this.properties.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    value.prototype.addItem = function(name, sourceLineInfo) {
        var retval = new _md.item(name, sourceLineInfo);
        retval.wzParent = this;
        this.items.push(retval);
        return retval;
    }
    value.prototype.getItem = function(name) {
        var found = null;
        this.items.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    value.prototype.addError = function(name, sourceLineInfo) {
        var retval = new _md.error(name, sourceLineInfo);
        retval.wzParent = this;
        this.errors.push(retval);
        return retval;
    }
    value.prototype.getError = function(name) {
        var found = null;
        this.errors.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    value.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    value.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
        if (!isEmpty(this.defaultValue)) {
            result["defaultValue"] = this.defaultValue;
        }
        if (!isEmpty(this.isRequired)) {
            result["isRequired"] = this.isRequired;
        }
        result["isPOJO"] = this.isPOJO;
        if (!isEmpty(this.apiRef)) {
            result["apiRef"] = this.apiRef;
        }
        if (!isEmpty(this.iface)) {
            result["iface"] = this.iface;
        }
        if (!isEmpty(this.apiRef)) {
            result["apiRef"] = this.apiRef;
        }
    }
    value.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            items.push(item.toJson());
        }
        result['properties'] = items;
        items = [];
        var i, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            items.push(item.toJson());
        }
        result['items'] = items;
        items = [];
        var i, i_len=this.errors.length, item;
        for (i=0; i<i_len; i++) {
            item = this.errors[i];
            items.push(item.toJson());
        }
        result['errors'] = items;
        if (this.restrict != null) {
            result['restrict'] = this.restrict.toJson();
        }
        else {
            result['restrict'] = null;
        }
    }
    value.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'i') {
            if (name === 'item') {
                return this.wzLoadToChildColl(child, _md.item, this.items);
            }
        }
        if (_l == 4 && _ch == 'p') {
            if (name === 'pojo') {
                this.isPOJO = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'e') {
            if (name === 'error') {
                return this.wzLoadToChildColl(child, _md.error, this.errors);
            }
        }
        if (_l == 5 && _ch == 'i') {
            if (name === 'iface') {
                this.iface = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'a') {
            if (name === 'api-ref') {
                this.apiRef = child.v; return true;
            }
            else if (name === 'api_ref') {
                this.apiRef = child.v; return true;
            }
            else if (name === 'api-ref') {
                this.apiRef = child.v; return true;
            }
            else if (name === 'api_ref') {
                this.apiRef = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'd') {
            if (name === 'default') {
                this.defaultValue = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'p') {
            if (name === 'property') {
                return this.wzLoadToChildColl(child, _md.property, this.properties);
            }
        }
        if (_l == 8 && _ch == 'r') {
            if (name === 'restrict') {
                return this.wzLoadOneToOne(child, _md.restrict, 'restrict');
            }
        }
        if (_l == 11 && _ch == 'i') {
            if (name === 'is-required') {
                this.isRequired = child.v; return true;
            }
            else if (name === 'is_required') {
                this.isRequired = child.v; return true;
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    value.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    value.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("value", "type", this.type, this.allowedTYPES, this);
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.errors.length, item;
        for (i=0; i<i_len; i++) {
            item = this.errors[i];
            item.wzVerify(ctx);
        }
        if (this.restrict != null) {
            this.restrict.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    value.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.errors.length, item;
        for (i=0; i<i_len; i++) {
            item = this.errors[i];
            item.wzInitialize(ctx);
        }
        if (this.restrict != null) {
            this.restrict.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return value;
})(commentable);

_md.value = value;
// element on
var on = (function (commentable) {
    _inherits(on, commentable);
    function on(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(on.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, on);
        this.wzElement = "on";
        // relation value
        this.values = [];
    }
    on.prototype.addValue = function(name, sourceLineInfo) {
        var retval = new _md.value(name, sourceLineInfo);
        retval.wzParent = this;
        this.values.push(retval);
        return retval;
    }
    on.prototype.getValue = function(name) {
        var found = null;
        this.values.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    on.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    on.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    on.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            items.push(item.toJson());
        }
        result['values'] = items;
    }
    on.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                return this.wzLoadToChildColl(child, _md.value, this.values);
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    on.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    on.prototype.wzVerify = function(ctx) {
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    on.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return on;
})(commentable);

_md.on = on;
// element error
var error = (function (commentable) {
    _inherits(error, commentable);
    function error(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(error.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, error);
        this.wzElement = "error";
    }
    error.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    error.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    error.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    return error;
})(commentable);

_md.error = error;
// element item
var item = (function (commentable) {
    _inherits(item, commentable);
    function item(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(item.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, item);
        this.allowedTYPES = [ "string", "boolean", "integer", "float", "date", "object", "any", "array", "function", "alternative"];
        this.TYPE_STRING = "string";
        this.TYPE_XBOOLEAN = "boolean";
        this.TYPE_INTEGER = "integer";
        this.TYPE_XFLOAT = "float";
        this.TYPE_DATE = "date";
        this.TYPE_OBJECT = "object";
        this.TYPE_ANY = "any";
        this.TYPE_ARRAY = "array";
        this.TYPE_XFUNCTION = "function";
        this.TYPE_ALTERNATIVE = "alternative";
        this.wzElement = "item";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.defaultValue = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.isRequired = null
        this.isPOJO = false;
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.apiRef = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.iface = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.apiRef = null
        // relation property
        // when type == object
        this.properties = [];
        // relation item
        // when type == array
        this.items = [];
        // relation value
        // when type == alternative
        this.values = [];
        // relation restrict
        this.restrict = null;
    }
    item.TYPE_STRING = "string";
    item.TYPE_XBOOLEAN = "boolean";
    item.TYPE_INTEGER = "integer";
    item.TYPE_XFLOAT = "float";
    item.TYPE_DATE = "date";
    item.TYPE_OBJECT = "object";
    item.TYPE_ANY = "any";
    item.TYPE_ARRAY = "array";
    item.TYPE_XFUNCTION = "function";
    item.TYPE_ALTERNATIVE = "alternative";
    item.prototype.addProperty = function(name, sourceLineInfo) {
        var retval = new _md.property(name, sourceLineInfo);
        retval.wzParent = this;
        this.properties.push(retval);
        return retval;
    }
    item.prototype.getProperty = function(name) {
        var found = null;
        this.properties.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    item.prototype.addItem = function(name, sourceLineInfo) {
        var retval = new _md.item(name, sourceLineInfo);
        retval.wzParent = this;
        this.items.push(retval);
        return retval;
    }
    item.prototype.getItem = function(name) {
        var found = null;
        this.items.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    item.prototype.addValue = function(name, sourceLineInfo) {
        var retval = new _md.value(name, sourceLineInfo);
        retval.wzParent = this;
        this.values.push(retval);
        return retval;
    }
    item.prototype.getValue = function(name) {
        var found = null;
        this.values.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    item.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    item.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
        if (!isEmpty(this.defaultValue)) {
            result["defaultValue"] = this.defaultValue;
        }
        if (!isEmpty(this.isRequired)) {
            result["isRequired"] = this.isRequired;
        }
        result["isPOJO"] = this.isPOJO;
        if (!isEmpty(this.apiRef)) {
            result["apiRef"] = this.apiRef;
        }
        if (!isEmpty(this.iface)) {
            result["iface"] = this.iface;
        }
        if (!isEmpty(this.apiRef)) {
            result["apiRef"] = this.apiRef;
        }
    }
    item.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            items.push(item.toJson());
        }
        result['properties'] = items;
        items = [];
        var i, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            items.push(item.toJson());
        }
        result['items'] = items;
        items = [];
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            items.push(item.toJson());
        }
        result['values'] = items;
        if (this.restrict != null) {
            result['restrict'] = this.restrict.toJson();
        }
        else {
            result['restrict'] = null;
        }
    }
    item.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'i') {
            if (name === 'item') {
                return this.wzLoadToChildColl(child, _md.item, this.items);
            }
        }
        if (_l == 4 && _ch == 'p') {
            if (name === 'pojo') {
                this.isPOJO = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'i') {
            if (name === 'iface') {
                this.iface = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                return this.wzLoadToChildColl(child, _md.value, this.values);
            }
        }
        if (_l == 7 && _ch == 'a') {
            if (name === 'api-ref') {
                this.apiRef = child.v; return true;
            }
            else if (name === 'api_ref') {
                this.apiRef = child.v; return true;
            }
            else if (name === 'api-ref') {
                this.apiRef = child.v; return true;
            }
            else if (name === 'api_ref') {
                this.apiRef = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'd') {
            if (name === 'default') {
                this.defaultValue = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'p') {
            if (name === 'property') {
                return this.wzLoadToChildColl(child, _md.property, this.properties);
            }
        }
        if (_l == 8 && _ch == 'r') {
            if (name === 'restrict') {
                return this.wzLoadOneToOne(child, _md.restrict, 'restrict');
            }
        }
        if (_l == 11 && _ch == 'i') {
            if (name === 'is-required') {
                this.isRequired = child.v; return true;
            }
            else if (name === 'is_required') {
                this.isRequired = child.v; return true;
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    item.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    item.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("item", "type", this.type, this.allowedTYPES, this);
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzVerify(ctx);
        }
        if (this.restrict != null) {
            this.restrict.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    item.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzInitialize(ctx);
        }
        if (this.restrict != null) {
            this.restrict.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return item;
})(commentable);

_md.item = item;
// element on
var on = (function (commentable) {
    _inherits(on, commentable);
    function on(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(on.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, on);
        this.wzElement = "on";
        // relation value
        this.values = [];
    }
    on.prototype.addValue = function(name, sourceLineInfo) {
        var retval = new _md.value(name, sourceLineInfo);
        retval.wzParent = this;
        this.values.push(retval);
        return retval;
    }
    on.prototype.getValue = function(name) {
        var found = null;
        this.values.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    on.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    on.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    on.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            items.push(item.toJson());
        }
        result['values'] = items;
    }
    on.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                return this.wzLoadToChildColl(child, _md.value, this.values);
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    on.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    on.prototype.wzVerify = function(ctx) {
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    on.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return on;
})(commentable);

_md.on = on;
// element error
var error = (function (commentable) {
    _inherits(error, commentable);
    function error(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(error.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, error);
        this.wzElement = "error";
    }
    error.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    error.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    error.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    return error;
})(commentable);

_md.error = error;
// element property
var property = (function (commentable) {
    _inherits(property, commentable);
    function property(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(property.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, property);
        this.allowedTYPES = [ "string", "boolean", "integer", "float", "date", "object", "any", "array", "function", "mergedobject", "alternative", "switch"];
        this.TYPE_STRING = "string";
        this.TYPE_XBOOLEAN = "boolean";
        this.TYPE_INTEGER = "integer";
        this.TYPE_XFLOAT = "float";
        this.TYPE_DATE = "date";
        this.TYPE_OBJECT = "object";
        this.TYPE_ANY = "any";
        this.TYPE_ARRAY = "array";
        this.TYPE_XFUNCTION = "function";
        this.TYPE_MERGEDOBJECT = "mergedobject";
        this.TYPE_ALTERNATIVE = "alternative";
        this.TYPE_XSWITCH = "switch";
        this.wzElement = "property";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.defaultValue = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.isRequired = null
        this.isPOJO = false;
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.apiRef = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.iface = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.apiRef = null
        // relation property
        // when type == object
        this.properties = [];
        // relation item
        // when type == array
        this.items = [];
        // relation param
        // when type == function
        this.params = [];
        // relation value
        // when type == alternative
        this.values = [];
        // relation on
        // when type == switch
        this.ons = [];
        // relation restrict
        this.restrict = null;
    }
    property.TYPE_STRING = "string";
    property.TYPE_XBOOLEAN = "boolean";
    property.TYPE_INTEGER = "integer";
    property.TYPE_XFLOAT = "float";
    property.TYPE_DATE = "date";
    property.TYPE_OBJECT = "object";
    property.TYPE_ANY = "any";
    property.TYPE_ARRAY = "array";
    property.TYPE_XFUNCTION = "function";
    property.TYPE_MERGEDOBJECT = "mergedobject";
    property.TYPE_ALTERNATIVE = "alternative";
    property.TYPE_XSWITCH = "switch";
    property.prototype.addProperty = function(name, sourceLineInfo) {
        var retval = new _md.property(name, sourceLineInfo);
        retval.wzParent = this;
        this.properties.push(retval);
        return retval;
    }
    property.prototype.getProperty = function(name) {
        var found = null;
        this.properties.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    property.prototype.addItem = function(name, sourceLineInfo) {
        var retval = new _md.item(name, sourceLineInfo);
        retval.wzParent = this;
        this.items.push(retval);
        return retval;
    }
    property.prototype.getItem = function(name) {
        var found = null;
        this.items.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    property.prototype.addParam = function(name, sourceLineInfo) {
        var retval = new _md.param(name, sourceLineInfo);
        retval.wzParent = this;
        this.params.push(retval);
        return retval;
    }
    property.prototype.getParam = function(name) {
        var found = null;
        this.params.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    property.prototype.addValue = function(name, sourceLineInfo) {
        var retval = new _md.value(name, sourceLineInfo);
        retval.wzParent = this;
        this.values.push(retval);
        return retval;
    }
    property.prototype.getValue = function(name) {
        var found = null;
        this.values.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    property.prototype.addOn = function(name, sourceLineInfo) {
        var retval = new _md.on(name, sourceLineInfo);
        retval.wzParent = this;
        this.ons.push(retval);
        return retval;
    }
    property.prototype.getOn = function(name) {
        var found = null;
        this.ons.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    property.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    property.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
        if (!isEmpty(this.defaultValue)) {
            result["defaultValue"] = this.defaultValue;
        }
        if (!isEmpty(this.isRequired)) {
            result["isRequired"] = this.isRequired;
        }
        result["isPOJO"] = this.isPOJO;
        if (!isEmpty(this.apiRef)) {
            result["apiRef"] = this.apiRef;
        }
        if (!isEmpty(this.iface)) {
            result["iface"] = this.iface;
        }
        if (!isEmpty(this.apiRef)) {
            result["apiRef"] = this.apiRef;
        }
    }
    property.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            items.push(item.toJson());
        }
        result['properties'] = items;
        items = [];
        var i, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            items.push(item.toJson());
        }
        result['items'] = items;
        items = [];
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            items.push(item.toJson());
        }
        result['params'] = items;
        items = [];
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            items.push(item.toJson());
        }
        result['values'] = items;
        items = [];
        var i, i_len=this.ons.length, item;
        for (i=0; i<i_len; i++) {
            item = this.ons[i];
            items.push(item.toJson());
        }
        result['ons'] = items;
        if (this.restrict != null) {
            result['restrict'] = this.restrict.toJson();
        }
        else {
            result['restrict'] = null;
        }
    }
    property.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 2 && _ch == 'o') {
            if (name === 'on') {
                return this.wzLoadToChildColl(child, _md.on, this.ons);
            }
        }
        if (_l == 4 && _ch == 'i') {
            if (name === 'item') {
                return this.wzLoadToChildColl(child, _md.item, this.items);
            }
        }
        if (_l == 4 && _ch == 'p') {
            if (name === 'pojo') {
                this.isPOJO = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'i') {
            if (name === 'iface') {
                this.iface = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'p') {
            if (name === 'param') {
                return this.wzLoadToChildColl(child, _md.param, this.params);
            }
        }
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                return this.wzLoadToChildColl(child, _md.value, this.values);
            }
        }
        if (_l == 7 && _ch == 'a') {
            if (name === 'api-ref') {
                this.apiRef = child.v; return true;
            }
            else if (name === 'api_ref') {
                this.apiRef = child.v; return true;
            }
            else if (name === 'api-ref') {
                this.apiRef = child.v; return true;
            }
            else if (name === 'api_ref') {
                this.apiRef = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'd') {
            if (name === 'default') {
                this.defaultValue = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'p') {
            if (name === 'property') {
                return this.wzLoadToChildColl(child, _md.property, this.properties);
            }
        }
        if (_l == 8 && _ch == 'r') {
            if (name === 'restrict') {
                return this.wzLoadOneToOne(child, _md.restrict, 'restrict');
            }
        }
        if (_l == 11 && _ch == 'i') {
            if (name === 'is-required') {
                this.isRequired = child.v; return true;
            }
            else if (name === 'is_required') {
                this.isRequired = child.v; return true;
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    property.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    property.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("property", "type", this.type, this.allowedTYPES, this);
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.ons.length, item;
        for (i=0; i<i_len; i++) {
            item = this.ons[i];
            item.wzVerify(ctx);
        }
        if (this.restrict != null) {
            this.restrict.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    property.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.ons.length, item;
        for (i=0; i<i_len; i++) {
            item = this.ons[i];
            item.wzInitialize(ctx);
        }
        if (this.restrict != null) {
            this.restrict.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return property;
})(commentable);

_md.property = property;
// element on
var on = (function (commentable) {
    _inherits(on, commentable);
    function on(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(on.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, on);
        this.wzElement = "on";
        // relation value
        this.values = [];
    }
    on.prototype.addValue = function(name, sourceLineInfo) {
        var retval = new _md.value(name, sourceLineInfo);
        retval.wzParent = this;
        this.values.push(retval);
        return retval;
    }
    on.prototype.getValue = function(name) {
        var found = null;
        this.values.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    on.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    on.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    on.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            items.push(item.toJson());
        }
        result['values'] = items;
    }
    on.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                return this.wzLoadToChildColl(child, _md.value, this.values);
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    on.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    on.prototype.wzVerify = function(ctx) {
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    on.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return on;
})(commentable);

_md.on = on;
// element error
var error = (function (commentable) {
    _inherits(error, commentable);
    function error(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(error.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, error);
        this.wzElement = "error";
    }
    error.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    error.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    error.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    return error;
})(commentable);

_md.error = error;
// element xreturn
var xreturn = (function (commentable) {
    _inherits(xreturn, commentable);
    function xreturn(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xreturn.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xreturn);
        this.allowedTYPES = [ "alternative"];
        this.TYPE_ALTERNATIVE = "alternative";
        this.wzElement = "xreturn";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
        // relation value
        this.values = [];
    }
    xreturn.TYPE_ALTERNATIVE = "alternative";
    xreturn.prototype.addValue = function(name, sourceLineInfo) {
        var retval = new _md.value(name, sourceLineInfo);
        retval.wzParent = this;
        this.values.push(retval);
        return retval;
    }
    xreturn.prototype.getValue = function(name) {
        var found = null;
        this.values.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xreturn.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    xreturn.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
    }
    xreturn.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            items.push(item.toJson());
        }
        result['values'] = items;
    }
    xreturn.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                return this.wzLoadToChildColl(child, _md.value, this.values);
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    xreturn.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    xreturn.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("xreturn", "type", this.type, this.allowedTYPES, this);
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    xreturn.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return xreturn;
})(commentable);

_md.xreturn = xreturn;
// element infoItem
var infoItem = (function (commentable) {
    _inherits(infoItem, commentable);
    function infoItem(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(infoItem.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, infoItem);
        this.wzElement = "infoItem";
        // relation infoItem
        this.infoItems = [];
    }
    infoItem.prototype.getInfoItem = function(name) {
        var found = null;
        this.infoItems.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    infoItem.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    infoItem.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    infoItem.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.infoItems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.infoItems[i];
            items.push(item.toJson());
        }
        result['infoItems'] = items;
    }
    infoItem.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 's') {
            if (name === 'set') {
                return this.wzLoadToChildColl(child, _md.set, this.infoItems);
            }
        }
        if (_l == 4 && _ch == 's') {
            if (name === 'send') {
                return this.wzLoadToChildColl(child, _md.send, this.infoItems);
            }
        }
        if (_l == 5 && _ch == 'm') {
            if (name === 'merge') {
                return this.wzLoadToChildColl(child, _md.merge, this.infoItems);
            }
        }
        if (_l == 6 && _ch == 'c') {
            if (name === 'create') {
                return this.wzLoadToChildColl(child, _md.create, this.infoItems);
            }
        }
        if (_l == 7 && _ch == 'a') {
            if (name === 'apicall') {
                return this.wzLoadToChildColl(child, _md.apiCall, this.infoItems);
            }
            else if (name === 'apisend') {
                return this.wzLoadToChildColl(child, _md.apiSend, this.infoItems);
            }
        }
        if (_l == 7 && _ch == 'r') {
            if (name === 'receive') {
                return this.wzLoadToChildColl(child, _md.receive, this.infoItems);
            }
        }
        if (_l == 8 && _ch == 'a') {
            if (name === 'api-call') {
                return this.wzLoadToChildColl(child, _md.apiCall, this.infoItems);
            }
            else if (name === 'api-send') {
                return this.wzLoadToChildColl(child, _md.apiSend, this.infoItems);
            }
        }
        if (_l == 9 && _ch == 'a') {
            if (name === 'apicreate') {
                return this.wzLoadToChildColl(child, _md.apiCreate, this.infoItems);
            }
        }
        if (_l == 10 && _ch == 'a') {
            if (name === 'api-create') {
                return this.wzLoadToChildColl(child, _md.apiCreate, this.infoItems);
            }
            else if (name === 'apireceive') {
                return this.wzLoadToChildColl(child, _md.apiReceive, this.infoItems);
            }
        }
        if (_l == 10 && _ch == 'd') {
            if (name === 'dependency') {
                return this.wzLoadToChildColl(child, _md.dependency, this.infoItems);
            }
        }
        if (_l == 11 && _ch == 'a') {
            if (name === 'api-receive') {
                return this.wzLoadToChildColl(child, _md.apiReceive, this.infoItems);
            }
        }
        if (_l == 12 && _ch == 'i') {
            if (name === 'internalcall') {
                return this.wzLoadToChildColl(child, _md.internalCall, this.infoItems);
            }
        }
        if (_l == 13 && _ch == 'i') {
            if (name === 'internal-call') {
                return this.wzLoadToChildColl(child, _md.internalCall, this.infoItems);
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    infoItem.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    infoItem.prototype.wzVerify = function(ctx) {
        var i, i_len=this.infoItems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.infoItems[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    infoItem.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.infoItems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.infoItems[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return infoItem;
})(commentable);

_md.infoItem = infoItem;
// element info
var info = (function (commentable) {
    _inherits(info, commentable);
    function info(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(info.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, info);
        this.wzElement = "info";
        // relation infoItem
        this.infoItems = [];
    }
    info.prototype.getInfoItem = function(name) {
        var found = null;
        this.infoItems.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    info.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    info.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    info.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.infoItems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.infoItems[i];
            items.push(item.toJson());
        }
        result['infoItems'] = items;
    }
    info.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 's') {
            if (name === 'set') {
                return this.wzLoadToChildColl(child, _md.set, this.infoItems);
            }
        }
        if (_l == 4 && _ch == 's') {
            if (name === 'send') {
                return this.wzLoadToChildColl(child, _md.send, this.infoItems);
            }
        }
        if (_l == 5 && _ch == 'm') {
            if (name === 'merge') {
                return this.wzLoadToChildColl(child, _md.merge, this.infoItems);
            }
        }
        if (_l == 6 && _ch == 'c') {
            if (name === 'create') {
                return this.wzLoadToChildColl(child, _md.create, this.infoItems);
            }
        }
        if (_l == 7 && _ch == 'a') {
            if (name === 'apicall') {
                return this.wzLoadToChildColl(child, _md.apiCall, this.infoItems);
            }
            else if (name === 'apisend') {
                return this.wzLoadToChildColl(child, _md.apiSend, this.infoItems);
            }
        }
        if (_l == 7 && _ch == 'r') {
            if (name === 'receive') {
                return this.wzLoadToChildColl(child, _md.receive, this.infoItems);
            }
        }
        if (_l == 8 && _ch == 'a') {
            if (name === 'api-call') {
                return this.wzLoadToChildColl(child, _md.apiCall, this.infoItems);
            }
            else if (name === 'api-send') {
                return this.wzLoadToChildColl(child, _md.apiSend, this.infoItems);
            }
        }
        if (_l == 9 && _ch == 'a') {
            if (name === 'apicreate') {
                return this.wzLoadToChildColl(child, _md.apiCreate, this.infoItems);
            }
        }
        if (_l == 10 && _ch == 'a') {
            if (name === 'api-create') {
                return this.wzLoadToChildColl(child, _md.apiCreate, this.infoItems);
            }
            else if (name === 'apireceive') {
                return this.wzLoadToChildColl(child, _md.apiReceive, this.infoItems);
            }
        }
        if (_l == 10 && _ch == 'd') {
            if (name === 'dependency') {
                return this.wzLoadToChildColl(child, _md.dependency, this.infoItems);
            }
        }
        if (_l == 11 && _ch == 'a') {
            if (name === 'api-receive') {
                return this.wzLoadToChildColl(child, _md.apiReceive, this.infoItems);
            }
        }
        if (_l == 12 && _ch == 'i') {
            if (name === 'internalcall') {
                return this.wzLoadToChildColl(child, _md.internalCall, this.infoItems);
            }
        }
        if (_l == 13 && _ch == 'i') {
            if (name === 'internal-call') {
                return this.wzLoadToChildColl(child, _md.internalCall, this.infoItems);
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    info.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    info.prototype.wzVerify = function(ctx) {
        var i, i_len=this.infoItems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.infoItems[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    info.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.infoItems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.infoItems[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return info;
})(commentable);

_md.info = info;
// element apiCall
var apiCall = (function (infoItem) {
    _inherits(apiCall, infoItem);
    function apiCall(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(apiCall.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, apiCall);
        this.wzElement = "apiCall";
    }
    apiCall.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    apiCall.prototype.toJsonProperties = function(result) {
        _md.infoItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    apiCall.prototype.toJsonChildren = function(result) {
        _md.infoItem.prototype.toJsonChildren.call(this, result);
    }
    return apiCall;
})(infoItem);

_md.apiCall = apiCall;
// element internalCall
var internalCall = (function (infoItem) {
    _inherits(internalCall, infoItem);
    function internalCall(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(internalCall.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, internalCall);
        this.wzElement = "internalCall";
    }
    internalCall.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    internalCall.prototype.toJsonProperties = function(result) {
        _md.infoItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    internalCall.prototype.toJsonChildren = function(result) {
        _md.infoItem.prototype.toJsonChildren.call(this, result);
    }
    return internalCall;
})(infoItem);

_md.internalCall = internalCall;
// element apiCreate
var apiCreate = (function (infoItem) {
    _inherits(apiCreate, infoItem);
    function apiCreate(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(apiCreate.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, apiCreate);
        this.wzElement = "apiCreate";
    }
    apiCreate.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    apiCreate.prototype.toJsonProperties = function(result) {
        _md.infoItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    apiCreate.prototype.toJsonChildren = function(result) {
        _md.infoItem.prototype.toJsonChildren.call(this, result);
    }
    return apiCreate;
})(infoItem);

_md.apiCreate = apiCreate;
// element apiReceive
var apiReceive = (function (infoItem) {
    _inherits(apiReceive, infoItem);
    function apiReceive(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(apiReceive.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, apiReceive);
        this.wzElement = "apiReceive";
        this.storeOnThis = false;
        // relation value
        this.values = [];
    }
    apiReceive.prototype.addValue = function(name, sourceLineInfo) {
        var retval = new _md.value(name, sourceLineInfo);
        retval.wzParent = this;
        this.values.push(retval);
        return retval;
    }
    apiReceive.prototype.getValue = function(name) {
        var found = null;
        this.values.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    apiReceive.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    apiReceive.prototype.toJsonProperties = function(result) {
        _md.infoItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        result["storeOnThis"] = this.storeOnThis;
    }
    apiReceive.prototype.toJsonChildren = function(result) {
        _md.infoItem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            items.push(item.toJson());
        }
        result['values'] = items;
    }
    apiReceive.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                return this.wzLoadToChildColl(child, _md.value, this.values);
            }
        }
        if (_l == 13 && _ch == 's') {
            if (name === 'store-on-this') {
                this.storeOnThis = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'store_on_this') {
                this.storeOnThis = parseboolean(child.v, true, child); return true;
            }
        }
        ok = _md.infoItem.prototype.loadChild.call(this, child);
        return ok;
    }
    apiReceive.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    apiReceive.prototype.wzVerify = function(ctx) {
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzVerify(ctx);
        }
        _md.infoItem.prototype.wzVerify.call(this, ctx);
    }
    apiReceive.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzInitialize(ctx);
        }
        _md.infoItem.prototype.wzInitialize.call(this, ctx);
    }
    return apiReceive;
})(infoItem);

_md.apiReceive = apiReceive;
// element apiSend
var apiSend = (function (infoItem) {
    _inherits(apiSend, infoItem);
    function apiSend(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(apiSend.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, apiSend);
        this.wzElement = "apiSend";
        // relation value
        this.values = [];
    }
    apiSend.prototype.addValue = function(name, sourceLineInfo) {
        var retval = new _md.value(name, sourceLineInfo);
        retval.wzParent = this;
        this.values.push(retval);
        return retval;
    }
    apiSend.prototype.getValue = function(name) {
        var found = null;
        this.values.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    apiSend.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    apiSend.prototype.toJsonProperties = function(result) {
        _md.infoItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    apiSend.prototype.toJsonChildren = function(result) {
        _md.infoItem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            items.push(item.toJson());
        }
        result['values'] = items;
    }
    apiSend.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                return this.wzLoadToChildColl(child, _md.value, this.values);
            }
        }
        ok = _md.infoItem.prototype.loadChild.call(this, child);
        return ok;
    }
    apiSend.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    apiSend.prototype.wzVerify = function(ctx) {
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzVerify(ctx);
        }
        _md.infoItem.prototype.wzVerify.call(this, ctx);
    }
    apiSend.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzInitialize(ctx);
        }
        _md.infoItem.prototype.wzInitialize.call(this, ctx);
    }
    return apiSend;
})(infoItem);

_md.apiSend = apiSend;
// element send
var send = (function (infoItem) {
    _inherits(send, infoItem);
    function send(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(send.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, send);
        this.wzElement = "send";
        // relation value
        this.values = [];
    }
    send.prototype.addValue = function(name, sourceLineInfo) {
        var retval = new _md.value(name, sourceLineInfo);
        retval.wzParent = this;
        this.values.push(retval);
        return retval;
    }
    send.prototype.getValue = function(name) {
        var found = null;
        this.values.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    send.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    send.prototype.toJsonProperties = function(result) {
        _md.infoItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    send.prototype.toJsonChildren = function(result) {
        _md.infoItem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            items.push(item.toJson());
        }
        result['values'] = items;
    }
    send.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                return this.wzLoadToChildColl(child, _md.value, this.values);
            }
        }
        ok = _md.infoItem.prototype.loadChild.call(this, child);
        return ok;
    }
    send.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    send.prototype.wzVerify = function(ctx) {
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzVerify(ctx);
        }
        _md.infoItem.prototype.wzVerify.call(this, ctx);
    }
    send.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzInitialize(ctx);
        }
        _md.infoItem.prototype.wzInitialize.call(this, ctx);
    }
    return send;
})(infoItem);

_md.send = send;
// element receive
var receive = (function (infoItem) {
    _inherits(receive, infoItem);
    function receive(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(receive.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, receive);
        this.wzElement = "receive";
        this.storeOnThis = false;
        // relation value
        this.values = [];
    }
    receive.prototype.addValue = function(name, sourceLineInfo) {
        var retval = new _md.value(name, sourceLineInfo);
        retval.wzParent = this;
        this.values.push(retval);
        return retval;
    }
    receive.prototype.getValue = function(name) {
        var found = null;
        this.values.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    receive.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    receive.prototype.toJsonProperties = function(result) {
        _md.infoItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        result["storeOnThis"] = this.storeOnThis;
    }
    receive.prototype.toJsonChildren = function(result) {
        _md.infoItem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            items.push(item.toJson());
        }
        result['values'] = items;
    }
    receive.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                return this.wzLoadToChildColl(child, _md.value, this.values);
            }
        }
        if (_l == 13 && _ch == 's') {
            if (name === 'store-on-this') {
                this.storeOnThis = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'store_on_this') {
                this.storeOnThis = parseboolean(child.v, true, child); return true;
            }
        }
        ok = _md.infoItem.prototype.loadChild.call(this, child);
        return ok;
    }
    receive.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    receive.prototype.wzVerify = function(ctx) {
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzVerify(ctx);
        }
        _md.infoItem.prototype.wzVerify.call(this, ctx);
    }
    receive.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.values.length, item;
        for (i=0; i<i_len; i++) {
            item = this.values[i];
            item.wzInitialize(ctx);
        }
        _md.infoItem.prototype.wzInitialize.call(this, ctx);
    }
    return receive;
})(infoItem);

_md.receive = receive;
// element create
var create = (function (infoItem) {
    _inherits(create, infoItem);
    function create(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(create.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, create);
        this.wzElement = "create";
    }
    create.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    create.prototype.toJsonProperties = function(result) {
        _md.infoItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    create.prototype.toJsonChildren = function(result) {
        _md.infoItem.prototype.toJsonChildren.call(this, result);
    }
    return create;
})(infoItem);

_md.create = create;
// element set
var set = (function (infoItem) {
    _inherits(set, infoItem);
    function set(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(set.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, set);
        this.wzElement = "set";
    }
    set.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    set.prototype.toJsonProperties = function(result) {
        _md.infoItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    set.prototype.toJsonChildren = function(result) {
        _md.infoItem.prototype.toJsonChildren.call(this, result);
    }
    return set;
})(infoItem);

_md.set = set;
// element merge
var merge = (function (infoItem) {
    _inherits(merge, infoItem);
    function merge(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(merge.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, merge);
        this.wzElement = "merge";
    }
    merge.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    merge.prototype.toJsonProperties = function(result) {
        _md.infoItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    merge.prototype.toJsonChildren = function(result) {
        _md.infoItem.prototype.toJsonChildren.call(this, result);
    }
    return merge;
})(infoItem);

_md.merge = merge;
// element dependency
var dependency = (function (infoItem) {
    _inherits(dependency, infoItem);
    function dependency(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(dependency.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, dependency);
        this.allowedTYPES = [ "closure"];
        this.TYPE_CLOSURE = "closure";
        this.wzElement = "dependency";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.apiRef = null
    }
    dependency.TYPE_CLOSURE = "closure";
    dependency.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    dependency.prototype.toJsonProperties = function(result) {
        _md.infoItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
        if (!isEmpty(this.apiRef)) {
            result["apiRef"] = this.apiRef;
        }
    }
    dependency.prototype.toJsonChildren = function(result) {
        _md.infoItem.prototype.toJsonChildren.call(this, result);
    }
    dependency.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'a') {
            if (name === 'api-ref') {
                this.apiRef = child.v; return true;
            }
            else if (name === 'api_ref') {
                this.apiRef = child.v; return true;
            }
        }
        ok = _md.infoItem.prototype.loadChild.call(this, child);
        return ok;
    }
    dependency.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    dependency.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("dependency", "type", this.type, this.allowedTYPES, this);
        _md.infoItem.prototype.wzVerify.call(this, ctx);
    }
    return dependency;
})(infoItem);

_md.dependency = dependency;
/**
    element xswitch
     Select an alternative group of param or properties or arguments, based
        on a param or property or argument of type == alternative
*/
var xswitch = (function (commentable) {
    _inherits(xswitch, commentable);
    function xswitch(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xswitch.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xswitch);
        this.wzElement = "xswitch";
        // relation xcase
        this.cases = [];
    }
    xswitch.prototype.addXcase = function(name, sourceLineInfo) {
        var retval = new _md.xcase(name, sourceLineInfo);
        retval.wzParent = this;
        this.cases.push(retval);
        return retval;
    }
    xswitch.prototype.getXcase = function(name) {
        var found = null;
        this.cases.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xswitch.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    xswitch.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    xswitch.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.cases.length, item;
        for (i=0; i<i_len; i++) {
            item = this.cases[i];
            items.push(item.toJson());
        }
        result['cases'] = items;
    }
    xswitch.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'c') {
            if (name === 'case') {
                return this.wzLoadToChildColl(child, _md.xcase, this.cases);
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    xswitch.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    xswitch.prototype.wzVerify = function(ctx) {
        var i, i_len=this.cases.length, item;
        for (i=0; i<i_len; i++) {
            item = this.cases[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    xswitch.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.cases.length, item;
        for (i=0; i<i_len; i++) {
            item = this.cases[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return xswitch;
})(commentable);

_md.xswitch = xswitch;
/**
    element xcase
     params or properties or argument when == alternative option
*/
var xcase = (function (commentable) {
    _inherits(xcase, commentable);
    function xcase(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xcase.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xcase);
        this.wzElement = "xcase";
        // relation param
        // when is a param that has type  == alternative
        this.params = [];
        // relation property
        // when is a property that has type  == alternative
        this.properties = [];
        // relation argument
        // when is an argument that has type  == alternative
        this.xarguments = [];
    }
    xcase.prototype.addParam = function(name, sourceLineInfo) {
        var retval = new _md.param(name, sourceLineInfo);
        retval.wzParent = this;
        this.params.push(retval);
        return retval;
    }
    xcase.prototype.getParam = function(name) {
        var found = null;
        this.params.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xcase.prototype.addProperty = function(name, sourceLineInfo) {
        var retval = new _md.property(name, sourceLineInfo);
        retval.wzParent = this;
        this.properties.push(retval);
        return retval;
    }
    xcase.prototype.getProperty = function(name) {
        var found = null;
        this.properties.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xcase.prototype.addArgument = function(name, sourceLineInfo) {
        var retval = new _md.argument(name, sourceLineInfo);
        retval.wzParent = this;
        this.xarguments.push(retval);
        return retval;
    }
    xcase.prototype.getArgument = function(name) {
        var found = null;
        this.xarguments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xcase.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    xcase.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    xcase.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            items.push(item.toJson());
        }
        result['params'] = items;
        items = [];
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            items.push(item.toJson());
        }
        result['properties'] = items;
        items = [];
        var i, i_len=this.xarguments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.xarguments[i];
            items.push(item.toJson());
        }
        result['xarguments'] = items;
    }
    xcase.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'p') {
            if (name === 'param') {
                return this.wzLoadToChildColl(child, _md.param, this.params);
            }
        }
        if (_l == 8 && _ch == 'a') {
            if (name === 'argument') {
                return this.wzLoadToChildColl(child, _md.argument, this.xarguments);
            }
        }
        if (_l == 8 && _ch == 'p') {
            if (name === 'property') {
                return this.wzLoadToChildColl(child, _md.property, this.properties);
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    xcase.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    xcase.prototype.wzVerify = function(ctx) {
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.xarguments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.xarguments[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    xcase.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.xarguments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.xarguments[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return xcase;
})(commentable);

_md.xcase = xcase;
/**
    element restrict
     Group of restrictions to the element or attribute values
*/
var restrict = (function (commentable) {
    _inherits(restrict, commentable);
    function restrict(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(restrict.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, restrict);
        this.wzElement = "restrict";
        // relation facet
        this.facets = [];
    }
    restrict.prototype.getFacet = function(name) {
        var found = null;
        this.facets.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    restrict.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    restrict.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    restrict.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.facets.length, item;
        for (i=0; i<i_len; i++) {
            item = this.facets[i];
            items.push(item.toJson());
        }
        result['facets'] = items;
    }
    restrict.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'e') {
            if (name === 'enum') {
                return this.wzLoadToChildColl(child, _md.enumFacet, this.facets);
            }
        }
        if (_l == 6 && _ch == 'r') {
            if (name === 'regexp') {
                return this.wzLoadToChildColl(child, _md.regexpFacet, this.facets);
            }
        }
        if (_l == 7 && _ch == 'e') {
            if (name === 'element') {
                return this.wzLoadToChildColl(child, _md.elementFacet, this.facets);
            }
        }
        if (_l == 8 && _ch == 'm') {
            if (name === 'maxvalue') {
                return this.wzLoadToChildColl(child, _md.maxValueFacet, this.facets);
            }
            else if (name === 'minvalue') {
                return this.wzLoadToChildColl(child, _md.minValueFacet, this.facets);
            }
        }
        if (_l == 9 && _ch == 'm') {
            if (name === 'maxlength') {
                return this.wzLoadToChildColl(child, _md.maxLengthFacet, this.facets);
            }
            else if (name === 'minlength') {
                return this.wzLoadToChildColl(child, _md.minLengthFacet, this.facets);
            }
            else if (name === 'max-value') {
                return this.wzLoadToChildColl(child, _md.maxValueFacet, this.facets);
            }
            else if (name === 'min-value') {
                return this.wzLoadToChildColl(child, _md.minValueFacet, this.facets);
            }
        }
        if (_l == 10 && _ch == 'm') {
            if (name === 'max-length') {
                return this.wzLoadToChildColl(child, _md.maxLengthFacet, this.facets);
            }
            else if (name === 'min-length') {
                return this.wzLoadToChildColl(child, _md.minLengthFacet, this.facets);
            }
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    restrict.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    restrict.prototype.wzVerify = function(ctx) {
        var i, i_len=this.facets.length, item;
        for (i=0; i<i_len; i++) {
            item = this.facets[i];
            item.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    restrict.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.facets.length, item;
        for (i=0; i<i_len; i++) {
            item = this.facets[i];
            item.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return restrict;
})(commentable);

_md.restrict = restrict;
/**
    element facet
     The abstract base class for facet restrictions
*/
var facet = (function (commentable) {
    _inherits(facet, commentable);
    function facet(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(facet.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, facet);
        this.wzElement = "facet";
    }
    facet.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    facet.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    facet.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    facet.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    facet.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfsystemModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return facet;
})(commentable);

_md.facet = facet;
/**
    element enumFacet
     A restriction of type enumeration applied to an attribute.
*/
var enumFacet = (function (facet) {
    _inherits(enumFacet, facet);
    function enumFacet(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(enumFacet.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, enumFacet);
        this.wzElement = "enumFacet";
    }
    enumFacet.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    enumFacet.prototype.toJsonProperties = function(result) {
        _md.facet.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    enumFacet.prototype.toJsonChildren = function(result) {
        _md.facet.prototype.toJsonChildren.call(this, result);
    }
    return enumFacet;
})(facet);

_md.enumFacet = enumFacet;
/**
    element maxLengthFacet
     A restriction of type maximum length applied to an attribute.
*/
var maxLengthFacet = (function (facet) {
    _inherits(maxLengthFacet, facet);
    function maxLengthFacet(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(maxLengthFacet.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, maxLengthFacet);
        this.wzElement = "maxLengthFacet";
    }
    maxLengthFacet.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    maxLengthFacet.prototype.toJsonProperties = function(result) {
        _md.facet.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    maxLengthFacet.prototype.toJsonChildren = function(result) {
        _md.facet.prototype.toJsonChildren.call(this, result);
    }
    return maxLengthFacet;
})(facet);

_md.maxLengthFacet = maxLengthFacet;
/**
    element minLengthFacet
     A restriction of type minimum length applied to an attribute.
*/
var minLengthFacet = (function (facet) {
    _inherits(minLengthFacet, facet);
    function minLengthFacet(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(minLengthFacet.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, minLengthFacet);
        this.wzElement = "minLengthFacet";
    }
    minLengthFacet.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    minLengthFacet.prototype.toJsonProperties = function(result) {
        _md.facet.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    minLengthFacet.prototype.toJsonChildren = function(result) {
        _md.facet.prototype.toJsonChildren.call(this, result);
    }
    return minLengthFacet;
})(facet);

_md.minLengthFacet = minLengthFacet;
/**
    element maxValueFacet
     A restriction of type maximum value applied to an attribute.
*/
var maxValueFacet = (function (facet) {
    _inherits(maxValueFacet, facet);
    function maxValueFacet(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(maxValueFacet.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, maxValueFacet);
        this.wzElement = "maxValueFacet";
    }
    maxValueFacet.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    maxValueFacet.prototype.toJsonProperties = function(result) {
        _md.facet.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    maxValueFacet.prototype.toJsonChildren = function(result) {
        _md.facet.prototype.toJsonChildren.call(this, result);
    }
    return maxValueFacet;
})(facet);

_md.maxValueFacet = maxValueFacet;
/**
    element minValueFacet
     A restriction of type minimum value applied to an attribute.
*/
var minValueFacet = (function (facet) {
    _inherits(minValueFacet, facet);
    function minValueFacet(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(minValueFacet.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, minValueFacet);
        this.wzElement = "minValueFacet";
    }
    minValueFacet.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    minValueFacet.prototype.toJsonProperties = function(result) {
        _md.facet.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    minValueFacet.prototype.toJsonChildren = function(result) {
        _md.facet.prototype.toJsonChildren.call(this, result);
    }
    return minValueFacet;
})(facet);

_md.minValueFacet = minValueFacet;
/**
    element regexpFacet
     A restriction of type regexp test applied to an attribute.
*/
var regexpFacet = (function (facet) {
    _inherits(regexpFacet, facet);
    function regexpFacet(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(regexpFacet.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, regexpFacet);
        this.wzElement = "regexpFacet";
    }
    regexpFacet.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    regexpFacet.prototype.toJsonProperties = function(result) {
        _md.facet.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    regexpFacet.prototype.toJsonChildren = function(result) {
        _md.facet.prototype.toJsonChildren.call(this, result);
    }
    return regexpFacet;
})(facet);

_md.regexpFacet = regexpFacet;
/**
    element elementFacet
     A restriction of type allowed child element applied to an element.
*/
var elementFacet = (function (facet) {
    _inherits(elementFacet, facet);
    function elementFacet(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(elementFacet.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, elementFacet);
        this.wzElement = "elementFacet";
    }
    elementFacet.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    elementFacet.prototype.toJsonProperties = function(result) {
        _md.facet.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    elementFacet.prototype.toJsonChildren = function(result) {
        _md.facet.prototype.toJsonChildren.call(this, result);
    }
    return elementFacet;
})(facet);

_md.elementFacet = elementFacet;
_md.__tagElementMapping = { '#': 'comment', 'package': 'xpackage', 'generated-package': 'generatedPackage', 'generatedpackage': 'generatedPackage', 'ittf-example': 'ittfExample', 'ittfexample': 'ittfExample', 'artifact-example': 'artifactExample', 'artifactexample': 'artifactExample', 'build-cwd': 'buildCwd', 'buildcwd': 'buildCwd', 'interface': 'xinterface', 'return': 'xreturn', 'api-call': 'apiCall', 'apicall': 'apiCall', 'internal-call': 'internalCall', 'internalcall': 'internalCall', 'api-create': 'apiCreate', 'apicreate': 'apiCreate', 'api-receive': 'apiReceive', 'apireceive': 'apiReceive', 'api-send': 'apiSend', 'apisend': 'apiSend', 'case': 'xcase', 'enum': 'enumFacet', 'max-length': 'maxLengthFacet', 'maxlength': 'maxLengthFacet', 'min-length': 'minLengthFacet', 'minlength': 'minLengthFacet', 'max-value': 'maxValueFacet', 'maxvalue': 'maxValueFacet', 'min-value': 'minValueFacet', 'minvalue': 'minValueFacet', 'regexp': 'regexpFacet', 'element': 'elementFacet' };
// model/replaceUnknownElement( )
var wfsystemModelException = (function () {
    function wfsystemModelException(message, node, instance) {
        _classCallCheck(this, wfsystemModelException);
        // TODO node seems superflous
        if (node && instance) {
            this.message = message + ', wzElement: ' + node.wzElement + ', wzName:' + (node.wzName || '') + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        console.log('message', this.message);
        this.stack = (new Error()).stack;
        this.node = node;
    }
    return wfsystemModelException;
})();

_md.wfsystemModelException = wfsystemModelException;
var wfsystemContext = (function () {
    function wfsystemContext() {
        _classCallCheck(this, wfsystemContext);
        this.validationErrors = [];
    }
    wfsystemContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    wfsystemContext.prototype.addError = function(message, node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at);
    }
    wfsystemContext.prototype.verifyEnum = function(valueType, valueName, value, allowed, node) {
        if (value && allowed.indexOf(value) < 0) {
            var allowedStr = 'allowed: ' + allowed.join(', ');
            this.validationErrors.push(valueType + ' ' + valueName + ' has an invalid value: ' + value + ' ' + allowedStr + '. At ' + (node.wzSourceLineInfo ? node.wzSourceLineInfo.toString(node) : 'location unavailable'));
        }
    }
    return wfsystemContext;
})();

_md.wfsystemContext = wfsystemContext;
function parsestring(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}
function parseboolean(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    if (!isBoolean(value)) {
        throw new wfsystemModelException('Must be a boolean value (\"true\" or \"false\"), got:' + value, node);
    }
    return value === 'true' ? true : false;
}
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}
function isBoolean(value) {
    return value === 'true' || value === 'false';
}

