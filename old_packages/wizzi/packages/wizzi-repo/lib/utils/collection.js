/*
    artifact generator: C:\My\wizzi\v5\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\v5\kernel\wizzi-repo\src\ittf\lib\utils\collection.js.ittf
*/
'use strict';
// generated by wizzi.codegen.js4.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var verify = require('wizzi-utils').verify;
const errors = require('./errors');
const ObjectID = require('./objectId');
function match(key, item) {
    // log 'wizzi-repo.utils.collection.match', key, item
    if (!key) {
        // log 'wizzi-repo.utils.collection.match: true'
        return true;
    }
    else if (key.hasOwnProperty('_id')) {
        if (item._id == null && key._id == null) {
            return true;
        }
        if (item._id && item._id.equals(key._id)) {
            // log 'wizzi-repo.utils.collection.match: true'
            return true;
        }
    }
    else if (key.hasOwnProperty('path')) {
        if (item.path == normalize(key.path)) {
            // log 'wizzi-repo.utils.collection.match: true'
            return true;
        }
    }
    else if (key.hasOwnProperty('basename') && key.hasOwnProperty('parentId')) {
        if (item.basename === key.basename) {
            if (item.parentId == null && key.parentId == null) {
                // log 'wizzi-repo.utils.collection.match: true'
                return true;
            }
            if (item.parentId && item.parentId.equals(key.parentId)) {
                // log 'wizzi-repo.utils.collection.match: true'
                return true;
            }
        }
    }
    else if (key.hasOwnProperty('parentId')) {
        if (item.parentId == null && key.parentId == null) {
            return true;
        }
        if (item.parentId && item.parentId.equals(key.parentId)) {
            // log 'wizzi-repo.utils.collection.match: true'
            return true;
        }
    }
    // log 'wizzi-repo.utils.collection.match: false'
    return false;
}
var Collection = (function () {
    function Collection(items) {
        _classCallCheck(this, Collection);
        items = items || [];
        if (items.classType === 'wizzi-repo.utils.Collection') {
            this.items = items.items;
        }
        else {
            this.items = items;
            this.restoreIds();
        }
        this.classType = 'wizzi-repo.utils.Collection';
    }
    Collection.prototype.restoreIds = function() {
        var i, i_items=this.items, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            if (item._id && item._id.length) {
                // log 'restoreIds._id', item._id, item._id.length
                item._id = ObjectID.createFromHexString(item._id);
            }
            if (item.parentId && item.parentId.length) {
                // log 'restoreIds.parentId', item.parentId, item.parentId.length
                item.parentId = ObjectID.createFromHexString(item.parentId);
            }
        }
    }
    Collection.prototype.count = function(key) {
        return this.items.length;
    }
    Collection.prototype.find = function(key) {
        // log 'wizzi-repo.utils.collection.find', key
        var result = [];
        var i, i_items=this.items, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            if (match(key, item)) {
                result.push(item);
            }
        }
        return new Collection(result);
    }
    Collection.prototype.insertOne = function(doc, options, callback) {
        if (typeof(callback) == 'undefined') {
            callback = options;
            options = null;
        }
        // log 'insertOne.doc', doc
        if (!doc._id) {
            doc._id = new ObjectID();
        }
        else {
            var items = this.find({
                _id: doc._id
            });
            if (items.count() > 0) {
                callback(new errors.RepoCollectionError('Duplicated key'));
            }
        }
        this.items.push(doc);
        return callback(null, {
                insertedCount: 1, 
                insertedId: doc._id, 
                ops: [
                    doc
                ], 
                result: {
                    ok: 1, 
                    n: 1
                }
            });
    }
    Collection.prototype.replaceOne = function(key, doc, options, callback) {
        if (typeof(callback) == 'undefined') {
            callback = options;
            options = {};
        }
        var temp = [];
        var scannedCount = 0;
        var modifiedCount = 0;
        var upsertedCount = 0;
        var ops = [];
        var i, i_items=this.items, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            scannedCount++;
            if (match(key, item)) {
                if (modifiedCount == 0) {
                    temp.push(doc);
                    modifiedCount++;
                    ops.push(doc);
                }
                else {
                    return callback(new errors.RepoCollectionError('More than one item key match replaceOne'));
                }
            }
            else {
                temp.push(item);
            }
        }
        if (modifiedCount == 0) {
            if (options.upsert) {
                if (!doc._id) {
                    doc._id = new ObjectID();
                }
                temp.push(doc);
                upsertedCount++;
                ops.push(doc);
            }
            else {
                return callback(new errors.RepoCollectionError('Key not found'));
            }
        }
        this.items = temp;
        return callback(null, {
                modifiedCount: modifiedCount, 
                upsertedCount: upsertedCount, 
                upsertedId: {
                    _id: (upsertedCount > 0 ? doc._id : null )
                }, 
                ops: ops, 
                result: {
                    ok: 1, 
                    n: scannedCount, 
                    nModified: (modifiedCount + upsertedCount)
                }
            });
    }
    Collection.prototype.deleteOne = function(key, callback) {
        var temp = [];
        var deletedCount = 0;
        var i, i_items=this.items, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            if (match(key, item)) {
                if (deletedCount == 0) {
                    deletedCount++;
                }
                else {
                    return callback(new errors.RepoCollectionError('More than one item key match deleteOne'));
                }
            }
            else {
                temp.push(item);
            }
        }
        this.items = temp;
        return callback(null, {
                deletedCount: deletedCount, 
                result: {
                    ok: 1, 
                    n: deletedCount
                }
            });
    }
    Collection.prototype.deleteMany = function(key, callback) {
        var temp = [];
        var deletedCount = 0;
        var i, i_items=this.items, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            if (match(key, item)) {
                deletedCount++;
            }
            else {
                temp.push(item);
            }
        }
        this.items = temp;
        return callback(null, {
                deletedCount: deletedCount, 
                result: {
                    ok: 1, 
                    n: deletedCount
                }
            });
    }
    Collection.prototype.toArray = function(callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'toArray', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        // log 'wizzi-repo.utils.collection.toArray'
        callback(null, this.items);
    }
    return Collection;
})();

function normalize(path) {
    return path.trim().replace(/\\/g,'/').toLowerCase();
}
module.exports = Collection;
/**
  params
    string code
      # the error name or number
    string method
    string message
      # optional
    { innerError
      # optional
*/
function error(code, method, message, innerError) {
    var parameter = null;
    if (verify.isObject(message)) {
        parameter = message.parameter;
        message = message.message;
    }
    return verify.error(innerError, {
        name: ( verify.isNumber(code) ? 'Err-' + code : code ),
        method: '.' + method,
        parameter: parameter,
        sourcePath: __filename
    }, message || 'Error message unavailable');
}
