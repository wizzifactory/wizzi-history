/*
    artifact generator: C:\My\wizzi\v5\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\v5\kernel\wizzi\src\ittf\lib\model\modelinfo.js.ittf
*/
'use strict';
// generated by wizzi.codegen.js4.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var verify = require('wizzi-utils').verify;
var util = require("util");
var assert = require("assert");
var path = require("path");
var async = require("async");
var errors = require('../errors');
var verify = require('wizzi-utils').verify;
var ittfs = require('wizzi-repo').Filesystem;

/** -àà
     Is the ModelInfo instance that
     - receive the 'wfjob' data to build a model
     - calls the wizzi factory to retrieve model loaders.
    
     TODO generatorRequireContextOnly ... explain ...
    
        params
            { config
             # built from a `wfjob` `artifact` element
             string cwd
             string src
             string ignore
             string schema
             string format
             boolean isCompile
                [ contexts
                    { context
                     api-ref wizzi.model.modelInfoConfig
                        { coll
                         string name
                         string itemName
                            [	pathTemplateValues
                                { pathTemplateValues
                                 string token
                                 string attribute
                                 function function
*/

function logme() {
    if (false) {
        console.log.apply(console, arguments);
    }
}

var modelInfoCount = 0;

var ModelInfo = (function () {
    function ModelInfo(config) {
        _classCallCheck(this, ModelInfo);
        if (verify.isObject(config) === false) {
            throw new Error(error(
                'InvalidArgument', 'ctor', { parameter: 'config', message: 'The config parameter must be an object. Received: ' + config }
            ));
        }
        if (verify.isNotEmpty(config.src) === false) {
            throw new Error(error(
                'InvalidArgument', 'ctor', { parameter: 'config.src', message: 'The config.src parameter must be a string. Received: ' + config.src }
            ));
        }
        if (verify.isNullOrUndefined(config.cwd) === false) {
            if (verify.isNotEmpty(config.cwd) === false) {
                throw new Error(error(
                    'InvalidArgument', 'ctor', { parameter: 'config.cwd', message: 'The config.cwd parameter must be a string. Received: ' + config.cwd }
                ));
            }
        }
        if (verify.isNullOrUndefined(config.ignore) === false) {
            if (verify.isNotEmpty(config.ignore) === false) {
                throw new Error(error(
                    'InvalidArgument', 'ctor', { parameter: 'config.ignore', message: 'The config.ignore parameter must be a string. Received: ' + config.ignore }
                ));
            }
        }
        if (verify.isNullOrUndefined(config.schema) === false) {
            if (verify.isNotEmpty(config.schema) === false) {
                throw new Error(error(
                    'InvalidArgument', 'ctor', { parameter: 'config.schema', message: 'The config.schema parameter must be a string. Received: ' + config.schema }
                ));
            }
        }
        if (verify.isNullOrUndefined(config.format) === false) {
            if (verify.isNotEmpty(config.format) === false) {
                throw new Error(error(
                    'InvalidArgument', 'ctor', { parameter: 'config.format', message: 'The config.format parameter must be a string. Received: ' + config.format }
                ));
            }
        }
        if (verify.isNullOrUndefined(config.isCompile) === false) {
            if (verify.isBoolean(config.isCompile) === false) {
                throw new Error(error(
                    'InvalidArgument', 'ctor', { parameter: 'config.isCompile', message: 'The config.isCompile parameter must be a boolean. Received: ' + config.isCompile }
                ));
            }
        }
        if (verify.isNullOrUndefined(config.contexts) === false) {
            if (verify.isArray(config.contexts) === false) {
                throw new Error(error(
                    'InvalidArgument', 'ctor', { parameter: 'config.contexts', message: 'The config.contexts parameter must be an array. Received: ' + config.contexts }
                ));
            }
        }
        if (verify.isNullOrUndefined(config.transformers) === false) {
            if (verify.isArray(config.transformers) === false) {
                throw new Error(error(
                    'InvalidArgument', 'ctor', { parameter: 'config.transformers', message: 'The config.transformers parameter must be an array. Received: ' + config.transformers }
                ));
            }
        }
        if (verify.isNullOrUndefined(config.exportName) === false) {
            if (verify.isNotEmpty(config.exportName) === false) {
                throw new Error(error(
                    'InvalidArgument', 'ctor', { parameter: 'config.exportName', message: 'The config.exportName parameter must be a string. Received: ' + config.exportName }
                ));
            }
        }
        if (verify.isNullOrUndefined(config.coll) === false) {
            if (verify.isObject(config.coll) === false) {
                throw new Error(error(
                    'InvalidArgument', 'ctor', { parameter: 'config.coll', message: 'The config.coll parameter must be an object. Received: ' + config.coll }
                ));
            }
        }
        config.id = ('mi_' + ++modelInfoCount);
        this.id = config.id;
        this.config = config;
        this.schema = config.schema;
        this.format = config.format;
        this.isCompile = !!config.isCompile;
        this.contexts = [];
        if (verify.isArray(config.contexts)) {
            var i, i_items=config.contexts, i_len=config.contexts.length, item;
            for (i=0; i<i_len; i++) {
                item = config.contexts[i];
                this.contexts.push(new ModelInfo(item));
            }
        }
        this.transformers = config.transformers;
        this.coll = config.coll;
        this.exportName = config.exportName;
        
        this.generatorRequireContextOnly = false;
        if (config.src === 'context') {
            this.generatorRequireContextOnly = true;
        }
        else {
            config.src = verify.unixifyPath(config.src);
            if (verify.isString(config.cwd)) {
                config.cwd = verify.unixifyPath(config.cwd);
            }
            var ndx = config.src.indexOf('/*');
            if (ndx > -1) {
                config.srcPattern = config.src.substr(ndx);
                config.src = config.src.substr(0, ndx);
            }
        }
        if (this.generatorRequireContextOnly == false) {
            if (verify.isAbsolutePath(config.src) === false && verify.isEmpty(config.cwd) === true) {
                throw error(999, 'ctor', "When the parameter config.src is not an absolute path, config.cwd must be a not empty string. Received: " + config.cwd);
            }
        }
    }
    ModelInfo.prototype.src = function(value) {
        if (verify.isNullOrUndefined(value) === false) {
            if (verify.isNotEmpty(value) === false) {
                return error(
                    'InvalidArgument', 'src', { parameter: 'value', message: 'The value parameter must be a string. Received: ' + value }
                );
            }
        }
        if (typeof (value) === 'undefined') {
            if (this.generatorRequireContextOnly == true) {
                return null;
            }
            else {
                return this.config.src;
            }
        }
        else {
            this.config.src = value;
        }
    }
    ModelInfo.prototype.srcFullPath = function() {
        if (this.generatorRequireContextOnly == true) {
            return null;
        }
        return verify.isAbsolutePath(this.config.src) ? this.config.src : path.join(this.config.cwd, this.config.src);
    }
    ModelInfo.prototype.ignoreFullPath = function() {
        if (this.config.ignore) {
            return verify.isAbsolutePath(this.config.ignore) ? this.config.ignore : path.join(this.config.cwd, this.config.ignore);
        }
        else {
            return null;
        }
    }
    ModelInfo.prototype.srcGlobPath = function() {
        var globPattern = this.config.srcPattern || '/**/*.*';
        if (globPattern.substr(0, 1) !== '/') {
            globPattern = ('/' + globPattern);
        }
        return this.srcFullPath() + globPattern;
    }
    ModelInfo.prototype.srcGlobOptions = function() {
        var ret = {};
        // TODO fix or VIA
        // for now see getFiles skip `*__copy`
        // if this.config.ignore
        // set ret.ignore = [this.ignoreFullPath()]
        return ret;
    }
    ModelInfo.prototype.productionManager = function(value) {
        if (verify.isNullOrUndefined(value) === false) {
            if (verify.isObject(value) === false) {
                return error(
                    'InvalidArgument', 'productionManager', { parameter: 'value', message: 'The value parameter must be an object. Received: ' + value }
                );
            }
        }
        if (typeof (value) === 'undefined') {
            return this.productionManagerInstance;
        }
        else {
            if (verify.isObject(value) === false) {
                throw new Error("value parameter must be an object. Instead is: " + value);
            }
            // log 'wizzi.model.modelInfo.set_productionManager.globalContext', value.globalContext()
            this.productionManagerInstance = value;
            var i, i_items=this.contexts, i_len=this.contexts.length, modelInfo;
            for (i=0; i<i_len; i++) {
                modelInfo = this.contexts[i];
                modelInfo.productionManager(value);
            }
        }
    }
    ModelInfo.prototype.hasContext = function() {
        return verify.isArray(this.config.contexts) && this.config.contexts.length > 0;
    }
    ModelInfo.prototype.getWizziFactory = function() {
        return this.productionManagerInstance.wizziFactory;
    }
    ModelInfo.prototype.getFileService = function() {
        // return ittfs
        // TODO
        assert.ok(verify.isObject(this.productionManagerInstance), 'productionManagerInstance not set. Must call productionManager(productionManagerInstance)');
        assert.ok(verify.isObject(this.productionManagerInstance.wizziFactory.fileService), 'fileService must be set on wizziFactory');
        return this.productionManagerInstance.wizziFactory.fileService;
    }
    ModelInfo.prototype.getModelCollectionInfo = function() {
        if (this.hasContext()) {
            var i, i_items=this.config.contexts, i_len=this.config.contexts.length, item;
            for (i=0; i<i_len; i++) {
                item = this.config.contexts[i];
                if (verify.isObject(item.coll)) {
                    return item.coll;
                }
            }
        }
        return null;
    }
    ModelInfo.prototype.getModelInfos = function(options, callback) {
        if (this.generatorRequireContextOnly == true) {
            return callback(null, [this]);
        }
        var that = this;
        this.isDirectory(function(err, isDirectory) {
            if (err) {
                return callback(err);
            }
            if (isDirectory) {
                var ret = [];
                that.getFiles(options, function(err, files) {
                    if (err) {
                        return callback(err);
                    }
                    if (files.__is_error) {
                        return callback(files);
                    }
                    for (var i = 0; i < files.length; i++) {
                        var fileInfo = files[i];
                        var mi = that.clone();
                        mi.src(fileInfo.relpath);
                        mi.productionManager(that.productionManagerInstance);
                        ret.push(mi);
                    }
                    return callback(null, ret);
                });
            }
            else {
                return callback(null, [
                        that
                    ]);
            }
        });
    }
    ModelInfo.prototype.clone = function() {
        var newconfig = {
            cwd: this.config.cwd, 
            src: this.config.src, 
            schema: this.config.schema, 
            format: this.config.format, 
            isCompile: this.config.isCompile, 
            contexts: this.config.contexts, 
            transformers: this.config.transformers, 
            coll: this.config.coll
        };
        var ret = new ModelInfo(newconfig);
        return ret;
    }
    ModelInfo.prototype.toString = function() {
        return 'modelInfo.config: ' + util.inspect(this.config, {depth: 2});
    }
    ModelInfo.prototype.terminate = function() {
    }
    ModelInfo.prototype.getSource = function(callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'getSource', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        console.log('wizzi.modelinfo.getsource', this.srcFullPath());
        var fileService = this.getFileService();
        var that = this;
        this.exists(function(err, exists) {
            if (err) {
                return callback(err);
            }
            if (!exists) {
                return callback(error('NotFound', 'getSource', "Cannot get source. File not found : " + that.srcFullPath()));
            }
            that.isFile(function(err, isFile) {
                if (err) {
                    return callback(err);
                }
                if (!isFile) {
                    return callback(error('InvalidOperation', 'getSource', "Cannot get source. Is not a file : " + that.srcFullPath()));
                }
                fileService.read(that.srcFullPath(), callback);
            });
        });
    }
    ModelInfo.prototype.getSources = function(callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'getSources', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        console.log('wizzi.modelinfo.getsources', this.srcFullPath());
        var fileService = this.getFileService();
        var that = this;
        this.exists(function(err, exists) {
            if (err) {
                return callback(err);
            }
            if (!exists) {
                return callback(error('NotFound', 'getSources', "Cannot get sources. Directory not found : " + that.srcFullPath()));
            }
            that.isDirectory(function(err, isDirectory) {
                if (err) {
                    return callback(err);
                }
                if (!isDirectory) {
                    return callback(error('InvalidOperation', 'getSources', "Cannot get sources. Is not a directory : " + that.srcFullPath()));
                }
                that.getFiles({}, function(err, fileInfos) {
                    if (err) {
                        return callback(err);
                    }
                    async.map(fileInfos, function(fileInfo, callback) {
                        fileService.read(fileInfo.fullpath, function(err, content) {
                            if (err) {
                                return callback(err);
                            }
                            return callback(null, {
                                    fullpath: fileInfo.fullpath, 
                                    relpath: fileInfo.relpath, 
                                    content: content
                                });
                        });
                    }, function(err, fileContents) {
                        if (err) {
                            return callback(err);
                        }
                        return callback(null, fileContents);
                    });
                });
            });
        });
    }
    ModelInfo.prototype.getFiles = function(options, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'getFiles', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isObject(options) === false) {
            return callback(error(
                'InvalidArgument', 'getFiles', { parameter: 'options', message: 'The options parameter must be an object. Received: ' + options }
            ));
        }
        if (verify.isNullOrUndefined(options.final) === false) {
            if (verify.isBoolean(options.final) === false) {
                return callback(error(
                    'InvalidArgument', 'getFiles', { parameter: 'options.final', message: 'The options.final parameter must be a boolean. Received: ' + options.final }
                ));
            }
        }
        var fileService = this.getFileService();
        var that = this;
        this.exists(function(err, exists) {
            if (err) {
                return callback(err);
            }
            if (!exists) {
                return callback(error('NotFound', 'getFiles', "Cannot get files. Directory not found : " + that.srcFullPath()));
            }
            that.isDirectory(function(err, isDirectory) {
                if (err) {
                    return callback(err);
                }
                if (!isDirectory) {
                    return callback(error('InvalidOperation', 'getFiles', "Cannot get files. Is not a directory : " + that.srcFullPath()));
                }
                var ret = [],
                    srcFullPath = that.srcFullPath(),
                    srcGlobPath = that.srcGlobPath();
                fileService.getGlobbedFiles(srcGlobPath, that.srcGlobOptions(), function(err, files) {
                    if (err) {
                        return callback(err);
                    }
                    for (var i = 0; i < files.length; i++) {
                        var fileInfo = files[i];
                        // skip "_debug" folder
                        if (fileInfo.indexOf('/_debug/') > -1) {
                            continue;
                        }
                        // skip "__copy" and "t" folders
                        if (!options.final) {
                            if (fileInfo.indexOf('__copy/') >= 0 || fileInfo.indexOf('/t/') >= 0) {
                                continue;
                            }
                        }
                        var fullpath = fileInfo;
                        var relpath = that.config.cwd ? relPath(fullpath, that.config.cwd) : null;
                        ;
                        ret.push({
                            fullpath: fullpath, 
                            relpath: relpath
                        });
                    }
                    return callback(null, ret);
                });
            });
        });
    }
    ModelInfo.prototype.readJSON = function(sourceUri, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'readJSON', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isNotEmpty(sourceUri) === false) {
            return callback(error(
                'InvalidArgument', 'readJSON', { parameter: 'sourceUri', message: 'The sourceUri parameter must be a string. Received: ' + sourceUri }
            ));
        }
        var fileService = this.getFileService();
        fileService.isFile(sourceUri, function(err, isFile) {
            if (err) {
                return callback(err);
            }
            if (isFile == false) {
                return callback(error('NotFound', 'readJSON', "Cannot find json document : " + sourceUri));
            }
            else {
                fileService.readJSON(sourceUri, callback);
            }
        });
    }
    ModelInfo.prototype.readXml = function(sourceUri, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'readXml', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isNotEmpty(sourceUri) === false) {
            return callback(error(
                'InvalidArgument', 'readXml', { parameter: 'sourceUri', message: 'The sourceUri parameter must be a string. Received: ' + sourceUri }
            ));
        }
        var fileService = this.getFileService();
        fileService.isFile(sourceUri, function(err, isFile) {
            if (err) {
                return callback(err);
            }
            if (isFile == false) {
                return callback(error('NotFound', 'readXml', "Cannot find xml document : " + sourceUri));
            }
            else {
                fileService.readXml(sourceUri, callback);
            }
        });
    }
    ModelInfo.prototype.exists = function(callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'exists', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        var fileService = this.getFileService();
        fileService.exists(this.srcFullPath(), callback);
    }
    ModelInfo.prototype.isDirectory = function(callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'isDirectory', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        var fileService = this.getFileService();
        fileService.isDirectory(this.srcFullPath(), callback);
    }
    ModelInfo.prototype.isFile = function(callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'isFile', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        var fileService = this.getFileService();
        fileService.isFile(this.srcFullPath(), callback);
    }
    ModelInfo.prototype.getLoadModel = function(callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'getLoadModel', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (!this.productionManager()) {
            return callback(error('InvalidOperation', 'getLoadModel', "Method called without setting the 'productionManager' object"));
        }
        if (verify.isEmpty(this.schema) && verify.isEmpty(this.format)) {
            return callback(error('InvalidOperation', 'getLoadModel', "Method called without setting neither the 'schema' nor the 'format' name"));
        }
        if (verify.isNotEmpty(this.schema)) {
            var loadModel = this.productionManager().getLoadModel(this.schema);
            if (loadModel && loadModel.__is_error) {
                console.log('__is_error ', loadModel);
                return callback(loadModel);
            }
            if (loadModel == null) {
                var err = new errors.NotFoundError('WizziModelFactory', this.schema, this);
                return callback(error('NotFound', 'getLoadModel', 'Cannot retrieve wizzi-plugin.modelFactory.loadModel method for schema: ' + this.schema, err));
            }
            else {
                callback(null, loadModel);
            }
        }
        else {
            if (this.format === 'json') {
                return callback(null, this._getLoadJsonModel());
            }
            else if (this.format === 'xml') {
                return callback(null, this._getLoadXmlModel());
            }
            else {
                return callback(null, this._getLoadJsModel());
            }
        }
    }
    ModelInfo.prototype._getLoadJsonModel = function() {
        var that = this;
        return function loadJsonModel(sourceUri, context, callback) {
                if (typeof(callback) !== 'function') {
                    throw new Error(
                        error('InvalidArgument', 'loadJsonModel', 'The callback parameter must be a function. Received: ' + callback)
                    );
                };
                if (verify.isNotEmpty(sourceUri) === false) {
                    return callback(error(
                        'InvalidArgument', 'loadJsonModel', { parameter: 'sourceUri', message: 'The sourceUri parameter must be a string. Received: ' + sourceUri }
                    ));
                }
                if (verify.isNullOrUndefined(context) === false) {
                    if (verify.isObject(context) === false) {
                        return callback(error(
                            'InvalidArgument', 'loadJsonModel', { parameter: 'context', message: 'The context parameter must be an object. Received: ' + context }
                        ));
                    }
                }
                // TODO interpolate object values of type string?
                // interpolate property names too?
                that.readJSON(sourceUri, callback);
            };
    }
    ModelInfo.prototype._getLoadXmlModel = function() {
        var that = this;
        return function loadXmlModel(sourceUri, context, callback) {
                if (typeof(callback) !== 'function') {
                    throw new Error(
                        error('InvalidArgument', 'loadXmlModel', 'The callback parameter must be a function. Received: ' + callback)
                    );
                };
                if (verify.isNotEmpty(sourceUri) === false) {
                    return callback(error(
                        'InvalidArgument', 'loadXmlModel', { parameter: 'sourceUri', message: 'The sourceUri parameter must be a string. Received: ' + sourceUri }
                    ));
                }
                if (verify.isObject(context) === false) {
                    return callback(error(
                        'InvalidArgument', 'loadXmlModel', { parameter: 'context', message: 'The context parameter must be an object. Received: ' + context }
                    ));
                }
                // TODO interpolate object values of type string?
                // interpolate property names too?
                that.readXml(sourceUri, callback);
            };
    }
    ModelInfo.prototype._getLoadJsModel = function() {
        var that = this;
        return function loadJsModel(sourceUri, context, callback) {
                if (typeof(callback) !== 'function') {
                    throw new Error(
                        error('InvalidArgument', 'loadJsModel', 'The callback parameter must be a function. Received: ' + callback)
                    );
                };
                if (verify.isNotEmpty(sourceUri) === false) {
                    return callback(error(
                        'InvalidArgument', 'loadJsModel', { parameter: 'sourceUri', message: 'The sourceUri parameter must be a string. Received: ' + sourceUri }
                    ));
                }
                if (verify.isObject(context) === false) {
                    return callback(error(
                        'InvalidArgument', 'loadJsModel', { parameter: 'context', message: 'The context parameter must be an object. Received: ' + context }
                    ));
                }
                var fileService = that.getFileService();
                fileService.isFile(sourceUri, function(err, isFile) {
                    if (err) {
                        return callback(err);
                    }
                    if (isFile == false) {
                        return callback(error('NotFound', 'loadJsModel', 'Cannot find javascript module: ' + sourceUri + '. See inner error', new errors.NotFoundError('javascript module', sourceUri, this)));
                    }
                    else {
                        try {
                            var model = require(sourceUri);
                            if (verify.isFunction(model.toModel)) {
                                return callback(null, model.toModel(context));
                            }
                            else {
                                return callback(null, model());
                            }
                        } catch (ex) {
                            return callback(error('TypeError', 'loadJsModel', 'Error requiring js module: ' + sourceUri + '. Message: ' + ex.message, ex));
                        }
                    }
                });
            };
    }
    ModelInfo.prototype.getModelTransformer = function(trasformerName, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'getModelTransformer', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isNotEmpty(trasformerName) === false) {
            return callback(error(
                'InvalidArgument', 'getModelTransformer', { parameter: 'trasformerName', message: 'The trasformerName parameter must be a string. Received: ' + trasformerName }
            ));
        }
        if (!this.productionManager()) {
            return callback(error('InvalidOperation', 'getModelTransformer', "Method called without setting the 'productionManager' object"));
        }
        var modelTransformer = this.productionManager().getModelTransformer(trasformerName);
        if (modelTransformer && modelTransformer.__is_error) {
            console.log('__is_error ', modelTransformer);
            return callback(modelTransformer);
        }
        if (modelTransformer == null) {
            return callback(new errors.NotFoundError('modelTransformer', trasformerName, this));
        }
        else {
            callback(null, modelTransformer);
        }
    }
    ModelInfo.prototype.getArtifactGenerator = function(generatorName, callback) {
        if (!this.productionManager()) {
            return callback(error('999', 'getArtifactGenerator', "Method called without setting the 'productionManager' object"));
        }
        var generator = this.productionManager().getArtifactGenerator(generatorName);
        if (generator && generator.__is_error) {
            console.log('__is_error ', generator);
            return callback(generator);
        }
        if (generator == null) {
            return callback(new errors.NotFoundError('generator', generatorName, this));
        }
        else {
            callback(null, generator);
        }
    }
    return ModelInfo;
})();

function relPath(fullpath, basedir) {
    return fullpath.substr(basedir.length + 1);
}

module.exports = {
    ModelInfo: ModelInfo
};
/**
  params
    string code
      # the error name or number
    string method
    string message
      # optional
    { innerError
      # optional
*/
function error(code, method, message, innerError) {
    var parameter = null;
    if (verify.isObject(message)) {
        parameter = message.parameter;
        message = message.message;
    }
    return verify.error(innerError, {
        name: ( verify.isNumber(code) ? 'Err-' + code : code ),
        method: 'wizzi.model.modelInfo.' + method,
        parameter: parameter,
        sourcePath: __filename
    }, message || 'Error message unavailable');
}
