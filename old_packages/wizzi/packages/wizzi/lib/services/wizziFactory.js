/*
    artifact generator: C:\My\wizzi\v5\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\v5\kernel\wizzi\src\ittf\lib\services\wizzifactory.js.ittf
*/
'use strict';
// generated by wizzi.codegen.js4.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var verify = require('wizzi-utils').verify;

var util = require('util');
var path = require('path');
var stringify = require('json-stringify-safe');

var repo = require('wizzi-repo');
var mtree = require('wizzi-mtree');
var acl = require('../acl');
var productionOptions = require('../production/options');
var ProductionManager = null;
var GenContext = require('../artifact/genContext');
var verify = require('wizzi-utils').verify;
var file = require('wizzi-utils').file;
var JsonComponents = require('wizzi-repo').JsonComponents;
var StringWriter = require('../util/stringWriter');
var errors = require('../errors');
var log = require('../util/log')(module);
var PluginsManager = require('./pluginsManager');
var StorePool = require('./storePool');
var bootModelUri = "../wizzi/models/bootstrap/wfschema-boot-model";
var bootModelDefUri = "../wizzi/models/bootstrap/wfschema-boot-modelDef";
var BootWizziSchema = null;
var ModelInfo = null;
var AsyncModelLoader = null;

var WizziFactory = (function () {
    function WizziFactory(user, role) {
        _classCallCheck(this, WizziFactory);
        this.__type = 'WizziFactory';
        this.user = user;
        this.role = role;
        this.storeKind = null;
        this.fileService = null;
        this.storePool = new StorePool(this);
        // loadMTree is a method of this class, we need an alias
        this.__loadMTree = null;
        // loadMTreeRaw is a method of this class, we need an alias
        this.__loadMTreeRaw = null;
        // loadMTreeDebugInfo is a method of this class, we need an alias
        this.__loadMTreeDebugInfo = null;
        this.pluginsManager = null;
        this.modelLoaders = {};
        this.modelTransformers = {};
        this.artifactGenerators = {};
        this.schemaDefinitions = {};
        this.globalContext = {};
    }
    /** -àà
         params
         { options
         { repo
         string storeKind
         oneOf 'filesystem', 'mongodb', 'browserfs', 'json'
         string storeUri
         # when storeKind == mongodb
         string storeBaseFolder
         # when storeKind == mongodb
         { storeJsonFsData
         # when storeKind == json
         { plugins
         [ items
         string pluginName
         string pluginsBaseFolder
         { test
         string testOnlyMockBaseDir
         { dumps
         string dumpsBaseFolder
         { mTreeBuildupJsWizziScript
         boolean dump
         string dumpsBaseFolder
    */
    WizziFactory.prototype.initialize = function(options, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'initialize', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isObject(options) === false) {
            return callback(error(
                'InvalidArgument', 'initialize', { parameter: 'options', message: 'The options parameter must be an object. Received: ' + options }
            ));
        }
        if (verify.isObject(options.repo) === false) {
            return callback(error(
                'InvalidArgument', 'initialize', { parameter: 'options.repo', message: 'The options.repo parameter must be an object. Received: ' + options.repo }
            ));
        }
        if (verify.isNullOrUndefined(options.plugins) === false) {
            if (verify.isObject(options.plugins) === false) {
                return callback(error(
                    'InvalidArgument', 'initialize', { parameter: 'options.plugins', message: 'The options.plugins parameter must be an object. Received: ' + options.plugins }
                ));
            }
        }
        if (verify.isNullOrUndefined(options.globalContext) === false) {
            if (verify.isObject(options.globalContext) === false) {
                return callback(error(
                    'InvalidArgument', 'initialize', { parameter: 'options.globalContext', message: 'The options.globalContext parameter must be an object. Received: ' + options.globalContext }
                ));
            }
        }
        if (verify.isNullOrUndefined(options.test) === false) {
            if (verify.isObject(options.test) === false) {
                return callback(error(
                    'InvalidArgument', 'initialize', { parameter: 'options.test', message: 'The options.test parameter must be an object. Received: ' + options.test }
                ));
            }
        }
        if (options.test) {
            this.__is_test = true;
            this.testOptions = {
                dumps: options.test.dumps
            };
            this.testOnlyMockBaseDir = options.test.testOnlyMockBaseDir;
        }
        if (options.globalContext) {
            this.globalContext = Object.assign({}, this.globalContext, options.globalContext);
        }
        // log 'wizzi.wizziFactory.initialize.globalContext', this.globalContext
        var repoOptions = options.repo;
        // can be used for creating on the fly a json factory
        // for loading models from text strings
        this.pluginsOptions = options.plugins;
        if (verify.isObject(this.pluginsOptions) == false) {
            this.pluginsOptions = {};
        }
        this.storeKind = repoOptions.storeKind || 'filesystem';
        var that = this;
        this.storePool.initialize(repoOptions, function(err, pool) {
            if (err) {
                return callback(err);
            }
            that.fileService = pool.fileService;
            that.createStore = pool.createStore;
            that.__loadMTree = mtree.createLoadMTree(that.createStore);
            if (that.__loadMTree && that.__loadMTree.__is_error) {
                // log 'wizzi.checked_call_set.__is_error ', that.__loadMTree
                return callback(that.__loadMTree);
            }
            that.__loadMTreeRaw = mtree.createLoadMTree(that.createStore, {
                raw: true
            });
            if (that.__loadMTreeRaw && that.__loadMTreeRaw.__is_error) {
                // log 'wizzi.checked_call_set.__is_error ', that.__loadMTreeRaw
                return callback(that.__loadMTreeRaw);
            }
            that.__loadMTreeDebugInfo = mtree.createLoadMTree(that.createStore, {
                debugInfo: true
            });
            if (that.__loadMTreeDebugInfo && that.__loadMTreeDebugInfo.__is_error) {
                // log 'wizzi.checked_call_set.__is_error ', that.__loadMTreeDebugInfo
                return callback(that.__loadMTreeDebugInfo);
            }
            that.createStore(function(err, store) {
                if (err) {
                    return callback(err);
                }
                that.store = store;
                PluginsManager.createManager(that.pluginsOptions, function(err, pluginsManager) {
                    if (err) {
                        return callback(err);
                    }
                    that.pluginsManager = pluginsManager;
                    // log 'pluginsManager', pluginsManager
                    return callback(null, that);
                });
            });
        });
    }
    WizziFactory.prototype.terminate = function() {
        this.storePool.close();
    }
    /** -àà
         TODO
         This method is optimal to implement the
         replacement of wizzi.model.modelInfo(s) properties of
         'loadContext' with loaded wizzi models.
         But the method must become asynchronous !!!
         params
         { loadContext
         { mTreeBuildUpContext
    */
    WizziFactory.prototype.createLoadContext = function(loadContext) {
        
        if (verify.isObject(loadContext) && verify.isObject(loadContext.__productionManager)) {
            // Already a valid request context
            return loadContext;
        }
        
        var mTreeBuildUpContext = Object.assign({}, this.globalContext, loadContext.mTreeBuildUpContext);
        
        // log 'wizzi.wizziFactory.createLoadContext.mTreeBuildUpContext', mTreeBuildUpContext
        
        return {
                __productionManager: this.createProductionManager(), 
                mTreeBuildUpContext: mTreeBuildUpContext
            };
    }
    /** -àà
         params
         { userProductionOptions
         integer indentSpaces
         default 4
         string basedir
         integer verbose
         default 2
         { dumps
         ...
         { globalContext
    */
    WizziFactory.prototype.createProductionManager = function(userProductionOptions, globalContext) {
        if (verify.isNullOrUndefined(userProductionOptions) === false) {
            if (verify.isObject(userProductionOptions) === false) {
                return error(
                    'InvalidArgument', 'createProductionManager', { parameter: 'userProductionOptions', message: 'The userProductionOptions parameter must be an object. Received: ' + userProductionOptions }
                );
            }
        }
        if (verify.isNullOrUndefined(globalContext) === false) {
            if (verify.isObject(globalContext) === false) {
                return error(
                    'InvalidArgument', 'createProductionManager', { parameter: 'globalContext', message: 'The globalContext parameter must be an object. Received: ' + globalContext }
                );
            }
        }
        
        var options = productionOptions(userProductionOptions || {});
        if (this.__is_test) {
            options = Object.assign(options, this.testOptions);
        }
        // log '*=*=*=*= temporary wizzi.wizziFactory.createProductionManager. options : ', options
        var ProductionManager = getProductionManager();
        var pman = new ProductionManager(this, options);
        
        // create and set aclStat
        var aclStat = new acl.AclStat(this.user, this.role);
        pman.aclStat(aclStat);
        
        // create and set the global context
        var globalContext = Object.assign({}, this.globalContext, globalContext || {});
        pman.globalContext(globalContext);
        return pman;
    }
    /** -àà
         Async load a wizzi magical tree
        
         params
         string ittfDocumentUri
         { mTreeBuildUpContext
         callback
    */
    WizziFactory.prototype.loadMTree = function(ittfDocumentUri, mTreeBuildUpContext, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'loadMTree', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isNotEmpty(ittfDocumentUri) === false) {
            return callback(error(
                'InvalidArgument', 'loadMTree', { parameter: 'ittfDocumentUri', message: 'The ittfDocumentUri parameter must be a string. Received: ' + ittfDocumentUri }
            ));
        }
        if (verify.isObject(mTreeBuildUpContext) === false) {
            return callback(error(
                'InvalidArgument', 'loadMTree', { parameter: 'mTreeBuildUpContext', message: 'The mTreeBuildUpContext parameter must be an object. Received: ' + mTreeBuildUpContext }
            ));
        }
        
        this.__loadMTree(ittfDocumentUri, this.createLoadContext({
            mTreeBuildUpContext: mTreeBuildUpContext
        }), callback);
    }
    /** -àà
         Async load a raw ittf document
        
         params
         string ittfDocumentUri
         callback
    */
    WizziFactory.prototype.loadMTreeRaw = function(ittfDocumentUri, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'loadMTreeRaw', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isNotEmpty(ittfDocumentUri) === false) {
            return callback(error(
                'InvalidArgument', 'loadMTreeRaw', { parameter: 'ittfDocumentUri', message: 'The ittfDocumentUri parameter must be a string. Received: ' + ittfDocumentUri }
            ));
        }
        
        this.__loadMTreeRaw(ittfDocumentUri, this.createLoadContext({}), callback);
    }
    /** -àà
         Async load the mTree debug info of an ittf document
        
         params
         string ittfDocumentUri
         callback
    */
    WizziFactory.prototype.loadMTreeDebugInfo = function(ittfDocumentUri, mTreeBuildUpContext, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'loadMTreeDebugInfo', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isNotEmpty(ittfDocumentUri) === false) {
            return callback(error(
                'InvalidArgument', 'loadMTreeDebugInfo', { parameter: 'ittfDocumentUri', message: 'The ittfDocumentUri parameter must be a string. Received: ' + ittfDocumentUri }
            ));
        }
        if (verify.isObject(mTreeBuildUpContext) === false) {
            return callback(error(
                'InvalidArgument', 'loadMTreeDebugInfo', { parameter: 'mTreeBuildUpContext', message: 'The mTreeBuildUpContext parameter must be an object. Received: ' + mTreeBuildUpContext }
            ));
        }
        
        this.__loadMTreeDebugInfo(ittfDocumentUri, this.createLoadContext({
            mTreeBuildUpContext: mTreeBuildUpContext
        }), callback);
    }
    WizziFactory.prototype.loadMTreeDebugInfoFromText = function(ittfContent, mTreeBuildUpContext, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'loadMTreeDebugInfoFromText', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isNotEmpty(ittfContent) === false) {
            return callback(error(
                'InvalidArgument', 'loadMTreeDebugInfoFromText', { parameter: 'ittfContent', message: 'The ittfContent parameter must be a string. Received: ' + ittfContent }
            ));
        }
        if (verify.isObject(mTreeBuildUpContext) === false) {
            return callback(error(
                'InvalidArgument', 'loadMTreeDebugInfoFromText', { parameter: 'mTreeBuildUpContext', message: 'The mTreeBuildUpContext parameter must be an object. Received: ' + mTreeBuildUpContext }
            ));
        }
        
        // log 'wizzi.wizziFactory.loadMTreeDebugInfoFromText', ittfContent, mTreeBuildUpContext, callback
        this.createSingleTextSourceFactory(ittfContent, 'ittf', {}, function(err, result) {
            if (err) {
                return callback(err);
            }
            result.wizziFactory.loadMTreeDebugInfo(result.ittfDocumentUri, mTreeBuildUpContext, callback);
        });
    }
    /** -àà
         Retrieve a loadModel function by the model schema name.
         Model factories are searched in the PluginsManager.
         They are cached.
         return
         | func wizzi-plugin.modelFactory.loadModel
         | wzError NotFound
         params
         string schemaName
         { globalContext
         optional
         # A global context object can be used to add mTree buildup contex values
         # to those contained in the mTreeBuildUpContext parameter, every time
         # the returned loadModel function is called.
         string testOnlyMockBaseDir
         # used for test purposes
    */
    WizziFactory.prototype.getLoadModel = function(schemaName, globalContext, testOnlyMockBaseDir) {
        if (verify.isNotEmpty(schemaName) === false) {
            return error(
                'InvalidArgument', 'getLoadModel', { parameter: 'schemaName', message: 'The schemaName parameter must be a string. Received: ' + schemaName }
            );
        }
        if (verify.isNullOrUndefined(globalContext) === false) {
            if (verify.isObject(globalContext) === false) {
                return error(
                    'InvalidArgument', 'getLoadModel', { parameter: 'globalContext', message: 'The globalContext parameter must be an object. Received: ' + globalContext }
                );
            }
        }
        
        // log 'wizzi.services.wizziFactory.getLoadModel: globalContext, testOnlyMockBaseDir', globalContext, testOnlyMockBaseDir
        var loadModel = this.modelLoaders[schemaName] || null;
        if (loadModel == null) {
            var factory = this.pluginsManager.getModelFactory(schemaName, (testOnlyMockBaseDir || this.testOnlyMockBaseDir));
            if (factory && factory.__is_error) {
                return factory;
            }
            // log 'wizzi.wizziFactory.getLoadModel.schemaName,factory', schemaName, factory
            // log 'wizzi.wizziFactory.getLoadModel.this.__loadMTree.loadHistory', this.__loadMTree.loadHistory
            loadModel = factory.createLoadModel({
                loadMTree: this.__loadMTree, 
                file: file, 
                verify: verify, 
                errors: errors, 
                wizziFactory: this
            }, globalContext);
            // log 'getLoadModel.loadModel', loadModel
            this.modelLoaders[schemaName] = loadModel;
        }
        return loadModel;
    }
    /** -àà
         Retrieve a loadModelFromTree function by the model schema name.
         Model factories are searched in the PluginsManager.
         They are cached.
         return
         | func wizzi-plugin.modelFactory.loadModel
         | wzError NotFound
         params
         string schemaName
    */
    WizziFactory.prototype.getLoadModelFromMTree = function(schemaName) {
        if (verify.isNotEmpty(schemaName) === false) {
            return error(
                'InvalidArgument', 'getLoadModelFromMTree', { parameter: 'schemaName', message: 'The schemaName parameter must be a string. Received: ' + schemaName }
            );
        }
        var loadModel = this.modelLoaders[schemaName + 'FromMTree'] || null;
        if (loadModel == null) {
            var factory = this.pluginsManager.getModelFactory(schemaName, null);
            if (factory && factory.__is_error) {
                return factory;
            }
            // log 'wizzi.wizziFactory.getLoadModel.schemaName,factory', schemaName, factory
            loadModel = factory.createLoadModel({
                loadMTree: this.__loadMTree, 
                file: file, 
                verify: verify, 
                errors: errors, 
                wizziFactory: this, 
                options: {
                    loadFromMTree: true
                }
            }, {});
            // log 'getLoadModel.loadModel', loadModel
            this.modelLoaders[schemaName + 'FromMTree'] = loadModel;
        }
        return loadModel;
    }
    /** -àà
         Async load a wizzi model
         params
         string schemaName
         string ittfDocumentUri
         { loadContext
         { mTreeBuildUpContext
         optional
         { globalContext
         # Being the loadModel function called once this usually is not used.
         optional
         { formatOptions
         optional
         boolean ittfSources
         # if true returns not the model but its ittf source documents.
         callback
    */
    WizziFactory.prototype.loadModel = function(schemaName, ittfDocumentUri, loadContext, callback, testOnlyMockBaseDir) {
        
        if (typeof(callback) == 'undefined') {
            testOnlyMockBaseDir = null;
            callback = loadContext;
            loadContext = ittfDocumentUri;
            ittfDocumentUri = schemaName;
            schemaName = null;
        }
        
        if (typeof(callback) !== 'function') {
            throw new Error(error('InvalidArgument', 'loadModel', 'The callback parameter must be a function. Received: ' + callback));
        }
        if (schemaName == null) {
            schemaName = detectSchema(ittfDocumentUri);
            if (schemaName && schemaName.__is_error) {
                // log 'wizzi.checked_call_set.__is_error ', schemaName
                return callback(schemaName);
            }
        }
        var resolved_ittfDocumentUri = verify.resolveToString(ittfDocumentUri);
        // log 'resolved_ittfDocumentUri', resolved_ittfDocumentUri
        if (verify.isNotEmpty(resolved_ittfDocumentUri) === false) {
            return callback(error('InvalidArgument', 'loadModel', {
                    parameter: 'ittfDocumentUri', 
                    message: "'ittfDocumentUri' must be a not empty string. Received: " + util.inspect(ittfDocumentUri, { depth: null })
                }));
        }
        else {
            ittfDocumentUri = resolved_ittfDocumentUri;
        }
        
        // log 'wizzi.wizziFactory.loadModel: schemaName, ittfDocumentUri, testOnlyMockBaseDir', schemaName, ittfDocumentUri, testOnlyMockBaseDir
        
        loadContext = loadContext || {};
        
        var loadModel = this.getLoadModel(schemaName, loadContext.globalContext, testOnlyMockBaseDir);
        
        if (loadModel.__is_error) {
            loadModel.ittfDocumentUri = ittfDocumentUri;
            return callback(loadModel);
        }
        
        var that = this;
        loadModel(ittfDocumentUri, this.createLoadContext(loadContext), function(err, wizziModel) {
            if (err) {
                return callback(err);
            }
            return callback(null, that.formatWizziModel(wizziModel, loadContext.formatOptions));
        });
    }
    WizziFactory.prototype.formatWizziModel = function(model, formatOptions) {
        if (!formatOptions) {
            return model;
        }
        var partial = false;
        var ret = {};
        if (formatOptions.ittfSources) {
            partial = true;
            ret.loadHistory = {};
            ret.loadHistory.ittfSources = model.loadHistory.ittfSources;
        }
        if (partial) {
            return ret;
        }
        else {
            return model;
        }
    }
    WizziFactory.prototype.loadModelFromMtree = function(schemaName, mTree, loadContext, callback) {
        
        if (typeof(callback) == 'undefined') {
            callback = loadContext;
            loadContext = {};
        }
        // log 'wizzi.wizziFactory.loadModelFromMtree 2', schemaName, mTree, mTree.nodes[0].children, loadContext, callback
        
        if (typeof(callback) !== 'function') {
            throw new Error(error('InvalidArgument', 'loadModelFromMtree', 'The callback parameter must be a function. Received: ' + callback));
        }
        
        var loadModel = this.getLoadModelFromMTree(schemaName);
        
        if (loadModel.__is_error) {
            loadModel.ittfDocumentUri = "Unavailable (loaded from mTree)";
            return callback(loadModel);
        }
        
        var that = this;
        loadModel(mTree, this.createLoadContext(loadContext || {}), function(err, wizziModel) {
            if (err) {
                return callback(err);
            }
            return callback(null, that.formatWizziModel(wizziModel, loadContext.formatOptions));
        });
    }
    /** -àà
         Async load a wizzi model from a
         config object built programmatically
         params
         { modelConfig
         string src
         string cwd
         optional
         string schema
         optional
         string format
         optional
         string exportName
         optional - has meaning only for context models.
         [ contexts
         optional - has the same format of modelConfig
         [ transformers
         optional
         { formatOptions
         optional
         boolean ittfSources
         # if true returns not the model but its ittf source documents.
    */
    WizziFactory.prototype.loadModelFromConfig = function(modelConfig, globalContext, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'loadModelFromConfig', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isObject(modelConfig) === false) {
            return callback(error(
                'InvalidArgument', 'loadModelFromConfig', { parameter: 'modelConfig', message: 'The modelConfig parameter must be an object. Received: ' + modelConfig }
            ));
        }
        if (verify.isNotEmpty(modelConfig.src) === false) {
            return callback(error(
                'InvalidArgument', 'loadModelFromConfig', { parameter: 'modelConfig.src', message: 'The modelConfig.src parameter must be a string. Received: ' + modelConfig.src }
            ));
        }
        if (verify.isNullOrUndefined(modelConfig.cwd) === false) {
            if (verify.isNotEmpty(modelConfig.cwd) === false) {
                return callback(error(
                    'InvalidArgument', 'loadModelFromConfig', { parameter: 'modelConfig.cwd', message: 'The modelConfig.cwd parameter must be a string. Received: ' + modelConfig.cwd }
                ));
            }
        }
        if (verify.isNullOrUndefined(modelConfig.schema) === false) {
            if (verify.isNotEmpty(modelConfig.schema) === false) {
                return callback(error(
                    'InvalidArgument', 'loadModelFromConfig', { parameter: 'modelConfig.schema', message: 'The modelConfig.schema parameter must be a string. Received: ' + modelConfig.schema }
                ));
            }
        }
        if (verify.isNullOrUndefined(modelConfig.format) === false) {
            if (verify.isNotEmpty(modelConfig.format) === false) {
                return callback(error(
                    'InvalidArgument', 'loadModelFromConfig', { parameter: 'modelConfig.format', message: 'The modelConfig.format parameter must be a string. Received: ' + modelConfig.format }
                ));
            }
        }
        if (verify.isNullOrUndefined(modelConfig.exportName) === false) {
            if (verify.isNotEmpty(modelConfig.exportName) === false) {
                return callback(error(
                    'InvalidArgument', 'loadModelFromConfig', { parameter: 'modelConfig.exportName', message: 'The modelConfig.exportName parameter must be a string. Received: ' + modelConfig.exportName }
                ));
            }
        }
        if (verify.isNullOrUndefined(modelConfig.contexts) === false) {
            if (verify.isArray(modelConfig.contexts) === false) {
                return callback(error(
                    'InvalidArgument', 'loadModelFromConfig', { parameter: 'modelConfig.contexts', message: 'The modelConfig.contexts parameter must be an array. Received: ' + modelConfig.contexts }
                ));
            }
        }
        if (verify.isNullOrUndefined(modelConfig.transformers) === false) {
            if (verify.isArray(modelConfig.transformers) === false) {
                return callback(error(
                    'InvalidArgument', 'loadModelFromConfig', { parameter: 'modelConfig.transformers', message: 'The modelConfig.transformers parameter must be an array. Received: ' + modelConfig.transformers }
                ));
            }
        }
        if (verify.isObject(globalContext) === false) {
            return callback(error(
                'InvalidArgument', 'loadModelFromConfig', { parameter: 'globalContext', message: 'The globalContext parameter must be an object. Received: ' + globalContext }
            ));
        }
        if (verify.isNullOrUndefined(globalContext.formatOptions) === false) {
            if (verify.isObject(globalContext.formatOptions) === false) {
                return callback(error(
                    'InvalidArgument', 'loadModelFromConfig', { parameter: 'globalContext.formatOptions', message: 'The globalContext.formatOptions parameter must be an object. Received: ' + globalContext.formatOptions }
                ));
            }
        }
        if (ModelInfo == null) {
            ModelInfo = require("../model/modelInfo").ModelInfo;
            AsyncModelLoader = require('../model/asyncModelLoader');
        }
        var mi = new ModelInfo(modelConfig);
        mi.productionManager(this.createProductionManager(null, globalContext));
        var that = this;
        AsyncModelLoader.load(mi, function(err, wizziModel) {
            if (err) {
                return callback(err);
            }
            return callback(null, that.formatWizziModel(wizziModel, globalContext.formatOptions));
        });
    }
    WizziFactory.prototype.loadModelFromText = function(ittfContent, schema, loadContext, callback) {
        
        if (typeof(callback) == 'undefined') {
            callback = loadContext;
            loadContext = {};
        }
        // log 'wizzi.wizziFactory.loadModelFromText', ittfContent, schema, loadContext, callback
        
        if (typeof(callback) !== 'function') {
            throw new Error(error('InvalidArgument', 'loadModelFromText', 'The callback parameter must be a function. Received: ' + callback));
        }
        this.createSingleTextSourceFactory(ittfContent, schema, {}, function(err, result) {
            if (err) {
                return callback(err);
            }
            result.wizziFactory.loadModel(schema, result.ittfDocumentUri, loadContext, callback);
        });
    }
    /** -àà
         Retrieve a model transformer
         Model transformation are searched in the PluginsManager
         They are cached
    */
    WizziFactory.prototype.getModelTransformer = function(transformerName, globalContext) {
        if (verify.isNotEmpty(transformerName) === false) {
            return error(
                'InvalidArgument', 'getModelTransformer', { parameter: 'transformerName', message: 'The transformerName parameter must be a string. Received: ' + transformerName }
            );
        }
        if (verify.isNullOrUndefined(globalContext) === false) {
            if (verify.isObject(globalContext) === false) {
                return error(
                    'InvalidArgument', 'getModelTransformer', { parameter: 'globalContext', message: 'The globalContext parameter must be an object. Received: ' + globalContext }
                );
            }
        }
        
        var transformer = this.modelTransformers[transformerName] || null;
        if (transformer == null) {
            transformer = this.pluginsManager.getModelTransformer(transformerName);
            if (transformer && transformer.__is_error) {
                return transformer;
            }
            if (verify.isFunction(transformer.setGlobalContext) && globalContext) {
                transformer.setGlobalContext(globalContext);
            }
            this.modelTransformers[transformerName] = transformer;
        }
        return transformer;
    }
    /** -àà
         Async execute a model transformation
    */
    WizziFactory.prototype.transformModel = function(model, transformerName, context, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'transformModel', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isObject(model) === false) {
            return callback(error(
                'InvalidArgument', 'transformModel', { parameter: 'model', message: 'The model parameter must be an object. Received: ' + model }
            ));
        }
        if (verify.isNotEmpty(transformerName) === false) {
            return callback(error(
                'InvalidArgument', 'transformModel', { parameter: 'transformerName', message: 'The transformerName parameter must be a string. Received: ' + transformerName }
            ));
        }
        if (verify.isObject(context) === false) {
            return callback(error(
                'InvalidArgument', 'transformModel', { parameter: 'context', message: 'The context parameter must be an object. Received: ' + context }
            ));
        }
        
        if (typeof(callback) !== 'function') {
            throw new Error(error('InvalidArgument', 'transformModel', 'The callback parameter must be a function. Received: ' + callback));
        }
        
        var transformer = this.getModelTransformer(transformerName);
        if (transformer.__is_error) {
            transformer.ittfDocumentUri = ittfDocumentUri;
            return callback(transformer);
        }
        
        context.wizziFactory = this;
        transformer.trans(model, context, callback);
    }
    /** -àà
         Retrieve an artifact generator
         Artifact generators are searched in the PluginsManager
         They are cached
    */
    WizziFactory.prototype.getArtifactGenerator = function(artifactName, globalContext) {
        if (verify.isNotEmpty(artifactName) === false) {
            return error(
                'InvalidArgument', 'getArtifactGenerator', { parameter: 'artifactName', message: 'The artifactName parameter must be a string. Received: ' + artifactName }
            );
        }
        if (verify.isNullOrUndefined(globalContext) === false) {
            if (verify.isObject(globalContext) === false) {
                return error(
                    'InvalidArgument', 'getArtifactGenerator', { parameter: 'globalContext', message: 'The globalContext parameter must be an object. Received: ' + globalContext }
                );
            }
        }
        
        var generator = this.artifactGenerators[artifactName] || null;
        if (generator == null) {
            generator = this.pluginsManager.getArtifactGenerator(artifactName);
            if (generator && generator.__is_error) {
                return generator;
            }
            if (verify.isFunction(generator.setGlobalContext) && globalContext) {
                generator.setGlobalContext(globalContext);
            }
            this.artifactGenerators[artifactName] = generator;
        }
        return generator;
    }
    /** -àà
         Async generate an artifact
        
         params
         { artifactModel
         # A wizzi model or POJO, the main context of the generation
         # May be null for artifacts of type 'code write'
         string ittfDocumentUri
         # For trace and documentation purposes
         string artifactName
         # The name for retrieving the artifact generation module
         { artifactRequestContext
         # context data for the artifact generator
         callback
         string generated artifact
    */
    WizziFactory.prototype.generateArtifact = function(artifactModel, ittfDocumentUri, artifactName, artifactRequestContext, callback) {
        if (verify.isNullOrUndefined(artifactModel) === false) {
            if (verify.isArrayOrObject(artifactModel) === false) {
                return error(
                    'InvalidArgument', 'generateArtifact', { parameter: 'artifactModel', message: 'The artifactModel parameter must be an array or an object. Received: ' + artifactModel }
                );
            }
        }
        if (verify.isNotEmpty(ittfDocumentUri) === false) {
            return error(
                'InvalidArgument', 'generateArtifact', { parameter: 'ittfDocumentUri', message: 'The ittfDocumentUri parameter must be a string. Received: ' + ittfDocumentUri }
            );
        }
        if (verify.isNotEmpty(artifactName) === false) {
            return error(
                'InvalidArgument', 'generateArtifact', { parameter: 'artifactName', message: 'The artifactName parameter must be a string. Received: ' + artifactName }
            );
        }
        
        // log 'generateArtifact.artifactModel', artifactModel
        
        if (typeof(callback) === 'undefined') {
            callback = artifactRequestContext;
            artifactRequestContext = {};
        }
        if (!artifactRequestContext) {
            artifactRequestContext = {};
        }
        
        if (typeof(callback) !== 'function') {
            throw new Error(error('InvalidArgument', 'generateArtifact', 'The callback parameter must be a function. Received: ' + callback));
        }
        
        /** -àà
            TODO (next wizzi factory versions)
             check_cb_object( artifactModel, generateArtifact ) cannot be done because
             artifactModel may be null for artifacts of type 'code write'.
             To check the match between artifact descriptors (wzjob/artifact) and
             artifact modules (lib/artifatcs/schema/artifactName/main.js) could be helpfull.
        */
        
        var generator = this.getArtifactGenerator(artifactName);
        if (generator.__is_error) {
            generator.ittfDocumentUri = ittfDocumentUri;
            return callback(generator);
        }
        
        /**
            TODO productionOptions should come from production manager
        */
        // The `data` property of the productionOptions will be merged
        // to the `values` property of the GenContext.
        var genContext = new GenContext({
            options: productionOptions(artifactRequestContext, {
                data: artifactRequestContext
            }), 
            pman: this.createProductionManager()
        });
        console.log('wizzi.wizziFactory.generateArtifact', artifactName, ittfDocumentUri);
        generator.gen(artifactModel, genContext, function(err, result) {
            if (err) {
                /** -àà
                    err.artifactName = artifactNameerr.artifactIttfDocumentUri = ittfDocumentUrireturn callback(err);
                */
                //
                console.log('wizzi.wizziFactory.generateArtifact', typeof(err), err, err.length, err.length && err.length > 0 && err[0]);
                return callback(error('WizziFactoryError', 'generateArtifact', {
                        message: 'See inner error', 
                        parameter: {
                            artifactName: artifactName, 
                            artifactIttfDocumentUri: ittfDocumentUri
                        }
                    }, err));
            }
            var sw = new StringWriter();
            result.toStream(sw);
            callback(null, sw.toString());
        });
    }
    /** -àà
         Loads a wizzi model from an IttfDocument and use it as
         the artifactModel for the artifact generation.
         params
         string ittfDocumentUri
         # the uri of the IttfDocument
         { requestContext
         { modelRequestContext
         # Context data for the wizzi model loading
         { artifactRequestContext
         # Context data for the artifact generation
         string artifactName
         function callback
    */
    WizziFactory.prototype.loadModelAndGenerateArtifact = function(ittfDocumentUri, requestContext, artifactName, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'loadModelAndGenerateArtifact', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isNotEmpty(ittfDocumentUri) === false) {
            return callback(error(
                'InvalidArgument', 'loadModelAndGenerateArtifact', { parameter: 'ittfDocumentUri', message: 'The ittfDocumentUri parameter must be a string. Received: ' + ittfDocumentUri }
            ));
        }
        if (verify.isObject(requestContext) === false) {
            return callback(error(
                'InvalidArgument', 'loadModelAndGenerateArtifact', { parameter: 'requestContext', message: 'The requestContext parameter must be an object. Received: ' + requestContext }
            ));
        }
        if (verify.isNullOrUndefined(requestContext.modelRequestContext) === false) {
            if (verify.isObject(requestContext.modelRequestContext) === false) {
                return callback(error(
                    'InvalidArgument', 'loadModelAndGenerateArtifact', { parameter: 'requestContext.modelRequestContext', message: 'The requestContext.modelRequestContext parameter must be an object. Received: ' + requestContext.modelRequestContext }
                ));
            }
        }
        if (verify.isNullOrUndefined(requestContext.artifactRequestContext) === false) {
            if (verify.isObject(requestContext.artifactRequestContext) === false) {
                return callback(error(
                    'InvalidArgument', 'loadModelAndGenerateArtifact', { parameter: 'requestContext.artifactRequestContext', message: 'The requestContext.artifactRequestContext parameter must be an object. Received: ' + requestContext.artifactRequestContext }
                ));
            }
        }
        if (verify.isNotEmpty(artifactName) === false) {
            return callback(error(
                'InvalidArgument', 'loadModelAndGenerateArtifact', { parameter: 'artifactName', message: 'The artifactName parameter must be a string. Received: ' + artifactName }
            ));
        }
        
        // log 'wizzi.wizziFactory.loadModelAndGenerateArtifact.requestContext.modelRequestContext', requestContext.modelRequestContext, 'artifactRequestContext', requestContext.artifactRequestContext
        
        var that = this;
        // load the wizzi model from an ittfDocument
        this.loadModel(ittfDocumentUri, requestContext.modelRequestContext, function(err, artifactModel) {
            if (err) {
                return callback(err);
            }
            console.log('wizzi.wizziFactory.loadModelAndGenerateArtifact', 'model loaded', artifactModel);
            // the loaded wizzi model becomes the artifactModel of the artifact generation
            that.generateArtifact(artifactModel, ittfDocumentUri, artifactName, requestContext.artifactRequestContext, callback);
        });
    }
    WizziFactory.prototype.loadModelAndGenerateArtifactFromText = function(ittfContent, requestContext, artifactName, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'loadModelAndGenerateArtifactFromText', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isNotEmpty(ittfContent) === false) {
            return callback(error(
                'InvalidArgument', 'loadModelAndGenerateArtifactFromText', { parameter: 'ittfContent', message: 'The ittfContent parameter must be a string. Received: ' + ittfContent }
            ));
        }
        if (verify.isObject(requestContext) === false) {
            return callback(error(
                'InvalidArgument', 'loadModelAndGenerateArtifactFromText', { parameter: 'requestContext', message: 'The requestContext parameter must be an object. Received: ' + requestContext }
            ));
        }
        if (verify.isNullOrUndefined(requestContext.modelRequestContext) === false) {
            if (verify.isObject(requestContext.modelRequestContext) === false) {
                return callback(error(
                    'InvalidArgument', 'loadModelAndGenerateArtifactFromText', { parameter: 'requestContext.modelRequestContext', message: 'The requestContext.modelRequestContext parameter must be an object. Received: ' + requestContext.modelRequestContext }
                ));
            }
        }
        if (verify.isNullOrUndefined(requestContext.artifactRequestContext) === false) {
            if (verify.isObject(requestContext.artifactRequestContext) === false) {
                return callback(error(
                    'InvalidArgument', 'loadModelAndGenerateArtifactFromText', { parameter: 'requestContext.artifactRequestContext', message: 'The requestContext.artifactRequestContext parameter must be an object. Received: ' + requestContext.artifactRequestContext }
                ));
            }
        }
        if (verify.isNotEmpty(artifactName) === false) {
            return callback(error(
                'InvalidArgument', 'loadModelAndGenerateArtifactFromText', { parameter: 'artifactName', message: 'The artifactName parameter must be a string. Received: ' + artifactName }
            ));
        }
        
        // log 'wizzi.wizziFactory.loadModelAndGenerateArtifactFromText', ittfContent, requestContext, artifactName, callback
        
        var ss = artifactName.split('/');
        var schema = ss[0];
        this.createSingleTextSourceFactory(ittfContent, schema, {}, function(err, result) {
            if (err) {
                return callback(err);
            }
            result.wizziFactory.loadModelAndGenerateArtifact(result.ittfDocumentUri, requestContext, artifactName, callback);
        });
    }
    /** -àà
         Executes loadModelAndGenerateArtifact for each ittf document of a folder
         params
         string ittfFolderUri
         # the uri of the ittf documents folder
         { requestContext
         { modelRequestContext
         # Context data for the wizzi model loading
         { artifactRequestContext
         # Context data for the artifact generation
         { options
         boolean copyNonIttf
         function callback
    */
    WizziFactory.prototype.generateFolderArtifacts = function(ittfFolderUri, requestContext, options, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'generateFolderArtifacts', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isNotEmpty(ittfFolderUri) === false) {
            return callback(error(
                'InvalidArgument', 'generateFolderArtifacts', { parameter: 'ittfFolderUri', message: 'The ittfFolderUri parameter must be a string. Received: ' + ittfFolderUri }
            ));
        }
        if (verify.isObject(requestContext) === false) {
            return callback(error(
                'InvalidArgument', 'generateFolderArtifacts', { parameter: 'requestContext', message: 'The requestContext parameter must be an object. Received: ' + requestContext }
            ));
        }
        if (verify.isNullOrUndefined(requestContext.modelRequestContext) === false) {
            if (verify.isObject(requestContext.modelRequestContext) === false) {
                return callback(error(
                    'InvalidArgument', 'generateFolderArtifacts', { parameter: 'requestContext.modelRequestContext', message: 'The requestContext.modelRequestContext parameter must be an object. Received: ' + requestContext.modelRequestContext }
                ));
            }
        }
        if (verify.isNullOrUndefined(requestContext.artifactRequestContext) === false) {
            if (verify.isObject(requestContext.artifactRequestContext) === false) {
                return callback(error(
                    'InvalidArgument', 'generateFolderArtifacts', { parameter: 'requestContext.artifactRequestContext', message: 'The requestContext.artifactRequestContext parameter must be an object. Received: ' + requestContext.artifactRequestContext }
                ));
            }
        }
        if (verify.isObject(options) === false) {
            return callback(error(
                'InvalidArgument', 'generateFolderArtifacts', { parameter: 'options', message: 'The options parameter must be an object. Received: ' + options }
            ));
        }
    }
    /** -àà
         Retrieve a schema definition in json format
         Schema definitions are searched in the PluginsManager
         They are cached
    */
    WizziFactory.prototype.getSchemaDefinition = function(schemaName) {
        if (verify.isNotEmpty(schemaName) === false) {
            return error(
                'InvalidArgument', 'getSchemaDefinition', { parameter: 'schemaName', message: 'The schemaName parameter must be a string. Received: ' + schemaName }
            );
        }
        
        var schema = this.schemaDefinitions[schemaName] || null;
        if (schema == null) {
            schema = this.pluginsManager.getSchemaDefinition(schemaName);
            if (schema != null) {
                this.schemaDefinitions[schemaName] = schema;
            }
        }
        return schema;
    }
    /** -àà
         From an IttfDocument of schema "wfschema"
         async generate:
         - a WizziModelType
         - a WizziModelFactory
         - a WizziModelType test module
         - a WizziModelType json documentation
         - a WizziModelType html documentation
    */
    WizziFactory.prototype.generateModelTypes = function(wfschemaIttfDocumentUri, outputPackagePath, wfschemaName, mTreeBuildUpContext, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'generateModelTypes', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isNotEmpty(wfschemaIttfDocumentUri) === false) {
            return callback(error(
                'InvalidArgument', 'generateModelTypes', { parameter: 'wfschemaIttfDocumentUri', message: 'The wfschemaIttfDocumentUri parameter must be a string. Received: ' + wfschemaIttfDocumentUri }
            ));
        }
        if (verify.isNotEmpty(outputPackagePath) === false) {
            return callback(error(
                'InvalidArgument', 'generateModelTypes', { parameter: 'outputPackagePath', message: 'The outputPackagePath parameter must be a string. Received: ' + outputPackagePath }
            ));
        }
        if (verify.isNotEmpty(wfschemaName) === false) {
            return callback(error(
                'InvalidArgument', 'generateModelTypes', { parameter: 'wfschemaName', message: 'The wfschemaName parameter must be a string. Received: ' + wfschemaName }
            ));
        }
        if (verify.isObject(mTreeBuildUpContext) === false) {
            return callback(error(
                'InvalidArgument', 'generateModelTypes', { parameter: 'mTreeBuildUpContext', message: 'The mTreeBuildUpContext parameter must be an object. Received: ' + mTreeBuildUpContext }
            ));
        }
        
        var wizziSchemaLabFolder = path.join(outputPackagePath, 'lib', 'wizzi', 'schemas', 'lab');
        var wizziModelFolder = path.join(outputPackagePath, 'lib', 'wizzi', 'models');
        
        var paths = {
            model: path.join(wizziModelFolder, wfschemaName + '-model.g.js'), 
            factory: path.join(wizziModelFolder, wfschemaName + '-factory.g.js'), 
            lab: path.join(wizziSchemaLabFolder, wfschemaName + '-test.g.js'), 
            jsondocs: path.join(wizziModelFolder, wfschemaName + '-schema.g.json'), 
            htmldocs: path.join(wizziModelFolder, wfschemaName + '-schema.g.html')
        };
        
        this.generateModelTypesArtifacts(wfschemaIttfDocumentUri, mTreeBuildUpContext, function(err, generatedArtifacts) {
            if (err) {
                return callback(err);
            }
            file.write(paths.model, generatedArtifacts.model);
            log.success('Generated WizziModel: ' + paths.model);
            file.write(paths.factory, generatedArtifacts.factory);
            log.success('Generated WizziModelFactory: ' + paths.factory);
            file.write(paths.lab, generatedArtifacts.lab);
            log.success('Generated WizziModel test: ' + paths.lab);
            file.write(paths.jsondocs, generatedArtifacts.jsondocs);
            log.success('Generated WizziModel json docs: ' + paths.jsondocs);
            file.write(paths.htmldocs, generatedArtifacts.htmldocs);
            log.success('Generated WizziModel html docs: ' + paths.htmldocs);
            callback(null, {
                modelPath: paths.model, 
                factoryPath: paths.factory, 
                jsondocsPath: paths.jsondocs, 
                htmldocsPath: paths.htmldocs
            });
        });
    }
    /** -àà
         generate the wizzi model type artifacts
         from an IttfDocument of schema "wfschema"
    */
    WizziFactory.prototype.generateModelTypesArtifacts = function(wfschemaIttfDocumentUri, mTreeBuildUpContext, callback) {
        
        var loadContext = {
            mTreeBuildUpContext: mTreeBuildUpContext
        };
        
        var that = this;
        
        log.info('starting async load of wizzi model from wfschemaIttfDocumentUri: ' + wfschemaIttfDocumentUri);
        this.loadModel('wfschema', wfschemaIttfDocumentUri, loadContext, function(err, schemaWizziModel) {
            if (err) {
                return callback(err);
            }
            // load the schemaWizziModel instance into the bootstrap wizzimodel.
            // This is required until the generation of the wizzi model of type 'wfschema'
            // is not completely automated.
            if (BootWizziSchema == null) {
                BootWizziSchema = require(bootModelUri).WizziSchema;
            }
            var bootWizziModel = new BootWizziSchema(schemaWizziModel.wzName);
            bootWizziModel.loadFromWizziModel(schemaWizziModel);
            log.info('starting the artifact generator wfschema/model');
            that.generateArtifact(bootWizziModel, bootModelDefUri, 'wfschema/model', loadContext, function(err, wizziModelArtifact) {
                if (err) {
                    return callback(err);
                }
                log.info('starting the artifact generator wfschema/factory');
                that.generateArtifact(bootWizziModel, bootModelDefUri, 'wfschema/factory', loadContext, function(err, wizziFactoryArtifact) {
                    if (err) {
                        return callback(err);
                    }
                    log.info('starting the artifact generator wfschema/test');
                    that.generateArtifact(bootWizziModel, bootModelDefUri, 'wfschema/test', loadContext, function(err, wizziTestArtifact) {
                        if (err) {
                            return callback(err);
                        }
                        that.transformModel(bootWizziModel, 'wfschema/json_docs', loadContext, function(err, wizziDocsObject) {
                            if (err) {
                                return callback(err);
                            }
                            var jsondocsJson = stringify(wizziDocsObject, null, 2);
                            log.info('starting the artifact generator wfschema/html_docs');
                            that.generateArtifact(wizziDocsObject, bootModelDefUri, 'wfschema/html_docs', loadContext, function(err, wizziHtmlDocsArtifact) {
                                if (err) {
                                    return callback(err);
                                }
                                callback(null, {
                                    model: wizziModelArtifact, 
                                    factory: wizziFactoryArtifact, 
                                    test: wizziTestArtifact, 
                                    jsondocs: jsondocsJson, 
                                    htmldocs: wizziHtmlDocsArtifact
                                });
                            });
                        });
                    });
                });
            });
        });
    }
    /** -àà
         Execute a wizzi job
        
         params
         { jobRequest type 1
         string name
         string path
         # path to the 'wfjob' ittf document that the wizzi.production.programManager will load.
         { productionOptions
         { globalContext
         { jobRequest type 2
         { wfjobModel
         # 'wfjob' wizzi model, built programmatically or previously loaded
         { productionOptions
         { globalContext
        
    */
    WizziFactory.prototype.executeJob = function(jobRequest, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'executeJob', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isObject(jobRequest) === false) {
            return callback(error(
                'InvalidArgument', 'executeJob', { parameter: 'jobRequest', message: 'The jobRequest parameter must be an object. Received: ' + jobRequest }
            ));
        }
        if (verify.isObject(jobRequest.productionOptions) === false) {
            return callback(error(
                'InvalidArgument', 'executeJob', { parameter: 'jobRequest.productionOptions', message: 'The jobRequest.productionOptions parameter must be an object. Received: ' + jobRequest.productionOptions }
            ));
        }
        
        console.log('wizzi.wizziFactory.executeJob.jobRequest', jobRequest);
        
        if (verify.isNotEmpty(jobRequest.path)) {
            // jobRequest type 1
            this._executeJob_by_path(jobRequest, callback);
        }
        else {
            // jobRequest type 2
            this._executeJob_by_wfjobModel(jobRequest, callback);
        }
    }
    WizziFactory.prototype._executeJob_by_path = function(jobRequest, callback) {
        var that = this;
        this.storePool.get(function(err, store) {
            if (err) {
                return callback(err);
            }
            store.documentExists(jobRequest.path, function(err, exists) {
                if (err) {
                    return callback(err);
                }
                if (!exists) {
                    return callback(error('NotFound', '_executeJob_by_path', 'Cannot find wfjob ittf document: ' + jobRequest.path));
                }
                else {
                    console.log('wizzi.wizziFactory._executeJob_by_path,jobRequest.globalContext', jobRequest.globalContext);
                    var pman = that.createProductionManager(jobRequest.productionOptions, jobRequest.globalContext);
                    if (pman && pman.__is_error) {
                        console.log('__is_error ', pman);
                        return callback(pman);
                    }
                    
                    var notUsed = pman.addJobRequest({
                        wfjob: {
                            ittfDocumentUri: jobRequest.path
                        }
                    });
                    if (notUsed && notUsed.__is_error) {
                        console.log('__is_error ', notUsed);
                        return callback(notUsed);
                    }
                    
                    console.log('wizzi.wizziFactory._executeJob_by_path,pman.globalContext()', pman.globalContext());
                    
                    pman.run(function(err, result) {
                        if (err) {
                            return callback(err);
                        }
                        log.success('wizzi.wizziFactory.executeJob.' + jobRequest.name + ' run completed');
                        pman.persistToFile(function(err, result) {
                            if (err) {
                                return callback(err);
                            }
                            log.success('wizzi.wizziFactory.executeJob.' + jobRequest.name + ' persistToFile completed');
                            pman.terminate();
                            return callback(null, result);
                        });
                    });
                }
            });
        });
    }
    WizziFactory.prototype._executeJob_by_wfjobModel = function(jobRequest, callback) {
        throw new Error('wizzi.wizziFactory._executeJob_by_wfjobModel not implemented.');
    }
    /** -àà
         This allows model loadings and generations from text strings
         params
         { options
         { globalContext
         optional
    */
    WizziFactory.prototype.createSingleTextSourceFactory = function(ittfContent, schema, options, callback) {
        if (typeof callback === 'undefined') {
            callback = options;
            options = {};
        }
        var tempIttfDocumentUri = "c:/basefolder/temp." + schema + '.ittf';
        var documents = [
            {
                path: tempIttfDocumentUri, 
                content: ittfContent
            }
        ];
        JsonComponents.createJsonFsData(documents, (err, jsonFsData) => {
            if (err) {
                return callback(err);
            }
            options.jsonFsData = jsonFsData;
            this.createJsonFactory(options, function(err, wf) {
                if (err) {
                    return callback(err);
                }
                return callback(null, {
                        wizziFactory: wf, 
                        ittfDocumentUri: tempIttfDocumentUri
                    });
            })});
    }
    WizziFactory.prototype.createJsonFactory = function(options, callback) {
        var wf = new WizziFactory(this.user, this.role);
        wf.initialize({
            repo: {
                storeKind: 'json', 
                storeJsonFsData: options.jsonFsData
            }, 
            plugins: this.pluginsOptions, 
            globalContext: options.globalContext || {}
        }, callback);
    }
    WizziFactory.prototype.getInfo = function() {
        return {
                user: this.user, 
                role: this.role, 
                storeKind: this.storeKind, 
                store: this.store.getInfo(), 
                pluginsManager: this.pluginsManager.getInfo(), 
                globalContext: this.globalContext, 
                __is_test: this.__is_test, 
                testOptions: this.testOptions
            };
    }
    return WizziFactory;
})();

function detectSchema(ittfDocumentUri) {
    if (verify.isNotEmpty(ittfDocumentUri) === false) {
        return error(
            'InvalidArgument', 'detectSchema', { parameter: 'ittfDocumentUri', message: 'The ittfDocumentUri parameter must be a string. Received: ' + ittfDocumentUri }
        );
    }
    
    var parts = path.basename(ittfDocumentUri).split('.');
    if (parts.length < 3) {
        return error('InvalidIttfDocumentUri', 'detectSchema', 'IttfDocumentUri basename must contain at least 3 parts separated by a dot. Received: ' + path.basename(ittfDocumentUri) + ' in IttfDocumentUri: ' + ittfDocumentUri);
    }
    var ittf = parts[parts.length-1];
    if (ittf.toLowerCase() != 'ittf') {
        return error('InvalidIttfDocumentUri', 'detectSchema', 'IttfDocumentUri extension must be ".ittf". Received: ' + ittf + ' in IttfDocumentUri: ' + ittfDocumentUri);
    }
    return parts[parts.length-2];
}
function getProductionManager() {
    if (ProductionManager == null) {
        ProductionManager = require('../production/manager');
    }
    return ProductionManager;
}
module.exports = {
    createFactory: function(user, role, options, callback) {
        // log 'wizzi.wizziFactory.createFactory.options', options
        if (typeof(callback) === 'undefined' && typeof(options) === 'undefined') {
            // no ACL required
            options = user;
            callback = role;
            user = 'stefi';
            role = 'admin';
        }
        // log 'wizzi.wizziFactory.createFactory.globalContext', options.globalContext
        var wf = new WizziFactory(user, role);
        wf.initialize(options, callback);
    }
};
/**
  params
    string code
      # the error name or number
    string method
    string message
      # optional
    { innerError
      # optional
*/
function error(code, method, message, innerError) {
    var parameter = null;
    if (verify.isObject(message)) {
        parameter = message.parameter;
        message = message.message;
    }
    return verify.error(innerError, {
        name: ( verify.isNumber(code) ? 'Err-' + code : code ),
        method: 'wizzi.wizziFactory.' + method,
        parameter: parameter,
        sourcePath: __filename
    }, message || 'Error message unavailable');
}
