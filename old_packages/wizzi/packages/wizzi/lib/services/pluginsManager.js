/*
    artifact generator: C:\My\wizzi\v5\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\v5\kernel\wizzi\src\ittf\lib\services\pluginsmanager.js.ittf
*/
'use strict';
// generated by wizzi.codegen.js4.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var verify = require('wizzi-utils').verify;
var path = require('path');
var fs = require('fs');
var _ = require('lodash');
var log = require('../util/log')(module);
var verify = require('wizzi-utils').verify;
var file = require('wizzi-utils').file;
var fail = require('wizzi-utils').fail;
var errors = require('../errors');
var existsSync = fs.existsSync || path.existsSync;
var realpathSync = fs.realpathSync;
var exists = fs.exists || path.exists;
var realpath = fs.realpath;
// TODO
// Implement available wizzi factories
var availableFactories = [];
var PluginsManager = (function () {
    function PluginsManager() {
        _classCallCheck(this, PluginsManager);
        this.packagePathCache = {};
        this.factoryPlugins = [];
        this.providedSchemas = [];
        this.providedModelTransformers = [];
        this.providedArtifactGenerators = [];
    }
    /** -àà
         { options
         string pluginsBaseFolder
         default process.cwd()
         [ items
         required
         string pluginName
         }
    */
    PluginsManager.prototype.initialize = function(options, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'initialize', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isObject(options) === false) {
            return callback(error(
                'InvalidArgument', 'initialize', { parameter: 'options', message: 'The options parameter must be an object. Received: ' + options }
            ));
        }
        if (verify.isNullOrUndefined(options.items) === false) {
            if (verify.isArray(options.items) === false) {
                return callback(error(
                    'InvalidArgument', 'initialize', { parameter: 'options.items', message: 'The options.items parameter must be an array. Received: ' + options.items }
                ));
            }
        }
        // log 'wizzi.pluginsManager.initialize.options', options
        var itemsOptions = options.items;
        if (typeof(itemsOptions) === 'undefined' || itemsOptions == null) {
            options.items = [];
        }
        var that = this;
        this.loadPlugins(options, function(err, plugins) {
            if (err) {
                return callback(err);
            }
            function register(i) {
                if (i >= plugins.length) {
                    return callback(null, that);
                }
                var plugin = plugins[i];
                that.registerFactoryPlugin(plugin, function(err, notUsed) {
                    if (err) {
                        return callback(err);
                    }
                    return register(++i);
                });
            }
            register(0);
        });
    }
    PluginsManager.prototype.loadPlugins = function(options, callback) {
        
        
        var itemsOptions = options.items;
        var pluginsBaseFolder = options.pluginsBaseFolder || process.cwd();
        // log 'pluginsBaseFolder', pluginsBaseFolder
        var packagePathCache = this.packagePathCache;
        
        function resolveNext(i) {
            if (i >= itemsOptions.length) {
                // log 'itemsOptions', itemsOptions
                return callback(null, itemsOptions);
            }
            var plugin = itemsOptions[i];
            if (typeof (plugin) === "string") {
                plugin = itemsOptions[i] = {packagePath: plugin};
            }
            if (plugin.hasOwnProperty("packagePath") && !(plugin.hasOwnProperty("setup"))) {
                return resolveModule(pluginsBaseFolder, plugin.packagePath, function(err, moduleObject) {
                        if (err) {
                            return callback(err);
                        }
                        Object.keys(moduleObject).forEach(function(key) {
                            if (!plugin.hasOwnProperty(key)) {
                                plugin[key] = moduleObject[key];
                                // log 'plugin key', key
                            }
                        });
                        plugin.packageName = plugin.packagePath;
                        plugin.packagePath = moduleObject.packagePath;
                        return resolveNext(++i);
                    });
            }
            else {
                return resolveNext(++i);
            }
        }
        resolveNext(0);
        function resolveModule(pluginsBaseFolder, modulePath, callback) {
            
            resolvePackage(pluginsBaseFolder, (modulePath + "/package.json"), function(err, packagePath) {
                var metadata = {};
                var packageMetadata;
                if (!err) {
                    try {
                        packageMetadata = (packagePath && require(packagePath).plugin) || {};
                    } catch (ex) {
                        return callback(error('PackageError', 'resolveModule', 'Error loading plugin package.json ' + packagePath + ', message: ' + ex.message));
                    }
                }
                (function(next) {
                    if (err) {
                        var mp = verify.endsWith(modulePath, '.js') ? modulePath : modulePath + '.js';
                        resolvePackage(pluginsBaseFolder, mp, next);
                    }
                    else if (packagePath) {
                        next(null, path.dirname(packagePath));
                    }
                    else {
                        resolvePackage(pluginsBaseFolder, modulePath, next);
                    }
                })(function(err, modulePath) {
                    if (err) {
                        return callback(err);
                    }
                    var moduleObject;
                    try {
                        // load the module now
                        moduleObject = require(modulePath);
                        // log 'wizzi.services.pluginManager.resolveModule: modulePath, moduleObject', modulePath, moduleObject
                    } catch (ex) {
                        return callback(error('ModuleError', 'resolveModule', 'Error loading plugin module ' + modulePath + ', message: ' + ex.message + '\n' + ex.stack));
                    }
                    moduleObject.provides = (packageMetadata && packageMetadata.provides) || moduleObject.provides || [];
                    moduleObject.consumes = (packageMetadata && packageMetadata.consumes) || moduleObject.consumes || [];
                    moduleObject.packagePath = modulePath;
                    callback(null, moduleObject);
                });
                ;
            });
        }
        function resolvePackage(pluginsBaseFolder, packagePath, callback) {
            
            var originalBase = pluginsBaseFolder;
            
            if (!packagePathCache.hasOwnProperty(pluginsBaseFolder)) {
                packagePathCache[pluginsBaseFolder] = {};
            }
            var cache = packagePathCache[pluginsBaseFolder];
            if (cache.hasOwnProperty(packagePath)) {
                return callback(null, cache[packagePath]);
            }
            if (packagePath[0] === "." || packagePath[0] === "/") {
                // local folder plugin module
                var newPath = path.resolve(pluginsBaseFolder, packagePath);
                exists(newPath, function(exists) {
                    if (exists) {
                        realpath(newPath, function(err, newPath) {
                            if (err) {
                                return callback(err);
                            }
                            cache[packagePath] = newPath;
                            return callback(null, newPath);
                        });
                    }
                    else {
                        return callback(error('ENOENT', 'resolvePackage', "Can't find '" + newPath + "' ('" + packagePath + "' relative to '" + originalBase + "')"));
                    }
                });
            }
            else {
                // npm (node_modules folder) plugin module
                tryNext(pluginsBaseFolder);
            }
            function tryNext(base) {
                if (base == "/") {
                    return callback(error('ENOENT', 'resolvePackage', "Can't find '" + packagePath + "' relative to '" + originalBase + "'"));
                }
                var newPath = path.resolve(base, "node_modules", packagePath);
                exists(newPath, function(exists) {
                    if (exists) {
                        realpath(newPath, function(err, newPath) {
                            if (err) {
                                return callback(err);
                            }
                            cache[packagePath] = newPath;
                            return callback(null, newPath);
                        });
                    }
                    else {
                        var nextBase = path.resolve(base, '..');
                        if (nextBase === base) {
                            tryNext("/");
                        }
                        else {
                            tryNext(nextBase);
                        }
                    }
                });
            }
        }
    }
    /** -àà
         Register a factoryPlugin to this plugins manager
    */
    PluginsManager.prototype.registerFactoryPlugin = function(pluginModule, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'registerFactoryPlugin', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isObject(pluginModule) === false) {
            return callback(error(
                'InvalidArgument', 'registerFactoryPlugin', { parameter: 'pluginModule', message: 'The pluginModule parameter must be an object. Received: ' + pluginModule }
            ));
        }
        if (verify.isFunction(pluginModule.createFactoryPlugin) === false) {
            return callback(error(
                'InvalidArgument', 'registerFactoryPlugin', { parameter: 'pluginModule.createFactoryPlugin', message: 'The pluginModule.createFactoryPlugin parameter must be a function. Received: ' + pluginModule.createFactoryPlugin }
            ));
        }
        var that = this;
        pluginModule.createFactoryPlugin(this.createWizziForPlugin(), {}, function(err, factoryPlugin) {
            if (err) {
                return callback(err);
            }
            var vld = that.validateFactoryPlugin(factoryPlugin);
            if (vld.__is_error) {
                return callback(vld);
            }
            factoryPlugin.packageName = pluginModule.packageName;
            factoryPlugin.packagePath = pluginModule.packagePath;
            that.factoryPlugins.push(factoryPlugin);
            var providesAdded = that.addPluginProvides(factoryPlugin);
            if (providesAdded && providesAdded.__is_error) {
                console.log('__is_error ', providesAdded);
                return callback(providesAdded);
            }
            return callback(null);
        });
    }
    PluginsManager.prototype.createWizziForPlugin = function() {
        return {
                file: file
            };
    }
    PluginsManager.prototype.validateFactoryPlugin = function(factoryPlugin) {
        if (verify.isObject(factoryPlugin) === false) {
            return error(
                'InvalidArgument', 'validateFactoryPlugin', { parameter: 'factoryPlugin', message: 'The factoryPlugin parameter must be an object. Received: ' + factoryPlugin }
            );
        }
        for (var k in factoryPlugin) {
            // log 'wizzi.pluginsManager.validatefactoryPlugin.key', k
        }
        
        var methodNames = [
            'getName', 
            'getFilename', 
            'getProvides', 
            'getModelFactory', 
            'getModelTransformer', 
            'getArtifactGenerator', 
            'getSchemaDefinition'
        ];
        var i, i_items=methodNames, i_len=methodNames.length, methodName;
        for (i=0; i<i_len; i++) {
            methodName = methodNames[i];
            if (verify.isFunction(factoryPlugin[methodName]) == false) {
                return error('InvalidFactoryPlugin', 'validateFactoryPlugin', 'Missing method: ' + methodName);
            }
            try {
                factoryPlugin[methodName]('dummy');
            } catch (ex) {
                return error('InvalidFactoryPlugin', 'validateFactoryPlugin', 'Error executing method: ' + methodName + ', message: ' + ex.message);
            }
        }
        var providesProperties = [
            'schemas', 
            'modelTransformers', 
            'artifactGenerators'
        ];
        var provides = factoryPlugin.getProvides();
        var i, i_items=providesProperties, i_len=providesProperties.length, propName;
        for (i=0; i<i_len; i++) {
            propName = providesProperties[i];
            if (verify.isArray(provides[propName]) == false) {
                return error('InvalidFactoryPlugin', 'validateFactoryPlugin', 'Missing property: ' + propName + ' in provides object');
            }
        }
        // log 'validateFactoryPlugin', factoryPlugin.getName(), true
        return {
                __is_error: false
            };
    }
    PluginsManager.prototype.addPluginProvides = function(factoryPlugin) {
        if (verify.isObject(factoryPlugin) === false) {
            return error(
                'InvalidArgument', 'addPluginProvides', { parameter: 'factoryPlugin', message: 'The factoryPlugin parameter must be an object. Received: ' + factoryPlugin }
            );
        }
        if (verify.isObject(factoryPlugin.provides) === false) {
            return error(
                'InvalidArgument', 'addPluginProvides', { parameter: 'factoryPlugin.provides', message: 'The factoryPlugin.provides parameter must be an object. Received: ' + factoryPlugin.provides }
            );
        }
        if (verify.isArray(factoryPlugin.provides.schemas) === false) {
            return error(
                'InvalidArgument', 'addPluginProvides', { parameter: 'factoryPlugin.provides.schemas', message: 'The factoryPlugin.provides.schemas parameter must be an array. Received: ' + factoryPlugin.provides.schemas }
            );
        }
        if (verify.isArray(factoryPlugin.provides.modelTransformers) === false) {
            return error(
                'InvalidArgument', 'addPluginProvides', { parameter: 'factoryPlugin.provides.modelTransformers', message: 'The factoryPlugin.provides.modelTransformers parameter must be an array. Received: ' + factoryPlugin.provides.modelTransformers }
            );
        }
        if (verify.isArray(factoryPlugin.provides.artifactGenerators) === false) {
            return error(
                'InvalidArgument', 'addPluginProvides', { parameter: 'factoryPlugin.provides.artifactGenerators', message: 'The factoryPlugin.provides.artifactGenerators parameter must be an array. Received: ' + factoryPlugin.provides.artifactGenerators }
            );
        }
        var found;
        var i, i_items=factoryPlugin.provides.schemas, i_len=factoryPlugin.provides.schemas.length, item;
        for (i=0; i<i_len; i++) {
            item = factoryPlugin.provides.schemas[i];
            found = _.find(this.providedSchemas, {
                name: item
            });
            if (found) {
                return error('DuplicatedPluginResource', 'addPluginProvides', 'Schema ' + item + ' already provided');
            }
            else {
                this.providedSchemas.push({
                    name: item
                });
            }
        }
        
        var i, i_items=factoryPlugin.provides.modelTransformers, i_len=factoryPlugin.provides.modelTransformers.length, item;
        for (i=0; i<i_len; i++) {
            item = factoryPlugin.provides.modelTransformers[i];
            found = _.find(this.providedModelTransformers, {
                name: item
            });
            if (found) {
                return error('DuplicatedPluginResource', 'addPluginProvides', 'Model transformer ' + item + ' already provided');
            }
            else {
                this.providedModelTransformers.push({
                    name: item
                });
            }
        }
        
        var i, i_items=factoryPlugin.provides.artifactGenerators, i_len=factoryPlugin.provides.artifactGenerators.length, item;
        for (i=0; i<i_len; i++) {
            item = factoryPlugin.provides.artifactGenerators[i];
            found = _.find(this.providedArtifactGenerators, {
                name: item
            });
            if (found) {
                return error('DuplicatedPluginResource', 'addPluginProvides', 'Artifact generator ' + item + ' already provided');
            }
            else {
                this.providedArtifactGenerators.push({
                    name: item
                });
            }
        }
    }
    PluginsManager.prototype.availableSchemas = function() {
        var ret = [];
        var i, i_items=this.providedSchemas, i_len=this.providedSchemas.length, item;
        for (i=0; i<i_len; i++) {
            item = this.providedSchemas[i];
            ret.push(item.name);
        }
        return ret;
    }
    PluginsManager.prototype.availableModelTransformers = function() {
        var ret = [];
        var i, i_items=this.providedModelTransformers, i_len=this.providedModelTransformers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.providedModelTransformers[i];
            ret.push(item.name);
        }
        return ret;
    }
    PluginsManager.prototype.availableArtifactGenerators = function() {
        var ret = [];
        var i, i_items=this.providedArtifactGenerators, i_len=this.providedArtifactGenerators.length, item;
        for (i=0; i<i_len; i++) {
            item = this.providedArtifactGenerators[i];
            ret.push(item.name);
        }
        return ret;
    }
    /** -àà
         Retrieve a model factory searching the factoryPlugins
         registered to this repository
         returns
         | api-ref wizzi-plugin.modelFactory
         | wzError NotFound
    */
    PluginsManager.prototype.getModelFactory = function(schemaName, textOnlyMockBaseDir) {
        if (verify.isNotEmpty(schemaName) === false) {
            return error(
                'InvalidArgument', 'getModelFactory', { parameter: 'schemaName', message: 'The schemaName parameter must be a string. Received: ' + schemaName }
            );
        }
        // log 'wizzi.services.PluginsManager.getModelFactory: schemaName, textOnlyMockBaseDir ' + schemaName, textOnlyMockBaseDir
        var found = null,
            foundInPlugin = null,
            result = null;
        // all factoryPlugins are searched, last matching encountered wins.
        var i, i_items=this.factoryPlugins, i_len=this.factoryPlugins.length, item;
        for (i=0; i<i_len; i++) {
            item = this.factoryPlugins[i];
            // log 'wizzi.pluginsManager.getModelFactory.searching model loader', schemaName, ' in plugin ', item.getName()
            found = item.getModelFactory(schemaName, textOnlyMockBaseDir);
            if (found && found.__is_error) {
                return found;
            }
            // log 'found', found, found && verify.isFunction(found.createLoadModel)
            if (found && verify.isFunction(found.createLoadModel)) {
                result = found;
                foundInPlugin = item.getFilename();
            }
        }
        if (!result) {
            log.error('getModelFactory. Cannot find model loader: ' + schemaName + '\n' + 'availables schemas: ' + this.availableSchemas().join(', '));
            return error('NotFound', 'getModelFactory', 'Cannot find model loader: ' + schemaName + '\navailables schemas: ' + this.availableSchemas().join(', '));
        }
        else {
            log.success('getModelFactory. Found model loader: ' + schemaName + ' in plugin ' + foundInPlugin);
        }
        return result;
    }
    /** -àà
         Retrieve a model transformer searching the factoryPlugins
         registered to this plugins manager
         params
         string transformerName
         returns
         | api-ref wizzi-plugin.modelTransformer
         | wzError NotFound
    */
    PluginsManager.prototype.getModelTransformer = function(transformerName) {
        if (verify.isNotEmpty(transformerName) === false) {
            return error(
                'InvalidArgument', 'getModelTransformer', { parameter: 'transformerName', message: 'The transformerName parameter must be a string. Received: ' + transformerName }
            );
        }
        // log 'wizzi.pluginsManager.getModelTransformer.transformerName: ' + transformerName
        var found = null,
            foundInPlugin = null,
            result = null;
        // all factoryPlugins are searched, last matching encountered wins.
        var i, i_items=this.factoryPlugins, i_len=this.factoryPlugins.length, item;
        for (i=0; i<i_len; i++) {
            item = this.factoryPlugins[i];
            // log 'searching transformer ', transformerName, ' in plugin', item.getName()
            found = item.getModelTransformer(transformerName);
            if (found && found.__is_error) {
                return found;
            }
            // log 'found', found, found && verify.isFunction(found.trans)
            if (found && verify.isFunction(found.trans)) {
                result = found;
                foundInPlugin = item.getFilename();
            }
        }
        if (!result) {
            var msg = 'getModelTransformer. Cannot find model transformer: ' + transformerName + '\n' + 'availables transformers: ' + this.availableModelTransformers().join(', ');
            log.error(msg);
            return error('NotFound', 'getModelTransformer', msg);
        }
        else {
            log.success('getModelTransformer. Found transformer: ' + transformerName + ' in plugin ' + foundInPlugin);
        }
        return result;
    }
    /** -àà
         retrieve an artifact generator searching the factoryPlugins
         registered to this plugins manager
         params
         string artifactName
         returns
         | api-ref wizzi-plugin.modelTransformer
         | wzError NotFound
    */
    PluginsManager.prototype.getArtifactGenerator = function(artifactName) {
        if (verify.isNotEmpty(artifactName) === false) {
            return error(
                'InvalidArgument', 'getArtifactGenerator', { parameter: 'artifactName', message: 'The artifactName parameter must be a string. Received: ' + artifactName }
            );
        }
        // log 'PluginsManager.getArtifactGenerator.artifactName: ' + artifactName
        var found = null,
            foundInPlugin = null,
            result = null;
        // all factoryPlugins are searched, last matching encountered wins.
        var i, i_items=this.factoryPlugins, i_len=this.factoryPlugins.length, item;
        for (i=0; i<i_len; i++) {
            item = this.factoryPlugins[i];
            // log 'searching artifact ', artifactName, ' in module', item.getName()
            found = item.getArtifactGenerator(artifactName);
            if (found && found.__is_error) {
                return found;
            }
            // log 'found', found, found && verify.isFunction(found.gen)
            if (found && verify.isFunction(found.gen)) {
                result = found;
                foundInPlugin = item.getFilename();
            }
        }
        if (!result) {
            var msg = 'getArtifactGenerator. Cannot find artifact generator: ' + artifactName + '\n' + 'availables generators: ' + this.availableArtifactGenerators().join(', ');
            log.error(msg);
            return error('NotFound', 'getArtifactGenerator', msg);
        }
        else {
            log.success('getArtifactGenerator. Found artifact generator: ' + artifactName + ' in plugin ' + foundInPlugin);
        }
        return result;
    }
    /** -àà
         Retrieve a schema definition searching the factoryPlugins
         registered to this plugins manager
         params
         string schemaName
         returns
         | { jsonSchema
         | wzError NotFound
    */
    PluginsManager.prototype.getSchemaDefinition = function(schemaName) {
        if (verify.isNotEmpty(schemaName) === false) {
            return error(
                'InvalidArgument', 'getSchemaDefinition', { parameter: 'schemaName', message: 'The schemaName parameter must be a string. Received: ' + schemaName }
            );
        }
        // log 'PluginsManager.getSchemaObject.schemaName: ' + schemaName
        var found = null,
            foundInPlugin = null,
            result = null;
        // all factoryPlugins are searched, last encountered results override the previous.
        var i, i_items=this.factoryPlugins, i_len=this.factoryPlugins.length, item;
        for (i=0; i<i_len; i++) {
            item = this.factoryPlugins[i];
            // log 'searching wizzi schema definition', schemaName, ' in plugin ', item.getName()
            found = item.getSchemaDefinition(schemaName);
            if (found && found.__is_error) {
                return found;
            }
            // log 'found', found
            if (found && verify.isObject(found)) {
                result = found;
                foundInPlugin = item.getFilename();
            }
        }
        if (!result) {
            var msg = 'getSchemaDefinition. Cannot find schema: ' + schemaName + '\n' + 'availables schemas: ' + this.availableSchemas().join(', ');
            log.error(msg);
            return error('NotFound', 'getSchemaDefinition', msg);
        }
        else {
            log.success('getSchemaDefinition. Found schema object: ' + schemaName + ' in plugin ' + foundInPlugin);
        }
        return result;
    }
    PluginsManager.prototype.getInfo = function() {
        var factoryPluginsInfo = [];
        var i, i_items=this.factoryPlugins, i_len=this.factoryPlugins.length, item;
        for (i=0; i<i_len; i++) {
            item = this.factoryPlugins[i];
            factoryPluginsInfo.push({
                packageName: item.packageName, 
                packagePath: item.packagePath, 
                provides: item.provides
            });
        }
        return {
                providedSchemas: this.providedSchemas, 
                providedModelTransformers: this.providedModelTransformers, 
                providedArtifactGenerators: this.providedArtifactGenerators, 
                factoryPlugins: factoryPluginsInfo
            };
    }
    return PluginsManager;
})();

// For test - begin
var packagePathCache = {};
function resolveModule(pluginsBaseFolder, modulePath, callback) {
    
    resolvePackage(pluginsBaseFolder, (modulePath + "/package.json"), function(err, packagePath) {
        var metadata = {};
        var packageMetadata;
        if (!err) {
            try {
                packageMetadata = (packagePath && require(packagePath).plugin) || {};
            } catch (ex) {
                return callback(error('PackageError', 'resolveModule', 'Error loading plugin package.json ' + packagePath + ', message: ' + ex.message));
            }
        }
        (function(next) {
            if (err) {
                var mp = verify.endsWith(modulePath, '.js') ? modulePath : modulePath + '.js';
                resolvePackage(pluginsBaseFolder, mp, next);
            }
            else if (packagePath) {
                next(null, path.dirname(packagePath));
            }
            else {
                resolvePackage(pluginsBaseFolder, modulePath, next);
            }
        })(function(err, modulePath) {
            if (err) {
                return callback(err);
            }
            var moduleObject;
            try {
                // load the module now
                moduleObject = require(modulePath);
                // log 'wizzi.services.pluginManager.resolveModule: modulePath, moduleObject', modulePath, moduleObject
            } catch (ex) {
                return callback(error('ModuleError', 'resolveModule', 'Error loading plugin module ' + modulePath + ', message: ' + ex.message + '\n' + ex.stack));
            }
            moduleObject.provides = (packageMetadata && packageMetadata.provides) || moduleObject.provides || [];
            moduleObject.consumes = (packageMetadata && packageMetadata.consumes) || moduleObject.consumes || [];
            moduleObject.packagePath = modulePath;
            callback(null, moduleObject);
        });
        ;
    });
}
function resolvePackage(pluginsBaseFolder, packagePath, callback) {
    
    var originalBase = pluginsBaseFolder;
    
    if (!packagePathCache.hasOwnProperty(pluginsBaseFolder)) {
        packagePathCache[pluginsBaseFolder] = {};
    }
    var cache = packagePathCache[pluginsBaseFolder];
    if (cache.hasOwnProperty(packagePath)) {
        return callback(null, cache[packagePath]);
    }
    if (packagePath[0] === "." || packagePath[0] === "/") {
        // local folder plugin module
        var newPath = path.resolve(pluginsBaseFolder, packagePath);
        exists(newPath, function(exists) {
            if (exists) {
                realpath(newPath, function(err, newPath) {
                    if (err) {
                        return callback(err);
                    }
                    cache[packagePath] = newPath;
                    return callback(null, newPath);
                });
            }
            else {
                return callback(error('ENOENT', 'resolvePackage', "Can't find '" + newPath + "' ('" + packagePath + "' relative to '" + originalBase + "')"));
            }
        });
    }
    else {
        // npm (node_modules folder) plugin module
        tryNext(pluginsBaseFolder);
    }
    function tryNext(base) {
        if (base == "/") {
            return callback(error('ENOENT', 'resolvePackage', "Can't find '" + packagePath + "' relative to '" + originalBase + "'"));
        }
        var newPath = path.resolve(base, "node_modules", packagePath);
        exists(newPath, function(exists) {
            if (exists) {
                realpath(newPath, function(err, newPath) {
                    if (err) {
                        return callback(err);
                    }
                    cache[packagePath] = newPath;
                    return callback(null, newPath);
                });
            }
            else {
                var nextBase = path.resolve(base, '..');
                if (nextBase === base) {
                    tryNext("/");
                }
                else {
                    tryNext(nextBase);
                }
            }
        });
    }
}
// For test - end
module.exports = {
    createManager: function createManager(options, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'createManager', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isObject(options) === false) {
            return callback(error(
                'InvalidArgument', 'createManager', { parameter: 'options', message: 'The options parameter must be an object. Received: ' + options }
            ));
        }
        var pm = new PluginsManager();
        pm.initialize(options, callback);
    }, 
    PluginsManager: PluginsManager, 
    resolveModule: resolveModule, 
    resolvePackage: resolvePackage
};
/**
  params
    string code
      # the error name or number
    string method
    string message
      # optional
    { innerError
      # optional
*/
function error(code, method, message, innerError) {
    var parameter = null;
    if (verify.isObject(message)) {
        parameter = message.parameter;
        message = message.message;
    }
    return verify.error(innerError, {
        name: ( verify.isNumber(code) ? 'Err-' + code : code ),
        method: 'wizzi.pluginsManager.' + method,
        parameter: parameter,
        sourcePath: __filename
    }, message || 'Error message unavailable');
}
