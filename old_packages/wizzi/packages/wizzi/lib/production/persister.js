/*
    artifact generator: C:\My\wizzi\v5\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\v5\kernel\wizzi\src\ittf\lib\production\persister.js.ittf
*/
'use strict';
// generated by wizzi.codegen.js4.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var path = require('path');
var util = require('util');
var async = require('async');
// TODO VIA var file = require('wizzi-utils').file
var log = require('../util/log')(module)
;

function logme() {
    if (false) {
        console.log.apply(console, arguments);
    }
}

var ArtifactPersister = (function () {
    function ArtifactPersister(artifactInfo) {
        _classCallCheck(this, ArtifactPersister);
        this.artifactInfo = artifactInfo;
        log.setLevel(artifactInfo.productionManager.options.verbose);
    }
    ArtifactPersister.prototype.toFile = function(callback) {
        var that = this;
        if (this.artifactInfo.isWizziModelTypesArtifact()) {
            // TODO
            // Write here model type artifacts ?
            // The wizzi model artifacts could be generated in memory and retrieved
            // by the this.artifactInfo.getItemsToPersistToFile() method
            // TODO Add more info to result info ?
            return callback(null, [
                    {
                        oper: 'generate-schema', 
                        status: 'success', 
                        item: {
                            filepath: 'Unavailable'
                        }
                    }
                ]);
        }
        else {
            this.artifactInfo.getItemsToPersistToFile(function(err, items) {
                if (err) {
                    return callback(err);
                }
                async.mapSeries(items, asyncArtifactFilePersister_hof(that.artifactInfo), callback);
            });
        }
    }
    ArtifactPersister.prototype.toTest = function() {
        var ret = [];
        this.artifactInfo.getItemsToPersistToFile(function(err, items) {
            if (err) {
                return callback(err);
            }
            var i, i_items=items, i_len=items.length, item;
            for (i=0; i<i_len; i++) {
                item = items[i];
                ret.push({
                    filepath: item.filepath, 
                    content: item.genContext.getContent()
                });
            }
        });
        return ret;
    }
    return ArtifactPersister;
})();

function asyncArtifactFilePersister_hof(artifactInfo) {
    var fileService = artifactInfo.getFileService();
    return function(genInfo, callback) {
            logme('AsyncArtifactFilePersister.persist', genInfo.filepath, genInfo.genContext.getContent());
            fileService.openWrite(genInfo.filepath, (err, stream) => {
                if (err) {
                    return callback(err);
                }
                genInfo.genContext.toStream(stream);
                stream.end((err, notUsed) => {
                    if (err) {
                        return callback(err);
                    }
                    log.success('Written to file: ' + genInfo.filepath);
                    callback(null, {
                        oper: 'persist-to-file', 
                        item: {
                            filepath: genInfo.filepath
                        }, 
                        status: 'success'
                    })})});
        };
}

module.exports = {
    ArtifactPersister: ArtifactPersister
};
