/*
    artifact generator: C:\My\wizzi\v5\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\v5\kernel\wizzi\src\ittf\lib\io\filesystem.js.ittf
*/
'use strict';
// generated by wizzi.codegen.js4.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var glob = require('glob');
var async = require('async');
var file = require('wizzi-utils').file;

var isMounted = false,
    fsBaseFolderPath = null;
var FsStat = (function () {
    function FsStat(fsitem) {
        _classCallCheck(this, FsStat);
        this.fsitem = fsitem;
    }
    FsStat.prototype.isDirectory = function() {
        return this.fsitem.kind == 0;
    }
    FsStat.prototype.isFile = function() {
        return this.fsitem.kind == 1;
    }
    return FsStat;
})();

var md = module.exports = {};
md.isMounted = function() {
    return isMounted;
};
md.mount = function(baseFolderPath, callback) {
    fsBaseFolderPath = baseFolderPath;
    isMounted = true;
    // log 'wizzi-io.filesystem mounted. BaseFolderPath: ' + baseFolderPath
    return callback(null);
};
md.unmount = function(callback) {
    isMounted = false;
    fsBaseFolderPath = null;
    callback(null);
};
md.fullPathForHash = function(userId, projectId, path_string) {
    if (isMounted == false) {
        throw new Error('IO wizzi repository not mounted. Review your start procedure.');
    }
    return normalize(path.join(fsBaseFolderPath, userId, projectId, path_string));
};
md.exists = function(userId, projectId, path_string, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'IO wizzi repository not mounted. Review your start procedure'
            });
    }
    var fsPath = normalize(path.join(fsBaseFolderPath, userId, projectId, path_string));
    // log 'wizzi-io.filesystem.exists.fsPath', fsPath
    var exists = file.exists(fsPath);
    // log 'wizzi-io.filesystem.exists.fsPath', fsPath, 'exists', exists
    return callback(null, exists);
};
md.isFile = function(userId, projectId, path_string, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'IO wizzi repository not mounted. Review your start procedure'
            });
    }
    var fsPath = normalize(path.join(fsBaseFolderPath, userId, projectId, path_string));
    // log 'wizzi-io.filesystem.isFile.fsPath', fsPath
    var exists = file.isFile(fsPath);
    // log 'wizzi-io.filesystem.isFile.fsPath', fsPath, 'exists', exists
    return callback(null, exists);
};
md.isFolder = function(userId, projectId, path_string, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'IO wizzi repository not mounted. Review your start procedure'
            });
    }
    var fsPath = normalize(path.join(fsBaseFolderPath, userId, projectId, path_string));
    // log 'wizzi-io.filesystem.isFolder.fsPath', fsPath
    var exists = file.isDirectory(fsPath);
    // log 'wizzi-io.filesystem.isFolder.fsPath', fsPath, 'exists', exists
    return callback(null, exists);
};
md.readFile = function(userId, projectId, path_string, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'IO wizzi repository not mounted. Review your start procedure'
            });
    }
    var fsPath = normalize(path.join(fsBaseFolderPath, userId, projectId, path_string));
    // log 'wizzi-io.filesystem.readFile.fsPath', fsPath
    file.readFile(fsPath, function(err, content) {
        if (err) {
            return callback(err);
        }
        // log 'wizzi-io.filesystem.readFile.fsPath', fsPath, 'content', content
        return callback(null, content);
    });
};
md.writeFile = function(userId, projectId, path_string, content, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'IO wizzi repository not mounted. Review your start procedure'
            });
    }
    var fsPath = normalize(path.join(fsBaseFolderPath, userId, projectId, path_string));
    // log 'wizzi-io.filesystem.writeFile.fsPath', fsPath
    file.writeFile(fsPath, content, function(err, result) {
        if (err) {
            return callback(err);
        }
        // log 'wizzi-io.filesystem.writeFile.fsPath', fsPath, 'result', result
        return callback(null, result);
    });
};
md.mkdir = function(userId, projectId, path_string, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'IO wizzi repository not mounted. Review your start procedure'
            });
    }
    var fsPath = normalize(path.join(fsBaseFolderPath, userId, projectId, path_string));
    // log 'wizzi-io.filesystem.mkdir.fsPath', fsPath
    file.mkdir(fsPath);
    // log 'wizzi-io.filesystem.createFolder.fsPath', fsPath
    return callback(null);
};
md.readDir = function(userId, projectId, dirPath, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'IO wizzi repository not mounted. Review your start procedure'
            });
    }
    var fsPath = path.join(fsBaseFolderPath, userId);
    if (projectId != null) {
        fsPath = path.join(fsPath, projectId);
    }
    if (dirPath != null) {
        fsPath = path.join(fsPath, dirPath);
    }
    fsPath = normalize(fsPath);
    // log 'wizzi-io.filesystem.readDir.fsPath', fsPath
    file.getDir(fsPath, function(err, files) {
        if (err) {
            return callback(err);
        }
        var fsitems = filesToFsitems(files);
        // log 'wizzi-io.filesystem.readDir.fsPath', fsPath, 'fsitems', fsitems
        return callback(null, fsitems);
    });
};
md._readDir = function(dirPath, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'IO wizzi repository not mounted. Review your start procedure'
            });
    }
    var fsPath = normalize(dirPath);
    // log 'wizzi-io.filesystem.readDir.fsPath', fsPath
    file.getDir(fsPath, function(err, files) {
        if (err) {
            return callback(err);
        }
        var fsitems = filesToFsitems(files);
        // log 'wizzi-io.filesystem.readDir.fsPath', fsPath, 'fsitems', fsitems
        return callback(null, fsitems);
    });
};
md.stat = function(userId, projectId, filePath, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'IO wizzi repository not mounted. Review your start procedure'
            });
    }
    var fsPath = normalize(path.join(fsBaseFolderPath, userId, projectId, filePath));
    // log 'wizzi-io.filesystem.stat.fsPath', fsPath
    fsdb.getItemByPath(fsPath, function(err, fsitem) {
        if (err) {
            return callback(err);
        }
        // log 'wizzi-io.filesystem.stat.fsPath', fsPath, 'fsitem', fsitem
        if (fsitem == null) {
            return callback({
                    er: {
                        code: 'ENOENT'
                    }
                });
        }
        else {
            return callback(null, new FsStat(fsitem));
        }
    });
};
md._stat = function(filePath, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'IO wizzi repository not mounted. Review your start procedure'
            });
    }
    var fsPath = normalize(filePath);
    // log 'wizzi-io.filesystem.stat.fsPath', fsPath
    if (file.exists(fsPath) == false) {
        return callback({
                err: {
                    code: 'ENOENT'
                }
            });
    }
    else {
        return callback(null, new FsStat(fileToFsItem(fsPath)));
    }
};
md.glob = function(userId, projectId, pattern, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'IO wizzi repository not mounted. Review your start procedure'
            });
    }
    var fsPattern = normalize(path.join(fsBaseFolderPath, userId, projectId, pattern));
    // log 'wizzi-io.filesystem.glob.fsPattern', fsPattern
    glob(fsPattern, this, {}, function(err, fsitems) {
        if (err) {
            return callback(err);
        }
        // log 'wizzi-io.filesystem.glob.fsPattern', fsPattern, 'fsitems', fsitems
        return callback(null, fsitems);
    });
};
md.deleteFile = function(userId, projectId, path_string, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'IO wizzi repository not mounted. Review your start procedure'
            });
    }
    var fsPath = normalize(path.join(fsBaseFolderPath, userId, projectId, path_string));
    // log 'wizzi-io.filesystem.deleteFile.fsPath', fsPath
    file.deleteFile(fsPath, function(err, result) {
        if (err) {
            return callback(err);
        }
        // log 'wizzi-io.filesystem.deleteFile.fsPath', fsPath, 'result', result
        return callback(null, result);
    });
};
md.copyFile = function(userId, source_projectId, source_path_string, dest_projectId, dest_path_string, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'IO wizzi repository not mounted. Review your start procedure'
            });
    }
    var sourceFsPath = normalize(path.join(fsBaseFolderPath, userId, source_projectId, source_path_string));
    var destFsPath = normalize(path.join(fsBaseFolderPath, userId, dest_projectId, dest_path_string));
    // log 'wizzi-io.filesystem.copyFile.sourceFsPath', sourceFsPath, 'destFsPath', destFsPath
    file.copy(sourceFsPath, destFsPath);
    // log 'wizzi-io.filesystem.copyFile.sourceFsPath', sourceFsPath, 'destFsPath', destFsPath
    return callback(null);
};
md.moveFile = function(userId, source_projectId, source_path_string, dest_projectId, dest_path_string, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'IO wizzi repository not mounted. Review your start procedure'
            });
    }
    var sourceFsPath = normalize(path.join(fsBaseFolderPath, userId, source_projectId, source_path_string));
    var destFsPath = normalize(path.join(fsBaseFolderPath, userId, dest_projectId, dest_path_string));
    // log 'wizzi-io.filesystem.moveFile.sourceFsPath', sourceFsPath, 'destFsPath', destFsPath
    file.moveFile(sourceFsPath, destFsPath, function(err, notUsed) {
        if (err) {
            return callback(err);
        }
        // log 'wizzi-io.filesystem.moveFile.sourceFsPath', sourceFsPath, 'destFsPath', destFsPath
        return callback(null);
    });
};
md.deleteFolder = function(userId, projectId, path_string, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'IO wizzi repository not mounted. Review your start procedure'
            });
    }
    var fsPath = normalize(path.join(fsBaseFolderPath, userId, projectId, path_string));
    // log 'wizzi-io.filesystem.deleteFolder.fsPath', fsPath
    file.deleteFolder(fsPath, function(err, result) {
        if (err) {
            return callback(err);
        }
        // log 'wizzi-io.filesystem.deleteFolder.fsPath', fsPath, 'result', result
        return callback(null, result);
    });
};
md.copyFolder = function(userId, source_projectId, source_itemPath, dest_projectId, dest_itemPath, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'IO wizzi repository not mounted. Review your start procedure'
            });
    }
    var sourceFsPath = normalize(path.join(fsBaseFolderPath, userId, source_projectId, source_itemPath));
    var destFsPath = normalize(path.join(fsBaseFolderPath, userId, dest_projectId, dest_itemPath));
    // log 'wizzi-io.filesystem.copyFolder.sourceFsPath', sourceFsPath, 'destFsPath', destFsPath
    file.copyFolder(sourceFsPath, destFsPath, function(err, notUsed) {
        if (err) {
            return callback(err);
        }
        // log 'wizzi-io.filesystem.copyFolder.sourceFsPath', sourceFsPath, 'destFsPath', destFsPath
        return callback(null);
    });
};
md.moveFolder = function(userId, source_projectId, source_itemPath, dest_projectId, dest_itemPath, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'IO wizzi repository not mounted. Review your start procedure'
            });
    }
    var sourceFsPath = normalize(path.join(fsBaseFolderPath, userId, source_projectId, source_itemPath));
    var destFsPath = normalize(path.join(fsBaseFolderPath, userId, dest_projectId, dest_itemPath));
    // log 'wizzi-io.filesystem.moveFolder.sourceFsPath', sourceFsPath, 'destFsPath', destFsPath
    file.moveFolder(sourceFsPath, destFsPath, function(err, notUsed) {
        if (err) {
            return callback(err);
        }
        // log 'wizzi-io.filesystem.moveFolder.sourceFsPath', sourceFsPath, 'destFsPath', destFsPath
        return callback(null);
    });
};
md.duplicateFile = function(userId, projectId, itemPath, newName, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'IO wizzi repository not mounted. Review your start procedure'
            });
    }
    var duplicatedItemPath = parentPath(itemPath) + '/' + newName;
    // log 'wizzi-io.filesystem.duplicateFile', userId, projectId, itemPath, duplicatedItemPath
    md.exists(userId, projectId, duplicatedItemPath, function(err, result) {
        if (err) {
            return callback(err);
        }
        if (result) {
            return callback({
                    __is_error: true, 
                    message: "duplicated file name already exists"
                });
        }
        md.copyFile(userId, projectId, itemPath, projectId, duplicatedItemPath, callback, function(err, result) {
            if (err) {
                return callback(err);
            }
            return callback(null, {
                    message: "file duplicated"
                });
        });
    });
};
md.renameFile = function(userId, projectId, itemPath, newName, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'IO wizzi repository not mounted. Review your start procedure'
            });
    }
    var renamedItemPath = parentPath(itemPath) + '/' + newName;
    // log 'wizzi-io.filesystem.renameFile', userId, projectId, itemPath, renamedItemPath
    md.exists(userId, projectId, renamedItemPath, function(err, result) {
        if (err) {
            return callback(err);
        }
        if (result) {
            return callback({
                    __is_error: true, 
                    message: "renamed file name already exists"
                });
        }
        var oldPath = normalize(path.join(fsBaseFolderPath, userId, projectId, itemPath));
        var newPath = normalize(path.join(fsBaseFolderPath, userId, projectId, renamedItemPath));
        file.rename(oldPath, newPath, function(err, result) {
            if (err) {
                return callback(err);
            }
            return callback(null, {
                    message: "file renamed"
                });
        });
    });
};
md.duplicateFolder = function(userId, projectId, itemPath, newName, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'IO wizzi repository not mounted. Review your start procedure'
            });
    }
    var duplicatedItemPath = parentPath(itemPath) + '/' + newName;
    // log 'wizzi-io.filesystem.duplicateFolder', userId, projectId, itemPath, duplicatedItemPath
    md.exists(userId, projectId, duplicatedItemPath, function(err, result) {
        if (err) {
            return callback(err);
        }
        if (result) {
            return callback({
                    __is_error: true, 
                    message: "duplicated folder name already exists"
                });
        }
        md.copyFolder(userId, projectId, itemPath, projectId, duplicatedItemPath, callback, function(err, result) {
            if (err) {
                return callback(err);
            }
            return callback(null, {
                    message: "file duplicated"
                });
        });
    });
};
md.renameFolder = function(userId, projectId, itemPath, newName, callback) {
    if (isMounted == false) {
        return callback({
                __is_error: true, 
                message: 'IO wizzi repository not mounted. Review your start procedure'
            });
    }
    var renamedItemPath = parentPath(itemPath) + '/' + newName;
    // log 'wizzi-io.filesystem.renameFolder', userId, projectId, itemPath, renamedItemPath
    md.exists(userId, projectId, renamedItemPath, function(err, result) {
        if (err) {
            return callback(err);
        }
        if (result) {
            return callback({
                    __is_error: true, 
                    message: "renamed folder name already exists"
                });
        }
        var oldPath = normalize(path.join(fsBaseFolderPath, userId, projectId, itemPath));
        var newPath = normalize(path.join(fsBaseFolderPath, userId, projectId, renamedItemPath));
        file.rename(oldPath, newPath, function(err, result) {
            if (err) {
                return callback(err);
            }
            return callback(null, {
                    message: "file renamed"
                });
        });
    });
};
md.copyFsItem = function(userId, action, callback) {
    if (action.itemKind == 0) {
        md.copyFolder(userId, action.sourceProjectId, action.sourceItemPath, action.destProjectId, action.destItemPath, callback);
    }
    else {
        md.copyFile(userId, action.sourceProjectId, action.sourceItemPath, action.destProjectId, action.destItemPath, callback);
    }
};
md.moveFsItem = function(userId, action, callback) {
    if (action.itemKind == 0) {
        md.moveFolder(userId, action.sourceProjectId, action.sourceItemPath, action.destProjectId, action.destItemPath, callback);
    }
    else {
        md.moveFile(userId, action.sourceProjectId, action.sourceItemPath, action.destProjectId, action.destItemPath, callback);
    }
};
md.deleteFsItem = function(userId, action, callback) {
    console.log('wizzi.FileSystem.deleteFsItem.action', action);
    if (action.itemKind == 0) {
        md.deleteFolder(action.userId || userId, action.projectId, action.itemPath, callback);
    }
    else {
        md.deleteFile(action.userId || userId, action.projectId, action.itemPath, callback);
    }
};
md.batch = function(userId, actions, callback) {
    async.mapSeries(actions, function(action, callback) {
        if (action.actionType === 'copy') {
            md.copyFsItem(userId, action, callback);
        }
        else if (action.actionType === 'move') {
            md.moveFsItem(userId, action, callback);
        }
        else if (action.actionType === 'delete') {
            md.deleteFsItem(userId, action, callback);
        }
        else {
            callback('Filesystem.batch. Invalid parameter "action.actionType":' + action.actionType);
        }
    }, callback);
};
function normalize(path) {
    return path.trim().replace(/\\/g,'/').toLowerCase();
}
function filesToFsitems(files) {
    var ret = [];
    var i, i_items=files, i_len=files.length, f;
    for (i=0; i<i_len; i++) {
        f = files[i];
        ret.push(fileToFsItem(f));
    }
    return ret;
}
function fileToFsItem(filePath) {
    return {
            _id: filePath, 
            basename: path.basename(filePath), 
            parentId: path.dirname(filePath), 
            dirname: path.dirname(filePath), 
            path: filePath, 
            kind: ( file.isDirectory(filePath) ? 0 : 1 )
        };
}
function fileToDocument(filePath) {
    return {
            _id: filePath, 
            content: file.read(filePath), 
            lastModified: file.lastModified(filePath)
        };
}
function parentPath(itemPath) {
    itemPath = normalize(itemPath);
    return itemPath.substr(0, itemPath.lastIndexOf('/'));
}
