$group
	$params &app

	r-component( MarkdownDocs )
	
		$append imports
			import Button from 'material-ui/Button'
			import MarkdownElement from './MarkdownElement'
			$if app.useMarkdownDemo
				import Demo from './Demo'

			const headerRegexp = /---\n(.*)\n---/
			const demoRegexp = /^demo='(.*)'$/
			const emptyRegexp = /^\s*$/

			const SOURCE_CODE_ROOT_URL = 'https://github.com/callemall/material-ui/tree/next'

		prop classes
			{
			required
	
		prop route
			required
			shape
				prop content
					string
					required
				prop path
					string
					required
				prop componentAPI
					{
				prop demo
					{ 

		style
		
			@ root
				{
					@ marginBottom 100
			@ header
				{ 
					@ display 'flex'
					@ flexDirection 'column'
					@ alignItems 'flex-end'

		render
		
			prop classes
			prop route
		
			const contents
				_ route.content.replace(headerRegexp, '')        $$ Remove header informations
				._ split(/^{{|}}$/gm)                            $$ Split markdown into an array, separating demos
				._ filter(content => !emptyRegexp.test(content)) $$ Remove empty lines

			let markdownUrl = SOURCE_CODE_ROOT_URL

			# Map back to the source code
			if route.componentAPI
				set markdownUrl += `/src${route.componentAPI.path
					\ .replace('./component-api/', '/')
					\ .replace('.md', '.js')}`
				log 'markdownUrl', markdownUrl
			elif route.demo
				set markdownUrl += `/docs/src/pages/component-demos${route.demo.path.replace('./', '/')}`
			else
				set markdownUrl += `/docs/src/pages${route.path}.md`
  
			return
				div
					@ className {classes.root}
					$if app.githubLink
						div
							@ className {classes.header}
							< Button 
								@ component "a"
								@ href {markdownUrl}
								@ target "_blank"
								+ { 'Edit this page' }
					{
						_ contents.map
							=>
								param content
								if demoRegexp.test(content)
									return
										$if app.useMarkdownDemo
											< Demo
												@ key {content}
												@ demo {content.match(demoRegexp)[1]}
										$else
											h1 Demo not implemented
								else
									return
										< MarkdownElement
											@ key {content}
											@ text {content}