$group
    
	function getUndefinedStateErrorMessage
        param key
        param action
        var actionType = action && action.type
        var actionName = (actionType && '"' + actionType.toString() + '"') || 'an action'
        return 'Reducer "' + key + '" returned undefined handling ' + actionName + '. ' + 'To ignore an action, you must explicitly return the previous state.'
    
	function getUnexpectedStateKeyWarningMessage
        param inputState
        param outputState
        param action
        
		var reducerKeys = Object.keys(outputState)
        
		var argumentName = action && action.type === createStoreActionTypes.INIT ? 'initialState argument passed to createStore' : 'previous state received by the reducer'
        
		if reducerKeys.length === 0
            return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.'
        
		if !isPlainObject(inputState)
            return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + 'keys: "' + reducerKeys.join('", "') + '"'
        
		var unexpectedKeys
            _ Object.keys(inputState)
                ._ filter
                    function 
                        param key
                        return reducerKeys.indexOf(key) < 0
        if unexpectedKeys.length > 0
            return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + '"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ' + 'Expected to find one of the known reducer keys instead: ' + '"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.'
    
	function assertReducerSanity
        param reducers
        _ Object.keys(reducers)
            ._ forEach
                function 
                    param key
                    var reducer = reducers[key]
                    var initialState
                        _ reducer
                            @ undefined
                            { 
                                @ type createStoreActionTypes.INIT
                    
					if typeof (initialState) === 'undefined'
                        throw 
                            new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined.')
                    
					var type = ('@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.'))
                    if typeof (reducer(undefined, {type: type})) === 'undefined'
                        throw 
                            new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + 'Don\'t try to handle ' + createStoreActionTypes.INIT + ' or other actions in "redux/*" ' + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined.')
    
	function combineReducers
        param reducers
        
		var finalReducers
            _ pick
                @ reducers
                function 
                    param val
                    return typeof (val) === 'function'
        
		var sanityError
        
		try 
            _ assertReducerSanity(finalReducers)
        catch e
            set sanityError = e
        
		var defaultState
            _ mapValues
                @ finalReducers
                function 
                    return undefined
        
		return 
            function combination
                
				var state
                    iif arguments.length <= 0 || arguments[0] === undefined
                        then defaultState
                        else 
                            set arguments[0]
                
				var action = arguments[1]
                
				if sanityError
                    throw sanityError
                
				var hasChanged = false
                
				var finalState
                    _ mapValues
                        @ finalReducers
                        function 
                            param reducer
                            param key
                            var previousStateForKey = state[key]
                            var nextStateForKey = reducer(previousStateForKey, action)
                            if typeof (nextStateForKey) === 'undefined'
                                var errorMessage = getUndefinedStateErrorMessage(key, action)
                                throw 
                                    new Error(errorMessage)
                            set hasChanged = hasChanged || nextStateForKey !== previousStateForKey
                            return nextStateForKey
                
				# if process.env.NODE_ENV !== 'production'
                var warningMessage = getUnexpectedStateKeyWarningMessage(state, finalState, action)
                if warningMessage
                    _ console.error(warningMessage)
                
				return hasChanged ? finalState : state
