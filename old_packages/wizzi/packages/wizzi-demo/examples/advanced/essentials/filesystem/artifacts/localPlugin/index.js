/*
    artifact generator: C:\My\wizzi\v5\apps\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: C:\My\wizzi\v5\apps\wizzi-demo\src\ittf\examples\advanced\essentials\filesystem\artifacts\localPlugin\index.js.ittf
*/
'use strict';
// generated by v6-wizzi-js.artifacts.js.module.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var verify = require('wizzi-utils').verify;

var util = require('util');
var path = require('path');
var stringify = require('json-stringify-safe');

var md = module.exports = {};
md.name = 'local';

/**
     FactoryPlugin class
    
     Uses the current folder as the root location of model factories, transformers,
     artifacts and schema definitions.
    
     To make the plugin work your folder structure must be:
     | this file
     | - lib
     |     - artifacts
     |     - wizzi
     |         - models
    
*/
var FactoryPlugin = (function () {
    function FactoryPlugin(wizziPackage, provides) {
        _classCallCheck(this, FactoryPlugin);
        if (verify.isObject(wizziPackage) === false) {
            throw new Error(error(
                'InvalidArgument', 'ctor', { parameter: 'wizziPackage', message: 'The wizziPackage parameter must be an object. Received: ' + wizziPackage }
            ));
        }
        if (verify.isObject(wizziPackage.file) === false) {
            throw new Error(error(
                'InvalidArgument', 'ctor', { parameter: 'wizziPackage.file', message: 'The wizziPackage.file parameter must be an object. Received: ' + wizziPackage.file }
            ));
        }
        if (verify.isObject(provides) === false) {
            throw new Error(error(
                'InvalidArgument', 'ctor', { parameter: 'provides', message: 'The provides parameter must be an object. Received: ' + provides }
            ));
        }
        this.file = wizziPackage.file;
        this.provides = provides;
        this.modelFactories = {};
        this.modelTransformers = {};
        this.artifactGenerators = {};
        this.schemaDefinitions = {};
    }
    FactoryPlugin.prototype.initialize = function(options, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'initialize', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isObject(options) === false) {
            return callback(error(
                'InvalidArgument', 'initialize', { parameter: 'options', message: 'The options parameter must be an object. Received: ' + options }
            ));
        }
        // TODO
        return callback(null);
    }
    FactoryPlugin.prototype.getName = function() {
        return 'local';
    }
    FactoryPlugin.prototype.getFilename = function() {
        return __filename;
    }
    FactoryPlugin.prototype.getProvides = function() {
        return this.provides;
    }
    /**
         Retrieve a WizziModelFactory by its wizzischema name
         searching the loader in this WizziPackage.
         No search up in "node_modules" folders.
    */
    FactoryPlugin.prototype.getModelFactory = function(schemaName) {
        if (verify.isNotEmpty(schemaName) === false) {
            return error(
                'InvalidArgument', 'getModelFactory', { parameter: 'schemaName', message: 'The schemaName parameter must be a string. Received: ' + schemaName }
            );
        }
        var factory = this.modelFactories[schemaName] || null;
        if (factory == null) {
            var modulePath = path.resolve(__dirname, './lib/wizzi/models/' + schemaName + '-factory.g.js');
            if (this.file.exists(modulePath)) {
                try {
                    factory = require('./lib/wizzi/models/' + schemaName + '-factory.g');
                } 
                catch (ex) {
                    return error('WizziPluginError', 'getModelFactory', 'Error loading wizzi model factory: ' + modulePath + ', in plugin: ' + this.getFilename() + ', err: ' + ex.message + ', stack: ' + ex.stack);
                } 
                this.modelFactories[schemaName] = factory;
            }
        }
        return factory;
    }
    /**
         retrieve a ModelTransformer by its name
         searching the loader in this WizziPackage
         No search up in "node_modules" folders.
    */
    FactoryPlugin.prototype.getModelTransformer = function(transformerName) {
        if (verify.isNotEmpty(transformerName) === false) {
            return error(
                'InvalidArgument', 'getModelTransformer', { parameter: 'transformerName', message: 'The transformerName parameter must be a string. Received: ' + transformerName }
            );
        }
        
        var transformer = this.modelTransformers[transformerName] || null;
        if (transformer == null) {
            var modulePath = path.resolve(__dirname, './lib/artifacts/' + transformerName + '/trans/main.js');
            if (this.file.exists(modulePath)) {
                try {
                    transformer = require('./lib/artifacts/' + transformerName + '/trans/main');
                } 
                catch (ex) {
                    return error('WizziPluginError', 'getModelTransformer', 'Error loading wizzi model transformer: ' + modulePath + ', in plugin: ' + this.getFilename() + ', err: ' + ex.message + ', stack: ' + ex.stack);
                } 
                this.modelTransformers[transformerName] = transformer;
            }
        }
        return transformer;
    }
    /**
         Retrieve an ArtifactGenerator by its name
         Generators are searched in this WizziPackage
         No search up in "node_modules" folders.
    */
    FactoryPlugin.prototype.getArtifactGenerator = function(generationName) {
        if (verify.isNotEmpty(generationName) === false) {
            return error(
                'InvalidArgument', 'getArtifactGenerator', { parameter: 'generationName', message: 'The generationName parameter must be a string. Received: ' + generationName }
            );
        }
        
        var generator = this.artifactGenerators[generationName] || null;
        if (generator == null) {
            var modulePath = path.resolve(__dirname, './lib/artifacts/' + generationName + '/gen/main.js');
            if (this.file.exists(modulePath)) {
                try {
                    generator = require('./lib/artifacts/' + generationName + '/gen/main');
                } 
                catch (ex) {
                    return error('WizziPluginError', 'getArtifactGenerator', 'Error loading artifact generator: ' + modulePath + ', in plugin: ' + this.getFilename() + ', err: ' + ex.message + ', stack: ' + ex.stack);
                } 
                this.artifactGenerators[generationName] = generator;
            }
        }
        return generator;
    }
    /**
         Retrieve a WizziSchema definition in JSON format
         searching the loader in this WizziPackage.
         No search up in "node_modules" folders.
    */
    FactoryPlugin.prototype.getSchemaDefinition = function(schemaName) {
        if (verify.isNotEmpty(schemaName) === false) {
            return error(
                'InvalidArgument', 'getSchemaDefinition', { parameter: 'schemaName', message: 'The schemaName parameter must be a string. Received: ' + schemaName }
            );
        }
        var definition = this.schemaDefinitions[schemaName] || null;
        if (definition == null) {
            var schemaJsonUri = path.resolve(__dirname, './lib/wizzi/models/' + schemaName + '-schema.g.json');
            if (this.file.exists(schemaJsonUri)) {
                try {
                    definition = this.file.readJSON(schemaJsonUri);
                } 
                catch (ex) {
                    return error('WizziPluginError', 'getSchemaDefinition', 'Error loading wizzi schema definition: ' + schemaJsonUri + ', in plugin: ' + this.getFilename() + ', err: ' + ex.message + ', stack: ' + ex.stack);
                } 
                this.schemaDefinitions[schemaName] = definition;
            }
        }
        return definition;
    }
    return FactoryPlugin;
})();


// The plugin interface
module.exports = {
    provides: {
        schemas: [
            'sample_0_1'
        ], 
        artifactGenerators: [
            
        ], 
        modelTransformers: [
            
        ]
    }, 
    createFactoryPlugin: function createFactoryPlugin(wizziPackage, options, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'createFactoryPlugin', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isObject(wizziPackage) === false) {
            return callback(error(
                'InvalidArgument', 'createFactoryPlugin', { parameter: 'wizziPackage', message: 'The wizziPackage parameter must be an object. Received: ' + wizziPackage }
            ));
        }
        if (verify.isObject(options) === false) {
            return callback(error(
                'InvalidArgument', 'createFactoryPlugin', { parameter: 'options', message: 'The options parameter must be an object. Received: ' + options }
            ));
        }
        var plugin = new FactoryPlugin(wizziPackage, this.provides);
        plugin.initialize(options, function(err, notUsed) {
            if (err) {
                return callback(err);
            }
            return callback(null, plugin);
        });
    }
};

/**
  params
    string code
      # the error name or number
    string method
    string message
      # optional
    { innerError
      # optional
*/
function error(code, method, message, innerError) {
    var parameter = null;
    if (verify.isObject(message)) {
        parameter = message.parameter;
        message = message.message;
    }
    return verify.error(innerError, {
        name: ( verify.isNumber(code) ? 'Err-' + code : code ),
        method: '.' + method,
        parameter: parameter,
        sourcePath: __filename
    }, message || 'Error message unavailable');
}
