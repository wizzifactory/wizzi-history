/*
    artifact generator: C:\My\wizzi\v5\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\v5\plugins\wizzi-lab\src\ittf\lib\artifacts\graphdb\docu_db_structure\trans\docudbnode.js.ittf
    utc time: Tue, 14 Aug 2018 15:17:52 GMT
*/
'use strict';
// generated by wizzi.codegen.js4.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var DocuDbNode = (function () {
    function DocuDbNode(graphStructure, parentStructureNode, modelNode, modelRelation) {
        _classCallCheck(this, DocuDbNode);
        this.graphStructure = graphStructure;
        this.parentStructureNode = parentStructureNode;
        this.modelNode = modelNode;
        this.modelRelation = modelRelation;
        this.structureNode = {
            isRoot: !parentStructureNode, 
            isLeaf: this.modelRelation.endNode.relations.length == 0, 
            hasMetaData: false, 
            name: modelRelation.endNode.wzName, 
            namePlural: modelRelation.endNode.namePlural, 
            camelName: modelRelation.endNode.camelName, 
            camelNamePlural: modelRelation.endNode.camelNamePlural, 
            startNode: {
                name: modelNode.wzName, 
                namePlural: modelNode.namePlural, 
                camelName: modelNode.camelName, 
                camelNamePlural: modelNode.camelNamePlural, 
                fullKeys: []
            }, 
            relationName: modelRelation.wzName, 
            symmetricRelation: modelRelation.symmetricRelation, 
            label: modelRelation.label, 
            role: modelRelation.role, 
            pathKeys: [], 
            keys: [], 
            pathSegments: [], 
            metaDocument: false, 
            otherDocuments: [], 
            endNodes: [], 
            comments: []
        };
        this.setStartNodeKeys();
        this.setPathKeys();
        this.setKeys();
        this.setPathSegments();
        this.setDocuments();
        this.setEndNodes();
        this.setComments(modelRelation.endNode, this.structureNode);
        this.graphStructure.nodes.push(this.structureNode);
    }
    DocuDbNode.prototype.setStartNodeKeys = function() {
        if (this.parentStructureNode != null) {
            var i, i_items=this.parentStructureNode.pathKeys, i_len=this.parentStructureNode.pathKeys.length, key;
            for (i=0; i<i_len; i++) {
                key = this.parentStructureNode.pathKeys[i];
                this.structureNode.startNode.fullKeys.push(key.end);
            }
            var i, i_items=this.parentStructureNode.keys, i_len=this.parentStructureNode.keys.length, key;
            for (i=0; i<i_len; i++) {
                key = this.parentStructureNode.keys[i];
                this.structureNode.startNode.fullKeys.push(key);
            }
        }
    }
    DocuDbNode.prototype.setPathKeys = function() {
        if (this.parentStructureNode != null) {
            var i, i_items=this.parentStructureNode.pathKeys, i_len=this.parentStructureNode.pathKeys.length, key;
            for (i=0; i<i_len; i++) {
                key = this.parentStructureNode.pathKeys[i];
                this.structureNode.pathKeys.push(key);
            }
        }
        var i, i_items=this.modelRelation.keys(), i_len=this.modelRelation.keys().length, key;
        for (i=0; i<i_len; i++) {
            key = this.modelRelation.keys()[i];
            this.structureNode.pathKeys.push(key);
        }
    }
    DocuDbNode.prototype.setKeys = function() {
        var i, i_items=this.modelRelation.endNode.keys, i_len=this.modelRelation.endNode.keys.length, key;
        for (i=0; i<i_len; i++) {
            key = this.modelRelation.endNode.keys[i];
            this.structureNode.keys.push(key.wzName);
        }
    }
    DocuDbNode.prototype.setPathSegments = function() {
        if (this.parentStructureNode != null) {
            var i, i_items=this.parentStructureNode.pathSegments, i_len=this.parentStructureNode.pathSegments.length, segment;
            for (i=0; i<i_len; i++) {
                segment = this.parentStructureNode.pathSegments[i];
                this.structureNode.pathSegments.push(segment);
            }
        }
        var i, i_items=this.modelRelation.pathSegments(), i_len=this.modelRelation.pathSegments().length, segment;
        for (i=0; i<i_len; i++) {
            segment = this.modelRelation.pathSegments()[i];
            this.structureNode.pathSegments.push(segment.wzName);
        }
    }
    DocuDbNode.prototype.setDocuments = function() {
        var i, i_items=this.modelRelation.endNode.documents, i_len=this.modelRelation.endNode.documents.length, docu;
        for (i=0; i<i_len; i++) {
            docu = this.modelRelation.endNode.documents[i];
            if (docu.kind === "json-meta-data") {
                this.setMetaDocument(docu);
                this.setComments(docu, this.structureNode.metaDocument);
            }
            else {
                var structureDocu = {
                    pathSegments: []
                };
                this.setOtherDocument(docu, structureDocu);
                this.setComments(docu, structureDocu);
                this.structureNode.otherDocuments.push(structureDocu);
            }
        }
    }
    DocuDbNode.prototype.setMetaDocument = function(docu) {
        this.structureNode.hasMetaData = true;
        this.structureNode.metaDocument = {
            name: docu.wzName, 
            kind: docu.kind, 
            pathSegments: []
        };
        var i, i_items=this.structureNode.pathSegments, i_len=this.structureNode.pathSegments.length, segment;
        for (i=0; i<i_len; i++) {
            segment = this.structureNode.pathSegments[i];
            this.structureNode.metaDocument.pathSegments.push(segment);
        }
        var i, i_items=docu.pathSegments(), i_len=docu.pathSegments().length, segment;
        for (i=0; i<i_len; i++) {
            segment = docu.pathSegments()[i];
            this.structureNode.metaDocument.pathSegments.push(segment.wzName);
        }
    }
    DocuDbNode.prototype.setOtherDocument = function(docu, structureDocu) {
        structureDocu.name = docu.wzName;
        structureDocu.kind = docu.kind;
        var i, i_items=this.structureNode.pathSegments, i_len=this.structureNode.pathSegments.length, segment;
        for (i=0; i<i_len; i++) {
            segment = this.structureNode.pathSegments[i];
            structureDocu.pathSegments.push(segment);
        }
        var i, i_items=docu.pathSegments(), i_len=docu.pathSegments().length, segment;
        for (i=0; i<i_len; i++) {
            segment = docu.pathSegments()[i];
            structureDocu.pathSegments.push(segment.wzName);
        }
    }
    DocuDbNode.prototype.setEndNodes = function() {
        var endNode = this.modelRelation.endNode;
        console.log('setEndNodes', endNode.wzName);
        var i, i_items=endNode.relations, i_len=endNode.relations.length, r;
        for (i=0; i<i_len; i++) {
            r = endNode.relations[i];
            var ddn = new DocuDbNode(this.graphStructure, this.structureNode, endNode, r);
            var temp = {};
            for (var k in ddn.structureNode) {
                if (k !== 'endNodes') {
                    temp[k] = ddn.structureNode[k];
                }
            }
            this.structureNode.endNodes.push( temp );
        }
    }
    DocuDbNode.prototype.setComments = function(element, node) {
        node.comments = [];
        if (element.comments) {
            var i, i_items=element.comments, i_len=element.comments.length, c;
            for (i=0; i<i_len; i++) {
                c = element.comments[i];
                node.comments.push(c.wzName);
            }
        }
    }
    return DocuDbNode;
})();

module.exports = DocuDbNode;
