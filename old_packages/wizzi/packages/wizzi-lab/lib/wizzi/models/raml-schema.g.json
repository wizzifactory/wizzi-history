{
  "name": "raml",
  "preserveTags": true,
  "requires": [],
  "exportTos": [
    "json"
  ],
  "elements": [
    {
      "name": "ramlItem",
      "super": null,
      "isRoot": false,
      "tags": [
        "ramlItem"
      ],
      "flags": "is-abstract ",
      "attributes": [],
      "relations": [
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        }
      ],
      "derived": [
        {
          "name": "raml",
          "tags": [
            "raml"
          ]
        },
        {
          "name": "namedParameter",
          "tags": [
            "namedParameter"
          ]
        },
        {
          "name": "baseUriParameter",
          "tags": [
            "base-uri-param"
          ]
        },
        {
          "name": "queryParameter",
          "tags": [
            "query-param"
          ]
        },
        {
          "name": "formParameter",
          "tags": [
            "form-param"
          ]
        },
        {
          "name": "uriParameter",
          "tags": [
            "uri-param"
          ]
        },
        {
          "name": "header",
          "tags": [
            "header"
          ]
        },
        {
          "name": "resource",
          "tags": [
            "/"
          ]
        },
        {
          "name": "method",
          "tags": [
            "method"
          ]
        },
        {
          "name": "get",
          "tags": [
            "get"
          ]
        },
        {
          "name": "post",
          "tags": [
            "post"
          ]
        },
        {
          "name": "put",
          "tags": [
            "put"
          ]
        },
        {
          "name": "xdelete",
          "tags": [
            "delete"
          ]
        },
        {
          "name": "head",
          "tags": [
            "head"
          ]
        },
        {
          "name": "options",
          "tags": [
            "options"
          ]
        },
        {
          "name": "patch",
          "tags": [
            "patch"
          ]
        },
        {
          "name": "body",
          "tags": [
            "body"
          ]
        },
        {
          "name": "mediaTypes",
          "tags": [
            "media-types"
          ]
        },
        {
          "name": "mediaType",
          "tags": [
            "media-type"
          ]
        },
        {
          "name": "applicationJson",
          "tags": [
            "application/json"
          ]
        },
        {
          "name": "textXml",
          "tags": [
            "text/xml"
          ]
        },
        {
          "name": "textHtml",
          "tags": [
            "text/html"
          ]
        },
        {
          "name": "textCss",
          "tags": [
            "text/css"
          ]
        },
        {
          "name": "textJavascript",
          "tags": [
            "application/javascript"
          ]
        },
        {
          "name": "responses",
          "tags": [
            "responses"
          ]
        },
        {
          "name": "responseStatus",
          "tags": [
            "status"
          ]
        },
        {
          "name": "Status200",
          "tags": [
            "200"
          ]
        },
        {
          "name": "Status201",
          "tags": [
            "201"
          ]
        },
        {
          "name": "Status204",
          "tags": [
            "204"
          ]
        },
        {
          "name": "Status400",
          "tags": [
            "400"
          ]
        },
        {
          "name": "security",
          "tags": [
            "security"
          ]
        },
        {
          "name": "setting",
          "tags": [
            "setting"
          ]
        },
        {
          "name": "schema",
          "tags": [
            "types"
          ]
        },
        {
          "name": "typeItem",
          "tags": [
            "typeItem"
          ]
        },
        {
          "name": "any",
          "tags": [
            "any"
          ]
        },
        {
          "name": "object",
          "tags": [
            "object"
          ]
        },
        {
          "name": "array",
          "tags": [
            "array"
          ]
        },
        {
          "name": "external",
          "tags": [
            "external"
          ]
        },
        {
          "name": "union",
          "tags": [
            "union"
          ]
        },
        {
          "name": "scalar",
          "tags": [
            "scalar"
          ]
        },
        {
          "name": "string",
          "tags": [
            "string"
          ]
        },
        {
          "name": "number",
          "tags": [
            "number"
          ]
        },
        {
          "name": "integer",
          "tags": [
            "integer"
          ]
        },
        {
          "name": "xboolean",
          "tags": [
            "boolean"
          ]
        },
        {
          "name": "dateOnly",
          "tags": [
            "date-only"
          ]
        },
        {
          "name": "timeOnly",
          "tags": [
            "time-only"
          ]
        },
        {
          "name": "dateTimeOnly",
          "tags": [
            "datetime-only"
          ]
        },
        {
          "name": "datetime",
          "tags": [
            "datetime"
          ]
        },
        {
          "name": "file",
          "tags": [
            "file"
          ]
        },
        {
          "name": "nil",
          "tags": [
            "nil"
          ]
        },
        {
          "name": "example",
          "tags": [
            "example"
          ]
        },
        {
          "name": "jsonItem",
          "tags": [
            "jsonItem"
          ]
        },
        {
          "name": "jsonObject",
          "tags": [
            "{"
          ]
        },
        {
          "name": "jsonArray",
          "tags": [
            "["
          ]
        },
        {
          "name": "jsonPropertyOrValue",
          "tags": [
            "@"
          ]
        }
      ],
      "restricts": [],
      "methods": [],
      "comments": []
    },
    {
      "name": "raml",
      "super": "ramlItem",
      "isRoot": true,
      "tags": [
        "raml"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "title",
          "type": "string",
          "tags": [
            "title"
          ],
          "flags": "required ",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "(Required) The title property is a short plain text description of the RESTful API.",
            "The title property's value SHOULD be suitable for use as a title for the contained user documentation."
          ]
        },
        {
          "name": "version",
          "type": "string",
          "tags": [
            "version"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "(Optional) If the RAML API definition is targeted to a specific API version,",
            "the API definition MUST contain a version property."
          ]
        },
        {
          "name": "baseUri",
          "type": "string",
          "tags": [
            "base-uri"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "(Optional during development; Required after implementation)",
            "A RESTful API's resources are defined relative to the API's base URI.",
            "The use of the baseUri field is OPTIONAL to allow describing APIs that have not yet been implemented.",
            "May contain a template URI. A template URI refers to a URI parameter, which is a variable element,",
            "enclosed in curly brackets ({}) inside a relative URI of a resource.",
            "",
            "Example",
            "",
            "raml",
            "...",
            "base-uri https://{bucketName}.s3.amazonaws.com",
            "...",
            "base-uri-parameter bucketName:",
            "description The name of the bucket"
          ]
        },
        {
          "name": "protocols",
          "type": "string",
          "tags": [
            "protocols"
          ],
          "default": "none",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "none",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "http",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "https",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "http,https",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": [
            "(Optional) A RESTful API can be reached HTTP, HTTPS, or both.",
            "The protocols property MAY be used to specify the protocols that an API supports.",
            "If the protocols property is not specified, the protocol specified at the baseUri property is used.",
            "The protocols property MUST be an array of strings, of values \"HTTP\" and/or \"HTTPS\"."
          ]
        },
        {
          "name": "port",
          "type": "integer",
          "tags": [
            "port"
          ],
          "default": "10011",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "baseUriParameter",
          "role": "baseUriParameters",
          "tags": [
            "base-uri-param"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "mediaTypes",
          "role": null,
          "tags": [
            "media-types"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "schema",
          "role": null,
          "tags": [
            "types"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "resource",
          "role": "resources",
          "tags": [
            "/"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.parameters",
              "statements": [
                {
                  "tag": "[",
                  "name": "jsArray",
                  "value": "",
                  "statements": []
                }
              ]
            },
            {
              "tag": "foreach",
              "name": "foreach",
              "value": "item in this.baseUriParameters",
              "statements": [
                {
                  "tag": "set",
                  "name": "set",
                  "value": "item.in = 'uri'",
                  "statements": []
                },
                {
                  "tag": "_",
                  "name": "call",
                  "value": "this.parameters.push(item)",
                  "statements": []
                }
              ]
            }
          ],
          "comments": []
        },
        {
          "name": "getMediaTypes",
          "isStatic": false,
          "isKnownMethod": false,
          "params": [],
          "statements": [
            {
              "tag": "var",
              "name": "xvar",
              "value": "ret = []",
              "statements": []
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "_.isObject(this.mediaTypes)",
              "statements": [
                {
                  "tag": "foreach",
                  "name": "foreach",
                  "value": "item in this.mediaTypes.mediaTypes",
                  "statements": [
                    {
                      "tag": "_",
                      "name": "call",
                      "value": "ret.push(item)",
                      "statements": []
                    }
                  ]
                }
              ]
            },
            {
              "tag": "return",
              "name": "xreturn",
              "value": "ret",
              "statements": []
            }
          ],
          "comments": []
        },
        {
          "name": "getComments",
          "isStatic": false,
          "isKnownMethod": false,
          "params": [],
          "statements": [
            {
              "tag": "return",
              "name": "xreturn",
              "value": "initComments(this.comments)",
              "statements": []
            }
          ],
          "comments": []
        },
        {
          "name": "getResources",
          "isStatic": false,
          "isKnownMethod": false,
          "params": [],
          "statements": [
            {
              "tag": "var",
              "name": "xvar",
              "value": "resCtx",
              "statements": [
                {
                  "tag": "{",
                  "name": "jsObject",
                  "value": "",
                  "statements": [
                    {
                      "tag": "@",
                      "name": "jsPropertyOrValue",
                      "value": "paths",
                      "statements": [
                        {
                          "tag": "[",
                          "name": "jsArray",
                          "value": "",
                          "statements": []
                        }
                      ]
                    },
                    {
                      "tag": "@",
                      "name": "jsPropertyOrValue",
                      "value": "resources",
                      "statements": [
                        {
                          "tag": "[",
                          "name": "jsArray",
                          "value": "",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "foreach",
              "name": "foreach",
              "value": "r in this.resources",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "r.getData(resCtx)",
                  "statements": []
                }
              ]
            },
            {
              "tag": "return",
              "name": "xreturn",
              "value": "resCtx.resources",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": [
        "The root Entity of the raml Schema."
      ]
    },
    {
      "name": "comment",
      "super": null,
      "isRoot": false,
      "tags": [
        "#"
      ],
      "flags": "",
      "attributes": [],
      "relations": [
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": [
        "A comment line for describing items."
      ]
    },
    {
      "name": "annotation",
      "super": null,
      "isRoot": false,
      "tags": [
        "("
      ],
      "flags": "",
      "attributes": [],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": [
        "Annotations provide a mechanism to extend the API specification with metadata"
      ]
    },
    {
      "name": "namedParameter",
      "super": "ramlItem",
      "isRoot": false,
      "tags": [
        "namedParameter"
      ],
      "flags": "is-abstract ",
      "attributes": [
        {
          "name": "displayName_display_name",
          "type": "string",
          "tags": [
            "displayName display-name"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "(Optional) The displayName attribute specifies the parameter's display name.",
            "It is a friendly name used only for display or documentation purposes.",
            "If displayName is not specified, it defaults to the property's key (the name of the property itself)."
          ]
        },
        {
          "name": "description",
          "type": "string",
          "tags": [
            "description"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "(Optional) The description attribute describes the intended use or meaning of the parameter.",
            "This value MAY be formatted using Markdown [MARKDOWN]."
          ]
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "string",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": [
                    "Value MUST be a string."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": [
                    "Value MUST be a number. Indicate floating point numbers as defined by YAML."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": [
                    "Value MUST be an integer. Floating point numbers are not allowed. The integer type is a subset of the number type."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "date",
                  "comments": [
                    "Value MUST be a string representation of a date as defined in RFC2616 Section 3.3 [RFC2616]. See Date Representations.",
                    "As defined in [RFC2616], all date/time stamps are represented in Greenwich Mean Time (GMT),",
                    "which for the purposes of HTTP is equal to UTC (Coordinated Universal Time).",
                    "This is indicated by including \"GMT\" as the three-letter abbreviation for the timezone.",
                    "Example: Sun, 06 Nov 1994 08:49:37 GMT."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": [
                    "Value MUST be either the string \"true\" or \"false\" (without the quotes)."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": [
                    "(Applicable only to Form properties)<br><br>Value is a file. Client generators SHOULD use this type to handle file uploads correctly."
                  ]
                }
              ],
              "comments": []
            }
          ],
          "comments": [
            "(Optional) The type attribute specifies the primitive type of the parameter's resolved value.",
            "API clients MUST return/throw an error if the parameter's resolved value does not match the specified type.",
            "If type is not specified, it defaults to string. Valid types are:"
          ]
        },
        {
          "name": "enum",
          "type": "string",
          "tags": [
            "enum"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The enum attribute provides an enumeration of the parameter's valid values. This MUST be an array. If the enum attribute is defined, API clients and servers MUST verify that a parameter's value matches a value in the enum array. If there is no matching value, the clients and servers MUST treat this as an error."
          ]
        },
        {
          "name": "pattern",
          "type": "string",
          "tags": [
            "pattern"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The pattern attribute is a regular expression that a parameter of type string MUST match. Regular expressions MUST follow the regular expression specification from ECMA 262/Perl 5. The pattern MAY be enclosed in double quotes for readability and clarity."
          ]
        },
        {
          "name": "minLength",
          "type": "string",
          "tags": [
            "minLength"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The minLength attribute specifies the parameter value's minimum number of characters."
          ]
        },
        {
          "name": "maxLength",
          "type": "string",
          "tags": [
            "maxLength"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The maxLength attribute specifies the parameter value's maximum number of characters."
          ]
        },
        {
          "name": "minimum",
          "type": "string",
          "tags": [
            "minimum"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type number or integer) The minimum attribute specifies the parameter's minimum value."
          ]
        },
        {
          "name": "maximum",
          "type": "string",
          "tags": [
            "maximum"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type number or integer) The maximum attribute specifies the parameter's maximum value."
          ]
        },
        {
          "name": "example",
          "type": "string",
          "tags": [
            "example"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "(Optional) The example attribute shows an example value for the property. This can be used, e.g., by documentation generators to generate sample values for the property."
          ]
        },
        {
          "name": "repeat",
          "type": "boolean",
          "tags": [
            "repeat"
          ],
          "default": "false",
          "defaultWhenDeclared": "true",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "(Optional) The repeat attribute specifies that the parameter can be repeated. If the parameter can be used multiple times, the repeat parameter value MUST be set to 'true'. Otherwise, the default value is 'false' and the parameter may not be repeated."
          ]
        },
        {
          "name": "isRequired",
          "type": "boolean",
          "tags": [
            "is-required"
          ],
          "default": "false",
          "defaultWhenDeclared": "true",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "(Optional except as otherwise noted) The required attribute specifies whether the parameter and its value MUST be present in the API definition. It must be either 'true' if the value MUST be present or 'false' otherwise.",
            "In general, parameters are optional unless the required attribute is included and its value set to 'true'.",
            "For a URI parameter, the required attribute MAY be omitted, but its default value is 'true'."
          ]
        },
        {
          "name": "isEmptyAllowed",
          "type": "boolean",
          "tags": [
            "is-empty-allowed"
          ],
          "default": "false",
          "defaultWhenDeclared": "true",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": []
        },
        {
          "name": "default",
          "type": "string",
          "tags": [
            "default"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "(Optional) The default attribute specifies the default value to use for the property if the property is omitted or its value is not specified. This SHOULD NOT be interpreted as a requirement for the client to send the default attribute's value if there is no other value to send. Instead, the default attribute's value is the value the server uses if the client does not send a value."
          ]
        },
        {
          "name": "arrayFormat",
          "type": "string",
          "tags": [
            "array-format"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "csv",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "multi",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "pipes",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "ssv",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "tsv",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [
        {
          "name": "baseUriParameter",
          "tags": [
            "base-uri-param"
          ]
        },
        {
          "name": "queryParameter",
          "tags": [
            "query-param"
          ]
        },
        {
          "name": "formParameter",
          "tags": [
            "form-param"
          ]
        },
        {
          "name": "uriParameter",
          "tags": [
            "uri-param"
          ]
        },
        {
          "name": "header",
          "tags": [
            "header"
          ]
        }
      ],
      "restricts": [],
      "methods": [
        {
          "name": "getFacets",
          "isStatic": false,
          "isKnownMethod": false,
          "params": [],
          "statements": [
            {
              "tag": "var",
              "name": "xvar",
              "value": "ret = []",
              "statements": []
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['displayName']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'displayName'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['displayName']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'string'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['description']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'description'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['description']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'string'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['type']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'type'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['type']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'string'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['pattern']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'pattern'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['pattern']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'string'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['minLength']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'minLength'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['minLength']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'integer'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['maxLength']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'maxLength'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['maxLength']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'integer'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['minimum']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'minimum'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['minimum']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'integer'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['maximum']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'maximum'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['maximum']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'integer'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['example']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'example'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['example']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'string'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['repeat']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'repeat'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['repeat']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'boolean'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['default']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'default'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['default']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'string'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['isRequired']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'isRequired'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['isRequired']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'boolean'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['isEmptyAllowed']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'isEmptyAllowed'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['isEmptyAllowed']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'boolean'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['enum']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'enum'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['enum'].split(',').trim()",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'array'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['arrayFormat']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'arrayFormat'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['arrayFormat']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'string'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "return",
              "name": "xreturn",
              "value": "ret",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": [
        "The RAML Specification describes collections of named parameters for the following properties:",
        "URI parameters, query string parameters, form parameters,",
        "request bodies (depending on the media type), and request and response headers.",
        "All the collections specify the named parameters' attributes as described in this section.",
        "[WMT The wmt-name is the key of the property]"
      ]
    },
    {
      "name": "baseUriParameter",
      "super": "namedParameter",
      "isRoot": false,
      "tags": [
        "base-uri-param"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "description",
          "type": "string",
          "tags": [
            "description"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "The base uri parameter description"
          ]
        },
        {
          "name": "displayName_display_name",
          "type": "string",
          "tags": [
            "displayName display-name"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The displayName attribute specifies the parameter's display name.",
            "It is a friendly name used only for display or documentation purposes.",
            "If displayName is not specified, it defaults to the property's key (the name of the property itself)."
          ]
        },
        {
          "name": "description",
          "type": "string",
          "tags": [
            "description"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The description attribute describes the intended use or meaning of the parameter.",
            "This value MAY be formatted using Markdown [MARKDOWN]."
          ]
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "string",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": [
                    "Value MUST be a string."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": [
                    "Value MUST be a number. Indicate floating point numbers as defined by YAML."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": [
                    "Value MUST be an integer. Floating point numbers are not allowed. The integer type is a subset of the number type."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "date",
                  "comments": [
                    "Value MUST be a string representation of a date as defined in RFC2616 Section 3.3 [RFC2616]. See Date Representations.",
                    "As defined in [RFC2616], all date/time stamps are represented in Greenwich Mean Time (GMT),",
                    "which for the purposes of HTTP is equal to UTC (Coordinated Universal Time).",
                    "This is indicated by including \"GMT\" as the three-letter abbreviation for the timezone.",
                    "Example: Sun, 06 Nov 1994 08:49:37 GMT."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": [
                    "Value MUST be either the string \"true\" or \"false\" (without the quotes)."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": [
                    "(Applicable only to Form properties)<br><br>Value is a file. Client generators SHOULD use this type to handle file uploads correctly."
                  ]
                }
              ],
              "comments": []
            }
          ],
          "comments": [
            "(Optional) The type attribute specifies the primitive type of the parameter's resolved value.",
            "API clients MUST return/throw an error if the parameter's resolved value does not match the specified type.",
            "If type is not specified, it defaults to string. Valid types are:"
          ]
        },
        {
          "name": "enum",
          "type": "string",
          "tags": [
            "enum"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The enum attribute provides an enumeration of the parameter's valid values. This MUST be an array. If the enum attribute is defined, API clients and servers MUST verify that a parameter's value matches a value in the enum array. If there is no matching value, the clients and servers MUST treat this as an error."
          ]
        },
        {
          "name": "pattern",
          "type": "string",
          "tags": [
            "pattern"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The pattern attribute is a regular expression that a parameter of type string MUST match. Regular expressions MUST follow the regular expression specification from ECMA 262/Perl 5. The pattern MAY be enclosed in double quotes for readability and clarity."
          ]
        },
        {
          "name": "minLength",
          "type": "string",
          "tags": [
            "minLength"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The minLength attribute specifies the parameter value's minimum number of characters."
          ]
        },
        {
          "name": "maxLength",
          "type": "string",
          "tags": [
            "maxLength"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The maxLength attribute specifies the parameter value's maximum number of characters."
          ]
        },
        {
          "name": "minimum",
          "type": "string",
          "tags": [
            "minimum"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type number or integer) The minimum attribute specifies the parameter's minimum value."
          ]
        },
        {
          "name": "maximum",
          "type": "string",
          "tags": [
            "maximum"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type number or integer) The maximum attribute specifies the parameter's maximum value."
          ]
        },
        {
          "name": "example",
          "type": "string",
          "tags": [
            "example"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The example attribute shows an example value for the property. This can be used, e.g., by documentation generators to generate sample values for the property."
          ]
        },
        {
          "name": "repeat",
          "type": "boolean",
          "tags": [
            "repeat"
          ],
          "default": "false",
          "defaultWhenDeclared": "true",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The repeat attribute specifies that the parameter can be repeated. If the parameter can be used multiple times, the repeat parameter value MUST be set to 'true'. Otherwise, the default value is 'false' and the parameter may not be repeated."
          ]
        },
        {
          "name": "isRequired",
          "type": "boolean",
          "tags": [
            "is-required"
          ],
          "default": "false",
          "defaultWhenDeclared": "true",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional except as otherwise noted) The required attribute specifies whether the parameter and its value MUST be present in the API definition. It must be either 'true' if the value MUST be present or 'false' otherwise.",
            "In general, parameters are optional unless the required attribute is included and its value set to 'true'.",
            "For a URI parameter, the required attribute MAY be omitted, but its default value is 'true'."
          ]
        },
        {
          "name": "isEmptyAllowed",
          "type": "boolean",
          "tags": [
            "is-empty-allowed"
          ],
          "default": "false",
          "defaultWhenDeclared": "true",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": []
        },
        {
          "name": "default",
          "type": "string",
          "tags": [
            "default"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The default attribute specifies the default value to use for the property if the property is omitted or its value is not specified. This SHOULD NOT be interpreted as a requirement for the client to send the default attribute's value if there is no other value to send. Instead, the default attribute's value is the value the server uses if the client does not send a value."
          ]
        },
        {
          "name": "arrayFormat",
          "type": "string",
          "tags": [
            "array-format"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "csv",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "multi",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "pipes",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "ssv",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "tsv",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": []
    },
    {
      "name": "queryParameter",
      "super": "namedParameter",
      "isRoot": false,
      "tags": [
        "query-param"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "displayName_display_name",
          "type": "string",
          "tags": [
            "displayName display-name"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The displayName attribute specifies the parameter's display name.",
            "It is a friendly name used only for display or documentation purposes.",
            "If displayName is not specified, it defaults to the property's key (the name of the property itself)."
          ]
        },
        {
          "name": "description",
          "type": "string",
          "tags": [
            "description"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The description attribute describes the intended use or meaning of the parameter.",
            "This value MAY be formatted using Markdown [MARKDOWN]."
          ]
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "string",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": [
                    "Value MUST be a string."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": [
                    "Value MUST be a number. Indicate floating point numbers as defined by YAML."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": [
                    "Value MUST be an integer. Floating point numbers are not allowed. The integer type is a subset of the number type."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "date",
                  "comments": [
                    "Value MUST be a string representation of a date as defined in RFC2616 Section 3.3 [RFC2616]. See Date Representations.",
                    "As defined in [RFC2616], all date/time stamps are represented in Greenwich Mean Time (GMT),",
                    "which for the purposes of HTTP is equal to UTC (Coordinated Universal Time).",
                    "This is indicated by including \"GMT\" as the three-letter abbreviation for the timezone.",
                    "Example: Sun, 06 Nov 1994 08:49:37 GMT."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": [
                    "Value MUST be either the string \"true\" or \"false\" (without the quotes)."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": [
                    "(Applicable only to Form properties)<br><br>Value is a file. Client generators SHOULD use this type to handle file uploads correctly."
                  ]
                }
              ],
              "comments": []
            }
          ],
          "comments": [
            "(Optional) The type attribute specifies the primitive type of the parameter's resolved value.",
            "API clients MUST return/throw an error if the parameter's resolved value does not match the specified type.",
            "If type is not specified, it defaults to string. Valid types are:"
          ]
        },
        {
          "name": "enum",
          "type": "string",
          "tags": [
            "enum"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The enum attribute provides an enumeration of the parameter's valid values. This MUST be an array. If the enum attribute is defined, API clients and servers MUST verify that a parameter's value matches a value in the enum array. If there is no matching value, the clients and servers MUST treat this as an error."
          ]
        },
        {
          "name": "pattern",
          "type": "string",
          "tags": [
            "pattern"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The pattern attribute is a regular expression that a parameter of type string MUST match. Regular expressions MUST follow the regular expression specification from ECMA 262/Perl 5. The pattern MAY be enclosed in double quotes for readability and clarity."
          ]
        },
        {
          "name": "minLength",
          "type": "string",
          "tags": [
            "minLength"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The minLength attribute specifies the parameter value's minimum number of characters."
          ]
        },
        {
          "name": "maxLength",
          "type": "string",
          "tags": [
            "maxLength"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The maxLength attribute specifies the parameter value's maximum number of characters."
          ]
        },
        {
          "name": "minimum",
          "type": "string",
          "tags": [
            "minimum"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type number or integer) The minimum attribute specifies the parameter's minimum value."
          ]
        },
        {
          "name": "maximum",
          "type": "string",
          "tags": [
            "maximum"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type number or integer) The maximum attribute specifies the parameter's maximum value."
          ]
        },
        {
          "name": "example",
          "type": "string",
          "tags": [
            "example"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The example attribute shows an example value for the property. This can be used, e.g., by documentation generators to generate sample values for the property."
          ]
        },
        {
          "name": "repeat",
          "type": "boolean",
          "tags": [
            "repeat"
          ],
          "default": "false",
          "defaultWhenDeclared": "true",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The repeat attribute specifies that the parameter can be repeated. If the parameter can be used multiple times, the repeat parameter value MUST be set to 'true'. Otherwise, the default value is 'false' and the parameter may not be repeated."
          ]
        },
        {
          "name": "isRequired",
          "type": "boolean",
          "tags": [
            "is-required"
          ],
          "default": "false",
          "defaultWhenDeclared": "true",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional except as otherwise noted) The required attribute specifies whether the parameter and its value MUST be present in the API definition. It must be either 'true' if the value MUST be present or 'false' otherwise.",
            "In general, parameters are optional unless the required attribute is included and its value set to 'true'.",
            "For a URI parameter, the required attribute MAY be omitted, but its default value is 'true'."
          ]
        },
        {
          "name": "isEmptyAllowed",
          "type": "boolean",
          "tags": [
            "is-empty-allowed"
          ],
          "default": "false",
          "defaultWhenDeclared": "true",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": []
        },
        {
          "name": "default",
          "type": "string",
          "tags": [
            "default"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The default attribute specifies the default value to use for the property if the property is omitted or its value is not specified. This SHOULD NOT be interpreted as a requirement for the client to send the default attribute's value if there is no other value to send. Instead, the default attribute's value is the value the server uses if the client does not send a value."
          ]
        },
        {
          "name": "arrayFormat",
          "type": "string",
          "tags": [
            "array-format"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "csv",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "multi",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "pipes",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "ssv",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "tsv",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "getComments",
          "isStatic": false,
          "isKnownMethod": false,
          "params": [],
          "statements": [
            {
              "tag": "return",
              "name": "xreturn",
              "value": "initComments(this.comments)",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": [
        "An API's resources MAY be filtered (to return a subset of results) or",
        "altered (such as transforming a response body from JSON to XML format) by the use of query strings.",
        "If the resource or its method supports a query string, the query string MUST be defined by",
        "the queryParameters property."
      ]
    },
    {
      "name": "formParameter",
      "super": "namedParameter",
      "isRoot": false,
      "tags": [
        "form-param"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "displayName_display_name",
          "type": "string",
          "tags": [
            "displayName display-name"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The displayName attribute specifies the parameter's display name.",
            "It is a friendly name used only for display or documentation purposes.",
            "If displayName is not specified, it defaults to the property's key (the name of the property itself)."
          ]
        },
        {
          "name": "description",
          "type": "string",
          "tags": [
            "description"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The description attribute describes the intended use or meaning of the parameter.",
            "This value MAY be formatted using Markdown [MARKDOWN]."
          ]
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "string",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": [
                    "Value MUST be a string."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": [
                    "Value MUST be a number. Indicate floating point numbers as defined by YAML."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": [
                    "Value MUST be an integer. Floating point numbers are not allowed. The integer type is a subset of the number type."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "date",
                  "comments": [
                    "Value MUST be a string representation of a date as defined in RFC2616 Section 3.3 [RFC2616]. See Date Representations.",
                    "As defined in [RFC2616], all date/time stamps are represented in Greenwich Mean Time (GMT),",
                    "which for the purposes of HTTP is equal to UTC (Coordinated Universal Time).",
                    "This is indicated by including \"GMT\" as the three-letter abbreviation for the timezone.",
                    "Example: Sun, 06 Nov 1994 08:49:37 GMT."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": [
                    "Value MUST be either the string \"true\" or \"false\" (without the quotes)."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": [
                    "(Applicable only to Form properties)<br><br>Value is a file. Client generators SHOULD use this type to handle file uploads correctly."
                  ]
                }
              ],
              "comments": []
            }
          ],
          "comments": [
            "(Optional) The type attribute specifies the primitive type of the parameter's resolved value.",
            "API clients MUST return/throw an error if the parameter's resolved value does not match the specified type.",
            "If type is not specified, it defaults to string. Valid types are:"
          ]
        },
        {
          "name": "enum",
          "type": "string",
          "tags": [
            "enum"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The enum attribute provides an enumeration of the parameter's valid values. This MUST be an array. If the enum attribute is defined, API clients and servers MUST verify that a parameter's value matches a value in the enum array. If there is no matching value, the clients and servers MUST treat this as an error."
          ]
        },
        {
          "name": "pattern",
          "type": "string",
          "tags": [
            "pattern"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The pattern attribute is a regular expression that a parameter of type string MUST match. Regular expressions MUST follow the regular expression specification from ECMA 262/Perl 5. The pattern MAY be enclosed in double quotes for readability and clarity."
          ]
        },
        {
          "name": "minLength",
          "type": "string",
          "tags": [
            "minLength"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The minLength attribute specifies the parameter value's minimum number of characters."
          ]
        },
        {
          "name": "maxLength",
          "type": "string",
          "tags": [
            "maxLength"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The maxLength attribute specifies the parameter value's maximum number of characters."
          ]
        },
        {
          "name": "minimum",
          "type": "string",
          "tags": [
            "minimum"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type number or integer) The minimum attribute specifies the parameter's minimum value."
          ]
        },
        {
          "name": "maximum",
          "type": "string",
          "tags": [
            "maximum"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type number or integer) The maximum attribute specifies the parameter's maximum value."
          ]
        },
        {
          "name": "example",
          "type": "string",
          "tags": [
            "example"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The example attribute shows an example value for the property. This can be used, e.g., by documentation generators to generate sample values for the property."
          ]
        },
        {
          "name": "repeat",
          "type": "boolean",
          "tags": [
            "repeat"
          ],
          "default": "false",
          "defaultWhenDeclared": "true",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The repeat attribute specifies that the parameter can be repeated. If the parameter can be used multiple times, the repeat parameter value MUST be set to 'true'. Otherwise, the default value is 'false' and the parameter may not be repeated."
          ]
        },
        {
          "name": "isRequired",
          "type": "boolean",
          "tags": [
            "is-required"
          ],
          "default": "false",
          "defaultWhenDeclared": "true",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional except as otherwise noted) The required attribute specifies whether the parameter and its value MUST be present in the API definition. It must be either 'true' if the value MUST be present or 'false' otherwise.",
            "In general, parameters are optional unless the required attribute is included and its value set to 'true'.",
            "For a URI parameter, the required attribute MAY be omitted, but its default value is 'true'."
          ]
        },
        {
          "name": "isEmptyAllowed",
          "type": "boolean",
          "tags": [
            "is-empty-allowed"
          ],
          "default": "false",
          "defaultWhenDeclared": "true",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": []
        },
        {
          "name": "default",
          "type": "string",
          "tags": [
            "default"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The default attribute specifies the default value to use for the property if the property is omitted or its value is not specified. This SHOULD NOT be interpreted as a requirement for the client to send the default attribute's value if there is no other value to send. Instead, the default attribute's value is the value the server uses if the client does not send a value."
          ]
        },
        {
          "name": "arrayFormat",
          "type": "string",
          "tags": [
            "array-format"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "csv",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "multi",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "pipes",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "ssv",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "tsv",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "getComments",
          "isStatic": false,
          "isKnownMethod": false,
          "params": [],
          "statements": [
            {
              "tag": "return",
              "name": "xreturn",
              "value": "initComments(this.comments)",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": [
        "If the API's media type is either application/x-www-form-urlencoded or multipart/form-data,",
        "the formParameters property MUST specify the name-value pairs that the API is expecting.",
        "The formParameters property is a map in which the key is the name of the web form parameter,",
        "and the value is itself a map the specifies the web form parameter's attributes,",
        "according to the Named Parameters section."
      ]
    },
    {
      "name": "resource",
      "super": "ramlItem",
      "isRoot": false,
      "tags": [
        "/"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "displayName",
          "type": "string",
          "tags": [
            "displayName"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "The displayName attribute provides a friendly name to the resource and can be used by documentation generation tools. The displayName key is OPTIONAL.",
            "If the displayName attribute is not defined for a resource, documentation tools SHOULD refer to the resource by its property key (i.e. its relative URI, e.g., \"/jobs\"), which acts as the resource's name."
          ]
        },
        {
          "name": "description",
          "type": "string",
          "tags": [
            "description"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "Each resource, whether top-level or nested, MAY contain a description property that briefly describes the resource.",
            "It is RECOMMENDED that all the API definition's resources includes the description property."
          ]
        },
        {
          "name": "routerHandleSubpaths",
          "type": "boolean",
          "tags": [
            "router-handle-subpaths"
          ],
          "default": "false",
          "defaultWhenDeclared": "true",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "This is taken from Swagger: https://github.com/apigee-127/swagger-tools/blob/master/docs/Middleware.md",
            "By setting this property to true, it indicates to Swagger Router that it should match and route",
            "all requests to not only the specified path, but also any undeclared subpaths requested that do not match",
            "an explicitly defined path in the Swagger. While you cannot specify wildcards (in Swagger) in wizzi Raml,",
            "this would be the equivalent of wildcarding the end of the path something like /pets/**."
          ]
        }
      ],
      "relations": [
        {
          "name": "uriParameter",
          "role": "uriParameters",
          "tags": [
            "uri-param"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "method",
          "role": "methods",
          "tags": [
            "method"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "resource",
          "role": "resources",
          "tags": [
            "/"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = '/' + this.wzName",
              "statements": []
            },
            {
              "tag": "set",
              "name": "set",
              "value": "this.parameters",
              "statements": [
                {
                  "tag": "[",
                  "name": "jsArray",
                  "value": "",
                  "statements": []
                }
              ]
            },
            {
              "tag": "foreach",
              "name": "foreach",
              "value": "item in this.uriParameters",
              "statements": [
                {
                  "tag": "set",
                  "name": "set",
                  "value": "item.in = 'uri'",
                  "statements": []
                },
                {
                  "tag": "_",
                  "name": "call",
                  "value": "this.parameters.push(item)",
                  "statements": []
                }
              ]
            }
          ],
          "comments": []
        },
        {
          "name": "getComments",
          "isStatic": false,
          "isKnownMethod": false,
          "params": [],
          "statements": [
            {
              "tag": "return",
              "name": "xreturn",
              "value": "initComments(this.comments)",
              "statements": []
            }
          ],
          "comments": []
        },
        {
          "name": "getData",
          "isStatic": false,
          "isKnownMethod": false,
          "params": [
            "resCtx"
          ],
          "statements": [
            {
              "tag": "_",
              "name": "call",
              "value": "resCtx.paths.push(this.wzName)",
              "statements": []
            },
            {
              "tag": "set",
              "name": "set",
              "value": "this.paths = _.cloneDeep(resCtx.paths)",
              "statements": []
            },
            {
              "tag": "set",
              "name": "set",
              "value": "this.path = '/' + resCtx.paths.join('/')",
              "statements": []
            },
            {
              "tag": "set",
              "name": "set",
              "value": "this.expressPath = this._expressPath(this.path)",
              "statements": []
            },
            {
              "tag": "_",
              "name": "call",
              "value": "resCtx.resources.push(this)",
              "statements": []
            },
            {
              "tag": "foreach",
              "name": "foreach",
              "value": "r in this.resources",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "r.getData(resCtx)",
                  "statements": []
                }
              ]
            },
            {
              "tag": "_",
              "name": "call",
              "value": "resCtx.paths.pop()",
              "statements": []
            }
          ],
          "comments": []
        },
        {
          "name": "_expressPath",
          "isStatic": false,
          "isKnownMethod": false,
          "params": [
            "path"
          ],
          "statements": [
            {
              "tag": "var",
              "name": "xvar",
              "value": "basePath = this.wzRoot().baseUri",
              "statements": []
            },
            {
              "tag": "set",
              "name": "set",
              "value": "basePath = parseurl({url: (basePath || '/')}).pathname || '/'",
              "statements": []
            },
            {
              "tag": "set",
              "name": "set",
              "value": "basePath = basePath.replace(/%7B/g, ':').replace(/%7D/g, '')",
              "statements": []
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "basePath.charAt(0) !== '/'",
              "statements": [
                {
                  "tag": "set",
                  "name": "set",
                  "value": "basePath = ('/' + basePath)",
                  "statements": []
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "basePath.charAt((basePath.length - 1)) !== '/'",
              "statements": [
                {
                  "tag": "set",
                  "name": "set",
                  "value": "basePath = (basePath + '/')",
                  "statements": []
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "path.charAt(0) === '/'",
              "statements": [
                {
                  "tag": "set",
                  "name": "set",
                  "value": "path = path.substring(1)",
                  "statements": []
                }
              ]
            },
            {
              "tag": "return",
              "name": "xreturn",
              "value": "basePath + path.replace(/{/g, ':').replace(/}/g, '')",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": [
        "Resources are identified by their relative URI, which MUST begin with a slash (/).",
        "A resource defined as a root-level property is called a top-level resource.",
        "Its property's key is the resource's URI relative to the baseUri.",
        "A resource defined as a child property of another resource is called a nested resource,",
        "and its property's key is its URI relative to its parent resource's URI."
      ]
    },
    {
      "name": "uriParameter",
      "super": "namedParameter",
      "isRoot": false,
      "tags": [
        "uri-param"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "displayName_display_name",
          "type": "string",
          "tags": [
            "displayName display-name"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The displayName attribute specifies the parameter's display name.",
            "It is a friendly name used only for display or documentation purposes.",
            "If displayName is not specified, it defaults to the property's key (the name of the property itself)."
          ]
        },
        {
          "name": "description",
          "type": "string",
          "tags": [
            "description"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The description attribute describes the intended use or meaning of the parameter.",
            "This value MAY be formatted using Markdown [MARKDOWN]."
          ]
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "string",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": [
                    "Value MUST be a string."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": [
                    "Value MUST be a number. Indicate floating point numbers as defined by YAML."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": [
                    "Value MUST be an integer. Floating point numbers are not allowed. The integer type is a subset of the number type."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "date",
                  "comments": [
                    "Value MUST be a string representation of a date as defined in RFC2616 Section 3.3 [RFC2616]. See Date Representations.",
                    "As defined in [RFC2616], all date/time stamps are represented in Greenwich Mean Time (GMT),",
                    "which for the purposes of HTTP is equal to UTC (Coordinated Universal Time).",
                    "This is indicated by including \"GMT\" as the three-letter abbreviation for the timezone.",
                    "Example: Sun, 06 Nov 1994 08:49:37 GMT."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": [
                    "Value MUST be either the string \"true\" or \"false\" (without the quotes)."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": [
                    "(Applicable only to Form properties)<br><br>Value is a file. Client generators SHOULD use this type to handle file uploads correctly."
                  ]
                }
              ],
              "comments": []
            }
          ],
          "comments": [
            "(Optional) The type attribute specifies the primitive type of the parameter's resolved value.",
            "API clients MUST return/throw an error if the parameter's resolved value does not match the specified type.",
            "If type is not specified, it defaults to string. Valid types are:"
          ]
        },
        {
          "name": "enum",
          "type": "string",
          "tags": [
            "enum"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The enum attribute provides an enumeration of the parameter's valid values. This MUST be an array. If the enum attribute is defined, API clients and servers MUST verify that a parameter's value matches a value in the enum array. If there is no matching value, the clients and servers MUST treat this as an error."
          ]
        },
        {
          "name": "pattern",
          "type": "string",
          "tags": [
            "pattern"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The pattern attribute is a regular expression that a parameter of type string MUST match. Regular expressions MUST follow the regular expression specification from ECMA 262/Perl 5. The pattern MAY be enclosed in double quotes for readability and clarity."
          ]
        },
        {
          "name": "minLength",
          "type": "string",
          "tags": [
            "minLength"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The minLength attribute specifies the parameter value's minimum number of characters."
          ]
        },
        {
          "name": "maxLength",
          "type": "string",
          "tags": [
            "maxLength"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The maxLength attribute specifies the parameter value's maximum number of characters."
          ]
        },
        {
          "name": "minimum",
          "type": "string",
          "tags": [
            "minimum"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type number or integer) The minimum attribute specifies the parameter's minimum value."
          ]
        },
        {
          "name": "maximum",
          "type": "string",
          "tags": [
            "maximum"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type number or integer) The maximum attribute specifies the parameter's maximum value."
          ]
        },
        {
          "name": "example",
          "type": "string",
          "tags": [
            "example"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The example attribute shows an example value for the property. This can be used, e.g., by documentation generators to generate sample values for the property."
          ]
        },
        {
          "name": "repeat",
          "type": "boolean",
          "tags": [
            "repeat"
          ],
          "default": "false",
          "defaultWhenDeclared": "true",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The repeat attribute specifies that the parameter can be repeated. If the parameter can be used multiple times, the repeat parameter value MUST be set to 'true'. Otherwise, the default value is 'false' and the parameter may not be repeated."
          ]
        },
        {
          "name": "isRequired",
          "type": "boolean",
          "tags": [
            "is-required"
          ],
          "default": "false",
          "defaultWhenDeclared": "true",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional except as otherwise noted) The required attribute specifies whether the parameter and its value MUST be present in the API definition. It must be either 'true' if the value MUST be present or 'false' otherwise.",
            "In general, parameters are optional unless the required attribute is included and its value set to 'true'.",
            "For a URI parameter, the required attribute MAY be omitted, but its default value is 'true'."
          ]
        },
        {
          "name": "isEmptyAllowed",
          "type": "boolean",
          "tags": [
            "is-empty-allowed"
          ],
          "default": "false",
          "defaultWhenDeclared": "true",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": []
        },
        {
          "name": "default",
          "type": "string",
          "tags": [
            "default"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The default attribute specifies the default value to use for the property if the property is omitted or its value is not specified. This SHOULD NOT be interpreted as a requirement for the client to send the default attribute's value if there is no other value to send. Instead, the default attribute's value is the value the server uses if the client does not send a value."
          ]
        },
        {
          "name": "arrayFormat",
          "type": "string",
          "tags": [
            "array-format"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "csv",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "multi",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "pipes",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "ssv",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "tsv",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": []
    },
    {
      "name": "method",
      "super": "ramlItem",
      "isRoot": false,
      "tags": [
        "method"
      ],
      "flags": "is-abstract ",
      "attributes": [
        {
          "name": "description",
          "type": "string",
          "tags": [
            "description"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "Each declared method MAY contain a description attribute that briefly describes what the method does to the resource. It is RECOMMENDED that all API definition methods include the description property."
          ]
        },
        {
          "name": "protocols",
          "type": "string",
          "tags": [
            "protocols"
          ],
          "default": "none",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "none",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "http",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "https",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "http,https",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": [
            "(Optional) A method can override an API's protocols value for that single method",
            "by setting a different value for the fields."
          ]
        },
        {
          "name": "handlerId",
          "type": "string",
          "tags": [
            "handler"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": []
        },
        {
          "name": "securedBy",
          "type": "string",
          "tags": [
            "secured-by"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "queryParameter",
          "role": "queryParameters",
          "tags": [
            "query-param"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "header",
          "role": "headers",
          "tags": [
            "header"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "body",
          "role": null,
          "tags": [
            "body"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "responses",
          "role": null,
          "tags": [
            "responses"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": null,
          "comments": [
            "Is optional"
          ]
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [
        {
          "name": "get",
          "tags": [
            "get"
          ]
        },
        {
          "name": "post",
          "tags": [
            "post"
          ]
        },
        {
          "name": "put",
          "tags": [
            "put"
          ]
        },
        {
          "name": "xdelete",
          "tags": [
            "delete"
          ]
        },
        {
          "name": "head",
          "tags": [
            "head"
          ]
        },
        {
          "name": "options",
          "tags": [
            "options"
          ]
        },
        {
          "name": "patch",
          "tags": [
            "patch"
          ]
        }
      ],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "if",
              "name": "xif",
              "value": "!this.name",
              "statements": [
                {
                  "tag": "set",
                  "name": "set",
                  "value": "this.name = this.wzName",
                  "statements": []
                }
              ]
            },
            {
              "tag": "set",
              "name": "set",
              "value": "this.parameters",
              "statements": [
                {
                  "tag": "[",
                  "name": "jsArray",
                  "value": "",
                  "statements": []
                }
              ]
            },
            {
              "tag": "foreach",
              "name": "foreach",
              "value": "item in this.queryParameters",
              "statements": [
                {
                  "tag": "set",
                  "name": "set",
                  "value": "item.in = 'query'",
                  "statements": []
                },
                {
                  "tag": "_",
                  "name": "call",
                  "value": "this.parameters.push(item)",
                  "statements": []
                }
              ]
            },
            {
              "tag": "foreach",
              "name": "foreach",
              "value": "item in this.headers",
              "statements": [
                {
                  "tag": "set",
                  "name": "set",
                  "value": "item.in = 'header'",
                  "statements": []
                },
                {
                  "tag": "_",
                  "name": "call",
                  "value": "this.parameters.push(item)",
                  "statements": []
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this.body && this.body.typeItem",
              "statements": [
                {
                  "tag": "set",
                  "name": "set",
                  "value": "this.body.typeItem.in = 'body'",
                  "statements": []
                },
                {
                  "tag": "_",
                  "name": "call",
                  "value": "this.parameters.push(this.body.typeItem)",
                  "statements": []
                }
              ]
            }
          ],
          "comments": []
        },
        {
          "name": "getResponseStatuses",
          "isStatic": false,
          "isKnownMethod": false,
          "params": [],
          "statements": [
            {
              "tag": "var",
              "name": "xvar",
              "value": "ret = []",
              "statements": []
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this.responses",
              "statements": [
                {
                  "tag": "foreach",
                  "name": "foreach",
                  "value": "item in this.responses.responseStatuses",
                  "statements": [
                    {
                      "tag": "_",
                      "name": "call",
                      "value": "ret.push(item)",
                      "statements": []
                    }
                  ]
                }
              ]
            },
            {
              "tag": "return",
              "name": "xreturn",
              "value": "ret",
              "statements": []
            }
          ],
          "comments": []
        },
        {
          "name": "getMediaTypes",
          "isStatic": false,
          "isKnownMethod": false,
          "params": [],
          "statements": [
            {
              "tag": "var",
              "name": "xvar",
              "value": "ret = []",
              "statements": []
            },
            {
              "tag": "foreach",
              "name": "foreach",
              "value": "rs in this.getResponseStatuses()",
              "statements": [
                {
                  "tag": "if",
                  "name": "xif",
                  "value": "rs.body",
                  "statements": [
                    {
                      "tag": "foreach",
                      "name": "foreach",
                      "value": "item in rs.body.mediaTypes",
                      "statements": [
                        {
                          "tag": "_",
                          "name": "call",
                          "value": "ret.push(item)",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "return",
              "name": "xreturn",
              "value": "ret",
              "statements": []
            }
          ],
          "comments": []
        },
        {
          "name": "getComments",
          "isStatic": false,
          "isKnownMethod": false,
          "params": [],
          "statements": [
            {
              "tag": "return",
              "name": "xreturn",
              "value": "initComments(this.comments)",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": [
        "In a RESTful API, methods are operations that are performed on a resource.",
        "A method MUST be one of the HTTP methods defined in the HTTP version 1.1 specification [RFC2616]",
        "and its extension, RFC5789 [RFC5789]."
      ]
    },
    {
      "name": "header",
      "super": "namedParameter",
      "isRoot": false,
      "tags": [
        "header"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "displayName_display_name",
          "type": "string",
          "tags": [
            "displayName display-name"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The displayName attribute specifies the parameter's display name.",
            "It is a friendly name used only for display or documentation purposes.",
            "If displayName is not specified, it defaults to the property's key (the name of the property itself)."
          ]
        },
        {
          "name": "description",
          "type": "string",
          "tags": [
            "description"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The description attribute describes the intended use or meaning of the parameter.",
            "This value MAY be formatted using Markdown [MARKDOWN]."
          ]
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "string",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": [
                    "Value MUST be a string."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": [
                    "Value MUST be a number. Indicate floating point numbers as defined by YAML."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": [
                    "Value MUST be an integer. Floating point numbers are not allowed. The integer type is a subset of the number type."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "date",
                  "comments": [
                    "Value MUST be a string representation of a date as defined in RFC2616 Section 3.3 [RFC2616]. See Date Representations.",
                    "As defined in [RFC2616], all date/time stamps are represented in Greenwich Mean Time (GMT),",
                    "which for the purposes of HTTP is equal to UTC (Coordinated Universal Time).",
                    "This is indicated by including \"GMT\" as the three-letter abbreviation for the timezone.",
                    "Example: Sun, 06 Nov 1994 08:49:37 GMT."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": [
                    "Value MUST be either the string \"true\" or \"false\" (without the quotes)."
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": [
                    "(Applicable only to Form properties)<br><br>Value is a file. Client generators SHOULD use this type to handle file uploads correctly."
                  ]
                }
              ],
              "comments": []
            }
          ],
          "comments": [
            "(Optional) The type attribute specifies the primitive type of the parameter's resolved value.",
            "API clients MUST return/throw an error if the parameter's resolved value does not match the specified type.",
            "If type is not specified, it defaults to string. Valid types are:"
          ]
        },
        {
          "name": "enum",
          "type": "string",
          "tags": [
            "enum"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The enum attribute provides an enumeration of the parameter's valid values. This MUST be an array. If the enum attribute is defined, API clients and servers MUST verify that a parameter's value matches a value in the enum array. If there is no matching value, the clients and servers MUST treat this as an error."
          ]
        },
        {
          "name": "pattern",
          "type": "string",
          "tags": [
            "pattern"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The pattern attribute is a regular expression that a parameter of type string MUST match. Regular expressions MUST follow the regular expression specification from ECMA 262/Perl 5. The pattern MAY be enclosed in double quotes for readability and clarity."
          ]
        },
        {
          "name": "minLength",
          "type": "string",
          "tags": [
            "minLength"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The minLength attribute specifies the parameter value's minimum number of characters."
          ]
        },
        {
          "name": "maxLength",
          "type": "string",
          "tags": [
            "maxLength"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type string) The maxLength attribute specifies the parameter value's maximum number of characters."
          ]
        },
        {
          "name": "minimum",
          "type": "string",
          "tags": [
            "minimum"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type number or integer) The minimum attribute specifies the parameter's minimum value."
          ]
        },
        {
          "name": "maximum",
          "type": "string",
          "tags": [
            "maximum"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional, applicable only for parameters of type number or integer) The maximum attribute specifies the parameter's maximum value."
          ]
        },
        {
          "name": "example",
          "type": "string",
          "tags": [
            "example"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The example attribute shows an example value for the property. This can be used, e.g., by documentation generators to generate sample values for the property."
          ]
        },
        {
          "name": "repeat",
          "type": "boolean",
          "tags": [
            "repeat"
          ],
          "default": "false",
          "defaultWhenDeclared": "true",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The repeat attribute specifies that the parameter can be repeated. If the parameter can be used multiple times, the repeat parameter value MUST be set to 'true'. Otherwise, the default value is 'false' and the parameter may not be repeated."
          ]
        },
        {
          "name": "isRequired",
          "type": "boolean",
          "tags": [
            "is-required"
          ],
          "default": "false",
          "defaultWhenDeclared": "true",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional except as otherwise noted) The required attribute specifies whether the parameter and its value MUST be present in the API definition. It must be either 'true' if the value MUST be present or 'false' otherwise.",
            "In general, parameters are optional unless the required attribute is included and its value set to 'true'.",
            "For a URI parameter, the required attribute MAY be omitted, but its default value is 'true'."
          ]
        },
        {
          "name": "isEmptyAllowed",
          "type": "boolean",
          "tags": [
            "is-empty-allowed"
          ],
          "default": "false",
          "defaultWhenDeclared": "true",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": []
        },
        {
          "name": "default",
          "type": "string",
          "tags": [
            "default"
          ],
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [],
          "comments": [
            "(Optional) The default attribute specifies the default value to use for the property if the property is omitted or its value is not specified. This SHOULD NOT be interpreted as a requirement for the client to send the default attribute's value if there is no other value to send. Instead, the default attribute's value is the value the server uses if the client does not send a value."
          ]
        },
        {
          "name": "arrayFormat",
          "type": "string",
          "tags": [
            "array-format"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "namedParameter",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "csv",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "multi",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "pipes",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "ssv",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "tsv",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": [
        "An API's methods MAY support or require non-standard HTTP headers.",
        "In the API definition, specify the non-standard HTTP headers by using the headers property.",
        "The headers property is a map in which the key is the name of the header,",
        "and the value is itself a map specifying the header attributes, according to the Named Parameters section."
      ]
    },
    {
      "name": "get",
      "super": "method",
      "isRoot": false,
      "tags": [
        "get"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "description",
          "type": "string",
          "tags": [
            "description"
          ],
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [],
          "comments": [
            "Each declared method MAY contain a description attribute that briefly describes what the method does to the resource. It is RECOMMENDED that all API definition methods include the description property."
          ]
        },
        {
          "name": "protocols",
          "type": "string",
          "tags": [
            "protocols"
          ],
          "default": "none",
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "none",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "http",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "https",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "http,https",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": [
            "(Optional) A method can override an API's protocols value for that single method",
            "by setting a different value for the fields."
          ]
        },
        {
          "name": "handlerId",
          "type": "string",
          "tags": [
            "handler"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [],
          "comments": []
        },
        {
          "name": "securedBy",
          "type": "string",
          "tags": [
            "secured-by"
          ],
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "queryParameter",
          "role": "queryParameters",
          "tags": [
            "query-param"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "header",
          "role": "headers",
          "tags": [
            "header"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "body",
          "role": null,
          "tags": [
            "body"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "responses",
          "role": null,
          "tags": [
            "responses"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": "method",
          "comments": [
            "Is optional"
          ]
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = 'get'",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "post",
      "super": "method",
      "isRoot": false,
      "tags": [
        "post"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "description",
          "type": "string",
          "tags": [
            "description"
          ],
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [],
          "comments": [
            "Each declared method MAY contain a description attribute that briefly describes what the method does to the resource. It is RECOMMENDED that all API definition methods include the description property."
          ]
        },
        {
          "name": "protocols",
          "type": "string",
          "tags": [
            "protocols"
          ],
          "default": "none",
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "none",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "http",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "https",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "http,https",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": [
            "(Optional) A method can override an API's protocols value for that single method",
            "by setting a different value for the fields."
          ]
        },
        {
          "name": "handlerId",
          "type": "string",
          "tags": [
            "handler"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [],
          "comments": []
        },
        {
          "name": "securedBy",
          "type": "string",
          "tags": [
            "secured-by"
          ],
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "queryParameter",
          "role": "queryParameters",
          "tags": [
            "query-param"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "header",
          "role": "headers",
          "tags": [
            "header"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "body",
          "role": null,
          "tags": [
            "body"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "responses",
          "role": null,
          "tags": [
            "responses"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": "method",
          "comments": [
            "Is optional"
          ]
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = 'post'",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "put",
      "super": "method",
      "isRoot": false,
      "tags": [
        "put"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "description",
          "type": "string",
          "tags": [
            "description"
          ],
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [],
          "comments": [
            "Each declared method MAY contain a description attribute that briefly describes what the method does to the resource. It is RECOMMENDED that all API definition methods include the description property."
          ]
        },
        {
          "name": "protocols",
          "type": "string",
          "tags": [
            "protocols"
          ],
          "default": "none",
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "none",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "http",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "https",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "http,https",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": [
            "(Optional) A method can override an API's protocols value for that single method",
            "by setting a different value for the fields."
          ]
        },
        {
          "name": "handlerId",
          "type": "string",
          "tags": [
            "handler"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [],
          "comments": []
        },
        {
          "name": "securedBy",
          "type": "string",
          "tags": [
            "secured-by"
          ],
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "queryParameter",
          "role": "queryParameters",
          "tags": [
            "query-param"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "header",
          "role": "headers",
          "tags": [
            "header"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "body",
          "role": null,
          "tags": [
            "body"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "responses",
          "role": null,
          "tags": [
            "responses"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": "method",
          "comments": [
            "Is optional"
          ]
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = 'put'",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "xdelete",
      "super": "method",
      "isRoot": false,
      "tags": [
        "delete"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "description",
          "type": "string",
          "tags": [
            "description"
          ],
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [],
          "comments": [
            "Each declared method MAY contain a description attribute that briefly describes what the method does to the resource. It is RECOMMENDED that all API definition methods include the description property."
          ]
        },
        {
          "name": "protocols",
          "type": "string",
          "tags": [
            "protocols"
          ],
          "default": "none",
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "none",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "http",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "https",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "http,https",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": [
            "(Optional) A method can override an API's protocols value for that single method",
            "by setting a different value for the fields."
          ]
        },
        {
          "name": "handlerId",
          "type": "string",
          "tags": [
            "handler"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [],
          "comments": []
        },
        {
          "name": "securedBy",
          "type": "string",
          "tags": [
            "secured-by"
          ],
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "queryParameter",
          "role": "queryParameters",
          "tags": [
            "query-param"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "header",
          "role": "headers",
          "tags": [
            "header"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "body",
          "role": null,
          "tags": [
            "body"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "responses",
          "role": null,
          "tags": [
            "responses"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": "method",
          "comments": [
            "Is optional"
          ]
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = 'delete'",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "head",
      "super": "method",
      "isRoot": false,
      "tags": [
        "head"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "description",
          "type": "string",
          "tags": [
            "description"
          ],
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [],
          "comments": [
            "Each declared method MAY contain a description attribute that briefly describes what the method does to the resource. It is RECOMMENDED that all API definition methods include the description property."
          ]
        },
        {
          "name": "protocols",
          "type": "string",
          "tags": [
            "protocols"
          ],
          "default": "none",
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "none",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "http",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "https",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "http,https",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": [
            "(Optional) A method can override an API's protocols value for that single method",
            "by setting a different value for the fields."
          ]
        },
        {
          "name": "handlerId",
          "type": "string",
          "tags": [
            "handler"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [],
          "comments": []
        },
        {
          "name": "securedBy",
          "type": "string",
          "tags": [
            "secured-by"
          ],
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "queryParameter",
          "role": "queryParameters",
          "tags": [
            "query-param"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "header",
          "role": "headers",
          "tags": [
            "header"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "body",
          "role": null,
          "tags": [
            "body"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "responses",
          "role": null,
          "tags": [
            "responses"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": "method",
          "comments": [
            "Is optional"
          ]
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = 'head'",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "options",
      "super": "method",
      "isRoot": false,
      "tags": [
        "options"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "description",
          "type": "string",
          "tags": [
            "description"
          ],
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [],
          "comments": [
            "Each declared method MAY contain a description attribute that briefly describes what the method does to the resource. It is RECOMMENDED that all API definition methods include the description property."
          ]
        },
        {
          "name": "protocols",
          "type": "string",
          "tags": [
            "protocols"
          ],
          "default": "none",
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "none",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "http",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "https",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "http,https",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": [
            "(Optional) A method can override an API's protocols value for that single method",
            "by setting a different value for the fields."
          ]
        },
        {
          "name": "handlerId",
          "type": "string",
          "tags": [
            "handler"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [],
          "comments": []
        },
        {
          "name": "securedBy",
          "type": "string",
          "tags": [
            "secured-by"
          ],
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "queryParameter",
          "role": "queryParameters",
          "tags": [
            "query-param"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "header",
          "role": "headers",
          "tags": [
            "header"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "body",
          "role": null,
          "tags": [
            "body"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "responses",
          "role": null,
          "tags": [
            "responses"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": "method",
          "comments": [
            "Is optional"
          ]
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = 'options'",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "patch",
      "super": "method",
      "isRoot": false,
      "tags": [
        "patch"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "description",
          "type": "string",
          "tags": [
            "description"
          ],
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [],
          "comments": [
            "Each declared method MAY contain a description attribute that briefly describes what the method does to the resource. It is RECOMMENDED that all API definition methods include the description property."
          ]
        },
        {
          "name": "protocols",
          "type": "string",
          "tags": [
            "protocols"
          ],
          "default": "none",
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "none",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "http",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "https",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "http,https",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": [
            "(Optional) A method can override an API's protocols value for that single method",
            "by setting a different value for the fields."
          ]
        },
        {
          "name": "handlerId",
          "type": "string",
          "tags": [
            "handler"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [],
          "comments": []
        },
        {
          "name": "securedBy",
          "type": "string",
          "tags": [
            "secured-by"
          ],
          "flags": "",
          "inheritedFrom": "method",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "queryParameter",
          "role": "queryParameters",
          "tags": [
            "query-param"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "header",
          "role": "headers",
          "tags": [
            "header"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "body",
          "role": null,
          "tags": [
            "body"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "responses",
          "role": null,
          "tags": [
            "responses"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": "method",
          "comments": [
            "Is optional"
          ]
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "method",
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = 'patch'",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "body",
      "super": "ramlItem",
      "isRoot": false,
      "tags": [
        "body"
      ],
      "flags": "",
      "attributes": [],
      "relations": [
        {
          "name": "formParameter",
          "role": "formParameters",
          "tags": [
            "form-param"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "mediaType",
          "role": "mediaTypes",
          "tags": [
            "media-type"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "typeItem",
          "role": null,
          "tags": [
            "typeItem"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "property",
          "role": "properties",
          "tags": [
            "@"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": [
            "Implicit type",
            "Properties can be defined directly inside the body node (without an object node)"
          ]
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "if",
              "name": "xif",
              "value": "isEmpty(this.wzName) == false && _.isObject(this.wzRoot().schema)",
              "statements": [
                {
                  "tag": "set",
                  "name": "set",
                  "value": "this.typeItem = this.wzRoot().schema.getTypeItem(this.wzName)",
                  "statements": []
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this.properties.length > 0 && _.isObject(this.typeItem) == false",
              "statements": [
                {
                  "tag": "set",
                  "name": "set",
                  "value": "this.typeItem = new md.object('Implicit', this.wzSourceLineInfo)",
                  "statements": []
                },
                {
                  "tag": "set",
                  "name": "set",
                  "value": "this.typeItem.wzParent = this;",
                  "statements": []
                },
                {
                  "tag": "foreach",
                  "name": "foreach",
                  "value": "item in this.properties",
                  "statements": [
                    {
                      "tag": "set",
                      "name": "set",
                      "value": "item.wzParent = this.typeItem;",
                      "statements": []
                    },
                    {
                      "tag": "_",
                      "name": "call",
                      "value": "this.typeItem.push(item)",
                      "statements": []
                    }
                  ]
                }
              ]
            }
          ],
          "comments": []
        },
        {
          "name": "wzverify",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "if",
              "name": "xif",
              "value": "isEmpty(this.wzName) == false && _.isObject(this.wzRoot().schema) == false || _.isObject(this.wzRoot().schema.getTypeItem(this.wzName)) == null",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ctx.addError",
                  "statements": [
                    {
                      "tag": "@",
                      "name": "jsPropertyOrValue",
                      "value": "'Referenced type not found: \"' + this.wzName + '\"', this",
                      "statements": []
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this.properties.length > 0 && _.isObject(this.typeItem) == true",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ctx.addError",
                  "statements": [
                    {
                      "tag": "@",
                      "name": "jsPropertyOrValue",
                      "value": "'A body cannot have both properties and a type defined', this",
                      "statements": []
                    }
                  ]
                }
              ]
            }
          ],
          "comments": []
        }
      ],
      "comments": [
        "Some method verbs expect the resource to be sent as a request body.",
        "For example, to create a resource, the request must include the details of the resource to create.",
        "Resources CAN have alternate representations.",
        "For example, an API might support both JSON and XML representations.",
        "A method's body is defined in the body property as a hashmap,",
        "in which the key MUST be a valid media type.",
        "Can be declared in",
        "a method",
        "a responseStatus",
        "The IttfNodeValue if declared is the name of the body type, that must be",
        "declared inside the types node at the root raml node"
      ]
    },
    {
      "name": "mediaTypes",
      "super": "ramlItem",
      "isRoot": false,
      "tags": [
        "media-types"
      ],
      "flags": "",
      "attributes": [],
      "relations": [
        {
          "name": "mediaType",
          "role": "mediaTypes",
          "tags": [
            "media-type"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": []
    },
    {
      "name": "mediaType",
      "super": "ramlItem",
      "isRoot": false,
      "tags": [
        "media-type"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "typeItem",
          "role": null,
          "tags": [
            "typeItem"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "property",
          "role": "properties",
          "tags": [
            "@"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": [
            "Implicit type",
            "Properties can be defined directly inside the body node (without an object node)"
          ]
        },
        {
          "name": "example",
          "role": "examples",
          "tags": [
            "example"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [
        {
          "name": "applicationJson",
          "tags": [
            "application/json"
          ]
        },
        {
          "name": "textXml",
          "tags": [
            "text/xml"
          ]
        },
        {
          "name": "textHtml",
          "tags": [
            "text/html"
          ]
        },
        {
          "name": "textCss",
          "tags": [
            "text/css"
          ]
        },
        {
          "name": "textJavascript",
          "tags": [
            "application/javascript"
          ]
        }
      ],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "if",
              "name": "xif",
              "value": "!this.name",
              "statements": [
                {
                  "tag": "set",
                  "name": "set",
                  "value": "this.name = this.wzName",
                  "statements": []
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "isEmpty(this.type) == false && _.isObject(this.wzRoot().schema)",
              "statements": [
                {
                  "tag": "set",
                  "name": "set",
                  "value": "this.typeItem = this.wzRoot().schema.getTypeItem(this.type)",
                  "statements": []
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this.properties.length > 0 && _.isObject(this.typeItem) == false",
              "statements": [
                {
                  "tag": "set",
                  "name": "set",
                  "value": "this.typeItem = new md.object('Implicit', this.wzSourceLineInfo)",
                  "statements": []
                },
                {
                  "tag": "set",
                  "name": "set",
                  "value": "this.typeItem.wzParent = this;",
                  "statements": []
                },
                {
                  "tag": "foreach",
                  "name": "foreach",
                  "value": "item in this.properties",
                  "statements": [
                    {
                      "tag": "set",
                      "name": "set",
                      "value": "item.wzParent = this.typeItem;",
                      "statements": []
                    },
                    {
                      "tag": "_",
                      "name": "call",
                      "value": "this.typeItem.push(item)",
                      "statements": []
                    }
                  ]
                }
              ]
            }
          ],
          "comments": []
        },
        {
          "name": "wzverify",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "if",
              "name": "xif",
              "value": "isEmpty(this.type) == false && _.isObject(this.wzRoot().schema) == false || _.isObject(this.wzRoot().schema.getTypeItem(this.type)) == null",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ctx.addError",
                  "statements": [
                    {
                      "tag": "@",
                      "name": "jsPropertyOrValue",
                      "value": "'Referenced type not found: \"' + this.type + '\"'",
                      "statements": []
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this.properties.length > 0 && _.isObject(this.typeItem) == true",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ctx.addError",
                  "statements": [
                    {
                      "tag": "@",
                      "name": "jsPropertyOrValue",
                      "value": "'A body cannot have both properties and a type defined', this",
                      "statements": []
                    }
                  ]
                }
              ]
            }
          ],
          "comments": []
        }
      ],
      "comments": [
        "(Optional) The media types returned by API responses,",
        "and expected from API requests that accept a body,",
        "MAY be defaulted by specifying the mediaType property.",
        "This property is specified at the root level of the API definition.",
        "The property's value MAY be a single string with a valid media type",
        "[example]",
        "media-type text/xml",
        "media-type application/json"
      ]
    },
    {
      "name": "applicationJson",
      "super": "mediaType",
      "isRoot": false,
      "tags": [
        "application/json"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "flags": "",
          "inheritedFrom": "mediaType",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "typeItem",
          "role": null,
          "tags": [
            "typeItem"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": "mediaType",
          "comments": []
        },
        {
          "name": "property",
          "role": "properties",
          "tags": [
            "@"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "mediaType",
          "comments": [
            "Implicit type",
            "Properties can be defined directly inside the body node (without an object node)"
          ]
        },
        {
          "name": "example",
          "role": "examples",
          "tags": [
            "example"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "mediaType",
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = \"application/json\"",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "textXml",
      "super": "mediaType",
      "isRoot": false,
      "tags": [
        "text/xml"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "flags": "",
          "inheritedFrom": "mediaType",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "typeItem",
          "role": null,
          "tags": [
            "typeItem"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": "mediaType",
          "comments": []
        },
        {
          "name": "property",
          "role": "properties",
          "tags": [
            "@"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "mediaType",
          "comments": [
            "Implicit type",
            "Properties can be defined directly inside the body node (without an object node)"
          ]
        },
        {
          "name": "example",
          "role": "examples",
          "tags": [
            "example"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "mediaType",
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = \"text/xml\"",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "textHtml",
      "super": "mediaType",
      "isRoot": false,
      "tags": [
        "text/html"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "flags": "",
          "inheritedFrom": "mediaType",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "typeItem",
          "role": null,
          "tags": [
            "typeItem"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": "mediaType",
          "comments": []
        },
        {
          "name": "property",
          "role": "properties",
          "tags": [
            "@"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "mediaType",
          "comments": [
            "Implicit type",
            "Properties can be defined directly inside the body node (without an object node)"
          ]
        },
        {
          "name": "example",
          "role": "examples",
          "tags": [
            "example"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "mediaType",
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = \"text/html\"",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "textCss",
      "super": "mediaType",
      "isRoot": false,
      "tags": [
        "text/css"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "flags": "",
          "inheritedFrom": "mediaType",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "typeItem",
          "role": null,
          "tags": [
            "typeItem"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": "mediaType",
          "comments": []
        },
        {
          "name": "property",
          "role": "properties",
          "tags": [
            "@"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "mediaType",
          "comments": [
            "Implicit type",
            "Properties can be defined directly inside the body node (without an object node)"
          ]
        },
        {
          "name": "example",
          "role": "examples",
          "tags": [
            "example"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "mediaType",
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = \"text/css\"",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "textJavascript",
      "super": "mediaType",
      "isRoot": false,
      "tags": [
        "application/javascript"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "flags": "",
          "inheritedFrom": "mediaType",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "typeItem",
          "role": null,
          "tags": [
            "typeItem"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": "mediaType",
          "comments": []
        },
        {
          "name": "property",
          "role": "properties",
          "tags": [
            "@"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "mediaType",
          "comments": [
            "Implicit type",
            "Properties can be defined directly inside the body node (without an object node)"
          ]
        },
        {
          "name": "example",
          "role": "examples",
          "tags": [
            "example"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "mediaType",
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = \"application/javascript\"",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "responses",
      "super": "ramlItem",
      "isRoot": false,
      "tags": [
        "responses"
      ],
      "flags": "",
      "attributes": [],
      "relations": [
        {
          "name": "responseStatus",
          "role": "responseStatuses",
          "tags": [
            "status"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": [
        "Responses MUST be a map of one or more HTTP status codes,",
        "where each status code itself is a map that describes that status code.",
        "Each response MAY contain a body property, which conforms to the same structure",
        "as request body properties (see Body).",
        "Responses that can return more than one response code",
        "MAY therefore have multiple bodies defined.",
        "For APIs without a priori knowledge of the response types for their responses,",
        "\"*slash*\" MAY be used to indicate that responses that do not matching other defined data types MUST be accepted.",
        "Processing applications MUST match the most descriptive media type first if \"*slash*\" is used."
      ]
    },
    {
      "name": "responseStatus",
      "super": "ramlItem",
      "isRoot": false,
      "tags": [
        "status"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "description",
          "type": "string",
          "tags": [
            "description"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "body",
          "role": null,
          "tags": [
            "body"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "header",
          "role": "headers",
          "tags": [
            "header"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [
        {
          "name": "Status200",
          "tags": [
            "200"
          ]
        },
        {
          "name": "Status201",
          "tags": [
            "201"
          ]
        },
        {
          "name": "Status204",
          "tags": [
            "204"
          ]
        },
        {
          "name": "Status400",
          "tags": [
            "400"
          ]
        }
      ],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "if",
              "name": "xif",
              "value": "!this.name",
              "statements": [
                {
                  "tag": "set",
                  "name": "set",
                  "value": "this.name = this.wzName",
                  "statements": []
                }
              ]
            }
          ],
          "comments": []
        },
        {
          "name": "getMediaTypes",
          "isStatic": false,
          "isKnownMethod": false,
          "params": [],
          "statements": [
            {
              "tag": "var",
              "name": "xvar",
              "value": "ret = []",
              "statements": []
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "_.isObject(this.body)",
              "statements": [
                {
                  "tag": "foreach",
                  "name": "foreach",
                  "value": "item in this.body.mediaTypes",
                  "statements": [
                    {
                      "tag": "_",
                      "name": "call",
                      "value": "ret.push(item)",
                      "statements": []
                    }
                  ]
                }
              ]
            },
            {
              "tag": "return",
              "name": "xreturn",
              "value": "ret",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "Status200",
      "super": "responseStatus",
      "isRoot": false,
      "tags": [
        "200"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "description",
          "type": "string",
          "tags": [
            "description"
          ],
          "flags": "",
          "inheritedFrom": "responseStatus",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "body",
          "role": null,
          "tags": [
            "body"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": "responseStatus",
          "comments": []
        },
        {
          "name": "header",
          "role": "headers",
          "tags": [
            "header"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "responseStatus",
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = '200'",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "Status201",
      "super": "responseStatus",
      "isRoot": false,
      "tags": [
        "201"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "description",
          "type": "string",
          "tags": [
            "description"
          ],
          "flags": "",
          "inheritedFrom": "responseStatus",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "body",
          "role": null,
          "tags": [
            "body"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": "responseStatus",
          "comments": []
        },
        {
          "name": "header",
          "role": "headers",
          "tags": [
            "header"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "responseStatus",
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = '201'",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "Status204",
      "super": "responseStatus",
      "isRoot": false,
      "tags": [
        "204"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "description",
          "type": "string",
          "tags": [
            "description"
          ],
          "flags": "",
          "inheritedFrom": "responseStatus",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "body",
          "role": null,
          "tags": [
            "body"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": "responseStatus",
          "comments": []
        },
        {
          "name": "header",
          "role": "headers",
          "tags": [
            "header"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "responseStatus",
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = '204'",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "Status400",
      "super": "responseStatus",
      "isRoot": false,
      "tags": [
        "400"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "description",
          "type": "string",
          "tags": [
            "description"
          ],
          "flags": "",
          "inheritedFrom": "responseStatus",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "body",
          "role": null,
          "tags": [
            "body"
          ],
          "cardinality": "one-to-one",
          "flags": "is-one-to-one ",
          "inheritedFrom": "responseStatus",
          "comments": []
        },
        {
          "name": "header",
          "role": "headers",
          "tags": [
            "header"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "responseStatus",
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = '400'",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "security",
      "super": "ramlItem",
      "isRoot": false,
      "tags": [
        "security"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "description",
          "type": "string",
          "tags": [
            "description"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "The description attribute MAY be used to describe a securitySchemes property."
          ]
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "none",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "none",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "OAuth.1.0",
                  "comments": [
                    "The API's authentication requires using OAuth 1.0 as described in RFC5849 [RFC5849]"
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "OAuth.2.0",
                  "comments": [
                    "The API's authentication requires using OAuth 2.0 as described in RFC6749 [RFC6749]"
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "Basic",
                  "comments": [
                    "The API's authentication relies on using Basic Access Authentication as described in RFC2617 [RFC2617]"
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "Digest",
                  "comments": [
                    "The API's authentication relies on using Digest Access Authentication as described in RFC2617 [RFC2617]"
                  ]
                },
                {
                  "type": "enumFacet",
                  "value": "x-{other}",
                  "comments": [
                    "The API's authentication relies in another authentication method."
                  ]
                }
              ],
              "comments": []
            }
          ],
          "comments": [
            "The type attribute MAY be used to convey information about authentication flows and mechanisms to processing applications such as Documentation Generators and Client generators. Processing applications SHOULD provide handling for the following schemes:"
          ]
        }
      ],
      "relations": [
        {
          "name": "setting",
          "role": "settings",
          "tags": [
            "setting"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": [
        ""
      ]
    },
    {
      "name": "setting",
      "super": "ramlItem",
      "isRoot": false,
      "tags": [
        "setting"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "requestTokenUri",
          "type": "string",
          "tags": [
            "requestTokenUri"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "The URI of the Temporary Credential Request endpoint as defined in RFC5849 Section 2.1"
          ]
        },
        {
          "name": "authorizationUri",
          "type": "string",
          "tags": [
            "authorizationUri"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "The URI of the Resource Owner Authorization endpoint as defined in RFC5849 Section 2.2"
          ]
        },
        {
          "name": "tokenCredentialsUri",
          "type": "string",
          "tags": [
            "tokenCredentialsUri"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "The URI of the Token Request endpoint as defined in RFC5849 Section 2.3"
          ]
        },
        {
          "name": "authorizationUri",
          "type": "string",
          "tags": [
            "authorizationUri"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "The URI of the Authorization Endpoint as defined in RFC6749 [RFC6748] Section 3.1"
          ]
        },
        {
          "name": "accessTokenUri",
          "type": "string",
          "tags": [
            "accessTokenUri"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "The URI of the Token Endpoint as defined in RFC6749 [RFC6748] Section 3.2"
          ]
        },
        {
          "name": "authorizationGrants",
          "type": "string",
          "tags": [
            "authorizationGrants"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "A list of the Authorization grants supported by the API As defined in RFC6749 [RFC6749] Sections 4.1, 4.2, 4.3 and 4.4, can be any of: code, token, owner or credentials."
          ]
        },
        {
          "name": "scopes",
          "type": "string",
          "tags": [
            "scopes"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "A list of scopes supported by the API as defined in RFC6749 [RFC6749] Section 3.3"
          ]
        }
      ],
      "relations": [
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": []
    },
    {
      "name": "schema",
      "super": "ramlItem",
      "isRoot": false,
      "tags": [
        "types"
      ],
      "flags": "",
      "attributes": [],
      "relations": [
        {
          "name": "typeItem",
          "role": "typeItems",
          "tags": [
            "typeItem"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": []
    },
    {
      "name": "typeItem",
      "super": "ramlItem",
      "isRoot": false,
      "tags": [
        "typeItem"
      ],
      "flags": "is-abstract ",
      "attributes": [
        {
          "name": "title",
          "type": "string",
          "tags": [
            "title"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "any",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "any",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "object",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "array",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "union",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "external",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        },
        {
          "name": "isScalar",
          "type": "boolean",
          "tags": [
            "isScalar"
          ],
          "default": "false",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [
        {
          "name": "any",
          "tags": [
            "any"
          ]
        },
        {
          "name": "object",
          "tags": [
            "object"
          ]
        },
        {
          "name": "array",
          "tags": [
            "array"
          ]
        },
        {
          "name": "external",
          "tags": [
            "external"
          ]
        },
        {
          "name": "union",
          "tags": [
            "union"
          ]
        },
        {
          "name": "scalar",
          "tags": [
            "scalar"
          ]
        },
        {
          "name": "string",
          "tags": [
            "string"
          ]
        },
        {
          "name": "number",
          "tags": [
            "number"
          ]
        },
        {
          "name": "integer",
          "tags": [
            "integer"
          ]
        },
        {
          "name": "xboolean",
          "tags": [
            "boolean"
          ]
        },
        {
          "name": "dateOnly",
          "tags": [
            "date-only"
          ]
        },
        {
          "name": "timeOnly",
          "tags": [
            "time-only"
          ]
        },
        {
          "name": "dateTimeOnly",
          "tags": [
            "datetime-only"
          ]
        },
        {
          "name": "datetime",
          "tags": [
            "datetime"
          ]
        },
        {
          "name": "file",
          "tags": [
            "file"
          ]
        },
        {
          "name": "nil",
          "tags": [
            "nil"
          ]
        }
      ],
      "restricts": [],
      "methods": [],
      "comments": []
    },
    {
      "name": "any",
      "super": "typeItem",
      "isRoot": false,
      "tags": [
        "any"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "title",
          "type": "string",
          "tags": [
            "title"
          ],
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "any",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "any",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "object",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "array",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "union",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "external",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        },
        {
          "name": "isScalar",
          "type": "boolean",
          "tags": [
            "isScalar"
          ],
          "default": "false",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [
        {
          "name": "object",
          "tags": [
            "object"
          ]
        },
        {
          "name": "array",
          "tags": [
            "array"
          ]
        },
        {
          "name": "external",
          "tags": [
            "external"
          ]
        },
        {
          "name": "union",
          "tags": [
            "union"
          ]
        },
        {
          "name": "scalar",
          "tags": [
            "scalar"
          ]
        },
        {
          "name": "string",
          "tags": [
            "string"
          ]
        },
        {
          "name": "number",
          "tags": [
            "number"
          ]
        },
        {
          "name": "integer",
          "tags": [
            "integer"
          ]
        },
        {
          "name": "xboolean",
          "tags": [
            "boolean"
          ]
        },
        {
          "name": "dateOnly",
          "tags": [
            "date-only"
          ]
        },
        {
          "name": "timeOnly",
          "tags": [
            "time-only"
          ]
        },
        {
          "name": "dateTimeOnly",
          "tags": [
            "datetime-only"
          ]
        },
        {
          "name": "datetime",
          "tags": [
            "datetime"
          ]
        },
        {
          "name": "file",
          "tags": [
            "file"
          ]
        },
        {
          "name": "nil",
          "tags": [
            "nil"
          ]
        }
      ],
      "restricts": [],
      "methods": [
        {
          "name": "getFacets",
          "isStatic": false,
          "isKnownMethod": false,
          "params": [],
          "statements": [
            {
              "tag": "var",
              "name": "xvar",
              "value": "ret = []",
              "statements": []
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['type']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'type'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['type']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'string'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['title']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'title'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['title']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'string'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "return",
              "name": "xreturn",
              "value": "ret",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "object",
      "super": "any",
      "isRoot": false,
      "tags": [
        "object"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "super",
          "type": "string",
          "tags": [
            "super"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": []
        },
        {
          "name": "minProperties",
          "type": "string",
          "tags": [
            "min-properties"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "The minimum number of properties allowed for instances of this type."
          ]
        },
        {
          "name": "maxProperties",
          "type": "string",
          "tags": [
            "max-properties"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "The maximum number of properties allowed for instances of this type."
          ]
        },
        {
          "name": "additionalProperties",
          "type": "boolean",
          "tags": [
            "additional-properties"
          ],
          "default": "true",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "A Boolean that indicates if an object instance has additional properties."
          ]
        },
        {
          "name": "discriminator",
          "type": "string",
          "tags": [
            "discriminator"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "Determines the concrete type of an individual object at runtime when,",
            "for example, payloads contain ambiguous types due to unions or inheritance.",
            "The value must match the name of one of the declared properties of a type.",
            "Unsupported practices are inline type declarations and",
            "using discriminator with non-scalar properties."
          ]
        },
        {
          "name": "discriminatorValue",
          "type": "string",
          "tags": [
            "discriminator-value"
          ],
          "default": "wzName",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "Identifies the declaring type. Requires including a discriminator facet",
            "in the type declaration.",
            "A valid value is an actual value that might identify the type of",
            "an individual object and is unique in the hierarchy of the type.",
            "Inline type declarations are not supported."
          ]
        },
        {
          "name": "title",
          "type": "string",
          "tags": [
            "title"
          ],
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "any",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "any",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "object",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "array",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "union",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "external",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        },
        {
          "name": "isScalar",
          "type": "boolean",
          "tags": [
            "isScalar"
          ],
          "default": "false",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "property",
          "role": "properties",
          "tags": [
            "@"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": [
            "The properties that instances of this type can or must have."
          ]
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.type = 'object'",
              "statements": []
            },
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = this.wzName",
              "statements": []
            }
          ],
          "comments": []
        },
        {
          "name": "getFacets",
          "isStatic": false,
          "isKnownMethod": false,
          "params": [],
          "statements": [
            {
              "tag": "var",
              "name": "xvar",
              "value": "ret = []",
              "statements": []
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['type']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'type'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['type']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'string'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['title']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'title'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['title']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'string'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['minProperties']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'minProperties'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['minProperties']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'integer'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['maxProperties']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'maxProperties'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['maxProperties']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'integer'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['additionalProperties']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'additionalProperties'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['additionalProperties']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'boolean'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['discriminator']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'discriminator'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['discriminator']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'string'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "return",
              "name": "xreturn",
              "value": "ret",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "property",
      "super": null,
      "isRoot": false,
      "tags": [
        "@"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "displayName",
          "type": "string",
          "tags": [
            "label"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": []
        },
        {
          "name": "isRequired",
          "type": "boolean",
          "tags": [
            "is-required"
          ],
          "default": "true",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "string",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        }
      ],
      "relations": [],
      "derived": [
        {
          "name": "numberProperty",
          "tags": [
            "number"
          ]
        },
        {
          "name": "booleanProperty",
          "tags": [
            "boolean"
          ]
        },
        {
          "name": "stringProperty",
          "tags": [
            "string"
          ]
        },
        {
          "name": "datetimeProperty",
          "tags": [
            "datetime"
          ]
        },
        {
          "name": "fileProperty",
          "tags": [
            "file"
          ]
        },
        {
          "name": "integerProperty",
          "tags": [
            "integer"
          ]
        },
        {
          "name": "nilProperty",
          "tags": [
            "nil"
          ]
        },
        {
          "name": "dateOnlyProperty",
          "tags": [
            "date-only"
          ]
        },
        {
          "name": "timeOnlyProperty",
          "tags": [
            "time-only"
          ]
        },
        {
          "name": "datetimeOnlyProperty",
          "tags": [
            "datetime-only"
          ]
        }
      ],
      "restricts": [],
      "methods": [
        {
          "name": "getFacets",
          "isStatic": false,
          "isKnownMethod": false,
          "params": [],
          "statements": [
            {
              "tag": "var",
              "name": "xvar",
              "value": "ret = []",
              "statements": []
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['type']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'type'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['type']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'string'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['displayName']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'displayName'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['displayName']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'string'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['isRequired']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'isRequired'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['isRequired']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'boolean'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "return",
              "name": "xreturn",
              "value": "ret",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "numberProperty",
      "super": "property",
      "isRoot": false,
      "tags": [
        "number"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "displayName",
          "type": "string",
          "tags": [
            "label"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [],
          "comments": []
        },
        {
          "name": "isRequired",
          "type": "boolean",
          "tags": [
            "is-required"
          ],
          "default": "true",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "string",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        }
      ],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.type = \"number\"",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "booleanProperty",
      "super": "property",
      "isRoot": false,
      "tags": [
        "boolean"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "displayName",
          "type": "string",
          "tags": [
            "label"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [],
          "comments": []
        },
        {
          "name": "isRequired",
          "type": "boolean",
          "tags": [
            "is-required"
          ],
          "default": "true",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "string",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        }
      ],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.type = \"boolean\"",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "stringProperty",
      "super": "property",
      "isRoot": false,
      "tags": [
        "string"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "displayName",
          "type": "string",
          "tags": [
            "label"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [],
          "comments": []
        },
        {
          "name": "isRequired",
          "type": "boolean",
          "tags": [
            "is-required"
          ],
          "default": "true",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "string",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        }
      ],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.type = \"string\"",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "datetimeProperty",
      "super": "property",
      "isRoot": false,
      "tags": [
        "datetime"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "displayName",
          "type": "string",
          "tags": [
            "label"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [],
          "comments": []
        },
        {
          "name": "isRequired",
          "type": "boolean",
          "tags": [
            "is-required"
          ],
          "default": "true",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "string",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        }
      ],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.type = \"datetime\"",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "fileProperty",
      "super": "property",
      "isRoot": false,
      "tags": [
        "file"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "displayName",
          "type": "string",
          "tags": [
            "label"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [],
          "comments": []
        },
        {
          "name": "isRequired",
          "type": "boolean",
          "tags": [
            "is-required"
          ],
          "default": "true",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "string",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        }
      ],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.type = \"file\"",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "integerProperty",
      "super": "property",
      "isRoot": false,
      "tags": [
        "integer"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "displayName",
          "type": "string",
          "tags": [
            "label"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [],
          "comments": []
        },
        {
          "name": "isRequired",
          "type": "boolean",
          "tags": [
            "is-required"
          ],
          "default": "true",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "string",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        }
      ],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.type = \"integer\"",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "nilProperty",
      "super": "property",
      "isRoot": false,
      "tags": [
        "nil"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "displayName",
          "type": "string",
          "tags": [
            "label"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [],
          "comments": []
        },
        {
          "name": "isRequired",
          "type": "boolean",
          "tags": [
            "is-required"
          ],
          "default": "true",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "string",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        }
      ],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.type = \"nil\"",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "dateOnlyProperty",
      "super": "property",
      "isRoot": false,
      "tags": [
        "date-only"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "displayName",
          "type": "string",
          "tags": [
            "label"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [],
          "comments": []
        },
        {
          "name": "isRequired",
          "type": "boolean",
          "tags": [
            "is-required"
          ],
          "default": "true",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "string",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        }
      ],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.type = \"date-only\"",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "timeOnlyProperty",
      "super": "property",
      "isRoot": false,
      "tags": [
        "time-only"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "displayName",
          "type": "string",
          "tags": [
            "label"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [],
          "comments": []
        },
        {
          "name": "isRequired",
          "type": "boolean",
          "tags": [
            "is-required"
          ],
          "default": "true",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "string",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        }
      ],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.type = \"time-only\"",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "datetimeOnlyProperty",
      "super": "property",
      "isRoot": false,
      "tags": [
        "datetime-only"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "displayName",
          "type": "string",
          "tags": [
            "label"
          ],
          "default": "",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [],
          "comments": []
        },
        {
          "name": "isRequired",
          "type": "boolean",
          "tags": [
            "is-required"
          ],
          "default": "true",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "string",
          "flags": "",
          "inheritedFrom": "property",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        }
      ],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.type = \"datetime-only\"",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "array",
      "super": "any",
      "isRoot": false,
      "tags": [
        "array"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "title",
          "type": "string",
          "tags": [
            "title"
          ],
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "any",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "any",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "object",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "array",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "union",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "external",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        },
        {
          "name": "isScalar",
          "type": "boolean",
          "tags": [
            "isScalar"
          ],
          "default": "false",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.type = 'array'",
              "statements": []
            },
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = this.wzName",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "external",
      "super": "any",
      "isRoot": false,
      "tags": [
        "external"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "title",
          "type": "string",
          "tags": [
            "title"
          ],
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "any",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "any",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "object",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "array",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "union",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "external",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        },
        {
          "name": "isScalar",
          "type": "boolean",
          "tags": [
            "isScalar"
          ],
          "default": "false",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.type = 'external'",
              "statements": []
            },
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = this.wzName",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "union",
      "super": "any",
      "isRoot": false,
      "tags": [
        "union"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "title",
          "type": "string",
          "tags": [
            "title"
          ],
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "any",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "any",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "object",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "array",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "union",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "external",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        },
        {
          "name": "isScalar",
          "type": "boolean",
          "tags": [
            "isScalar"
          ],
          "default": "false",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "typeItem",
          "role": "typeItems",
          "tags": [
            "typeItem"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.type = 'union'",
              "statements": []
            },
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = this.wzName",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "scalar",
      "super": "any",
      "isRoot": false,
      "tags": [
        "scalar"
      ],
      "flags": "is-abstract ",
      "attributes": [
        {
          "name": "title",
          "type": "string",
          "tags": [
            "title"
          ],
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "any",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "any",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "object",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "array",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "union",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "external",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        },
        {
          "name": "isScalar",
          "type": "boolean",
          "tags": [
            "isScalar"
          ],
          "default": "false",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [
        {
          "name": "string",
          "tags": [
            "string"
          ]
        },
        {
          "name": "number",
          "tags": [
            "number"
          ]
        },
        {
          "name": "integer",
          "tags": [
            "integer"
          ]
        },
        {
          "name": "xboolean",
          "tags": [
            "boolean"
          ]
        },
        {
          "name": "dateOnly",
          "tags": [
            "date-only"
          ]
        },
        {
          "name": "timeOnly",
          "tags": [
            "time-only"
          ]
        },
        {
          "name": "dateTimeOnly",
          "tags": [
            "datetime-only"
          ]
        },
        {
          "name": "datetime",
          "tags": [
            "datetime"
          ]
        },
        {
          "name": "file",
          "tags": [
            "file"
          ]
        },
        {
          "name": "nil",
          "tags": [
            "nil"
          ]
        }
      ],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.isScalar = true",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "string",
      "super": "scalar",
      "isRoot": false,
      "tags": [
        "string"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "title",
          "type": "string",
          "tags": [
            "title"
          ],
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "any",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "any",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "object",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "array",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "union",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "external",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        },
        {
          "name": "isScalar",
          "type": "boolean",
          "tags": [
            "isScalar"
          ],
          "default": "false",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.type = 'string'",
              "statements": []
            },
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = this.wzName",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "number",
      "super": "scalar",
      "isRoot": false,
      "tags": [
        "number"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "minimum",
          "type": "integer",
          "tags": [
            "minimum"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "The minimum value of the parameter. Applicable only to parameters of type number or integer."
          ]
        },
        {
          "name": "maximum",
          "type": "integer",
          "tags": [
            "maximum"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "The maximum value of the parameter. Applicable only to parameters of type number or integer."
          ]
        },
        {
          "name": "format",
          "type": "string",
          "tags": [
            "format"
          ],
          "default": "float",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "int32",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "int64",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "int",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "long",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "float",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "double",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "int16",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "int8",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": [
            "The format of the value."
          ]
        },
        {
          "name": "multipleOf",
          "type": "string",
          "tags": [
            "multipleOf"
          ],
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "A numeric instance is valid against \"multipleOf\" if the result of dividing the instance by this keyword's value is an integer."
          ]
        },
        {
          "name": "title",
          "type": "string",
          "tags": [
            "title"
          ],
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "any",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "any",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "object",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "array",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "union",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "external",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        },
        {
          "name": "isScalar",
          "type": "boolean",
          "tags": [
            "isScalar"
          ],
          "default": "false",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [
        {
          "name": "integer",
          "tags": [
            "integer"
          ]
        }
      ],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "if",
              "name": "xif",
              "value": "this.type === 'any'",
              "statements": [
                {
                  "tag": "set",
                  "name": "set",
                  "value": "this.type = 'number'",
                  "statements": []
                },
                {
                  "tag": "set",
                  "name": "set",
                  "value": "this.name = this.wzName",
                  "statements": []
                }
              ]
            }
          ],
          "comments": []
        },
        {
          "name": "getFacets",
          "isStatic": false,
          "isKnownMethod": false,
          "params": [],
          "statements": [
            {
              "tag": "var",
              "name": "xvar",
              "value": "ret = []",
              "statements": []
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['type']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'type'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['type']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'string'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['title']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'title'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['title']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'string'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['minimum']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'minimum'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['minimum']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'integer'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['maximum']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'maximum'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['maximum']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'integer'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['format']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'format'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['format']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'string'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['multipleOf']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'multipleOf'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['multipleOf']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'string'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "return",
              "name": "xreturn",
              "value": "ret",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": []
    },
    {
      "name": "integer",
      "super": "number",
      "isRoot": false,
      "tags": [
        "integer"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "minimum",
          "type": "integer",
          "tags": [
            "minimum"
          ],
          "flags": "",
          "inheritedFrom": "number",
          "restricts": [],
          "comments": [
            "The minimum value of the parameter. Applicable only to parameters of type number or integer."
          ]
        },
        {
          "name": "maximum",
          "type": "integer",
          "tags": [
            "maximum"
          ],
          "flags": "",
          "inheritedFrom": "number",
          "restricts": [],
          "comments": [
            "The maximum value of the parameter. Applicable only to parameters of type number or integer."
          ]
        },
        {
          "name": "format",
          "type": "string",
          "tags": [
            "format"
          ],
          "default": "float",
          "flags": "",
          "inheritedFrom": "number",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "int32",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "int64",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "int",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "long",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "float",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "double",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "int16",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "int8",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": [
            "The format of the value."
          ]
        },
        {
          "name": "multipleOf",
          "type": "string",
          "tags": [
            "multipleOf"
          ],
          "flags": "",
          "inheritedFrom": "number",
          "restricts": [],
          "comments": [
            "A numeric instance is valid against \"multipleOf\" if the result of dividing the instance by this keyword's value is an integer."
          ]
        },
        {
          "name": "title",
          "type": "string",
          "tags": [
            "title"
          ],
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "any",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "any",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "object",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "array",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "union",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "external",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        },
        {
          "name": "isScalar",
          "type": "boolean",
          "tags": [
            "isScalar"
          ],
          "default": "false",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.type = 'integer'",
              "statements": []
            },
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = this.wzName",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": [
        "A subset of JSON numbers that are positive and negative multiples of 1. The integer type inherits its facets from the number type."
      ]
    },
    {
      "name": "xboolean",
      "super": "scalar",
      "isRoot": false,
      "tags": [
        "boolean"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "title",
          "type": "string",
          "tags": [
            "title"
          ],
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "any",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "any",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "object",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "array",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "union",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "external",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        },
        {
          "name": "isScalar",
          "type": "boolean",
          "tags": [
            "isScalar"
          ],
          "default": "false",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.type = 'boolean'",
              "statements": []
            },
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = this.wzName",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": [
        "A JSON boolean without any additional facets."
      ]
    },
    {
      "name": "dateOnly",
      "super": "scalar",
      "isRoot": false,
      "tags": [
        "date-only"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "title",
          "type": "string",
          "tags": [
            "title"
          ],
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "any",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "any",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "object",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "array",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "union",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "external",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        },
        {
          "name": "isScalar",
          "type": "boolean",
          "tags": [
            "isScalar"
          ],
          "default": "false",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.type = 'date-only'",
              "statements": []
            },
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = this.wzName",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": [
        "The \"full-date\" notation of RFC3339, namely yyyy-mm-dd. Does not support time or time zone-offset notation."
      ]
    },
    {
      "name": "timeOnly",
      "super": "scalar",
      "isRoot": false,
      "tags": [
        "time-only"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "title",
          "type": "string",
          "tags": [
            "title"
          ],
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "any",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "any",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "object",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "array",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "union",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "external",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        },
        {
          "name": "isScalar",
          "type": "boolean",
          "tags": [
            "isScalar"
          ],
          "default": "false",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.type = 'time-only'",
              "statements": []
            },
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = this.wzName",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": [
        "The \"partial-time\" notation of RFC3339, namely hh:mm:ss[.ff...]. Does not support date or time zone-offset notation."
      ]
    },
    {
      "name": "dateTimeOnly",
      "super": "scalar",
      "isRoot": false,
      "tags": [
        "datetime-only"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "title",
          "type": "string",
          "tags": [
            "title"
          ],
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "any",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "any",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "object",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "array",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "union",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "external",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        },
        {
          "name": "isScalar",
          "type": "boolean",
          "tags": [
            "isScalar"
          ],
          "default": "false",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.type = 'datetime-only'",
              "statements": []
            },
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = this.wzName",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": [
        "Combined date-only and time-only with a separator of \"T\", namely yyyy-mm-ddThh:mm:ss[.ff...]. Does not support a time zone offset."
      ]
    },
    {
      "name": "datetime",
      "super": "scalar",
      "isRoot": false,
      "tags": [
        "datetime"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "format",
          "type": "string",
          "tags": [
            "format"
          ],
          "default": "none",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "none",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "rfc3339",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "rfc2616",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": [
            "The additional facet format MUST be available only when the type equals datetime, and the value MUST be either rfc3339 or rfc2616. Any other values are invalid."
          ]
        },
        {
          "name": "title",
          "type": "string",
          "tags": [
            "title"
          ],
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "any",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "any",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "object",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "array",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "union",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "external",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        },
        {
          "name": "isScalar",
          "type": "boolean",
          "tags": [
            "isScalar"
          ],
          "default": "false",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.type = 'datetime'",
              "statements": []
            },
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = this.wzName",
              "statements": []
            }
          ],
          "comments": []
        },
        {
          "name": "getFacets",
          "isStatic": false,
          "isKnownMethod": false,
          "params": [],
          "statements": [
            {
              "tag": "var",
              "name": "xvar",
              "value": "ret = []",
              "statements": []
            },
            {
              "tag": "var",
              "name": "xvar",
              "value": "ret = []",
              "statements": []
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['type']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'type'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['type']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'string'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['title']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'title'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['title']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'string'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['format']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'format'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['format']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'string'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "return",
              "name": "xreturn",
              "value": "ret",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": [
        "A timestamp in one of the following formats: if the format is omitted or set to rfc3339, uses the \"date-time\" notation of RFC3339; if format is set to rfc2616, uses the format defined in RFC2616."
      ]
    },
    {
      "name": "file",
      "super": "scalar",
      "isRoot": false,
      "tags": [
        "file"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "minLength",
          "type": "integer",
          "tags": [
            "minLength"
          ],
          "default": "0",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "Specifies the minimum number of bytes for a parameter value. The value MUST be equal to or greater than 0."
          ]
        },
        {
          "name": "maxLength",
          "type": "integer",
          "tags": [
            "maxLength"
          ],
          "default": "2147483647",
          "flags": "",
          "inheritedFrom": null,
          "restricts": [],
          "comments": [
            "Specifies the maximum number of bytes for a parameter value. The value MUST be equal to or greater than 0."
          ]
        },
        {
          "name": "title",
          "type": "string",
          "tags": [
            "title"
          ],
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "any",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "any",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "object",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "array",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "union",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "external",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        },
        {
          "name": "isScalar",
          "type": "boolean",
          "tags": [
            "isScalar"
          ],
          "default": "false",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "fileType",
          "role": "fileTypes",
          "tags": [
            "fileType"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": [
            "A list of valid content-type strings for the file. The file type *slash* MUST be a valid value."
          ]
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.type = 'file'",
              "statements": []
            },
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = this.wzName",
              "statements": []
            }
          ],
          "comments": []
        },
        {
          "name": "getFacets",
          "isStatic": false,
          "isKnownMethod": false,
          "params": [],
          "statements": [
            {
              "tag": "var",
              "name": "xvar",
              "value": "ret = []",
              "statements": []
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['type']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'type'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['type']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'string'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['title']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'title'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['title']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'string'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['minLength']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'minLength'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['minLength']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'integer'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "if",
              "name": "xif",
              "value": "this['maxLength']",
              "statements": [
                {
                  "tag": "_",
                  "name": "call",
                  "value": "ret.push",
                  "statements": [
                    {
                      "tag": "{",
                      "name": "jsObject",
                      "value": "",
                      "statements": [
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "name 'maxLength'",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "value this['maxLength']",
                          "statements": []
                        },
                        {
                          "tag": "@",
                          "name": "jsPropertyOrValue",
                          "value": "facetType 'integer'",
                          "statements": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "tag": "return",
              "name": "xreturn",
              "value": "ret",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": [
        "The ​file​ type can constrain the content to send through forms. When this type is used in the context of web forms it SHOULD be represented as a valid file upload in JSON format. File content SHOULD be a base64-encoded string."
      ]
    },
    {
      "name": "fileType",
      "super": null,
      "isRoot": false,
      "tags": [
        "fileType"
      ],
      "flags": "",
      "attributes": [],
      "relations": [],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": [
        "A valid content-type strings for the file. The file type *slash* MUST be a valid value."
      ]
    },
    {
      "name": "nil",
      "super": "scalar",
      "isRoot": false,
      "tags": [
        "nil"
      ],
      "flags": "",
      "attributes": [
        {
          "name": "title",
          "type": "string",
          "tags": [
            "title"
          ],
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        },
        {
          "name": "type",
          "type": "string",
          "tags": [
            "type"
          ],
          "default": "any",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [
            {
              "facets": [
                {
                  "type": "enumFacet",
                  "value": "any",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "object",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "array",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "union",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "external",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "number",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "integer",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "boolean",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "string",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "datetime-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "date-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "time-only",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "file",
                  "comments": []
                },
                {
                  "type": "enumFacet",
                  "value": "nil",
                  "comments": []
                }
              ],
              "comments": []
            }
          ],
          "comments": []
        },
        {
          "name": "isScalar",
          "type": "boolean",
          "tags": [
            "isScalar"
          ],
          "default": "false",
          "flags": "",
          "inheritedFrom": "typeItem",
          "restricts": [],
          "comments": []
        }
      ],
      "relations": [
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [
        {
          "name": "wzinitialize",
          "isStatic": false,
          "isKnownMethod": true,
          "params": [],
          "statements": [
            {
              "tag": "set",
              "name": "set",
              "value": "this.type = 'nil'",
              "statements": []
            },
            {
              "tag": "set",
              "name": "set",
              "value": "this.name = this.wzName",
              "statements": []
            }
          ],
          "comments": []
        }
      ],
      "comments": [
        "In RAML, the type nil is a scalar type that allows only nil data values.",
        "Specifically, in YAML it allows only YAML's null (or its equivalent representations, such as ~),",
        "in JSON it allows only JSON's null, and in XML it allows only XML's xsi:nil.",
        "In headers, URI parameters, and query parameters, the nil type only allows",
        "the string value \"nil\" (case-sensitive); and in turn an instance having",
        "the string value \"nil\" (case-sensitive), when described with the nil type, deserializes to a nil value."
      ]
    },
    {
      "name": "example",
      "super": "ramlItem",
      "isRoot": false,
      "tags": [
        "example"
      ],
      "flags": "",
      "attributes": [],
      "relations": [
        {
          "name": "jsonItem",
          "role": "jsonItems",
          "tags": [
            "jsonItem"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": []
    },
    {
      "name": "jsonItem",
      "super": "ramlItem",
      "isRoot": false,
      "tags": [
        "jsonItem"
      ],
      "flags": "",
      "attributes": [],
      "relations": [
        {
          "name": "jsonItem",
          "role": "jsonItems",
          "tags": [
            "jsonItem"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": null,
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [
        {
          "name": "jsonObject",
          "tags": [
            "{"
          ]
        },
        {
          "name": "jsonArray",
          "tags": [
            "["
          ]
        },
        {
          "name": "jsonPropertyOrValue",
          "tags": [
            "@"
          ]
        }
      ],
      "restricts": [],
      "methods": [],
      "comments": []
    },
    {
      "name": "jsonObject",
      "super": "jsonItem",
      "isRoot": false,
      "tags": [
        "{"
      ],
      "flags": "",
      "attributes": [],
      "relations": [
        {
          "name": "jsonItem",
          "role": "jsonItems",
          "tags": [
            "jsonItem"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "jsonItem",
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": [
        "ittf:",
        "{",
        "@ name 'stefi'",
        "@ birth 1957",
        "@ friends",
        "[",
        "{",
        "@ name 'mario'",
        "@ birth 1957",
        "{",
        "@ name 'arturo'",
        "@ birth 1955",
        "@ age",
        "function",
        "return new Date().year() - birth",
        ""
      ]
    },
    {
      "name": "jsonArray",
      "super": "jsonItem",
      "isRoot": false,
      "tags": [
        "["
      ],
      "flags": "",
      "attributes": [],
      "relations": [
        {
          "name": "jsonItem",
          "role": "jsonItems",
          "tags": [
            "jsonItem"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "jsonItem",
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": []
    },
    {
      "name": "jsonPropertyOrValue",
      "super": "jsonItem",
      "isRoot": false,
      "tags": [
        "@"
      ],
      "flags": "",
      "attributes": [],
      "relations": [
        {
          "name": "jsonItem",
          "role": "jsonItems",
          "tags": [
            "jsonItem"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "jsonItem",
          "comments": []
        },
        {
          "name": "annotation",
          "role": "annotations",
          "tags": [
            "("
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        },
        {
          "name": "comment",
          "role": "comments",
          "tags": [
            "#"
          ],
          "cardinality": "one-to-many",
          "flags": "",
          "inheritedFrom": "ramlItem",
          "comments": []
        }
      ],
      "derived": [],
      "restricts": [],
      "methods": [],
      "comments": []
    }
  ]
}