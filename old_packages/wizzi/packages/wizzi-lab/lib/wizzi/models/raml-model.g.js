/*
    artifact generator: C:\My\wizzi\v5\node_modules\wizzi-legacy-v4\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\v5\node_modules\wizzi-core\lib\artifacts\wfschema\model\gen\ittf\wfschema-model.js.ittf
    utc time: Sat, 22 Sep 2018 10:57:58 GMT
*/
'use strict';
// generated by wizzi.codegen.js.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var wzutils = require('wizzi-utils');
var verify = wzutils.verify;
var parseurl = require('parseurl');


var _md = module.exports = {};

var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row, col, sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();

_md.wzSourceLineInfo = wzSourceLineInfo;
var ramlBase = (function () {
    function ramlBase(name, sourceLineInfo) {
        _classCallCheck(this, ramlBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    ramlBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    ramlBase.prototype.wzSourceFilepath = function(sourceKey) {
        return this.wzRoot().loadHistory.getIttfDocumentUri(sourceKey);
    }
    ramlBase.prototype.wzVerify = function() {
    }
    ramlBase.prototype.wzInitialize = function() {
    }
    ramlBase.prototype.wzInitializeAsync = function(ctx, callback) {
        callback(null);
    }
    ramlBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    ramlBase.prototype.wzAddChildToColl = function(node, coll) {
        node.wzParent = this;
        node.wzMoved = true;
        coll.push(node);
    }
    ramlBase.prototype.wzMoveChildToColl = function(node, coll, fromColl) {
        var index = fromColl.indexOf(node);
        if (index < 0) {
            this.error('wzMoveChildToColl error. The from collection does not contain the node.', node);
        }
        fromColl.splice(index, 1);
        this.wzAddChildToColl(node, coll);
    }
    ramlBase.prototype.wzLoadToChildColl = function(child, type, coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    ramlBase.prototype.wzCreateChildColl = function(tag, name, type, coll) {
        var item = new type(name, this.wzSourceLineInfo);
        item.wzTag = tag;
        item.wzParent = this;
        item.wzCreated = true;
        coll.push(item);
        return item;
    }
    ramlBase.prototype.wzLoadToChildren = function(child, type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    ramlBase.prototype.wzLoadOneToOne = function(child, type, fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    ramlBase.prototype.wzRemove = function(fromColl) {
        var index = fromColl.indexOf(this);
        if (index < 0) {
            this.error('wzRemove error. The from collection does not contain the node.', this);
        }
        fromColl.splice(index, 1);
    }
    ramlBase.prototype.error = function(message, node) {
        throw new _md.ramlModelException(message, node, this);
    }
    ramlBase.prototype.toJsonProperties = function(result) {
        result.wzElement = this.wzElement;
        result.wzTag = this.wzTag;
        result.wzName = this.wzName;
    }
    ramlBase.prototype.toJsonChildren = function(result) {
        if (this.wzChildren.length > 0) {
            var children = [];
            var i, i_len=this.wzChildren.length, item;
            for (i=0; i<i_len; i++) {
                item = this.wzChildren[i];
                children.push(item.toJson());
            }
            result.wzChildren = children;
        }
    }
    return ramlBase;
})();

_md.ramlBase = ramlBase;

// element ramlItem
var ramlItem = (function (ramlBase) {
    _inherits(ramlItem, ramlBase);
    function ramlItem(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ramlItem.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ramlItem);
        this.wzElement = "ramlItem";
        // relation annotation
        this.annotations = [];
        // relation comment
        this.comments = [];
    }
    ramlItem.prototype.addAnnotation = function(name, sourceLineInfo) {
        var retval = new _md.annotation(name, sourceLineInfo);
        retval.wzParent = this;
        this.annotations.push(retval);
        return retval;
    }
    ramlItem.prototype.getAnnotation = function(name) {
        var found = null;
        this.annotations.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    ramlItem.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    ramlItem.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    ramlItem.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    ramlItem.prototype.toJsonProperties = function(result) {
        _md.ramlBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    ramlItem.prototype.toJsonChildren = function(result) {
        _md.ramlBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.annotations.length, item;
        for (i=0; i<i_len; i++) {
            item = this.annotations[i];
            items.push(item.toJson());
        }
        result['annotations'] = items;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    ramlItem.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.comments);
            }
        }
        if (_l == 1 && _ch == '(') {
            if (name === '(') {
                return this.wzLoadToChildColl(child, _md.annotation, this.annotations);
            }
        }
        return ok;
    }
    ramlItem.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    ramlItem.prototype.wzVerify = function(ctx) {
        var i, i_len=this.annotations.length, item;
        for (i=0; i<i_len; i++) {
            item = this.annotations[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        _md.ramlBase.prototype.wzVerify.call(this, ctx);
    }
    ramlItem.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.annotations.length, item;
        for (i=0; i<i_len; i++) {
            item = this.annotations[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        _md.ramlBase.prototype.wzInitialize.call(this, ctx);
    }
    return ramlItem;
})(ramlBase);

_md.ramlItem = ramlItem;
/**
    element raml
     The root Entity of the raml Schema.
*/
var raml = (function (ramlItem) {
    _inherits(raml, ramlItem);
    function raml(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(raml.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, raml);
        this.allowedPROTOCOLS = [ "none", "http", "https", "http,https"];
        this.PROTOCOLS_NONE = "none";
        this.PROTOCOLS_HTTP = "http";
        this.PROTOCOLS_HTTPS = "https";
        this.PROTOCOLS_HTTP_HTTPS = "http,https";
        this.wzElement = "raml";
        /**
             (Required) The title property is a short plain text description of the RESTful API.
             The title property's value SHOULD be suitable for use as a title for the contained user documentation.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.title = null
        /**
             (Optional) If the RAML API definition is targeted to a specific API version,
             the API definition MUST contain a version property.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.version = null
        /**
             (Optional during development; Required after implementation)
             A RESTful API's resources are defined relative to the API's base URI.
             The use of the baseUri field is OPTIONAL to allow describing APIs that have not yet been implemented.
             May contain a template URI. A template URI refers to a URI parameter, which is a variable element,
             enclosed in curly brackets ({}) inside a relative URI of a resource.
            
             Example
            
             raml
             ...
             base-uri https://{bucketName}.s3.amazonaws.com
             ...
             base-uri-parameter bucketName:
             description The name of the bucket
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.baseUri = null
        /**
             (Optional) A RESTful API can be reached HTTP, HTTPS, or both.
             The protocols property MAY be used to specify the protocols that an API supports.
             If the protocols property is not specified, the protocol specified at the baseUri property is used.
             The protocols property MUST be an array of strings, of values "HTTP" and/or "HTTPS".
        */
        this.protocols = "none";
        this.port = 10011;
        // relation baseUriParameter
        this.baseUriParameters = [];
        // relation mediaTypes
        this.mediaTypes = null;
        // relation schema
        this.schema = null;
        // relation resource
        this.resources = [];
    }
    raml.PROTOCOLS_NONE = "none";
    raml.PROTOCOLS_HTTP = "http";
    raml.PROTOCOLS_HTTPS = "https";
    raml.PROTOCOLS_HTTP_HTTPS = "http,https";
    raml.prototype.addBaseUriParameter = function(name, sourceLineInfo) {
        var retval = new _md.baseUriParameter(name, sourceLineInfo);
        retval.wzParent = this;
        this.baseUriParameters.push(retval);
        return retval;
    }
    raml.prototype.getBaseUriParameter = function(name) {
        var found = null;
        this.baseUriParameters.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    raml.prototype.addResource = function(name, sourceLineInfo) {
        var retval = new _md.resource(name, sourceLineInfo);
        retval.wzParent = this;
        this.resources.push(retval);
        return retval;
    }
    raml.prototype.getResource = function(name) {
        var found = null;
        this.resources.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    raml.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    raml.prototype.toJsonProperties = function(result) {
        _md.ramlItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.title)) {
            result["title"] = this.title;
        }
        if (!isEmpty(this.version)) {
            result["version"] = this.version;
        }
        if (!isEmpty(this.baseUri)) {
            result["baseUri"] = this.baseUri;
        }
        if (!isEmpty(this.protocols)) {
            result["protocols"] = this.protocols;
        }
        result["port"] = this.port;
    }
    raml.prototype.toJsonChildren = function(result) {
        _md.ramlItem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.baseUriParameters.length, item;
        for (i=0; i<i_len; i++) {
            item = this.baseUriParameters[i];
            items.push(item.toJson());
        }
        result['baseUriParameters'] = items;
        if (this.mediaTypes != null) {
            result['mediaTypes'] = this.mediaTypes.toJson();
        }
        else {
            result['mediaTypes'] = null;
        }
        if (this.schema != null) {
            result['schema'] = this.schema.toJson();
        }
        else {
            result['schema'] = null;
        }
        items = [];
        var i, i_len=this.resources.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resources[i];
            items.push(item.toJson());
        }
        result['resources'] = items;
    }
    raml.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '/') {
            if (name === '/') {
                return this.wzLoadToChildColl(child, _md.resource, this.resources);
            }
        }
        if (_l == 4 && _ch == 'p') {
            if (name === 'port') {
                this.port = parseinteger(child.v, null, child); return true;
            }
        }
        if (_l == 5 && _ch == 't') {
            if (name === 'title') {
                this.title = child.v; return true;
            }
            else if (name === 'types') {
                return this.wzLoadOneToOne(child, _md.schema, 'schema');
            }
        }
        if (_l == 7 && _ch == 'v') {
            if (name === 'version') {
                this.version = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'b') {
            if (name === 'base-uri') {
                this.baseUri = child.v; return true;
            }
            else if (name === 'base_uri') {
                this.baseUri = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'p') {
            if (name === 'protocols') {
                this.protocols = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'm') {
            if (name === 'mediatypes') {
                return this.wzLoadOneToOne(child, _md.mediaTypes, 'mediaTypes');
            }
        }
        if (_l == 11 && _ch == 'm') {
            if (name === 'media-types') {
                return this.wzLoadOneToOne(child, _md.mediaTypes, 'mediaTypes');
            }
        }
        if (_l == 12 && _ch == 'b') {
            if (name === 'baseuriparam') {
                return this.wzLoadToChildColl(child, _md.baseUriParameter, this.baseUriParameters);
            }
        }
        if (_l == 14 && _ch == 'b') {
            if (name === 'base-uri-param') {
                return this.wzLoadToChildColl(child, _md.baseUriParameter, this.baseUriParameters);
            }
        }
        ok = _md.ramlItem.prototype.loadChild.call(this, child);
        return ok;
    }
    raml.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    raml.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("raml", "protocols", this.protocols, this.allowedPROTOCOLS, this);
        var i, i_len=this.baseUriParameters.length, item;
        for (i=0; i<i_len; i++) {
            item = this.baseUriParameters[i];
            item.wzVerify(ctx);
        }
        if (this.mediaTypes != null) {
            this.mediaTypes.wzVerify(ctx);
        }
        if (this.schema != null) {
            this.schema.wzVerify(ctx);
        }
        var i, i_len=this.resources.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resources[i];
            item.wzVerify(ctx);
        }
        _md.ramlItem.prototype.wzVerify.call(this, ctx);
    }
    raml.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.baseUriParameters.length, item;
        for (i=0; i<i_len; i++) {
            item = this.baseUriParameters[i];
            item.wzInitialize(ctx);
        }
        if (this.mediaTypes != null) {
            this.mediaTypes.wzInitialize(ctx);
        }
        if (this.schema != null) {
            this.schema.wzInitialize(ctx);
        }
        var i, i_len=this.resources.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resources[i];
            item.wzInitialize(ctx);
        }
        this.parameters = [];
        var i, i_len=this.baseUriParameters.length, item;
        for (i=0; i<i_len; i++) {
            item = this.baseUriParameters[i];
            item.in = 'uri';
            this.parameters.push(item);
        }
        _md.ramlItem.prototype.wzInitialize.call(this, ctx);
    }
    raml.prototype.getMediaTypes = function() {
        var ret = [];
        if (_.isObject(this.mediaTypes)) {
            var i, i_len=this.mediaTypes.mediaTypes.length, item;
            for (i=0; i<i_len; i++) {
                item = this.mediaTypes.mediaTypes[i];
                ret.push(item);
            }
        }
        return ret;
    }
    raml.prototype.getComments = function() {
        return initComments(this.comments);
    }
    raml.prototype.getResources = function() {
        var resCtx = {
            paths: [], 
            resources: []
        };
        var i, i_len=this.resources.length, r;
        for (i=0; i<i_len; i++) {
            r = this.resources[i];
            r.getData(resCtx);
        }
        return resCtx.resources;
    }
    return raml;
})(ramlItem);

_md.raml = raml;
/**
    element comment
     A comment line for describing items.
*/
var comment = (function (ramlBase) {
    _inherits(comment, ramlBase);
    function comment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(comment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, comment);
        this.wzElement = "comment";
        // relation comment
        this.comments = [];
    }
    comment.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    comment.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    comment.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    comment.prototype.toJsonProperties = function(result) {
        _md.ramlBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    comment.prototype.toJsonChildren = function(result) {
        _md.ramlBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    comment.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.comments);
            }
        }
        return ok;
    }
    comment.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    comment.prototype.wzVerify = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        _md.ramlBase.prototype.wzVerify.call(this, ctx);
    }
    comment.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        _md.ramlBase.prototype.wzInitialize.call(this, ctx);
    }
    return comment;
})(ramlBase);

_md.comment = comment;
/**
    element annotation
     Annotations provide a mechanism to extend the API specification with metadata
*/
var annotation = (function (ramlBase) {
    _inherits(annotation, ramlBase);
    function annotation(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(annotation.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, annotation);
        this.wzElement = "annotation";
    }
    annotation.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    annotation.prototype.toJsonProperties = function(result) {
        _md.ramlBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    annotation.prototype.toJsonChildren = function(result) {
        _md.ramlBase.prototype.toJsonChildren.call(this, result);
    }
    return annotation;
})(ramlBase);

_md.annotation = annotation;
/**
    element namedParameter
     The RAML Specification describes collections of named parameters for the following properties:
     URI parameters, query string parameters, form parameters,
     request bodies (depending on the media type), and request and response headers.
     All the collections specify the named parameters' attributes as described in this section.
     [WMT The wmt-name is the key of the property]
*/
var namedParameter = (function (ramlItem) {
    _inherits(namedParameter, ramlItem);
    function namedParameter(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(namedParameter.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, namedParameter);
        this.allowedTYPES = [ "string", "number", "integer", "date", "boolean", "file"];
        this.TYPE_STRING = "string";
        this.TYPE_NUMBER = "number";
        this.TYPE_INTEGER = "integer";
        this.TYPE_DATE = "date";
        this.TYPE_XBOOLEAN = "boolean";
        this.TYPE_FILE = "file";
        this.allowedARRAYFORMATS = [ "csv", "multi", "pipes", "ssv", "tsv"];
        this.ARRAYFORMAT_CSV = "csv";
        this.ARRAYFORMAT_MULTI = "multi";
        this.ARRAYFORMAT_PIPES = "pipes";
        this.ARRAYFORMAT_SSV = "ssv";
        this.ARRAYFORMAT_TSV = "tsv";
        this.wzElement = "namedParameter";
        /**
             (Optional) The displayName attribute specifies the parameter's display name.
             It is a friendly name used only for display or documentation purposes.
             If displayName is not specified, it defaults to the property's key (the name of the property itself).
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.displayName_display_name = null
        /**
             (Optional) The description attribute describes the intended use or meaning of the parameter.
             This value MAY be formatted using Markdown [MARKDOWN].
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.description = null
        /**
             (Optional) The type attribute specifies the primitive type of the parameter's resolved value.
             API clients MUST return/throw an error if the parameter's resolved value does not match the specified type.
             If type is not specified, it defaults to string. Valid types are:
        */
        this.type = "string";
        // (Optional, applicable only for parameters of type string) The enum attribute provides an enumeration of the parameter's valid values. This MUST be an array. If the enum attribute is defined, API clients and servers MUST verify that a parameter's value matches a value in the enum array. If there is no matching value, the clients and servers MUST treat this as an error.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.enum = null
        // (Optional, applicable only for parameters of type string) The pattern attribute is a regular expression that a parameter of type string MUST match. Regular expressions MUST follow the regular expression specification from ECMA 262/Perl 5. The pattern MAY be enclosed in double quotes for readability and clarity.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.pattern = null
        // (Optional, applicable only for parameters of type string) The minLength attribute specifies the parameter value's minimum number of characters.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.minLength = null
        // (Optional, applicable only for parameters of type string) The maxLength attribute specifies the parameter value's maximum number of characters.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.maxLength = null
        // (Optional, applicable only for parameters of type number or integer) The minimum attribute specifies the parameter's minimum value.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.minimum = null
        // (Optional, applicable only for parameters of type number or integer) The maximum attribute specifies the parameter's maximum value.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.maximum = null
        // (Optional) The example attribute shows an example value for the property. This can be used, e.g., by documentation generators to generate sample values for the property.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.example = null
        // (Optional) The repeat attribute specifies that the parameter can be repeated. If the parameter can be used multiple times, the repeat parameter value MUST be set to 'true'. Otherwise, the default value is 'false' and the parameter may not be repeated.
        this.repeat = false;
        /**
             (Optional except as otherwise noted) The required attribute specifies whether the parameter and its value MUST be present in the API definition. It must be either 'true' if the value MUST be present or 'false' otherwise.
             In general, parameters are optional unless the required attribute is included and its value set to 'true'.
             For a URI parameter, the required attribute MAY be omitted, but its default value is 'true'.
        */
        this.isRequired = false;
        this.isEmptyAllowed = false;
        // (Optional) The default attribute specifies the default value to use for the property if the property is omitted or its value is not specified. This SHOULD NOT be interpreted as a requirement for the client to send the default attribute's value if there is no other value to send. Instead, the default attribute's value is the value the server uses if the client does not send a value.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.default = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.arrayFormat = null
    }
    namedParameter.TYPE_STRING = "string";
    namedParameter.TYPE_NUMBER = "number";
    namedParameter.TYPE_INTEGER = "integer";
    namedParameter.TYPE_DATE = "date";
    namedParameter.TYPE_XBOOLEAN = "boolean";
    namedParameter.TYPE_FILE = "file";
    namedParameter.ARRAYFORMAT_CSV = "csv";
    namedParameter.ARRAYFORMAT_MULTI = "multi";
    namedParameter.ARRAYFORMAT_PIPES = "pipes";
    namedParameter.ARRAYFORMAT_SSV = "ssv";
    namedParameter.ARRAYFORMAT_TSV = "tsv";
    namedParameter.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    namedParameter.prototype.toJsonProperties = function(result) {
        _md.ramlItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.displayName_display_name)) {
            result["displayName_display_name"] = this.displayName_display_name;
        }
        if (!isEmpty(this.description)) {
            result["description"] = this.description;
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
        if (!isEmpty(this.enum)) {
            result["enum"] = this.enum;
        }
        if (!isEmpty(this.pattern)) {
            result["pattern"] = this.pattern;
        }
        if (!isEmpty(this.minLength)) {
            result["minLength"] = this.minLength;
        }
        if (!isEmpty(this.maxLength)) {
            result["maxLength"] = this.maxLength;
        }
        if (!isEmpty(this.minimum)) {
            result["minimum"] = this.minimum;
        }
        if (!isEmpty(this.maximum)) {
            result["maximum"] = this.maximum;
        }
        if (!isEmpty(this.example)) {
            result["example"] = this.example;
        }
        result["repeat"] = this.repeat;
        result["isRequired"] = this.isRequired;
        result["isEmptyAllowed"] = this.isEmptyAllowed;
        if (!isEmpty(this.default)) {
            result["default"] = this.default;
        }
        if (!isEmpty(this.arrayFormat)) {
            result["arrayFormat"] = this.arrayFormat;
        }
    }
    namedParameter.prototype.toJsonChildren = function(result) {
        _md.ramlItem.prototype.toJsonChildren.call(this, result);
    }
    namedParameter.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'e') {
            if (name === 'enum') {
                this.enum = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'r') {
            if (name === 'repeat') {
                this.repeat = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 7 && _ch == 'd') {
            if (name === 'default') {
                this.default = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'e') {
            if (name === 'example') {
                this.example = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'm') {
            if (name === 'minimum') {
                this.minimum = child.v; return true;
            }
            else if (name === 'maximum') {
                this.maximum = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'p') {
            if (name === 'pattern') {
                this.pattern = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'm') {
            if (name === 'minlength') {
                this.minLength = child.v; return true;
            }
            else if (name === 'maxlength') {
                this.maxLength = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'd') {
            if (name === 'description') {
                this.description = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'i') {
            if (name === 'is-required') {
                this.isRequired = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_required') {
                this.isRequired = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 12 && _ch == 'a') {
            if (name === 'array-format') {
                this.arrayFormat = child.v; return true;
            }
            else if (name === 'array_format') {
                this.arrayFormat = child.v; return true;
            }
        }
        if (_l == 16 && _ch == 'i') {
            if (name === 'is-empty-allowed') {
                this.isEmptyAllowed = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_empty_allowed') {
                this.isEmptyAllowed = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 24 && _ch == 'd') {
            if (name === 'displayname display-name') {
                this.displayName_display_name = child.v; return true;
            }
            else if (name === 'displayname display_name') {
                this.displayName_display_name = child.v; return true;
            }
        }
        ok = _md.ramlItem.prototype.loadChild.call(this, child);
        return ok;
    }
    namedParameter.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    namedParameter.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("namedParameter", "type", this.type, this.allowedTYPES, this);
        ctx.verifyEnum("namedParameter", "arrayFormat", this.arrayFormat, this.allowedARRAYFORMATS, this);
        _md.ramlItem.prototype.wzVerify.call(this, ctx);
    }
    namedParameter.prototype.getFacets = function() {
        var ret = [];
        if (this['displayName']) {
            ret.push({
                name: 'displayName', 
                value: this['displayName'], 
                facetType: 'string'
            });
        }
        if (this['description']) {
            ret.push({
                name: 'description', 
                value: this['description'], 
                facetType: 'string'
            });
        }
        if (this['type']) {
            ret.push({
                name: 'type', 
                value: this['type'], 
                facetType: 'string'
            });
        }
        if (this['pattern']) {
            ret.push({
                name: 'pattern', 
                value: this['pattern'], 
                facetType: 'string'
            });
        }
        if (this['minLength']) {
            ret.push({
                name: 'minLength', 
                value: this['minLength'], 
                facetType: 'integer'
            });
        }
        if (this['maxLength']) {
            ret.push({
                name: 'maxLength', 
                value: this['maxLength'], 
                facetType: 'integer'
            });
        }
        if (this['minimum']) {
            ret.push({
                name: 'minimum', 
                value: this['minimum'], 
                facetType: 'integer'
            });
        }
        if (this['maximum']) {
            ret.push({
                name: 'maximum', 
                value: this['maximum'], 
                facetType: 'integer'
            });
        }
        if (this['example']) {
            ret.push({
                name: 'example', 
                value: this['example'], 
                facetType: 'string'
            });
        }
        if (this['repeat']) {
            ret.push({
                name: 'repeat', 
                value: this['repeat'], 
                facetType: 'boolean'
            });
        }
        if (this['default']) {
            ret.push({
                name: 'default', 
                value: this['default'], 
                facetType: 'string'
            });
        }
        if (this['isRequired']) {
            ret.push({
                name: 'isRequired', 
                value: this['isRequired'], 
                facetType: 'boolean'
            });
        }
        if (this['isEmptyAllowed']) {
            ret.push({
                name: 'isEmptyAllowed', 
                value: this['isEmptyAllowed'], 
                facetType: 'boolean'
            });
        }
        if (this['enum']) {
            ret.push({
                name: 'enum', 
                value: this['enum'].split(',').trim(), 
                facetType: 'array'
            });
        }
        if (this['arrayFormat']) {
            ret.push({
                name: 'arrayFormat', 
                value: this['arrayFormat'], 
                facetType: 'string'
            });
        }
        return ret;
    }
    return namedParameter;
})(ramlItem);

_md.namedParameter = namedParameter;
// element baseUriParameter
var baseUriParameter = (function (namedParameter) {
    _inherits(baseUriParameter, namedParameter);
    function baseUriParameter(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(baseUriParameter.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, baseUriParameter);
        this.wzElement = "baseUriParameter";
        // The base uri parameter description
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.description = null
    }
    baseUriParameter.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    baseUriParameter.prototype.toJsonProperties = function(result) {
        _md.namedParameter.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.description)) {
            result["description"] = this.description;
        }
    }
    baseUriParameter.prototype.toJsonChildren = function(result) {
        _md.namedParameter.prototype.toJsonChildren.call(this, result);
    }
    baseUriParameter.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 11 && _ch == 'd') {
            if (name === 'description') {
                this.description = child.v; return true;
            }
        }
        ok = _md.namedParameter.prototype.loadChild.call(this, child);
        return ok;
    }
    baseUriParameter.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return baseUriParameter;
})(namedParameter);

_md.baseUriParameter = baseUriParameter;
/**
    element queryParameter
     An API's resources MAY be filtered (to return a subset of results) or
     altered (such as transforming a response body from JSON to XML format) by the use of query strings.
     If the resource or its method supports a query string, the query string MUST be defined by
     the queryParameters property.
*/
var queryParameter = (function (namedParameter) {
    _inherits(queryParameter, namedParameter);
    function queryParameter(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(queryParameter.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, queryParameter);
        this.wzElement = "queryParameter";
        // relation comment
        this.comments = [];
    }
    queryParameter.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    queryParameter.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    queryParameter.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    queryParameter.prototype.toJsonProperties = function(result) {
        _md.namedParameter.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    queryParameter.prototype.toJsonChildren = function(result) {
        _md.namedParameter.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    queryParameter.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.comments);
            }
        }
        ok = _md.namedParameter.prototype.loadChild.call(this, child);
        return ok;
    }
    queryParameter.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    queryParameter.prototype.wzVerify = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        _md.namedParameter.prototype.wzVerify.call(this, ctx);
    }
    queryParameter.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        _md.namedParameter.prototype.wzInitialize.call(this, ctx);
    }
    queryParameter.prototype.getComments = function() {
        return initComments(this.comments);
    }
    return queryParameter;
})(namedParameter);

_md.queryParameter = queryParameter;
/**
    element formParameter
     If the API's media type is either application/x-www-form-urlencoded or multipart/form-data,
     the formParameters property MUST specify the name-value pairs that the API is expecting.
     The formParameters property is a map in which the key is the name of the web form parameter,
     and the value is itself a map the specifies the web form parameter's attributes,
     according to the Named Parameters section.
*/
var formParameter = (function (namedParameter) {
    _inherits(formParameter, namedParameter);
    function formParameter(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(formParameter.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, formParameter);
        this.wzElement = "formParameter";
        // relation comment
        this.comments = [];
    }
    formParameter.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    formParameter.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    formParameter.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    formParameter.prototype.toJsonProperties = function(result) {
        _md.namedParameter.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    formParameter.prototype.toJsonChildren = function(result) {
        _md.namedParameter.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    formParameter.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.comments);
            }
        }
        ok = _md.namedParameter.prototype.loadChild.call(this, child);
        return ok;
    }
    formParameter.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    formParameter.prototype.wzVerify = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        _md.namedParameter.prototype.wzVerify.call(this, ctx);
    }
    formParameter.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        _md.namedParameter.prototype.wzInitialize.call(this, ctx);
    }
    formParameter.prototype.getComments = function() {
        return initComments(this.comments);
    }
    return formParameter;
})(namedParameter);

_md.formParameter = formParameter;
/**
    element resource
     Resources are identified by their relative URI, which MUST begin with a slash (/).
     A resource defined as a root-level property is called a top-level resource.
     Its property's key is the resource's URI relative to the baseUri.
     A resource defined as a child property of another resource is called a nested resource,
     and its property's key is its URI relative to its parent resource's URI.
*/
var resource = (function (ramlItem) {
    _inherits(resource, ramlItem);
    function resource(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(resource.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, resource);
        this.wzElement = "resource";
        /**
             The displayName attribute provides a friendly name to the resource and can be used by documentation generation tools. The displayName key is OPTIONAL.
             If the displayName attribute is not defined for a resource, documentation tools SHOULD refer to the resource by its property key (i.e. its relative URI, e.g., "/jobs"), which acts as the resource's name.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.displayName = null
        /**
             Each resource, whether top-level or nested, MAY contain a description property that briefly describes the resource.
             It is RECOMMENDED that all the API definition's resources includes the description property.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.description = null
        /**
             This is taken from Swagger: https://github.com/apigee-127/swagger-tools/blob/master/docs/Middleware.md
             By setting this property to true, it indicates to Swagger Router that it should match and route
             all requests to not only the specified path, but also any undeclared subpaths requested that do not match
             an explicitly defined path in the Swagger. While you cannot specify wildcards (in Swagger) in wizzi Raml,
             this would be the equivalent of wildcarding the end of the path something like /pets/**.
        */
        this.routerHandleSubpaths = false;
        // relation uriParameter
        this.uriParameters = [];
        // relation method
        this.methods = [];
        // relation resource
        this.resources = [];
        // relation comment
        this.comments = [];
    }
    resource.prototype.addUriParameter = function(name, sourceLineInfo) {
        var retval = new _md.uriParameter(name, sourceLineInfo);
        retval.wzParent = this;
        this.uriParameters.push(retval);
        return retval;
    }
    resource.prototype.getUriParameter = function(name) {
        var found = null;
        this.uriParameters.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    resource.prototype.getMethod = function(name) {
        var found = null;
        this.methods.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    resource.prototype.addResource = function(name, sourceLineInfo) {
        var retval = new _md.resource(name, sourceLineInfo);
        retval.wzParent = this;
        this.resources.push(retval);
        return retval;
    }
    resource.prototype.getResource = function(name) {
        var found = null;
        this.resources.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    resource.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    resource.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    resource.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    resource.prototype.toJsonProperties = function(result) {
        _md.ramlItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.displayName)) {
            result["displayName"] = this.displayName;
        }
        if (!isEmpty(this.description)) {
            result["description"] = this.description;
        }
        result["routerHandleSubpaths"] = this.routerHandleSubpaths;
    }
    resource.prototype.toJsonChildren = function(result) {
        _md.ramlItem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.uriParameters.length, item;
        for (i=0; i<i_len; i++) {
            item = this.uriParameters[i];
            items.push(item.toJson());
        }
        result['uriParameters'] = items;
        items = [];
        var i, i_len=this.methods.length, item;
        for (i=0; i<i_len; i++) {
            item = this.methods[i];
            items.push(item.toJson());
        }
        result['methods'] = items;
        items = [];
        var i, i_len=this.resources.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resources[i];
            items.push(item.toJson());
        }
        result['resources'] = items;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    resource.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.comments);
            }
        }
        if (_l == 1 && _ch == '/') {
            if (name === '/') {
                return this.wzLoadToChildColl(child, _md.resource, this.resources);
            }
        }
        if (_l == 3 && _ch == 'g') {
            if (name === 'get') {
                return this.wzLoadToChildColl(child, _md.get, this.methods);
            }
        }
        if (_l == 3 && _ch == 'p') {
            if (name === 'put') {
                return this.wzLoadToChildColl(child, _md.put, this.methods);
            }
        }
        if (_l == 4 && _ch == 'h') {
            if (name === 'head') {
                return this.wzLoadToChildColl(child, _md.head, this.methods);
            }
        }
        if (_l == 4 && _ch == 'p') {
            if (name === 'post') {
                return this.wzLoadToChildColl(child, _md.post, this.methods);
            }
        }
        if (_l == 5 && _ch == 'p') {
            if (name === 'patch') {
                return this.wzLoadToChildColl(child, _md.patch, this.methods);
            }
        }
        if (_l == 6 && _ch == 'd') {
            if (name === 'delete') {
                return this.wzLoadToChildColl(child, _md.xdelete, this.methods);
            }
        }
        if (_l == 7 && _ch == 'o') {
            if (name === 'options') {
                return this.wzLoadToChildColl(child, _md.options, this.methods);
            }
        }
        if (_l == 8 && _ch == 'u') {
            if (name === 'uriparam') {
                return this.wzLoadToChildColl(child, _md.uriParameter, this.uriParameters);
            }
        }
        if (_l == 9 && _ch == 'u') {
            if (name === 'uri-param') {
                return this.wzLoadToChildColl(child, _md.uriParameter, this.uriParameters);
            }
        }
        if (_l == 11 && _ch == 'd') {
            if (name === 'displayname') {
                this.displayName = child.v; return true;
            }
            else if (name === 'description') {
                this.description = child.v; return true;
            }
        }
        if (_l == 22 && _ch == 'r') {
            if (name === 'router-handle-subpaths') {
                this.routerHandleSubpaths = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'router_handle_subpaths') {
                this.routerHandleSubpaths = parseboolean(child.v, true, child); return true;
            }
        }
        ok = _md.ramlItem.prototype.loadChild.call(this, child);
        return ok;
    }
    resource.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    resource.prototype.wzVerify = function(ctx) {
        var i, i_len=this.uriParameters.length, item;
        for (i=0; i<i_len; i++) {
            item = this.uriParameters[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.methods.length, item;
        for (i=0; i<i_len; i++) {
            item = this.methods[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.resources.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resources[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        _md.ramlItem.prototype.wzVerify.call(this, ctx);
    }
    resource.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.uriParameters.length, item;
        for (i=0; i<i_len; i++) {
            item = this.uriParameters[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.methods.length, item;
        for (i=0; i<i_len; i++) {
            item = this.methods[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.resources.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resources[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        this.name = '/' + this.wzName;
        this.parameters = [];
        var i, i_len=this.uriParameters.length, item;
        for (i=0; i<i_len; i++) {
            item = this.uriParameters[i];
            item.in = 'uri';
            this.parameters.push(item);
        }
        _md.ramlItem.prototype.wzInitialize.call(this, ctx);
    }
    resource.prototype.getComments = function() {
        return initComments(this.comments);
    }
    resource.prototype.getData = function(resCtx) {
        resCtx.paths.push(this.wzName);
        this.paths = _.cloneDeep(resCtx.paths);
        this.path = '/' + resCtx.paths.join('/');
        this.expressPath = this._expressPath(this.path);
        resCtx.resources.push(this);
        var i, i_len=this.resources.length, r;
        for (i=0; i<i_len; i++) {
            r = this.resources[i];
            r.getData(resCtx);
        }
        resCtx.paths.pop();
    }
    resource.prototype._expressPath = function(path) {
        var basePath = this.wzRoot().baseUri;
        basePath = parseurl({url: (basePath || '/')}).pathname || '/';
        basePath = basePath.replace(/%7B/g, ':').replace(/%7D/g, '');
        if (basePath.charAt(0) !== '/') {
            basePath = ('/' + basePath);
        }
        if (basePath.charAt((basePath.length - 1)) !== '/') {
            basePath = (basePath + '/');
        }
        if (path.charAt(0) === '/') {
            path = path.substring(1);
        }
        return basePath + path.replace(/{/g, ':').replace(/}/g, '');
    }
    return resource;
})(ramlItem);

_md.resource = resource;
// element uriParameter
var uriParameter = (function (namedParameter) {
    _inherits(uriParameter, namedParameter);
    function uriParameter(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(uriParameter.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, uriParameter);
        this.wzElement = "uriParameter";
    }
    uriParameter.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    uriParameter.prototype.toJsonProperties = function(result) {
        _md.namedParameter.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    uriParameter.prototype.toJsonChildren = function(result) {
        _md.namedParameter.prototype.toJsonChildren.call(this, result);
    }
    return uriParameter;
})(namedParameter);

_md.uriParameter = uriParameter;
/**
    element method
     In a RESTful API, methods are operations that are performed on a resource.
     A method MUST be one of the HTTP methods defined in the HTTP version 1.1 specification [RFC2616]
     and its extension, RFC5789 [RFC5789].
*/
var method = (function (ramlItem) {
    _inherits(method, ramlItem);
    function method(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(method.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, method);
        this.allowedPROTOCOLS = [ "none", "http", "https", "http,https"];
        this.PROTOCOLS_NONE = "none";
        this.PROTOCOLS_HTTP = "http";
        this.PROTOCOLS_HTTPS = "https";
        this.PROTOCOLS_HTTP_HTTPS = "http,https";
        this.wzElement = "method";
        // Each declared method MAY contain a description attribute that briefly describes what the method does to the resource. It is RECOMMENDED that all API definition methods include the description property.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.description = null
        /**
             (Optional) A method can override an API's protocols value for that single method
             by setting a different value for the fields.
        */
        this.protocols = "none";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.handlerId = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.securedBy = null
        // relation queryParameter
        this.queryParameters = [];
        // relation header
        this.headers = [];
        // relation body
        this.body = null;
        // relation responses
        // Is optional
        this.responses = null;
        // relation comment
        this.comments = [];
    }
    method.PROTOCOLS_NONE = "none";
    method.PROTOCOLS_HTTP = "http";
    method.PROTOCOLS_HTTPS = "https";
    method.PROTOCOLS_HTTP_HTTPS = "http,https";
    method.prototype.addQueryParameter = function(name, sourceLineInfo) {
        var retval = new _md.queryParameter(name, sourceLineInfo);
        retval.wzParent = this;
        this.queryParameters.push(retval);
        return retval;
    }
    method.prototype.getQueryParameter = function(name) {
        var found = null;
        this.queryParameters.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    method.prototype.addHeader = function(name, sourceLineInfo) {
        var retval = new _md.header(name, sourceLineInfo);
        retval.wzParent = this;
        this.headers.push(retval);
        return retval;
    }
    method.prototype.getHeader = function(name) {
        var found = null;
        this.headers.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    method.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    method.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    method.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    method.prototype.toJsonProperties = function(result) {
        _md.ramlItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.description)) {
            result["description"] = this.description;
        }
        if (!isEmpty(this.protocols)) {
            result["protocols"] = this.protocols;
        }
        if (!isEmpty(this.handlerId)) {
            result["handlerId"] = this.handlerId;
        }
        if (!isEmpty(this.securedBy)) {
            result["securedBy"] = this.securedBy;
        }
    }
    method.prototype.toJsonChildren = function(result) {
        _md.ramlItem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.queryParameters.length, item;
        for (i=0; i<i_len; i++) {
            item = this.queryParameters[i];
            items.push(item.toJson());
        }
        result['queryParameters'] = items;
        items = [];
        var i, i_len=this.headers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.headers[i];
            items.push(item.toJson());
        }
        result['headers'] = items;
        if (this.body != null) {
            result['body'] = this.body.toJson();
        }
        else {
            result['body'] = null;
        }
        if (this.responses != null) {
            result['responses'] = this.responses.toJson();
        }
        else {
            result['responses'] = null;
        }
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    method.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.comments);
            }
        }
        if (_l == 4 && _ch == 'b') {
            if (name === 'body') {
                return this.wzLoadOneToOne(child, _md.body, 'body');
            }
        }
        if (_l == 6 && _ch == 'h') {
            if (name === 'header') {
                return this.wzLoadToChildColl(child, _md.header, this.headers);
            }
        }
        if (_l == 7 && _ch == 'h') {
            if (name === 'handler') {
                this.handlerId = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'p') {
            if (name === 'protocols') {
                this.protocols = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'r') {
            if (name === 'responses') {
                return this.wzLoadOneToOne(child, _md.responses, 'responses');
            }
        }
        if (_l == 10 && _ch == 'q') {
            if (name === 'queryparam') {
                return this.wzLoadToChildColl(child, _md.queryParameter, this.queryParameters);
            }
        }
        if (_l == 10 && _ch == 's') {
            if (name === 'secured-by') {
                this.securedBy = child.v; return true;
            }
            else if (name === 'secured_by') {
                this.securedBy = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'd') {
            if (name === 'description') {
                this.description = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'q') {
            if (name === 'query-param') {
                return this.wzLoadToChildColl(child, _md.queryParameter, this.queryParameters);
            }
        }
        ok = _md.ramlItem.prototype.loadChild.call(this, child);
        return ok;
    }
    method.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    method.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("method", "protocols", this.protocols, this.allowedPROTOCOLS, this);
        var i, i_len=this.queryParameters.length, item;
        for (i=0; i<i_len; i++) {
            item = this.queryParameters[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.headers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.headers[i];
            item.wzVerify(ctx);
        }
        if (this.body != null) {
            this.body.wzVerify(ctx);
        }
        if (this.responses != null) {
            this.responses.wzVerify(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        _md.ramlItem.prototype.wzVerify.call(this, ctx);
    }
    method.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.queryParameters.length, item;
        for (i=0; i<i_len; i++) {
            item = this.queryParameters[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.headers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.headers[i];
            item.wzInitialize(ctx);
        }
        if (this.body != null) {
            this.body.wzInitialize(ctx);
        }
        if (this.responses != null) {
            this.responses.wzInitialize(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        if (!this.name) {
            this.name = this.wzName;
        }
        this.parameters = [];
        var i, i_len=this.queryParameters.length, item;
        for (i=0; i<i_len; i++) {
            item = this.queryParameters[i];
            item.in = 'query';
            this.parameters.push(item);
        }
        var i, i_len=this.headers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.headers[i];
            item.in = 'header';
            this.parameters.push(item);
        }
        if (this.body && this.body.typeItem) {
            this.body.typeItem.in = 'body';
            this.parameters.push(this.body.typeItem);
        }
        _md.ramlItem.prototype.wzInitialize.call(this, ctx);
    }
    method.prototype.getResponseStatuses = function() {
        var ret = [];
        if (this.responses) {
            var i, i_len=this.responses.responseStatuses.length, item;
            for (i=0; i<i_len; i++) {
                item = this.responses.responseStatuses[i];
                ret.push(item);
            }
        }
        return ret;
    }
    method.prototype.getMediaTypes = function() {
        var ret = [];
        var i, i_len=this.getResponseStatuses().length, rs;
        for (i=0; i<i_len; i++) {
            rs = this.getResponseStatuses()[i];
            if (rs.body) {
                var j, j_len=rs.body.mediaTypes.length, item;
                for (j=0; j<j_len; j++) {
                    item = rs.body.mediaTypes[j];
                    ret.push(item);
                }
            }
        }
        return ret;
    }
    method.prototype.getComments = function() {
        return initComments(this.comments);
    }
    return method;
})(ramlItem);

_md.method = method;
/**
    element header
     An API's methods MAY support or require non-standard HTTP headers.
     In the API definition, specify the non-standard HTTP headers by using the headers property.
     The headers property is a map in which the key is the name of the header,
     and the value is itself a map specifying the header attributes, according to the Named Parameters section.
*/
var header = (function (namedParameter) {
    _inherits(header, namedParameter);
    function header(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(header.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, header);
        this.wzElement = "header";
    }
    header.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    header.prototype.toJsonProperties = function(result) {
        _md.namedParameter.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    header.prototype.toJsonChildren = function(result) {
        _md.namedParameter.prototype.toJsonChildren.call(this, result);
    }
    return header;
})(namedParameter);

_md.header = header;
// element get
var get = (function (method) {
    _inherits(get, method);
    function get(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(get.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, get);
        this.wzElement = "get";
    }
    get.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    get.prototype.toJsonProperties = function(result) {
        _md.method.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    get.prototype.toJsonChildren = function(result) {
        _md.method.prototype.toJsonChildren.call(this, result);
    }
    get.prototype.wzInitialize = function(ctx) {
        this.name = 'get';
        _md.method.prototype.wzInitialize.call(this, ctx);
    }
    return get;
})(method);

_md.get = get;
// element post
var post = (function (method) {
    _inherits(post, method);
    function post(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(post.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, post);
        this.wzElement = "post";
    }
    post.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    post.prototype.toJsonProperties = function(result) {
        _md.method.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    post.prototype.toJsonChildren = function(result) {
        _md.method.prototype.toJsonChildren.call(this, result);
    }
    post.prototype.wzInitialize = function(ctx) {
        this.name = 'post';
        _md.method.prototype.wzInitialize.call(this, ctx);
    }
    return post;
})(method);

_md.post = post;
// element put
var put = (function (method) {
    _inherits(put, method);
    function put(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(put.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, put);
        this.wzElement = "put";
    }
    put.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    put.prototype.toJsonProperties = function(result) {
        _md.method.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    put.prototype.toJsonChildren = function(result) {
        _md.method.prototype.toJsonChildren.call(this, result);
    }
    put.prototype.wzInitialize = function(ctx) {
        this.name = 'put';
        _md.method.prototype.wzInitialize.call(this, ctx);
    }
    return put;
})(method);

_md.put = put;
// element xdelete
var xdelete = (function (method) {
    _inherits(xdelete, method);
    function xdelete(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xdelete.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xdelete);
        this.wzElement = "xdelete";
    }
    xdelete.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    xdelete.prototype.toJsonProperties = function(result) {
        _md.method.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    xdelete.prototype.toJsonChildren = function(result) {
        _md.method.prototype.toJsonChildren.call(this, result);
    }
    xdelete.prototype.wzInitialize = function(ctx) {
        this.name = 'delete';
        _md.method.prototype.wzInitialize.call(this, ctx);
    }
    return xdelete;
})(method);

_md.xdelete = xdelete;
// element head
var head = (function (method) {
    _inherits(head, method);
    function head(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(head.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, head);
        this.wzElement = "head";
    }
    head.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    head.prototype.toJsonProperties = function(result) {
        _md.method.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    head.prototype.toJsonChildren = function(result) {
        _md.method.prototype.toJsonChildren.call(this, result);
    }
    head.prototype.wzInitialize = function(ctx) {
        this.name = 'head';
        _md.method.prototype.wzInitialize.call(this, ctx);
    }
    return head;
})(method);

_md.head = head;
// element options
var options = (function (method) {
    _inherits(options, method);
    function options(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(options.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, options);
        this.wzElement = "options";
    }
    options.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    options.prototype.toJsonProperties = function(result) {
        _md.method.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    options.prototype.toJsonChildren = function(result) {
        _md.method.prototype.toJsonChildren.call(this, result);
    }
    options.prototype.wzInitialize = function(ctx) {
        this.name = 'options';
        _md.method.prototype.wzInitialize.call(this, ctx);
    }
    return options;
})(method);

_md.options = options;
// element patch
var patch = (function (method) {
    _inherits(patch, method);
    function patch(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(patch.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, patch);
        this.wzElement = "patch";
    }
    patch.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    patch.prototype.toJsonProperties = function(result) {
        _md.method.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    patch.prototype.toJsonChildren = function(result) {
        _md.method.prototype.toJsonChildren.call(this, result);
    }
    patch.prototype.wzInitialize = function(ctx) {
        this.name = 'patch';
        _md.method.prototype.wzInitialize.call(this, ctx);
    }
    return patch;
})(method);

_md.patch = patch;
/**
    element body
     Some method verbs expect the resource to be sent as a request body.
     For example, to create a resource, the request must include the details of the resource to create.
     Resources CAN have alternate representations.
     For example, an API might support both JSON and XML representations.
     A method's body is defined in the body property as a hashmap,
     in which the key MUST be a valid media type.
     Can be declared in
     a method
     a responseStatus
     The IttfNodeValue if declared is the name of the body type, that must be
     declared inside the types node at the root raml node
*/
var body = (function (ramlItem) {
    _inherits(body, ramlItem);
    function body(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(body.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, body);
        this.wzElement = "body";
        // relation formParameter
        this.formParameters = [];
        // relation mediaType
        this.mediaTypes = [];
        // relation typeItem
        this.typeItem = null;
        // relation property
        // Implicit type
        // Properties can be defined directly inside the body node (without an object node)
        this.properties = [];
    }
    body.prototype.addFormParameter = function(name, sourceLineInfo) {
        var retval = new _md.formParameter(name, sourceLineInfo);
        retval.wzParent = this;
        this.formParameters.push(retval);
        return retval;
    }
    body.prototype.getFormParameter = function(name) {
        var found = null;
        this.formParameters.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    body.prototype.addMediaType = function(name, sourceLineInfo) {
        var retval = new _md.mediaType(name, sourceLineInfo);
        retval.wzParent = this;
        this.mediaTypes.push(retval);
        return retval;
    }
    body.prototype.getMediaType = function(name) {
        var found = null;
        this.mediaTypes.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    body.prototype.addProperty = function(name, sourceLineInfo) {
        var retval = new _md.property(name, sourceLineInfo);
        retval.wzParent = this;
        this.properties.push(retval);
        return retval;
    }
    body.prototype.getProperty = function(name) {
        var found = null;
        this.properties.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    body.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    body.prototype.toJsonProperties = function(result) {
        _md.ramlItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    body.prototype.toJsonChildren = function(result) {
        _md.ramlItem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.formParameters.length, item;
        for (i=0; i<i_len; i++) {
            item = this.formParameters[i];
            items.push(item.toJson());
        }
        result['formParameters'] = items;
        items = [];
        var i, i_len=this.mediaTypes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.mediaTypes[i];
            items.push(item.toJson());
        }
        result['mediaTypes'] = items;
        if (this.typeItem != null) {
            result['typeItem'] = this.typeItem.toJson();
        }
        else {
            result['typeItem'] = null;
        }
        items = [];
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            items.push(item.toJson());
        }
        result['properties'] = items;
    }
    body.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, _md.property, this.properties);
            }
        }
        if (_l == 3 && _ch == 'a') {
            if (name === 'any') {
                return this.wzLoadOneToOne(child, _md.any, 'typeItem');
            }
        }
        if (_l == 3 && _ch == 'n') {
            if (name === 'nil') {
                return this.wzLoadOneToOne(child, _md.nil, 'typeItem');
            }
            else if (name === 'nil') {
                return this.wzLoadToChildColl(child, _md.nilProperty, this.properties);
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'file') {
                return this.wzLoadOneToOne(child, _md.file, 'typeItem');
            }
            else if (name === 'file') {
                return this.wzLoadToChildColl(child, _md.fileProperty, this.properties);
            }
        }
        if (_l == 5 && _ch == 'a') {
            if (name === 'array') {
                return this.wzLoadOneToOne(child, _md.array, 'typeItem');
            }
        }
        if (_l == 5 && _ch == 'u') {
            if (name === 'union') {
                return this.wzLoadOneToOne(child, _md.union, 'typeItem');
            }
        }
        if (_l == 6 && _ch == 'n') {
            if (name === 'number') {
                return this.wzLoadOneToOne(child, _md.number, 'typeItem');
            }
            else if (name === 'number') {
                return this.wzLoadToChildColl(child, _md.numberProperty, this.properties);
            }
        }
        if (_l == 6 && _ch == 'o') {
            if (name === 'object') {
                return this.wzLoadOneToOne(child, _md.object, 'typeItem');
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'string') {
                return this.wzLoadOneToOne(child, _md.string, 'typeItem');
            }
            else if (name === 'string') {
                return this.wzLoadToChildColl(child, _md.stringProperty, this.properties);
            }
        }
        if (_l == 7 && _ch == 'b') {
            if (name === 'boolean') {
                return this.wzLoadOneToOne(child, _md.xboolean, 'typeItem');
            }
            else if (name === 'boolean') {
                return this.wzLoadToChildColl(child, _md.booleanProperty, this.properties);
            }
        }
        if (_l == 7 && _ch == 'i') {
            if (name === 'integer') {
                return this.wzLoadOneToOne(child, _md.integer, 'typeItem');
            }
            else if (name === 'integer') {
                return this.wzLoadToChildColl(child, _md.integerProperty, this.properties);
            }
        }
        if (_l == 8 && _ch == 'd') {
            if (name === 'dateonly') {
                return this.wzLoadOneToOne(child, _md.dateOnly, 'typeItem');
            }
            else if (name === 'datetime') {
                return this.wzLoadOneToOne(child, _md.datetime, 'typeItem');
            }
            else if (name === 'datetime') {
                return this.wzLoadToChildColl(child, _md.datetimeProperty, this.properties);
            }
            else if (name === 'dateonly') {
                return this.wzLoadToChildColl(child, _md.dateOnlyProperty, this.properties);
            }
        }
        if (_l == 8 && _ch == 'e') {
            if (name === 'external') {
                return this.wzLoadOneToOne(child, _md.external, 'typeItem');
            }
        }
        if (_l == 8 && _ch == 't') {
            if (name === 'text/xml') {
                return this.wzLoadToChildColl(child, _md.textXml, this.mediaTypes);
            }
            else if (name === 'text/css') {
                return this.wzLoadToChildColl(child, _md.textCss, this.mediaTypes);
            }
            else if (name === 'timeonly') {
                return this.wzLoadOneToOne(child, _md.timeOnly, 'typeItem');
            }
            else if (name === 'timeonly') {
                return this.wzLoadToChildColl(child, _md.timeOnlyProperty, this.properties);
            }
        }
        if (_l == 9 && _ch == 'd') {
            if (name === 'date-only') {
                return this.wzLoadOneToOne(child, _md.dateOnly, 'typeItem');
            }
            else if (name === 'date-only') {
                return this.wzLoadToChildColl(child, _md.dateOnlyProperty, this.properties);
            }
        }
        if (_l == 9 && _ch == 'f') {
            if (name === 'formparam') {
                return this.wzLoadToChildColl(child, _md.formParameter, this.formParameters);
            }
        }
        if (_l == 9 && _ch == 'm') {
            if (name === 'mediatype') {
                return this.wzLoadToChildColl(child, _md.mediaType, this.mediaTypes);
            }
        }
        if (_l == 9 && _ch == 't') {
            if (name === 'text/html') {
                return this.wzLoadToChildColl(child, _md.textHtml, this.mediaTypes);
            }
            else if (name === 'time-only') {
                return this.wzLoadOneToOne(child, _md.timeOnly, 'typeItem');
            }
            else if (name === 'time-only') {
                return this.wzLoadToChildColl(child, _md.timeOnlyProperty, this.properties);
            }
        }
        if (_l == 10 && _ch == 'f') {
            if (name === 'form-param') {
                return this.wzLoadToChildColl(child, _md.formParameter, this.formParameters);
            }
        }
        if (_l == 10 && _ch == 'm') {
            if (name === 'media-type') {
                return this.wzLoadToChildColl(child, _md.mediaType, this.mediaTypes);
            }
        }
        if (_l == 12 && _ch == 'd') {
            if (name === 'datetimeonly') {
                return this.wzLoadOneToOne(child, _md.dateTimeOnly, 'typeItem');
            }
            else if (name === 'datetimeonly') {
                return this.wzLoadToChildColl(child, _md.datetimeOnlyProperty, this.properties);
            }
        }
        if (_l == 13 && _ch == 'd') {
            if (name === 'datetime-only') {
                return this.wzLoadOneToOne(child, _md.dateTimeOnly, 'typeItem');
            }
            else if (name === 'datetime-only') {
                return this.wzLoadToChildColl(child, _md.datetimeOnlyProperty, this.properties);
            }
        }
        if (_l == 16 && _ch == 'a') {
            if (name === 'application/json') {
                return this.wzLoadToChildColl(child, _md.applicationJson, this.mediaTypes);
            }
        }
        if (_l == 22 && _ch == 'a') {
            if (name === 'application/javascript') {
                return this.wzLoadToChildColl(child, _md.textJavascript, this.mediaTypes);
            }
        }
        ok = _md.ramlItem.prototype.loadChild.call(this, child);
        return ok;
    }
    body.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    body.prototype.wzVerify = function(ctx) {
        var i, i_len=this.formParameters.length, item;
        for (i=0; i<i_len; i++) {
            item = this.formParameters[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.mediaTypes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.mediaTypes[i];
            item.wzVerify(ctx);
        }
        if (this.typeItem != null) {
            this.typeItem.wzVerify(ctx);
        }
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzVerify(ctx);
        }
        if (isEmpty(this.wzName) == false && _.isObject(this.wzRoot().schema) == false || _.isObject(this.wzRoot().schema.getTypeItem(this.wzName)) == null) {
            ctx.addError('Referenced type not found: "' + this.wzName + '"', this);
        }
        if (this.properties.length > 0 && _.isObject(this.typeItem) == true) {
            ctx.addError('A body cannot have both properties and a type defined', this);
        }
        _md.ramlItem.prototype.wzVerify.call(this, ctx);
    }
    body.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.formParameters.length, item;
        for (i=0; i<i_len; i++) {
            item = this.formParameters[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.mediaTypes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.mediaTypes[i];
            item.wzInitialize(ctx);
        }
        if (this.typeItem != null) {
            this.typeItem.wzInitialize(ctx);
        }
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzInitialize(ctx);
        }
        if (isEmpty(this.wzName) == false && _.isObject(this.wzRoot().schema)) {
            this.typeItem = this.wzRoot().schema.getTypeItem(this.wzName);
        }
        if (this.properties.length > 0 && _.isObject(this.typeItem) == false) {
            this.typeItem = new md.object('Implicit', this.wzSourceLineInfo);
            this.typeItem.wzParent = this;
            var i, i_len=this.properties.length, item;
            for (i=0; i<i_len; i++) {
                item = this.properties[i];
                item.wzParent = this.typeItem;
                this.typeItem.push(item);
            }
        }
        _md.ramlItem.prototype.wzInitialize.call(this, ctx);
    }
    return body;
})(ramlItem);

_md.body = body;
// element mediaTypes
var mediaTypes = (function (ramlItem) {
    _inherits(mediaTypes, ramlItem);
    function mediaTypes(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(mediaTypes.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, mediaTypes);
        this.wzElement = "mediaTypes";
        // relation mediaType
        this.mediaTypes = [];
    }
    mediaTypes.prototype.addMediaType = function(name, sourceLineInfo) {
        var retval = new _md.mediaType(name, sourceLineInfo);
        retval.wzParent = this;
        this.mediaTypes.push(retval);
        return retval;
    }
    mediaTypes.prototype.getMediaType = function(name) {
        var found = null;
        this.mediaTypes.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    mediaTypes.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    mediaTypes.prototype.toJsonProperties = function(result) {
        _md.ramlItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    mediaTypes.prototype.toJsonChildren = function(result) {
        _md.ramlItem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.mediaTypes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.mediaTypes[i];
            items.push(item.toJson());
        }
        result['mediaTypes'] = items;
    }
    mediaTypes.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 8 && _ch == 't') {
            if (name === 'text/xml') {
                return this.wzLoadToChildColl(child, _md.textXml, this.mediaTypes);
            }
            else if (name === 'text/css') {
                return this.wzLoadToChildColl(child, _md.textCss, this.mediaTypes);
            }
        }
        if (_l == 9 && _ch == 'm') {
            if (name === 'mediatype') {
                return this.wzLoadToChildColl(child, _md.mediaType, this.mediaTypes);
            }
        }
        if (_l == 9 && _ch == 't') {
            if (name === 'text/html') {
                return this.wzLoadToChildColl(child, _md.textHtml, this.mediaTypes);
            }
        }
        if (_l == 10 && _ch == 'm') {
            if (name === 'media-type') {
                return this.wzLoadToChildColl(child, _md.mediaType, this.mediaTypes);
            }
        }
        if (_l == 16 && _ch == 'a') {
            if (name === 'application/json') {
                return this.wzLoadToChildColl(child, _md.applicationJson, this.mediaTypes);
            }
        }
        if (_l == 22 && _ch == 'a') {
            if (name === 'application/javascript') {
                return this.wzLoadToChildColl(child, _md.textJavascript, this.mediaTypes);
            }
        }
        ok = _md.ramlItem.prototype.loadChild.call(this, child);
        return ok;
    }
    mediaTypes.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    mediaTypes.prototype.wzVerify = function(ctx) {
        var i, i_len=this.mediaTypes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.mediaTypes[i];
            item.wzVerify(ctx);
        }
        _md.ramlItem.prototype.wzVerify.call(this, ctx);
    }
    mediaTypes.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.mediaTypes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.mediaTypes[i];
            item.wzInitialize(ctx);
        }
        _md.ramlItem.prototype.wzInitialize.call(this, ctx);
    }
    return mediaTypes;
})(ramlItem);

_md.mediaTypes = mediaTypes;
/**
    element mediaType
     (Optional) The media types returned by API responses,
     and expected from API requests that accept a body,
     MAY be defaulted by specifying the mediaType property.
     This property is specified at the root level of the API definition.
     The property's value MAY be a single string with a valid media type
     [example]
     media-type text/xml
     media-type application/json
*/
var mediaType = (function (ramlItem) {
    _inherits(mediaType, ramlItem);
    function mediaType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(mediaType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, mediaType);
        this.wzElement = "mediaType";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.type = null
        // relation typeItem
        this.typeItem = null;
        // relation property
        // Implicit type
        // Properties can be defined directly inside the body node (without an object node)
        this.properties = [];
        // relation example
        this.examples = [];
    }
    mediaType.prototype.addProperty = function(name, sourceLineInfo) {
        var retval = new _md.property(name, sourceLineInfo);
        retval.wzParent = this;
        this.properties.push(retval);
        return retval;
    }
    mediaType.prototype.getProperty = function(name) {
        var found = null;
        this.properties.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    mediaType.prototype.addExample = function(name, sourceLineInfo) {
        var retval = new _md.example(name, sourceLineInfo);
        retval.wzParent = this;
        this.examples.push(retval);
        return retval;
    }
    mediaType.prototype.getExample = function(name) {
        var found = null;
        this.examples.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    mediaType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    mediaType.prototype.toJsonProperties = function(result) {
        _md.ramlItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
    }
    mediaType.prototype.toJsonChildren = function(result) {
        _md.ramlItem.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.typeItem != null) {
            result['typeItem'] = this.typeItem.toJson();
        }
        else {
            result['typeItem'] = null;
        }
        items = [];
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            items.push(item.toJson());
        }
        result['properties'] = items;
        items = [];
        var i, i_len=this.examples.length, item;
        for (i=0; i<i_len; i++) {
            item = this.examples[i];
            items.push(item.toJson());
        }
        result['examples'] = items;
    }
    mediaType.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, _md.property, this.properties);
            }
        }
        if (_l == 3 && _ch == 'a') {
            if (name === 'any') {
                return this.wzLoadOneToOne(child, _md.any, 'typeItem');
            }
        }
        if (_l == 3 && _ch == 'n') {
            if (name === 'nil') {
                return this.wzLoadOneToOne(child, _md.nil, 'typeItem');
            }
            else if (name === 'nil') {
                return this.wzLoadToChildColl(child, _md.nilProperty, this.properties);
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'file') {
                return this.wzLoadOneToOne(child, _md.file, 'typeItem');
            }
            else if (name === 'file') {
                return this.wzLoadToChildColl(child, _md.fileProperty, this.properties);
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'a') {
            if (name === 'array') {
                return this.wzLoadOneToOne(child, _md.array, 'typeItem');
            }
        }
        if (_l == 5 && _ch == 'u') {
            if (name === 'union') {
                return this.wzLoadOneToOne(child, _md.union, 'typeItem');
            }
        }
        if (_l == 6 && _ch == 'n') {
            if (name === 'number') {
                return this.wzLoadOneToOne(child, _md.number, 'typeItem');
            }
            else if (name === 'number') {
                return this.wzLoadToChildColl(child, _md.numberProperty, this.properties);
            }
        }
        if (_l == 6 && _ch == 'o') {
            if (name === 'object') {
                return this.wzLoadOneToOne(child, _md.object, 'typeItem');
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'string') {
                return this.wzLoadOneToOne(child, _md.string, 'typeItem');
            }
            else if (name === 'string') {
                return this.wzLoadToChildColl(child, _md.stringProperty, this.properties);
            }
        }
        if (_l == 7 && _ch == 'b') {
            if (name === 'boolean') {
                return this.wzLoadOneToOne(child, _md.xboolean, 'typeItem');
            }
            else if (name === 'boolean') {
                return this.wzLoadToChildColl(child, _md.booleanProperty, this.properties);
            }
        }
        if (_l == 7 && _ch == 'e') {
            if (name === 'example') {
                return this.wzLoadToChildColl(child, _md.example, this.examples);
            }
        }
        if (_l == 7 && _ch == 'i') {
            if (name === 'integer') {
                return this.wzLoadOneToOne(child, _md.integer, 'typeItem');
            }
            else if (name === 'integer') {
                return this.wzLoadToChildColl(child, _md.integerProperty, this.properties);
            }
        }
        if (_l == 8 && _ch == 'd') {
            if (name === 'dateonly') {
                return this.wzLoadOneToOne(child, _md.dateOnly, 'typeItem');
            }
            else if (name === 'datetime') {
                return this.wzLoadOneToOne(child, _md.datetime, 'typeItem');
            }
            else if (name === 'datetime') {
                return this.wzLoadToChildColl(child, _md.datetimeProperty, this.properties);
            }
            else if (name === 'dateonly') {
                return this.wzLoadToChildColl(child, _md.dateOnlyProperty, this.properties);
            }
        }
        if (_l == 8 && _ch == 'e') {
            if (name === 'external') {
                return this.wzLoadOneToOne(child, _md.external, 'typeItem');
            }
        }
        if (_l == 8 && _ch == 't') {
            if (name === 'timeonly') {
                return this.wzLoadOneToOne(child, _md.timeOnly, 'typeItem');
            }
            else if (name === 'timeonly') {
                return this.wzLoadToChildColl(child, _md.timeOnlyProperty, this.properties);
            }
        }
        if (_l == 9 && _ch == 'd') {
            if (name === 'date-only') {
                return this.wzLoadOneToOne(child, _md.dateOnly, 'typeItem');
            }
            else if (name === 'date-only') {
                return this.wzLoadToChildColl(child, _md.dateOnlyProperty, this.properties);
            }
        }
        if (_l == 9 && _ch == 't') {
            if (name === 'time-only') {
                return this.wzLoadOneToOne(child, _md.timeOnly, 'typeItem');
            }
            else if (name === 'time-only') {
                return this.wzLoadToChildColl(child, _md.timeOnlyProperty, this.properties);
            }
        }
        if (_l == 12 && _ch == 'd') {
            if (name === 'datetimeonly') {
                return this.wzLoadOneToOne(child, _md.dateTimeOnly, 'typeItem');
            }
            else if (name === 'datetimeonly') {
                return this.wzLoadToChildColl(child, _md.datetimeOnlyProperty, this.properties);
            }
        }
        if (_l == 13 && _ch == 'd') {
            if (name === 'datetime-only') {
                return this.wzLoadOneToOne(child, _md.dateTimeOnly, 'typeItem');
            }
            else if (name === 'datetime-only') {
                return this.wzLoadToChildColl(child, _md.datetimeOnlyProperty, this.properties);
            }
        }
        ok = _md.ramlItem.prototype.loadChild.call(this, child);
        return ok;
    }
    mediaType.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    mediaType.prototype.wzVerify = function(ctx) {
        if (this.typeItem != null) {
            this.typeItem.wzVerify(ctx);
        }
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.examples.length, item;
        for (i=0; i<i_len; i++) {
            item = this.examples[i];
            item.wzVerify(ctx);
        }
        if (isEmpty(this.type) == false && _.isObject(this.wzRoot().schema) == false || _.isObject(this.wzRoot().schema.getTypeItem(this.type)) == null) {
            ctx.addError('Referenced type not found: "' + this.type + '"');
        }
        if (this.properties.length > 0 && _.isObject(this.typeItem) == true) {
            ctx.addError('A body cannot have both properties and a type defined', this);
        }
        _md.ramlItem.prototype.wzVerify.call(this, ctx);
    }
    mediaType.prototype.wzInitialize = function(ctx) {
        if (this.typeItem != null) {
            this.typeItem.wzInitialize(ctx);
        }
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.examples.length, item;
        for (i=0; i<i_len; i++) {
            item = this.examples[i];
            item.wzInitialize(ctx);
        }
        if (!this.name) {
            this.name = this.wzName;
        }
        if (isEmpty(this.type) == false && _.isObject(this.wzRoot().schema)) {
            this.typeItem = this.wzRoot().schema.getTypeItem(this.type);
        }
        if (this.properties.length > 0 && _.isObject(this.typeItem) == false) {
            this.typeItem = new md.object('Implicit', this.wzSourceLineInfo);
            this.typeItem.wzParent = this;
            var i, i_len=this.properties.length, item;
            for (i=0; i<i_len; i++) {
                item = this.properties[i];
                item.wzParent = this.typeItem;
                this.typeItem.push(item);
            }
        }
        _md.ramlItem.prototype.wzInitialize.call(this, ctx);
    }
    return mediaType;
})(ramlItem);

_md.mediaType = mediaType;
// element applicationJson
var applicationJson = (function (mediaType) {
    _inherits(applicationJson, mediaType);
    function applicationJson(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(applicationJson.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, applicationJson);
        this.wzElement = "applicationJson";
    }
    applicationJson.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    applicationJson.prototype.toJsonProperties = function(result) {
        _md.mediaType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    applicationJson.prototype.toJsonChildren = function(result) {
        _md.mediaType.prototype.toJsonChildren.call(this, result);
    }
    applicationJson.prototype.wzInitialize = function(ctx) {
        this.name = "application/json";
        _md.mediaType.prototype.wzInitialize.call(this, ctx);
    }
    return applicationJson;
})(mediaType);

_md.applicationJson = applicationJson;
// element textXml
var textXml = (function (mediaType) {
    _inherits(textXml, mediaType);
    function textXml(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(textXml.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, textXml);
        this.wzElement = "textXml";
    }
    textXml.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    textXml.prototype.toJsonProperties = function(result) {
        _md.mediaType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    textXml.prototype.toJsonChildren = function(result) {
        _md.mediaType.prototype.toJsonChildren.call(this, result);
    }
    textXml.prototype.wzInitialize = function(ctx) {
        this.name = "text/xml";
        _md.mediaType.prototype.wzInitialize.call(this, ctx);
    }
    return textXml;
})(mediaType);

_md.textXml = textXml;
// element textHtml
var textHtml = (function (mediaType) {
    _inherits(textHtml, mediaType);
    function textHtml(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(textHtml.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, textHtml);
        this.wzElement = "textHtml";
    }
    textHtml.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    textHtml.prototype.toJsonProperties = function(result) {
        _md.mediaType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    textHtml.prototype.toJsonChildren = function(result) {
        _md.mediaType.prototype.toJsonChildren.call(this, result);
    }
    textHtml.prototype.wzInitialize = function(ctx) {
        this.name = "text/html";
        _md.mediaType.prototype.wzInitialize.call(this, ctx);
    }
    return textHtml;
})(mediaType);

_md.textHtml = textHtml;
// element textCss
var textCss = (function (mediaType) {
    _inherits(textCss, mediaType);
    function textCss(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(textCss.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, textCss);
        this.wzElement = "textCss";
    }
    textCss.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    textCss.prototype.toJsonProperties = function(result) {
        _md.mediaType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    textCss.prototype.toJsonChildren = function(result) {
        _md.mediaType.prototype.toJsonChildren.call(this, result);
    }
    textCss.prototype.wzInitialize = function(ctx) {
        this.name = "text/css";
        _md.mediaType.prototype.wzInitialize.call(this, ctx);
    }
    return textCss;
})(mediaType);

_md.textCss = textCss;
// element textJavascript
var textJavascript = (function (mediaType) {
    _inherits(textJavascript, mediaType);
    function textJavascript(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(textJavascript.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, textJavascript);
        this.wzElement = "textJavascript";
    }
    textJavascript.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    textJavascript.prototype.toJsonProperties = function(result) {
        _md.mediaType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    textJavascript.prototype.toJsonChildren = function(result) {
        _md.mediaType.prototype.toJsonChildren.call(this, result);
    }
    textJavascript.prototype.wzInitialize = function(ctx) {
        this.name = "application/javascript";
        _md.mediaType.prototype.wzInitialize.call(this, ctx);
    }
    return textJavascript;
})(mediaType);

_md.textJavascript = textJavascript;
/**
    element responses
     Responses MUST be a map of one or more HTTP status codes,
     where each status code itself is a map that describes that status code.
     Each response MAY contain a body property, which conforms to the same structure
     as request body properties (see Body).
     Responses that can return more than one response code
     MAY therefore have multiple bodies defined.
     For APIs without a priori knowledge of the response types for their responses,
     "*slash*" MAY be used to indicate that responses that do not matching other defined data types MUST be accepted.
     Processing applications MUST match the most descriptive media type first if "*slash*" is used.
*/
var responses = (function (ramlItem) {
    _inherits(responses, ramlItem);
    function responses(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(responses.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, responses);
        this.wzElement = "responses";
        // relation responseStatus
        this.responseStatuses = [];
    }
    responses.prototype.addResponseStatus = function(name, sourceLineInfo) {
        var retval = new _md.responseStatus(name, sourceLineInfo);
        retval.wzParent = this;
        this.responseStatuses.push(retval);
        return retval;
    }
    responses.prototype.getResponseStatus = function(name) {
        var found = null;
        this.responseStatuses.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    responses.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    responses.prototype.toJsonProperties = function(result) {
        _md.ramlItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    responses.prototype.toJsonChildren = function(result) {
        _md.ramlItem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.responseStatuses.length, item;
        for (i=0; i<i_len; i++) {
            item = this.responseStatuses[i];
            items.push(item.toJson());
        }
        result['responseStatuses'] = items;
    }
    responses.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == '2') {
            if (name === '200') {
                return this.wzLoadToChildColl(child, _md.Status200, this.responseStatuses);
            }
            else if (name === '201') {
                return this.wzLoadToChildColl(child, _md.Status201, this.responseStatuses);
            }
            else if (name === '204') {
                return this.wzLoadToChildColl(child, _md.Status204, this.responseStatuses);
            }
        }
        if (_l == 3 && _ch == '4') {
            if (name === '400') {
                return this.wzLoadToChildColl(child, _md.Status400, this.responseStatuses);
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'status') {
                return this.wzLoadToChildColl(child, _md.responseStatus, this.responseStatuses);
            }
        }
        ok = _md.ramlItem.prototype.loadChild.call(this, child);
        return ok;
    }
    responses.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    responses.prototype.wzVerify = function(ctx) {
        var i, i_len=this.responseStatuses.length, item;
        for (i=0; i<i_len; i++) {
            item = this.responseStatuses[i];
            item.wzVerify(ctx);
        }
        _md.ramlItem.prototype.wzVerify.call(this, ctx);
    }
    responses.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.responseStatuses.length, item;
        for (i=0; i<i_len; i++) {
            item = this.responseStatuses[i];
            item.wzInitialize(ctx);
        }
        _md.ramlItem.prototype.wzInitialize.call(this, ctx);
    }
    return responses;
})(ramlItem);

_md.responses = responses;
// element responseStatus
var responseStatus = (function (ramlItem) {
    _inherits(responseStatus, ramlItem);
    function responseStatus(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(responseStatus.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, responseStatus);
        this.wzElement = "responseStatus";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.description = null
        // relation body
        this.body = null;
        // relation header
        this.headers = [];
    }
    responseStatus.prototype.addHeader = function(name, sourceLineInfo) {
        var retval = new _md.header(name, sourceLineInfo);
        retval.wzParent = this;
        this.headers.push(retval);
        return retval;
    }
    responseStatus.prototype.getHeader = function(name) {
        var found = null;
        this.headers.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    responseStatus.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    responseStatus.prototype.toJsonProperties = function(result) {
        _md.ramlItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.description)) {
            result["description"] = this.description;
        }
    }
    responseStatus.prototype.toJsonChildren = function(result) {
        _md.ramlItem.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.body != null) {
            result['body'] = this.body.toJson();
        }
        else {
            result['body'] = null;
        }
        items = [];
        var i, i_len=this.headers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.headers[i];
            items.push(item.toJson());
        }
        result['headers'] = items;
    }
    responseStatus.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'b') {
            if (name === 'body') {
                return this.wzLoadOneToOne(child, _md.body, 'body');
            }
        }
        if (_l == 6 && _ch == 'h') {
            if (name === 'header') {
                return this.wzLoadToChildColl(child, _md.header, this.headers);
            }
        }
        if (_l == 11 && _ch == 'd') {
            if (name === 'description') {
                this.description = child.v; return true;
            }
        }
        ok = _md.ramlItem.prototype.loadChild.call(this, child);
        return ok;
    }
    responseStatus.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    responseStatus.prototype.wzVerify = function(ctx) {
        if (this.body != null) {
            this.body.wzVerify(ctx);
        }
        var i, i_len=this.headers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.headers[i];
            item.wzVerify(ctx);
        }
        _md.ramlItem.prototype.wzVerify.call(this, ctx);
    }
    responseStatus.prototype.wzInitialize = function(ctx) {
        if (this.body != null) {
            this.body.wzInitialize(ctx);
        }
        var i, i_len=this.headers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.headers[i];
            item.wzInitialize(ctx);
        }
        if (!this.name) {
            this.name = this.wzName;
        }
        _md.ramlItem.prototype.wzInitialize.call(this, ctx);
    }
    responseStatus.prototype.getMediaTypes = function() {
        var ret = [];
        if (_.isObject(this.body)) {
            var i, i_len=this.body.mediaTypes.length, item;
            for (i=0; i<i_len; i++) {
                item = this.body.mediaTypes[i];
                ret.push(item);
            }
        }
        return ret;
    }
    return responseStatus;
})(ramlItem);

_md.responseStatus = responseStatus;
// element Status200
var Status200 = (function (responseStatus) {
    _inherits(Status200, responseStatus);
    function Status200(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(Status200.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, Status200);
        this.wzElement = "Status200";
    }
    Status200.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    Status200.prototype.toJsonProperties = function(result) {
        _md.responseStatus.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    Status200.prototype.toJsonChildren = function(result) {
        _md.responseStatus.prototype.toJsonChildren.call(this, result);
    }
    Status200.prototype.wzInitialize = function(ctx) {
        this.name = '200';
        _md.responseStatus.prototype.wzInitialize.call(this, ctx);
    }
    return Status200;
})(responseStatus);

_md.Status200 = Status200;
// element Status201
var Status201 = (function (responseStatus) {
    _inherits(Status201, responseStatus);
    function Status201(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(Status201.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, Status201);
        this.wzElement = "Status201";
    }
    Status201.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    Status201.prototype.toJsonProperties = function(result) {
        _md.responseStatus.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    Status201.prototype.toJsonChildren = function(result) {
        _md.responseStatus.prototype.toJsonChildren.call(this, result);
    }
    Status201.prototype.wzInitialize = function(ctx) {
        this.name = '201';
        _md.responseStatus.prototype.wzInitialize.call(this, ctx);
    }
    return Status201;
})(responseStatus);

_md.Status201 = Status201;
// element Status204
var Status204 = (function (responseStatus) {
    _inherits(Status204, responseStatus);
    function Status204(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(Status204.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, Status204);
        this.wzElement = "Status204";
    }
    Status204.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    Status204.prototype.toJsonProperties = function(result) {
        _md.responseStatus.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    Status204.prototype.toJsonChildren = function(result) {
        _md.responseStatus.prototype.toJsonChildren.call(this, result);
    }
    Status204.prototype.wzInitialize = function(ctx) {
        this.name = '204';
        _md.responseStatus.prototype.wzInitialize.call(this, ctx);
    }
    return Status204;
})(responseStatus);

_md.Status204 = Status204;
// element Status400
var Status400 = (function (responseStatus) {
    _inherits(Status400, responseStatus);
    function Status400(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(Status400.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, Status400);
        this.wzElement = "Status400";
    }
    Status400.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    Status400.prototype.toJsonProperties = function(result) {
        _md.responseStatus.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    Status400.prototype.toJsonChildren = function(result) {
        _md.responseStatus.prototype.toJsonChildren.call(this, result);
    }
    Status400.prototype.wzInitialize = function(ctx) {
        this.name = '400';
        _md.responseStatus.prototype.wzInitialize.call(this, ctx);
    }
    return Status400;
})(responseStatus);

_md.Status400 = Status400;
/**
    element security
    
*/
var security = (function (ramlItem) {
    _inherits(security, ramlItem);
    function security(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(security.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, security);
        this.allowedTYPES = [ "none", "OAuth.1.0", "OAuth.2.0", "Basic", "Digest", "x-{other}"];
        this.TYPE_NONE = "none";
        this.TYPE_OAUTH_1_0 = "OAuth.1.0";
        this.TYPE_OAUTH_2_0 = "OAuth.2.0";
        this.TYPE_BASIC = "Basic";
        this.TYPE_DIGEST = "Digest";
        this.TYPE_X__OTHER_ = "x-{other}";
        this.wzElement = "security";
        // The description attribute MAY be used to describe a securitySchemes property.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.description = null
        // The type attribute MAY be used to convey information about authentication flows and mechanisms to processing applications such as Documentation Generators and Client generators. Processing applications SHOULD provide handling for the following schemes:
        this.type = "none";
        // relation setting
        this.settings = [];
    }
    security.TYPE_NONE = "none";
    security.TYPE_OAUTH_1_0 = "OAuth.1.0";
    security.TYPE_OAUTH_2_0 = "OAuth.2.0";
    security.TYPE_BASIC = "Basic";
    security.TYPE_DIGEST = "Digest";
    security.TYPE_X__OTHER_ = "x-{other}";
    security.prototype.addSetting = function(name, sourceLineInfo) {
        var retval = new _md.setting(name, sourceLineInfo);
        retval.wzParent = this;
        this.settings.push(retval);
        return retval;
    }
    security.prototype.getSetting = function(name) {
        var found = null;
        this.settings.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    security.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    security.prototype.toJsonProperties = function(result) {
        _md.ramlItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.description)) {
            result["description"] = this.description;
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
    }
    security.prototype.toJsonChildren = function(result) {
        _md.ramlItem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.settings.length, item;
        for (i=0; i<i_len; i++) {
            item = this.settings[i];
            items.push(item.toJson());
        }
        result['settings'] = items;
    }
    security.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 's') {
            if (name === 'setting') {
                return this.wzLoadToChildColl(child, _md.setting, this.settings);
            }
        }
        if (_l == 11 && _ch == 'd') {
            if (name === 'description') {
                this.description = child.v; return true;
            }
        }
        ok = _md.ramlItem.prototype.loadChild.call(this, child);
        return ok;
    }
    security.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    security.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("security", "type", this.type, this.allowedTYPES, this);
        var i, i_len=this.settings.length, item;
        for (i=0; i<i_len; i++) {
            item = this.settings[i];
            item.wzVerify(ctx);
        }
        _md.ramlItem.prototype.wzVerify.call(this, ctx);
    }
    security.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.settings.length, item;
        for (i=0; i<i_len; i++) {
            item = this.settings[i];
            item.wzInitialize(ctx);
        }
        _md.ramlItem.prototype.wzInitialize.call(this, ctx);
    }
    return security;
})(ramlItem);

_md.security = security;
// element setting
var setting = (function (ramlItem) {
    _inherits(setting, ramlItem);
    function setting(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(setting.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, setting);
        this.wzElement = "setting";
        // The URI of the Temporary Credential Request endpoint as defined in RFC5849 Section 2.1
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.requestTokenUri = null
        // The URI of the Resource Owner Authorization endpoint as defined in RFC5849 Section 2.2
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.authorizationUri = null
        // The URI of the Token Request endpoint as defined in RFC5849 Section 2.3
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.tokenCredentialsUri = null
        // The URI of the Authorization Endpoint as defined in RFC6749 [RFC6748] Section 3.1
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.authorizationUri = null
        // The URI of the Token Endpoint as defined in RFC6749 [RFC6748] Section 3.2
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.accessTokenUri = null
        // A list of the Authorization grants supported by the API As defined in RFC6749 [RFC6749] Sections 4.1, 4.2, 4.3 and 4.4, can be any of: code, token, owner or credentials.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.authorizationGrants = null
        // A list of scopes supported by the API as defined in RFC6749 [RFC6749] Section 3.3
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.scopes = null
    }
    setting.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    setting.prototype.toJsonProperties = function(result) {
        _md.ramlItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.requestTokenUri)) {
            result["requestTokenUri"] = this.requestTokenUri;
        }
        if (!isEmpty(this.authorizationUri)) {
            result["authorizationUri"] = this.authorizationUri;
        }
        if (!isEmpty(this.tokenCredentialsUri)) {
            result["tokenCredentialsUri"] = this.tokenCredentialsUri;
        }
        if (!isEmpty(this.authorizationUri)) {
            result["authorizationUri"] = this.authorizationUri;
        }
        if (!isEmpty(this.accessTokenUri)) {
            result["accessTokenUri"] = this.accessTokenUri;
        }
        if (!isEmpty(this.authorizationGrants)) {
            result["authorizationGrants"] = this.authorizationGrants;
        }
        if (!isEmpty(this.scopes)) {
            result["scopes"] = this.scopes;
        }
    }
    setting.prototype.toJsonChildren = function(result) {
        _md.ramlItem.prototype.toJsonChildren.call(this, result);
    }
    setting.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 6 && _ch == 's') {
            if (name === 'scopes') {
                this.scopes = child.v; return true;
            }
        }
        if (_l == 14 && _ch == 'a') {
            if (name === 'accesstokenuri') {
                this.accessTokenUri = child.v; return true;
            }
        }
        if (_l == 15 && _ch == 'r') {
            if (name === 'requesttokenuri') {
                this.requestTokenUri = child.v; return true;
            }
        }
        if (_l == 16 && _ch == 'a') {
            if (name === 'authorizationuri') {
                this.authorizationUri = child.v; return true;
            }
            else if (name === 'authorizationuri') {
                this.authorizationUri = child.v; return true;
            }
        }
        if (_l == 19 && _ch == 'a') {
            if (name === 'authorizationgrants') {
                this.authorizationGrants = child.v; return true;
            }
        }
        if (_l == 19 && _ch == 't') {
            if (name === 'tokencredentialsuri') {
                this.tokenCredentialsUri = child.v; return true;
            }
        }
        ok = _md.ramlItem.prototype.loadChild.call(this, child);
        return ok;
    }
    setting.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return setting;
})(ramlItem);

_md.setting = setting;
// element schema
var schema = (function (ramlItem) {
    _inherits(schema, ramlItem);
    function schema(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(schema.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, schema);
        this.wzElement = "schema";
        // relation typeItem
        this.typeItems = [];
    }
    schema.prototype.getTypeItem = function(name) {
        var found = null;
        this.typeItems.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    schema.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    schema.prototype.toJsonProperties = function(result) {
        _md.ramlItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    schema.prototype.toJsonChildren = function(result) {
        _md.ramlItem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.typeItems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeItems[i];
            items.push(item.toJson());
        }
        result['typeItems'] = items;
    }
    schema.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'a') {
            if (name === 'any') {
                return this.wzLoadToChildColl(child, _md.any, this.typeItems);
            }
        }
        if (_l == 3 && _ch == 'n') {
            if (name === 'nil') {
                return this.wzLoadToChildColl(child, _md.nil, this.typeItems);
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'file') {
                return this.wzLoadToChildColl(child, _md.file, this.typeItems);
            }
        }
        if (_l == 5 && _ch == 'a') {
            if (name === 'array') {
                return this.wzLoadToChildColl(child, _md.array, this.typeItems);
            }
        }
        if (_l == 5 && _ch == 'u') {
            if (name === 'union') {
                return this.wzLoadToChildColl(child, _md.union, this.typeItems);
            }
        }
        if (_l == 6 && _ch == 'n') {
            if (name === 'number') {
                return this.wzLoadToChildColl(child, _md.number, this.typeItems);
            }
        }
        if (_l == 6 && _ch == 'o') {
            if (name === 'object') {
                return this.wzLoadToChildColl(child, _md.object, this.typeItems);
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'string') {
                return this.wzLoadToChildColl(child, _md.string, this.typeItems);
            }
        }
        if (_l == 7 && _ch == 'b') {
            if (name === 'boolean') {
                return this.wzLoadToChildColl(child, _md.xboolean, this.typeItems);
            }
        }
        if (_l == 7 && _ch == 'i') {
            if (name === 'integer') {
                return this.wzLoadToChildColl(child, _md.integer, this.typeItems);
            }
        }
        if (_l == 8 && _ch == 'd') {
            if (name === 'dateonly') {
                return this.wzLoadToChildColl(child, _md.dateOnly, this.typeItems);
            }
            else if (name === 'datetime') {
                return this.wzLoadToChildColl(child, _md.datetime, this.typeItems);
            }
        }
        if (_l == 8 && _ch == 'e') {
            if (name === 'external') {
                return this.wzLoadToChildColl(child, _md.external, this.typeItems);
            }
        }
        if (_l == 8 && _ch == 't') {
            if (name === 'timeonly') {
                return this.wzLoadToChildColl(child, _md.timeOnly, this.typeItems);
            }
        }
        if (_l == 9 && _ch == 'd') {
            if (name === 'date-only') {
                return this.wzLoadToChildColl(child, _md.dateOnly, this.typeItems);
            }
        }
        if (_l == 9 && _ch == 't') {
            if (name === 'time-only') {
                return this.wzLoadToChildColl(child, _md.timeOnly, this.typeItems);
            }
        }
        if (_l == 12 && _ch == 'd') {
            if (name === 'datetimeonly') {
                return this.wzLoadToChildColl(child, _md.dateTimeOnly, this.typeItems);
            }
        }
        if (_l == 13 && _ch == 'd') {
            if (name === 'datetime-only') {
                return this.wzLoadToChildColl(child, _md.dateTimeOnly, this.typeItems);
            }
        }
        ok = _md.ramlItem.prototype.loadChild.call(this, child);
        return ok;
    }
    schema.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    schema.prototype.wzVerify = function(ctx) {
        var i, i_len=this.typeItems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeItems[i];
            item.wzVerify(ctx);
        }
        _md.ramlItem.prototype.wzVerify.call(this, ctx);
    }
    schema.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.typeItems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeItems[i];
            item.wzInitialize(ctx);
        }
        _md.ramlItem.prototype.wzInitialize.call(this, ctx);
    }
    return schema;
})(ramlItem);

_md.schema = schema;
// element typeItem
var typeItem = (function (ramlItem) {
    _inherits(typeItem, ramlItem);
    function typeItem(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeItem.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeItem);
        this.allowedTYPES = [ "any", "object", "array", "union", "external", "string", "number", "integer", "boolean", "datetime", "datetime-only", "date-only", "time-only", "file", "nil"];
        this.TYPE_ANY = "any";
        this.TYPE_OBJECT = "object";
        this.TYPE_ARRAY = "array";
        this.TYPE_UNION = "union";
        this.TYPE_EXTERNAL = "external";
        this.TYPE_STRING = "string";
        this.TYPE_NUMBER = "number";
        this.TYPE_INTEGER = "integer";
        this.TYPE_XBOOLEAN = "boolean";
        this.TYPE_DATETIME = "datetime";
        this.TYPE_DATETIME_ONLY = "datetime-only";
        this.TYPE_DATE_ONLY = "date-only";
        this.TYPE_TIME_ONLY = "time-only";
        this.TYPE_FILE = "file";
        this.TYPE_NIL = "nil";
        this.wzElement = "typeItem";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.title = null
        this.type = "any";
        this.isScalar = false;
    }
    typeItem.TYPE_ANY = "any";
    typeItem.TYPE_OBJECT = "object";
    typeItem.TYPE_ARRAY = "array";
    typeItem.TYPE_UNION = "union";
    typeItem.TYPE_EXTERNAL = "external";
    typeItem.TYPE_STRING = "string";
    typeItem.TYPE_NUMBER = "number";
    typeItem.TYPE_INTEGER = "integer";
    typeItem.TYPE_XBOOLEAN = "boolean";
    typeItem.TYPE_DATETIME = "datetime";
    typeItem.TYPE_DATETIME_ONLY = "datetime-only";
    typeItem.TYPE_DATE_ONLY = "date-only";
    typeItem.TYPE_TIME_ONLY = "time-only";
    typeItem.TYPE_FILE = "file";
    typeItem.TYPE_NIL = "nil";
    typeItem.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    typeItem.prototype.toJsonProperties = function(result) {
        _md.ramlItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.title)) {
            result["title"] = this.title;
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
        result["isScalar"] = this.isScalar;
    }
    typeItem.prototype.toJsonChildren = function(result) {
        _md.ramlItem.prototype.toJsonChildren.call(this, result);
    }
    typeItem.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 't') {
            if (name === 'title') {
                this.title = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'i') {
            if (name === 'isscalar') {
                this.isScalar = parseboolean(child.v, null, child); return true;
            }
        }
        ok = _md.ramlItem.prototype.loadChild.call(this, child);
        return ok;
    }
    typeItem.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    typeItem.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("typeItem", "type", this.type, this.allowedTYPES, this);
        _md.ramlItem.prototype.wzVerify.call(this, ctx);
    }
    return typeItem;
})(ramlItem);

_md.typeItem = typeItem;
// element any
var any = (function (typeItem) {
    _inherits(any, typeItem);
    function any(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(any.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, any);
        this.wzElement = "any";
    }
    any.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    any.prototype.toJsonProperties = function(result) {
        _md.typeItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    any.prototype.toJsonChildren = function(result) {
        _md.typeItem.prototype.toJsonChildren.call(this, result);
    }
    any.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        ok = _md.typeItem.prototype.loadChild.call(this, child);
        return ok;
    }
    any.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    any.prototype.getFacets = function() {
        var ret = [];
        if (this['type']) {
            ret.push({
                name: 'type', 
                value: this['type'], 
                facetType: 'string'
            });
        }
        if (this['title']) {
            ret.push({
                name: 'title', 
                value: this['title'], 
                facetType: 'string'
            });
        }
        return ret;
    }
    return any;
})(typeItem);

_md.any = any;
// element object
var object = (function (any) {
    _inherits(object, any);
    function object(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(object.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, object);
        this.wzElement = "object";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.super = null
        // The minimum number of properties allowed for instances of this type.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.minProperties = null
        // The maximum number of properties allowed for instances of this type.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.maxProperties = null
        // A Boolean that indicates if an object instance has additional properties.
        this.additionalProperties = true;
        /**
             Determines the concrete type of an individual object at runtime when,
             for example, payloads contain ambiguous types due to unions or inheritance.
             The value must match the name of one of the declared properties of a type.
             Unsupported practices are inline type declarations and
             using discriminator with non-scalar properties.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.discriminator = null
        /**
             Identifies the declaring type. Requires including a discriminator facet
             in the type declaration.
             A valid value is an actual value that might identify the type of
             an individual object and is unique in the hierarchy of the type.
             Inline type declarations are not supported.
        */
        this.discriminatorValue = "wzName";
        // relation property
        // The properties that instances of this type can or must have.
        this.properties = [];
    }
    object.prototype.addProperty = function(name, sourceLineInfo) {
        var retval = new _md.property(name, sourceLineInfo);
        retval.wzParent = this;
        this.properties.push(retval);
        return retval;
    }
    object.prototype.getProperty = function(name) {
        var found = null;
        this.properties.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    object.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    object.prototype.toJsonProperties = function(result) {
        _md.any.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.super)) {
            result["super"] = this.super;
        }
        if (!isEmpty(this.minProperties)) {
            result["minProperties"] = this.minProperties;
        }
        if (!isEmpty(this.maxProperties)) {
            result["maxProperties"] = this.maxProperties;
        }
        result["additionalProperties"] = this.additionalProperties;
        if (!isEmpty(this.discriminator)) {
            result["discriminator"] = this.discriminator;
        }
        if (!isEmpty(this.discriminatorValue)) {
            result["discriminatorValue"] = this.discriminatorValue;
        }
    }
    object.prototype.toJsonChildren = function(result) {
        _md.any.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            items.push(item.toJson());
        }
        result['properties'] = items;
    }
    object.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, _md.property, this.properties);
            }
        }
        if (_l == 3 && _ch == 'n') {
            if (name === 'nil') {
                return this.wzLoadToChildColl(child, _md.nilProperty, this.properties);
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'file') {
                return this.wzLoadToChildColl(child, _md.fileProperty, this.properties);
            }
        }
        if (_l == 5 && _ch == 's') {
            if (name === 'super') {
                this.super = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'n') {
            if (name === 'number') {
                return this.wzLoadToChildColl(child, _md.numberProperty, this.properties);
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'string') {
                return this.wzLoadToChildColl(child, _md.stringProperty, this.properties);
            }
        }
        if (_l == 7 && _ch == 'b') {
            if (name === 'boolean') {
                return this.wzLoadToChildColl(child, _md.booleanProperty, this.properties);
            }
        }
        if (_l == 7 && _ch == 'i') {
            if (name === 'integer') {
                return this.wzLoadToChildColl(child, _md.integerProperty, this.properties);
            }
        }
        if (_l == 8 && _ch == 'd') {
            if (name === 'datetime') {
                return this.wzLoadToChildColl(child, _md.datetimeProperty, this.properties);
            }
            else if (name === 'dateonly') {
                return this.wzLoadToChildColl(child, _md.dateOnlyProperty, this.properties);
            }
        }
        if (_l == 8 && _ch == 't') {
            if (name === 'timeonly') {
                return this.wzLoadToChildColl(child, _md.timeOnlyProperty, this.properties);
            }
        }
        if (_l == 9 && _ch == 'd') {
            if (name === 'date-only') {
                return this.wzLoadToChildColl(child, _md.dateOnlyProperty, this.properties);
            }
        }
        if (_l == 9 && _ch == 't') {
            if (name === 'time-only') {
                return this.wzLoadToChildColl(child, _md.timeOnlyProperty, this.properties);
            }
        }
        if (_l == 12 && _ch == 'd') {
            if (name === 'datetimeonly') {
                return this.wzLoadToChildColl(child, _md.datetimeOnlyProperty, this.properties);
            }
        }
        if (_l == 13 && _ch == 'd') {
            if (name === 'discriminator') {
                this.discriminator = child.v; return true;
            }
            else if (name === 'datetime-only') {
                return this.wzLoadToChildColl(child, _md.datetimeOnlyProperty, this.properties);
            }
        }
        if (_l == 14 && _ch == 'm') {
            if (name === 'min-properties') {
                this.minProperties = child.v; return true;
            }
            else if (name === 'min_properties') {
                this.minProperties = child.v; return true;
            }
            else if (name === 'max-properties') {
                this.maxProperties = child.v; return true;
            }
            else if (name === 'max_properties') {
                this.maxProperties = child.v; return true;
            }
        }
        if (_l == 19 && _ch == 'd') {
            if (name === 'discriminator-value') {
                this.discriminatorValue = child.v; return true;
            }
            else if (name === 'discriminator_value') {
                this.discriminatorValue = child.v; return true;
            }
        }
        if (_l == 21 && _ch == 'a') {
            if (name === 'additional-properties') {
                this.additionalProperties = parseboolean(child.v, null, child); return true;
            }
            else if (name === 'additional_properties') {
                this.additionalProperties = parseboolean(child.v, null, child); return true;
            }
        }
        ok = _md.any.prototype.loadChild.call(this, child);
        return ok;
    }
    object.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    object.prototype.wzVerify = function(ctx) {
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzVerify(ctx);
        }
        _md.any.prototype.wzVerify.call(this, ctx);
    }
    object.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzInitialize(ctx);
        }
        this.type = 'object';
        this.name = this.wzName;
        _md.any.prototype.wzInitialize.call(this, ctx);
    }
    object.prototype.getFacets = function() {
        var ret = [];
        if (this['type']) {
            ret.push({
                name: 'type', 
                value: this['type'], 
                facetType: 'string'
            });
        }
        if (this['title']) {
            ret.push({
                name: 'title', 
                value: this['title'], 
                facetType: 'string'
            });
        }
        if (this['minProperties']) {
            ret.push({
                name: 'minProperties', 
                value: this['minProperties'], 
                facetType: 'integer'
            });
        }
        if (this['maxProperties']) {
            ret.push({
                name: 'maxProperties', 
                value: this['maxProperties'], 
                facetType: 'integer'
            });
        }
        if (this['additionalProperties']) {
            ret.push({
                name: 'additionalProperties', 
                value: this['additionalProperties'], 
                facetType: 'boolean'
            });
        }
        if (this['discriminator']) {
            ret.push({
                name: 'discriminator', 
                value: this['discriminator'], 
                facetType: 'string'
            });
        }
        return ret;
    }
    return object;
})(any);

_md.object = object;
// element property
var property = (function (ramlBase) {
    _inherits(property, ramlBase);
    function property(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(property.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, property);
        this.allowedTYPES = [ "number", "boolean", "string", "date-only", "time-only", "datetime-only", "datetime", "file", "integer", "nil"];
        this.TYPE_NUMBER = "number";
        this.TYPE_XBOOLEAN = "boolean";
        this.TYPE_STRING = "string";
        this.TYPE_DATE_ONLY = "date-only";
        this.TYPE_TIME_ONLY = "time-only";
        this.TYPE_DATETIME_ONLY = "datetime-only";
        this.TYPE_DATETIME = "datetime";
        this.TYPE_FILE = "file";
        this.TYPE_INTEGER = "integer";
        this.TYPE_NIL = "nil";
        this.wzElement = "property";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.displayName = null
        this.isRequired = true;
        this.type = "string";
    }
    property.TYPE_NUMBER = "number";
    property.TYPE_XBOOLEAN = "boolean";
    property.TYPE_STRING = "string";
    property.TYPE_DATE_ONLY = "date-only";
    property.TYPE_TIME_ONLY = "time-only";
    property.TYPE_DATETIME_ONLY = "datetime-only";
    property.TYPE_DATETIME = "datetime";
    property.TYPE_FILE = "file";
    property.TYPE_INTEGER = "integer";
    property.TYPE_NIL = "nil";
    property.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    property.prototype.toJsonProperties = function(result) {
        _md.ramlBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.displayName)) {
            result["displayName"] = this.displayName;
        }
        result["isRequired"] = this.isRequired;
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
    }
    property.prototype.toJsonChildren = function(result) {
        _md.ramlBase.prototype.toJsonChildren.call(this, result);
    }
    property.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'l') {
            if (name === 'label') {
                this.displayName = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'i') {
            if (name === 'is-required') {
                this.isRequired = parseboolean(child.v, null, child); return true;
            }
            else if (name === 'is_required') {
                this.isRequired = parseboolean(child.v, null, child); return true;
            }
        }
        return ok;
    }
    property.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    property.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("property", "type", this.type, this.allowedTYPES, this);
        _md.ramlBase.prototype.wzVerify.call(this, ctx);
    }
    property.prototype.getFacets = function() {
        var ret = [];
        if (this['type']) {
            ret.push({
                name: 'type', 
                value: this['type'], 
                facetType: 'string'
            });
        }
        if (this['displayName']) {
            ret.push({
                name: 'displayName', 
                value: this['displayName'], 
                facetType: 'string'
            });
        }
        if (this['isRequired']) {
            ret.push({
                name: 'isRequired', 
                value: this['isRequired'], 
                facetType: 'boolean'
            });
        }
        return ret;
    }
    return property;
})(ramlBase);

_md.property = property;
// element numberProperty
var numberProperty = (function (property) {
    _inherits(numberProperty, property);
    function numberProperty(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(numberProperty.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, numberProperty);
        this.wzElement = "numberProperty";
    }
    numberProperty.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    numberProperty.prototype.toJsonProperties = function(result) {
        _md.property.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    numberProperty.prototype.toJsonChildren = function(result) {
        _md.property.prototype.toJsonChildren.call(this, result);
    }
    numberProperty.prototype.wzInitialize = function(ctx) {
        this.type = "number";
        _md.property.prototype.wzInitialize.call(this, ctx);
    }
    return numberProperty;
})(property);

_md.numberProperty = numberProperty;
// element booleanProperty
var booleanProperty = (function (property) {
    _inherits(booleanProperty, property);
    function booleanProperty(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(booleanProperty.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, booleanProperty);
        this.wzElement = "booleanProperty";
    }
    booleanProperty.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    booleanProperty.prototype.toJsonProperties = function(result) {
        _md.property.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    booleanProperty.prototype.toJsonChildren = function(result) {
        _md.property.prototype.toJsonChildren.call(this, result);
    }
    booleanProperty.prototype.wzInitialize = function(ctx) {
        this.type = "boolean";
        _md.property.prototype.wzInitialize.call(this, ctx);
    }
    return booleanProperty;
})(property);

_md.booleanProperty = booleanProperty;
// element stringProperty
var stringProperty = (function (property) {
    _inherits(stringProperty, property);
    function stringProperty(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(stringProperty.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, stringProperty);
        this.wzElement = "stringProperty";
    }
    stringProperty.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    stringProperty.prototype.toJsonProperties = function(result) {
        _md.property.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    stringProperty.prototype.toJsonChildren = function(result) {
        _md.property.prototype.toJsonChildren.call(this, result);
    }
    stringProperty.prototype.wzInitialize = function(ctx) {
        this.type = "string";
        _md.property.prototype.wzInitialize.call(this, ctx);
    }
    return stringProperty;
})(property);

_md.stringProperty = stringProperty;
// element datetimeProperty
var datetimeProperty = (function (property) {
    _inherits(datetimeProperty, property);
    function datetimeProperty(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(datetimeProperty.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, datetimeProperty);
        this.wzElement = "datetimeProperty";
    }
    datetimeProperty.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    datetimeProperty.prototype.toJsonProperties = function(result) {
        _md.property.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    datetimeProperty.prototype.toJsonChildren = function(result) {
        _md.property.prototype.toJsonChildren.call(this, result);
    }
    datetimeProperty.prototype.wzInitialize = function(ctx) {
        this.type = "datetime";
        _md.property.prototype.wzInitialize.call(this, ctx);
    }
    return datetimeProperty;
})(property);

_md.datetimeProperty = datetimeProperty;
// element fileProperty
var fileProperty = (function (property) {
    _inherits(fileProperty, property);
    function fileProperty(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(fileProperty.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, fileProperty);
        this.wzElement = "fileProperty";
    }
    fileProperty.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    fileProperty.prototype.toJsonProperties = function(result) {
        _md.property.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    fileProperty.prototype.toJsonChildren = function(result) {
        _md.property.prototype.toJsonChildren.call(this, result);
    }
    fileProperty.prototype.wzInitialize = function(ctx) {
        this.type = "file";
        _md.property.prototype.wzInitialize.call(this, ctx);
    }
    return fileProperty;
})(property);

_md.fileProperty = fileProperty;
// element integerProperty
var integerProperty = (function (property) {
    _inherits(integerProperty, property);
    function integerProperty(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(integerProperty.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, integerProperty);
        this.wzElement = "integerProperty";
    }
    integerProperty.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    integerProperty.prototype.toJsonProperties = function(result) {
        _md.property.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    integerProperty.prototype.toJsonChildren = function(result) {
        _md.property.prototype.toJsonChildren.call(this, result);
    }
    integerProperty.prototype.wzInitialize = function(ctx) {
        this.type = "integer";
        _md.property.prototype.wzInitialize.call(this, ctx);
    }
    return integerProperty;
})(property);

_md.integerProperty = integerProperty;
// element nilProperty
var nilProperty = (function (property) {
    _inherits(nilProperty, property);
    function nilProperty(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(nilProperty.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, nilProperty);
        this.wzElement = "nilProperty";
    }
    nilProperty.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    nilProperty.prototype.toJsonProperties = function(result) {
        _md.property.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    nilProperty.prototype.toJsonChildren = function(result) {
        _md.property.prototype.toJsonChildren.call(this, result);
    }
    nilProperty.prototype.wzInitialize = function(ctx) {
        this.type = "nil";
        _md.property.prototype.wzInitialize.call(this, ctx);
    }
    return nilProperty;
})(property);

_md.nilProperty = nilProperty;
// element dateOnlyProperty
var dateOnlyProperty = (function (property) {
    _inherits(dateOnlyProperty, property);
    function dateOnlyProperty(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(dateOnlyProperty.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, dateOnlyProperty);
        this.wzElement = "dateOnlyProperty";
    }
    dateOnlyProperty.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    dateOnlyProperty.prototype.toJsonProperties = function(result) {
        _md.property.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    dateOnlyProperty.prototype.toJsonChildren = function(result) {
        _md.property.prototype.toJsonChildren.call(this, result);
    }
    dateOnlyProperty.prototype.wzInitialize = function(ctx) {
        this.type = "date-only";
        _md.property.prototype.wzInitialize.call(this, ctx);
    }
    return dateOnlyProperty;
})(property);

_md.dateOnlyProperty = dateOnlyProperty;
// element timeOnlyProperty
var timeOnlyProperty = (function (property) {
    _inherits(timeOnlyProperty, property);
    function timeOnlyProperty(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(timeOnlyProperty.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, timeOnlyProperty);
        this.wzElement = "timeOnlyProperty";
    }
    timeOnlyProperty.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    timeOnlyProperty.prototype.toJsonProperties = function(result) {
        _md.property.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    timeOnlyProperty.prototype.toJsonChildren = function(result) {
        _md.property.prototype.toJsonChildren.call(this, result);
    }
    timeOnlyProperty.prototype.wzInitialize = function(ctx) {
        this.type = "time-only";
        _md.property.prototype.wzInitialize.call(this, ctx);
    }
    return timeOnlyProperty;
})(property);

_md.timeOnlyProperty = timeOnlyProperty;
// element datetimeOnlyProperty
var datetimeOnlyProperty = (function (property) {
    _inherits(datetimeOnlyProperty, property);
    function datetimeOnlyProperty(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(datetimeOnlyProperty.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, datetimeOnlyProperty);
        this.wzElement = "datetimeOnlyProperty";
    }
    datetimeOnlyProperty.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    datetimeOnlyProperty.prototype.toJsonProperties = function(result) {
        _md.property.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    datetimeOnlyProperty.prototype.toJsonChildren = function(result) {
        _md.property.prototype.toJsonChildren.call(this, result);
    }
    datetimeOnlyProperty.prototype.wzInitialize = function(ctx) {
        this.type = "datetime-only";
        _md.property.prototype.wzInitialize.call(this, ctx);
    }
    return datetimeOnlyProperty;
})(property);

_md.datetimeOnlyProperty = datetimeOnlyProperty;
// element array
var array = (function (any) {
    _inherits(array, any);
    function array(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(array.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, array);
        this.wzElement = "array";
    }
    array.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    array.prototype.toJsonProperties = function(result) {
        _md.any.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    array.prototype.toJsonChildren = function(result) {
        _md.any.prototype.toJsonChildren.call(this, result);
    }
    array.prototype.wzInitialize = function(ctx) {
        this.type = 'array';
        this.name = this.wzName;
        _md.any.prototype.wzInitialize.call(this, ctx);
    }
    return array;
})(any);

_md.array = array;
// element external
var external = (function (any) {
    _inherits(external, any);
    function external(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(external.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, external);
        this.wzElement = "external";
    }
    external.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    external.prototype.toJsonProperties = function(result) {
        _md.any.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    external.prototype.toJsonChildren = function(result) {
        _md.any.prototype.toJsonChildren.call(this, result);
    }
    external.prototype.wzInitialize = function(ctx) {
        this.type = 'external';
        this.name = this.wzName;
        _md.any.prototype.wzInitialize.call(this, ctx);
    }
    return external;
})(any);

_md.external = external;
// element union
var union = (function (any) {
    _inherits(union, any);
    function union(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(union.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, union);
        this.wzElement = "union";
        // relation typeItem
        this.typeItems = [];
    }
    union.prototype.getTypeItem = function(name) {
        var found = null;
        this.typeItems.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    union.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    union.prototype.toJsonProperties = function(result) {
        _md.any.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    union.prototype.toJsonChildren = function(result) {
        _md.any.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.typeItems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeItems[i];
            items.push(item.toJson());
        }
        result['typeItems'] = items;
    }
    union.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'a') {
            if (name === 'any') {
                return this.wzLoadToChildColl(child, _md.any, this.typeItems);
            }
        }
        if (_l == 3 && _ch == 'n') {
            if (name === 'nil') {
                return this.wzLoadToChildColl(child, _md.nil, this.typeItems);
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'file') {
                return this.wzLoadToChildColl(child, _md.file, this.typeItems);
            }
        }
        if (_l == 5 && _ch == 'a') {
            if (name === 'array') {
                return this.wzLoadToChildColl(child, _md.array, this.typeItems);
            }
        }
        if (_l == 5 && _ch == 'u') {
            if (name === 'union') {
                return this.wzLoadToChildColl(child, _md.union, this.typeItems);
            }
        }
        if (_l == 6 && _ch == 'n') {
            if (name === 'number') {
                return this.wzLoadToChildColl(child, _md.number, this.typeItems);
            }
        }
        if (_l == 6 && _ch == 'o') {
            if (name === 'object') {
                return this.wzLoadToChildColl(child, _md.object, this.typeItems);
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'string') {
                return this.wzLoadToChildColl(child, _md.string, this.typeItems);
            }
        }
        if (_l == 7 && _ch == 'b') {
            if (name === 'boolean') {
                return this.wzLoadToChildColl(child, _md.xboolean, this.typeItems);
            }
        }
        if (_l == 7 && _ch == 'i') {
            if (name === 'integer') {
                return this.wzLoadToChildColl(child, _md.integer, this.typeItems);
            }
        }
        if (_l == 8 && _ch == 'd') {
            if (name === 'dateonly') {
                return this.wzLoadToChildColl(child, _md.dateOnly, this.typeItems);
            }
            else if (name === 'datetime') {
                return this.wzLoadToChildColl(child, _md.datetime, this.typeItems);
            }
        }
        if (_l == 8 && _ch == 'e') {
            if (name === 'external') {
                return this.wzLoadToChildColl(child, _md.external, this.typeItems);
            }
        }
        if (_l == 8 && _ch == 't') {
            if (name === 'timeonly') {
                return this.wzLoadToChildColl(child, _md.timeOnly, this.typeItems);
            }
        }
        if (_l == 9 && _ch == 'd') {
            if (name === 'date-only') {
                return this.wzLoadToChildColl(child, _md.dateOnly, this.typeItems);
            }
        }
        if (_l == 9 && _ch == 't') {
            if (name === 'time-only') {
                return this.wzLoadToChildColl(child, _md.timeOnly, this.typeItems);
            }
        }
        if (_l == 12 && _ch == 'd') {
            if (name === 'datetimeonly') {
                return this.wzLoadToChildColl(child, _md.dateTimeOnly, this.typeItems);
            }
        }
        if (_l == 13 && _ch == 'd') {
            if (name === 'datetime-only') {
                return this.wzLoadToChildColl(child, _md.dateTimeOnly, this.typeItems);
            }
        }
        ok = _md.any.prototype.loadChild.call(this, child);
        return ok;
    }
    union.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    union.prototype.wzVerify = function(ctx) {
        var i, i_len=this.typeItems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeItems[i];
            item.wzVerify(ctx);
        }
        _md.any.prototype.wzVerify.call(this, ctx);
    }
    union.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.typeItems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.typeItems[i];
            item.wzInitialize(ctx);
        }
        this.type = 'union';
        this.name = this.wzName;
        _md.any.prototype.wzInitialize.call(this, ctx);
    }
    return union;
})(any);

_md.union = union;
// element scalar
var scalar = (function (any) {
    _inherits(scalar, any);
    function scalar(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(scalar.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, scalar);
        this.wzElement = "scalar";
    }
    scalar.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    scalar.prototype.toJsonProperties = function(result) {
        _md.any.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    scalar.prototype.toJsonChildren = function(result) {
        _md.any.prototype.toJsonChildren.call(this, result);
    }
    scalar.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        ok = _md.any.prototype.loadChild.call(this, child);
        return ok;
    }
    scalar.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    scalar.prototype.wzInitialize = function(ctx) {
        this.isScalar = true;
        _md.any.prototype.wzInitialize.call(this, ctx);
    }
    return scalar;
})(any);

_md.scalar = scalar;
// element string
var string = (function (scalar) {
    _inherits(string, scalar);
    function string(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(string.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, string);
        this.wzElement = "string";
    }
    string.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    string.prototype.toJsonProperties = function(result) {
        _md.scalar.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    string.prototype.toJsonChildren = function(result) {
        _md.scalar.prototype.toJsonChildren.call(this, result);
    }
    string.prototype.wzInitialize = function(ctx) {
        this.type = 'string';
        this.name = this.wzName;
        _md.scalar.prototype.wzInitialize.call(this, ctx);
    }
    return string;
})(scalar);

_md.string = string;
// element number
var number = (function (scalar) {
    _inherits(number, scalar);
    function number(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(number.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, number);
        this.allowedFORMATS = [ "int32", "int64", "int", "long", "float", "double", "int16", "int8"];
        this.FORMAT_INT32 = "int32";
        this.FORMAT_INT64 = "int64";
        this.FORMAT_XINT = "int";
        this.FORMAT_XLONG = "long";
        this.FORMAT_XFLOAT = "float";
        this.FORMAT_XDOUBLE = "double";
        this.FORMAT_INT16 = "int16";
        this.FORMAT_INT8 = "int8";
        this.wzElement = "number";
        // The minimum value of the parameter. Applicable only to parameters of type number or integer.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.minimum = null
        // The maximum value of the parameter. Applicable only to parameters of type number or integer.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.maximum = null
        // The format of the value.
        this.format = "float";
        // A numeric instance is valid against "multipleOf" if the result of dividing the instance by this keyword's value is an integer.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.multipleOf = null
    }
    number.FORMAT_INT32 = "int32";
    number.FORMAT_INT64 = "int64";
    number.FORMAT_XINT = "int";
    number.FORMAT_XLONG = "long";
    number.FORMAT_XFLOAT = "float";
    number.FORMAT_XDOUBLE = "double";
    number.FORMAT_INT16 = "int16";
    number.FORMAT_INT8 = "int8";
    number.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    number.prototype.toJsonProperties = function(result) {
        _md.scalar.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        result["minimum"] = this.minimum;
        result["maximum"] = this.maximum;
        if (!isEmpty(this.format)) {
            result["format"] = this.format;
        }
        if (!isEmpty(this.multipleOf)) {
            result["multipleOf"] = this.multipleOf;
        }
    }
    number.prototype.toJsonChildren = function(result) {
        _md.scalar.prototype.toJsonChildren.call(this, result);
    }
    number.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 6 && _ch == 'f') {
            if (name === 'format') {
                this.format = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'm') {
            if (name === 'minimum') {
                this.minimum = parseinteger(child.v, null, child); return true;
            }
            else if (name === 'maximum') {
                this.maximum = parseinteger(child.v, null, child); return true;
            }
        }
        if (_l == 10 && _ch == 'm') {
            if (name === 'multipleof') {
                this.multipleOf = child.v; return true;
            }
        }
        ok = _md.scalar.prototype.loadChild.call(this, child);
        return ok;
    }
    number.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    number.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("number", "format", this.format, this.allowedFORMATS, this);
        _md.scalar.prototype.wzVerify.call(this, ctx);
    }
    number.prototype.wzInitialize = function(ctx) {
        if (this.type === 'any') {
            this.type = 'number';
            this.name = this.wzName;
        }
        _md.scalar.prototype.wzInitialize.call(this, ctx);
    }
    number.prototype.getFacets = function() {
        var ret = [];
        if (this['type']) {
            ret.push({
                name: 'type', 
                value: this['type'], 
                facetType: 'string'
            });
        }
        if (this['title']) {
            ret.push({
                name: 'title', 
                value: this['title'], 
                facetType: 'string'
            });
        }
        if (this['minimum']) {
            ret.push({
                name: 'minimum', 
                value: this['minimum'], 
                facetType: 'integer'
            });
        }
        if (this['maximum']) {
            ret.push({
                name: 'maximum', 
                value: this['maximum'], 
                facetType: 'integer'
            });
        }
        if (this['format']) {
            ret.push({
                name: 'format', 
                value: this['format'], 
                facetType: 'string'
            });
        }
        if (this['multipleOf']) {
            ret.push({
                name: 'multipleOf', 
                value: this['multipleOf'], 
                facetType: 'string'
            });
        }
        return ret;
    }
    return number;
})(scalar);

_md.number = number;
/**
    element integer
     A subset of JSON numbers that are positive and negative multiples of 1. The integer type inherits its facets from the number type.
*/
var integer = (function (number) {
    _inherits(integer, number);
    function integer(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(integer.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, integer);
        this.wzElement = "integer";
    }
    integer.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    integer.prototype.toJsonProperties = function(result) {
        _md.number.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    integer.prototype.toJsonChildren = function(result) {
        _md.number.prototype.toJsonChildren.call(this, result);
    }
    integer.prototype.wzInitialize = function(ctx) {
        this.type = 'integer';
        this.name = this.wzName;
        _md.number.prototype.wzInitialize.call(this, ctx);
    }
    return integer;
})(number);

_md.integer = integer;
/**
    element xboolean
     A JSON boolean without any additional facets.
*/
var xboolean = (function (scalar) {
    _inherits(xboolean, scalar);
    function xboolean(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xboolean.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xboolean);
        this.wzElement = "xboolean";
    }
    xboolean.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    xboolean.prototype.toJsonProperties = function(result) {
        _md.scalar.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    xboolean.prototype.toJsonChildren = function(result) {
        _md.scalar.prototype.toJsonChildren.call(this, result);
    }
    xboolean.prototype.wzInitialize = function(ctx) {
        this.type = 'boolean';
        this.name = this.wzName;
        _md.scalar.prototype.wzInitialize.call(this, ctx);
    }
    return xboolean;
})(scalar);

_md.xboolean = xboolean;
/**
    element dateOnly
     The "full-date" notation of RFC3339, namely yyyy-mm-dd. Does not support time or time zone-offset notation.
*/
var dateOnly = (function (scalar) {
    _inherits(dateOnly, scalar);
    function dateOnly(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(dateOnly.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, dateOnly);
        this.wzElement = "dateOnly";
    }
    dateOnly.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    dateOnly.prototype.toJsonProperties = function(result) {
        _md.scalar.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    dateOnly.prototype.toJsonChildren = function(result) {
        _md.scalar.prototype.toJsonChildren.call(this, result);
    }
    dateOnly.prototype.wzInitialize = function(ctx) {
        this.type = 'date-only';
        this.name = this.wzName;
        _md.scalar.prototype.wzInitialize.call(this, ctx);
    }
    return dateOnly;
})(scalar);

_md.dateOnly = dateOnly;
/**
    element timeOnly
     The "partial-time" notation of RFC3339, namely hh:mm:ss[.ff...]. Does not support date or time zone-offset notation.
*/
var timeOnly = (function (scalar) {
    _inherits(timeOnly, scalar);
    function timeOnly(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(timeOnly.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, timeOnly);
        this.wzElement = "timeOnly";
    }
    timeOnly.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    timeOnly.prototype.toJsonProperties = function(result) {
        _md.scalar.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    timeOnly.prototype.toJsonChildren = function(result) {
        _md.scalar.prototype.toJsonChildren.call(this, result);
    }
    timeOnly.prototype.wzInitialize = function(ctx) {
        this.type = 'time-only';
        this.name = this.wzName;
        _md.scalar.prototype.wzInitialize.call(this, ctx);
    }
    return timeOnly;
})(scalar);

_md.timeOnly = timeOnly;
/**
    element dateTimeOnly
     Combined date-only and time-only with a separator of "T", namely yyyy-mm-ddThh:mm:ss[.ff...]. Does not support a time zone offset.
*/
var dateTimeOnly = (function (scalar) {
    _inherits(dateTimeOnly, scalar);
    function dateTimeOnly(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(dateTimeOnly.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, dateTimeOnly);
        this.wzElement = "dateTimeOnly";
    }
    dateTimeOnly.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    dateTimeOnly.prototype.toJsonProperties = function(result) {
        _md.scalar.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    dateTimeOnly.prototype.toJsonChildren = function(result) {
        _md.scalar.prototype.toJsonChildren.call(this, result);
    }
    dateTimeOnly.prototype.wzInitialize = function(ctx) {
        this.type = 'datetime-only';
        this.name = this.wzName;
        _md.scalar.prototype.wzInitialize.call(this, ctx);
    }
    return dateTimeOnly;
})(scalar);

_md.dateTimeOnly = dateTimeOnly;
/**
    element datetime
     A timestamp in one of the following formats: if the format is omitted or set to rfc3339, uses the "date-time" notation of RFC3339; if format is set to rfc2616, uses the format defined in RFC2616.
*/
var datetime = (function (scalar) {
    _inherits(datetime, scalar);
    function datetime(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(datetime.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, datetime);
        this.allowedFORMATS = [ "none", "rfc3339", "rfc2616"];
        this.FORMAT_NONE = "none";
        this.FORMAT_RFC3339 = "rfc3339";
        this.FORMAT_RFC2616 = "rfc2616";
        this.wzElement = "datetime";
        // The additional facet format MUST be available only when the type equals datetime, and the value MUST be either rfc3339 or rfc2616. Any other values are invalid.
        this.format = "none";
    }
    datetime.FORMAT_NONE = "none";
    datetime.FORMAT_RFC3339 = "rfc3339";
    datetime.FORMAT_RFC2616 = "rfc2616";
    datetime.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    datetime.prototype.toJsonProperties = function(result) {
        _md.scalar.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.format)) {
            result["format"] = this.format;
        }
    }
    datetime.prototype.toJsonChildren = function(result) {
        _md.scalar.prototype.toJsonChildren.call(this, result);
    }
    datetime.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 6 && _ch == 'f') {
            if (name === 'format') {
                this.format = child.v; return true;
            }
        }
        ok = _md.scalar.prototype.loadChild.call(this, child);
        return ok;
    }
    datetime.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    datetime.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("datetime", "format", this.format, this.allowedFORMATS, this);
        _md.scalar.prototype.wzVerify.call(this, ctx);
    }
    datetime.prototype.wzInitialize = function(ctx) {
        this.type = 'datetime';
        this.name = this.wzName;
        _md.scalar.prototype.wzInitialize.call(this, ctx);
    }
    datetime.prototype.getFacets = function() {
        var ret = [];
        var ret = [];
        if (this['type']) {
            ret.push({
                name: 'type', 
                value: this['type'], 
                facetType: 'string'
            });
        }
        if (this['title']) {
            ret.push({
                name: 'title', 
                value: this['title'], 
                facetType: 'string'
            });
        }
        if (this['format']) {
            ret.push({
                name: 'format', 
                value: this['format'], 
                facetType: 'string'
            });
        }
        return ret;
    }
    return datetime;
})(scalar);

_md.datetime = datetime;
/**
    element file
     The ​file​ type can constrain the content to send through forms. When this type is used in the context of web forms it SHOULD be represented as a valid file upload in JSON format. File content SHOULD be a base64-encoded string.
*/
var file = (function (scalar) {
    _inherits(file, scalar);
    function file(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(file.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, file);
        this.wzElement = "file";
        // Specifies the minimum number of bytes for a parameter value. The value MUST be equal to or greater than 0.
        this.minLength = 0;
        // Specifies the maximum number of bytes for a parameter value. The value MUST be equal to or greater than 0.
        this.maxLength = 2147483647;
        // relation fileType
        // A list of valid content-type strings for the file. The file type *slash* MUST be a valid value.
        this.fileTypes = [];
    }
    file.prototype.addFileType = function(name, sourceLineInfo) {
        var retval = new _md.fileType(name, sourceLineInfo);
        retval.wzParent = this;
        this.fileTypes.push(retval);
        return retval;
    }
    file.prototype.getFileType = function(name) {
        var found = null;
        this.fileTypes.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    file.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    file.prototype.toJsonProperties = function(result) {
        _md.scalar.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        result["minLength"] = this.minLength;
        result["maxLength"] = this.maxLength;
    }
    file.prototype.toJsonChildren = function(result) {
        _md.scalar.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.fileTypes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.fileTypes[i];
            items.push(item.toJson());
        }
        result['fileTypes'] = items;
    }
    file.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 8 && _ch == 'f') {
            if (name === 'filetype') {
                return this.wzLoadToChildColl(child, _md.fileType, this.fileTypes);
            }
        }
        if (_l == 9 && _ch == 'm') {
            if (name === 'minlength') {
                this.minLength = parseinteger(child.v, null, child); return true;
            }
            else if (name === 'maxlength') {
                this.maxLength = parseinteger(child.v, null, child); return true;
            }
        }
        ok = _md.scalar.prototype.loadChild.call(this, child);
        return ok;
    }
    file.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    file.prototype.wzVerify = function(ctx) {
        var i, i_len=this.fileTypes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.fileTypes[i];
            item.wzVerify(ctx);
        }
        _md.scalar.prototype.wzVerify.call(this, ctx);
    }
    file.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.fileTypes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.fileTypes[i];
            item.wzInitialize(ctx);
        }
        this.type = 'file';
        this.name = this.wzName;
        _md.scalar.prototype.wzInitialize.call(this, ctx);
    }
    file.prototype.getFacets = function() {
        var ret = [];
        if (this['type']) {
            ret.push({
                name: 'type', 
                value: this['type'], 
                facetType: 'string'
            });
        }
        if (this['title']) {
            ret.push({
                name: 'title', 
                value: this['title'], 
                facetType: 'string'
            });
        }
        if (this['minLength']) {
            ret.push({
                name: 'minLength', 
                value: this['minLength'], 
                facetType: 'integer'
            });
        }
        if (this['maxLength']) {
            ret.push({
                name: 'maxLength', 
                value: this['maxLength'], 
                facetType: 'integer'
            });
        }
        return ret;
    }
    return file;
})(scalar);

_md.file = file;
/**
    element fileType
     A valid content-type strings for the file. The file type *slash* MUST be a valid value.
*/
var fileType = (function (ramlBase) {
    _inherits(fileType, ramlBase);
    function fileType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(fileType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, fileType);
        this.wzElement = "fileType";
    }
    fileType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    fileType.prototype.toJsonProperties = function(result) {
        _md.ramlBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    fileType.prototype.toJsonChildren = function(result) {
        _md.ramlBase.prototype.toJsonChildren.call(this, result);
    }
    return fileType;
})(ramlBase);

_md.fileType = fileType;
/**
    element nil
     In RAML, the type nil is a scalar type that allows only nil data values.
     Specifically, in YAML it allows only YAML's null (or its equivalent representations, such as ~),
     in JSON it allows only JSON's null, and in XML it allows only XML's xsi:nil.
     In headers, URI parameters, and query parameters, the nil type only allows
     the string value "nil" (case-sensitive); and in turn an instance having
     the string value "nil" (case-sensitive), when described with the nil type, deserializes to a nil value.
*/
var nil = (function (scalar) {
    _inherits(nil, scalar);
    function nil(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(nil.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, nil);
        this.wzElement = "nil";
    }
    nil.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    nil.prototype.toJsonProperties = function(result) {
        _md.scalar.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    nil.prototype.toJsonChildren = function(result) {
        _md.scalar.prototype.toJsonChildren.call(this, result);
    }
    nil.prototype.wzInitialize = function(ctx) {
        this.type = 'nil';
        this.name = this.wzName;
        _md.scalar.prototype.wzInitialize.call(this, ctx);
    }
    return nil;
})(scalar);

_md.nil = nil;
// element example
var example = (function (ramlItem) {
    _inherits(example, ramlItem);
    function example(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(example.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, example);
        this.wzElement = "example";
        // relation jsonItem
        this.jsonItems = [];
    }
    example.prototype.addJsonItem = function(name, sourceLineInfo) {
        var retval = new _md.jsonItem(name, sourceLineInfo);
        retval.wzParent = this;
        this.jsonItems.push(retval);
        return retval;
    }
    example.prototype.getJsonItem = function(name) {
        var found = null;
        this.jsonItems.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    example.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    example.prototype.toJsonProperties = function(result) {
        _md.ramlItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    example.prototype.toJsonChildren = function(result) {
        _md.ramlItem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.jsonItems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsonItems[i];
            items.push(item.toJson());
        }
        result['jsonItems'] = items;
    }
    example.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, _md.jsonPropertyOrValue, this.jsonItems);
            }
        }
        if (_l == 1 && _ch == '[') {
            if (name === '[') {
                return this.wzLoadToChildColl(child, _md.jsonArray, this.jsonItems);
            }
        }
        if (_l == 1 && _ch == '{') {
            if (name === '{') {
                return this.wzLoadToChildColl(child, _md.jsonObject, this.jsonItems);
            }
        }
        if (_l == 8 && _ch == 'j') {
            if (name === 'jsonitem') {
                return this.wzLoadToChildColl(child, _md.jsonItem, this.jsonItems);
            }
        }
        ok = _md.ramlItem.prototype.loadChild.call(this, child);
        return ok;
    }
    example.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    example.prototype.wzVerify = function(ctx) {
        var i, i_len=this.jsonItems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsonItems[i];
            item.wzVerify(ctx);
        }
        _md.ramlItem.prototype.wzVerify.call(this, ctx);
    }
    example.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.jsonItems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsonItems[i];
            item.wzInitialize(ctx);
        }
        _md.ramlItem.prototype.wzInitialize.call(this, ctx);
    }
    return example;
})(ramlItem);

_md.example = example;
// element jsonItem
var jsonItem = (function (ramlItem) {
    _inherits(jsonItem, ramlItem);
    function jsonItem(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(jsonItem.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsonItem);
        this.wzElement = "jsonItem";
        // relation jsonItem
        this.jsonItems = [];
    }
    jsonItem.prototype.addJsonItem = function(name, sourceLineInfo) {
        var retval = new _md.jsonItem(name, sourceLineInfo);
        retval.wzParent = this;
        this.jsonItems.push(retval);
        return retval;
    }
    jsonItem.prototype.getJsonItem = function(name) {
        var found = null;
        this.jsonItems.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    jsonItem.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    jsonItem.prototype.toJsonProperties = function(result) {
        _md.ramlItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    jsonItem.prototype.toJsonChildren = function(result) {
        _md.ramlItem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.jsonItems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsonItems[i];
            items.push(item.toJson());
        }
        result['jsonItems'] = items;
    }
    jsonItem.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, _md.jsonPropertyOrValue, this.jsonItems);
            }
        }
        if (_l == 1 && _ch == '[') {
            if (name === '[') {
                return this.wzLoadToChildColl(child, _md.jsonArray, this.jsonItems);
            }
        }
        if (_l == 1 && _ch == '{') {
            if (name === '{') {
                return this.wzLoadToChildColl(child, _md.jsonObject, this.jsonItems);
            }
        }
        if (_l == 8 && _ch == 'j') {
            if (name === 'jsonitem') {
                return this.wzLoadToChildColl(child, _md.jsonItem, this.jsonItems);
            }
        }
        ok = _md.ramlItem.prototype.loadChild.call(this, child);
        return ok;
    }
    jsonItem.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.ramlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    jsonItem.prototype.wzVerify = function(ctx) {
        var i, i_len=this.jsonItems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsonItems[i];
            item.wzVerify(ctx);
        }
        _md.ramlItem.prototype.wzVerify.call(this, ctx);
    }
    jsonItem.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.jsonItems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsonItems[i];
            item.wzInitialize(ctx);
        }
        _md.ramlItem.prototype.wzInitialize.call(this, ctx);
    }
    return jsonItem;
})(ramlItem);

_md.jsonItem = jsonItem;
/**
    element jsonObject
     ittf:
     {
     @ name 'stefi'
     @ birth 1957
     @ friends
     [
     {
     @ name 'mario'
     @ birth 1957
     {
     @ name 'arturo'
     @ birth 1955
     @ age
     function
     return new Date().year() - birth
    
*/
var jsonObject = (function (jsonItem) {
    _inherits(jsonObject, jsonItem);
    function jsonObject(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(jsonObject.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsonObject);
        this.wzElement = "jsonObject";
    }
    jsonObject.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    jsonObject.prototype.toJsonProperties = function(result) {
        _md.jsonItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    jsonObject.prototype.toJsonChildren = function(result) {
        _md.jsonItem.prototype.toJsonChildren.call(this, result);
    }
    return jsonObject;
})(jsonItem);

_md.jsonObject = jsonObject;
// element jsonArray
var jsonArray = (function (jsonItem) {
    _inherits(jsonArray, jsonItem);
    function jsonArray(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(jsonArray.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsonArray);
        this.wzElement = "jsonArray";
    }
    jsonArray.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    jsonArray.prototype.toJsonProperties = function(result) {
        _md.jsonItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    jsonArray.prototype.toJsonChildren = function(result) {
        _md.jsonItem.prototype.toJsonChildren.call(this, result);
    }
    return jsonArray;
})(jsonItem);

_md.jsonArray = jsonArray;
// element jsonPropertyOrValue
var jsonPropertyOrValue = (function (jsonItem) {
    _inherits(jsonPropertyOrValue, jsonItem);
    function jsonPropertyOrValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(jsonPropertyOrValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsonPropertyOrValue);
        this.wzElement = "jsonPropertyOrValue";
    }
    jsonPropertyOrValue.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    jsonPropertyOrValue.prototype.toJsonProperties = function(result) {
        _md.jsonItem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    jsonPropertyOrValue.prototype.toJsonChildren = function(result) {
        _md.jsonItem.prototype.toJsonChildren.call(this, result);
    }
    return jsonPropertyOrValue;
})(jsonItem);

_md.jsonPropertyOrValue = jsonPropertyOrValue;
_md.__tagElementMapping = { '200': 'Status200', '201': 'Status201', '204': 'Status204', '400': 'Status400', '(': 'annotation', '#': 'comment', 'base-uri-param': 'baseUriParameter', 'baseuriparam': 'baseUriParameter', 'media-types': 'mediaTypes', 'mediatypes': 'mediaTypes', 'types': 'schema', '/': 'resource', 'uri-param': 'uriParameter', 'uriparam': 'uriParameter', 'delete': 'xdelete', 'query-param': 'queryParameter', 'queryparam': 'queryParameter', 'form-param': 'formParameter', 'formparam': 'formParameter', 'media-type': 'mediaType', 'mediatype': 'mediaType', 'application/json': 'applicationJson', 'text/xml': 'textXml', 'text/html': 'textHtml', 'text/css': 'textCss', 'application/javascript': 'textJavascript', 'boolean': 'xboolean', 'date-only': 'dateOnly', 'dateonly': 'dateOnly', 'time-only': 'timeOnly', 'timeonly': 'timeOnly', 'datetime-only': 'dateTimeOnly', 'datetimeonly': 'dateTimeOnly', '@': 'property', 'number': 'numberProperty', 'string': 'stringProperty', 'datetime': 'datetimeProperty', 'file': 'fileProperty', 'integer': 'integerProperty', 'nil': 'nilProperty', 'status': 'responseStatus', '{': 'jsonObject', '[': 'jsonArray' };
// model/replaceUnknownElement( )
var ramlModelException = (function () {
    function ramlModelException(message, node, instance) {
        _classCallCheck(this, ramlModelException);
        // TODO node seems superflous
        if (node && instance) {
            this.message = message + ', wzElement: ' + node.wzElement + ', wzName:' + (node.wzName || '') + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        console.log('message', this.message);
        this.stack = (new Error()).stack;
        this.node = node;
    }
    return ramlModelException;
})();

_md.ramlModelException = ramlModelException;
var ramlContext = (function () {
    function ramlContext() {
        _classCallCheck(this, ramlContext);
        this.validationErrors = [];
    }
    ramlContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    ramlContext.prototype.addError = function(message, node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at);
    }
    ramlContext.prototype.verifyFalse = function(valueType, valueName, value, node) {
        if (typeof value === 'undefined' || value === null || (typeof value === 'string' && value.length === 0)) {
            this.validationErrors.push(valueType + ' ' + valueName + ' is required. At ' + node.wzSourceLineInfo.toString(node));
        }
    }
    ramlContext.prototype.verifyEnum = function(valueType, valueName, value, allowed, node) {
        if (value && allowed.indexOf(value) < 0) {
            var allowedStr = 'allowed: ' + allowed.join(', ');
            this.validationErrors.push(valueType + ' ' + valueName + ' has an invalid value: ' + value + ' ' + allowedStr + '. At ' + (node.wzSourceLineInfo ? node.wzSourceLineInfo.toString(node) : 'location unavailable'));
        }
    }
    return ramlContext;
})();

_md.ramlContext = ramlContext;
function parsestring(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}
function parseinteger(value, defaultValue, node) {
    if (isEmpty(value)) {
        return defaultValue;
    }
    if (!isInt(value)) {
        throw new ramlModelException('Must be an int value, got:' + value, node);
    }
    return parseInt(value, 10);
}
function parseboolean(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    if (!isBoolean(value)) {
        throw new ramlModelException('Must be a boolean value (\"true\" or \"false\"), got:' + value, node);
    }
    return value === 'true' ? true : false;
}
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}
function isBoolean(value) {
    return value === 'true' || value === 'false';
}
function isArray(value) {
    return Object.prototype.toString.call( value ) === '[object Array]';
}
function isNumber(value) {
    return !isArray( value ) && (value - parseFloat( value ) + 1) >= 0;
}
function isInt(value) {
    return isNumber( value );
}
function initComments(comments) {
    var ret = [];
    var i, i_len=comments.length, item;
    for (i=0; i<i_len; i++) {
        item = comments[i];
        if (item.comments && item.comments.length) {
            var title = item.wzName;
            var j, j_len=item.comments.length, c;
            for (j=0; j<j_len; j++) {
                c = item.comments[j];
                ret.push({
                    title: title, 
                    content: c.wzName
                });
                title = null;
            }
        }
        else {
            ret.push({
                title: null, 
                content: item.wzName
            });
        }
    }
    return ret;
}

