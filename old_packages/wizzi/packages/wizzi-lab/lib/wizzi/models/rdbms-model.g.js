/*
    artifact generator: C:\My\wizzi\v5\node_modules\wizzi-legacy-v4\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\v5\node_modules\wizzi-core\lib\artifacts\wfschema\model\gen\ittf\wfschema-model.js.ittf
    utc time: Sat, 22 Sep 2018 10:57:59 GMT
*/
'use strict';
// generated by wizzi.codegen.js.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var wzutils = require('wizzi-utils');
var verify = wzutils.verify;
var tableHelper = require('./tableHelper');
var inflection = require('inflection');


var _md = module.exports = {};

var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row, col, sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();

_md.wzSourceLineInfo = wzSourceLineInfo;
var rdbmsBase = (function () {
    function rdbmsBase(name, sourceLineInfo) {
        _classCallCheck(this, rdbmsBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    rdbmsBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    rdbmsBase.prototype.wzSourceFilepath = function(sourceKey) {
        return this.wzRoot().loadHistory.getIttfDocumentUri(sourceKey);
    }
    rdbmsBase.prototype.wzVerify = function() {
    }
    rdbmsBase.prototype.wzInitialize = function() {
    }
    rdbmsBase.prototype.wzInitializeAsync = function(ctx, callback) {
        callback(null);
    }
    rdbmsBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    rdbmsBase.prototype.wzAddChildToColl = function(node, coll) {
        node.wzParent = this;
        node.wzMoved = true;
        coll.push(node);
    }
    rdbmsBase.prototype.wzMoveChildToColl = function(node, coll, fromColl) {
        var index = fromColl.indexOf(node);
        if (index < 0) {
            this.error('wzMoveChildToColl error. The from collection does not contain the node.', node);
        }
        fromColl.splice(index, 1);
        this.wzAddChildToColl(node, coll);
    }
    rdbmsBase.prototype.wzLoadToChildColl = function(child, type, coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    rdbmsBase.prototype.wzCreateChildColl = function(tag, name, type, coll) {
        var item = new type(name, this.wzSourceLineInfo);
        item.wzTag = tag;
        item.wzParent = this;
        item.wzCreated = true;
        coll.push(item);
        return item;
    }
    rdbmsBase.prototype.wzLoadToChildren = function(child, type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    rdbmsBase.prototype.wzLoadOneToOne = function(child, type, fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    rdbmsBase.prototype.wzRemove = function(fromColl) {
        var index = fromColl.indexOf(this);
        if (index < 0) {
            this.error('wzRemove error. The from collection does not contain the node.', this);
        }
        fromColl.splice(index, 1);
    }
    rdbmsBase.prototype.error = function(message, node) {
        throw new _md.rdbmsModelException(message, node, this);
    }
    rdbmsBase.prototype.toJsonProperties = function(result) {
        result.wzElement = this.wzElement;
        result.wzTag = this.wzTag;
        result.wzName = this.wzName;
    }
    rdbmsBase.prototype.toJsonChildren = function(result) {
        if (this.wzChildren.length > 0) {
            var children = [];
            var i, i_len=this.wzChildren.length, item;
            for (i=0; i<i_len; i++) {
                item = this.wzChildren[i];
                children.push(item.toJson());
            }
            result.wzChildren = children;
        }
    }
    rdbmsBase.prototype.toXmlProperties = function(xw) {
        xw.writeAttribute("wzTag", this.wzTag);
        xw.writeAttribute("wzName", this.wzName);
    }
    rdbmsBase.prototype.toXmlChildren = function(xw) {
        if (this.wzChildren.length > 0) {
            xw.startElement('wzChildren');
            var i, i_len=this.wzChildren.length, item;
            for (i=0; i<i_len; i++) {
                item = this.wzChildren[i];
                item.toXml(xw);
            }
            xw.endElement();
        }
    }
    return rdbmsBase;
})();

_md.rdbmsBase = rdbmsBase;

/**
    element rdbms
     The root element of the rdbms schema.
*/
var rdbms = (function (rdbmsBase) {
    _inherits(rdbms, rdbmsBase);
    function rdbms(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(rdbms.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, rdbms);
        this.wzElement = "rdbms";
        // relation table
        this.tables = [];
        // relation relation
        this.relations = [];
        // relation validationError
        this.validationErrors = [];
        // relation comment
        this.comments = [];
    }
    rdbms.prototype.addTable = function(name, sourceLineInfo) {
        var retval = new _md.table(name, sourceLineInfo);
        retval.wzParent = this;
        this.tables.push(retval);
        return retval;
    }
    rdbms.prototype.getTable = function(name) {
        var found = null;
        this.tables.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    rdbms.prototype.addRelation = function(name, sourceLineInfo) {
        var retval = new _md.relation(name, sourceLineInfo);
        retval.wzParent = this;
        this.relations.push(retval);
        return retval;
    }
    rdbms.prototype.getRelation = function(name) {
        var found = null;
        this.relations.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    rdbms.prototype.addValidationError = function(name, sourceLineInfo) {
        var retval = new _md.validationError(name, sourceLineInfo);
        retval.wzParent = this;
        this.validationErrors.push(retval);
        return retval;
    }
    rdbms.prototype.getValidationError = function(name) {
        var found = null;
        this.validationErrors.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    rdbms.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    rdbms.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    rdbms.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    rdbms.prototype.toJsonProperties = function(result) {
        _md.rdbmsBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    rdbms.prototype.toJsonChildren = function(result) {
        _md.rdbmsBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.tables.length, item;
        for (i=0; i<i_len; i++) {
            item = this.tables[i];
            items.push(item.toJson());
        }
        result['tables'] = items;
        items = [];
        var i, i_len=this.relations.length, item;
        for (i=0; i<i_len; i++) {
            item = this.relations[i];
            items.push(item.toJson());
        }
        result['relations'] = items;
        items = [];
        var i, i_len=this.validationErrors.length, item;
        for (i=0; i<i_len; i++) {
            item = this.validationErrors[i];
            items.push(item.toJson());
        }
        result['validationErrors'] = items;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    rdbms.prototype.toXml = function(xw) {
        xw.startElement('rdbms');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    rdbms.prototype.toXmlProperties = function(xw) {
        md.rdbmsBase.prototype.toXmlProperties.call(this, xw);
    }
    rdbms.prototype.toXmlChildren = function(xw) {
        md.rdbmsBase.prototype.toXmlChildren.call(this, xw);
        xw.startElement('tables');
        var i, i_len=this.tables.length, item;
        for (i=0; i<i_len; i++) {
            item = this.tables[i];
            item.toXml(xw);
        }
        xw.endElement();
        xw.startElement('relations');
        var i, i_len=this.relations.length, item;
        for (i=0; i<i_len; i++) {
            item = this.relations[i];
            item.toXml(xw);
        }
        xw.endElement();
        xw.startElement('validationErrors');
        var i, i_len=this.validationErrors.length, item;
        for (i=0; i<i_len; i++) {
            item = this.validationErrors[i];
            item.toXml(xw);
        }
        xw.endElement();
        xw.startElement('comments');
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.toXml(xw);
        }
        xw.endElement();
    }
    rdbms.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.comments);
            }
        }
        if (_l == 1 && _ch == 'r') {
            if (name === 'r') {
                return this.wzLoadToChildColl(child, _md.relation, this.relations);
            }
        }
        if (_l == 5 && _ch == 't') {
            if (name === 'table') {
                return this.wzLoadToChildColl(child, _md.table, this.tables);
            }
        }
        if (_l == 15 && _ch == 'v') {
            if (name === 'validationerror') {
                return this.wzLoadToChildColl(child, _md.validationError, this.validationErrors);
            }
        }
        if (_l == 16 && _ch == 'v') {
            if (name === 'validation-error') {
                return this.wzLoadToChildColl(child, _md.validationError, this.validationErrors);
            }
        }
        return ok;
    }
    rdbms.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.rdbmsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    rdbms.prototype.wzVerify = function(ctx) {
        var i, i_len=this.tables.length, item;
        for (i=0; i<i_len; i++) {
            item = this.tables[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.relations.length, item;
        for (i=0; i<i_len; i++) {
            item = this.relations[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.validationErrors.length, item;
        for (i=0; i<i_len; i++) {
            item = this.validationErrors[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        _md.rdbmsBase.prototype.wzVerify.call(this, ctx);
    }
    rdbms.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.tables.length, item;
        for (i=0; i<i_len; i++) {
            item = this.tables[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.relations.length, item;
        for (i=0; i<i_len; i++) {
            item = this.relations[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.validationErrors.length, item;
        for (i=0; i<i_len; i++) {
            item = this.validationErrors[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        _md.rdbmsBase.prototype.wzInitialize.call(this, ctx);
    }
    rdbms.prototype.testInfo = function() {
        var ret = {
            tables: []
        };
        var i, i_len=this.tables.length, table;
        for (i=0; i<i_len; i++) {
            table = this.tables[i];
            var ctx = {};
            table.testInfo(ctx);
            ret.tables.push(ctx);
        }
        return ret;
    }
    return rdbms;
})(rdbmsBase);

_md.rdbms = rdbms;
// element rdbmsitem
var rdbmsitem = (function (rdbmsBase) {
    _inherits(rdbmsitem, rdbmsBase);
    function rdbmsitem(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(rdbmsitem.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, rdbmsitem);
        this.wzElement = "rdbmsitem";
        // relation comment
        this.comments = [];
    }
    rdbmsitem.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    rdbmsitem.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    rdbmsitem.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    rdbmsitem.prototype.toJsonProperties = function(result) {
        _md.rdbmsBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    rdbmsitem.prototype.toJsonChildren = function(result) {
        _md.rdbmsBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    rdbmsitem.prototype.toXml = function(xw) {
        xw.startElement('rdbmsitem');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    rdbmsitem.prototype.toXmlProperties = function(xw) {
        md.rdbmsBase.prototype.toXmlProperties.call(this, xw);
    }
    rdbmsitem.prototype.toXmlChildren = function(xw) {
        md.rdbmsBase.prototype.toXmlChildren.call(this, xw);
        xw.startElement('comments');
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.toXml(xw);
        }
        xw.endElement();
    }
    rdbmsitem.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, _md.comment, this.comments);
            }
        }
        return ok;
    }
    rdbmsitem.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.rdbmsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    rdbmsitem.prototype.wzVerify = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        _md.rdbmsBase.prototype.wzVerify.call(this, ctx);
    }
    rdbmsitem.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        _md.rdbmsBase.prototype.wzInitialize.call(this, ctx);
    }
    return rdbmsitem;
})(rdbmsBase);

_md.rdbmsitem = rdbmsitem;
/**
    element comment
     A comment line for describing items.
*/
var comment = (function (rdbmsBase) {
    _inherits(comment, rdbmsBase);
    function comment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(comment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, comment);
        this.wzElement = "comment";
    }
    comment.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    comment.prototype.toJsonProperties = function(result) {
        _md.rdbmsBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    comment.prototype.toJsonChildren = function(result) {
        _md.rdbmsBase.prototype.toJsonChildren.call(this, result);
    }
    comment.prototype.toXml = function(xw) {
        xw.startElement('comment');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    comment.prototype.toXmlProperties = function(xw) {
        md.rdbmsBase.prototype.toXmlProperties.call(this, xw);
    }
    comment.prototype.toXmlChildren = function(xw) {
        md.rdbmsBase.prototype.toXmlChildren.call(this, xw);
    }
    return comment;
})(rdbmsBase);

_md.comment = comment;
/**
    element table
     A table is a set of columns and rows.
     The wzName is the ddl/sql name.
*/
var table = (function (rdbmsitem) {
    _inherits(table, rdbmsitem);
    function table(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(table.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, table);
        this.wzElement = "table";
        /**
             A text used on views to label the table.
             Optional. The default is the wzName.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.label = null
        /**
             The plural form of the wzName. Used to name collection objects.
             Optional. The default is calculated by inflector::pluralize.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.namePlural = null
        /**
             The plural form of the label attribute. Used on views to label collections.
             Optional. The default is calculated by inflector::pluralize.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.labelPlural = null
        // A description of the table
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.description = null
        // relation tableColumn
        // Table columns
        this.tableColumns = [];
        // relation index
        // Table indexes
        this.indexes = [];
        // relation document
        // Table documents
        this.documents = [];
    }
    table.prototype.addTableColumn = function(name, sourceLineInfo) {
        var retval = new _md.tableColumn(name, sourceLineInfo);
        retval.wzParent = this;
        this.tableColumns.push(retval);
        return retval;
    }
    table.prototype.getTableColumn = function(name) {
        var found = null;
        this.tableColumns.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    table.prototype.addIndex = function(name, sourceLineInfo) {
        var retval = new _md.index(name, sourceLineInfo);
        retval.wzParent = this;
        this.indexes.push(retval);
        return retval;
    }
    table.prototype.getIndex = function(name) {
        var found = null;
        this.indexes.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    table.prototype.addDocument = function(name, sourceLineInfo) {
        var retval = new _md.document(name, sourceLineInfo);
        retval.wzParent = this;
        this.documents.push(retval);
        return retval;
    }
    table.prototype.getDocument = function(name) {
        var found = null;
        this.documents.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    table.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    table.prototype.toJsonProperties = function(result) {
        _md.rdbmsitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.label)) {
            result["label"] = this.label;
        }
        if (!isEmpty(this.namePlural)) {
            result["namePlural"] = this.namePlural;
        }
        if (!isEmpty(this.labelPlural)) {
            result["labelPlural"] = this.labelPlural;
        }
        if (!isEmpty(this.description)) {
            result["description"] = this.description;
        }
    }
    table.prototype.toJsonChildren = function(result) {
        _md.rdbmsitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.tableColumns.length, item;
        for (i=0; i<i_len; i++) {
            item = this.tableColumns[i];
            items.push(item.toJson());
        }
        result['tableColumns'] = items;
        items = [];
        var i, i_len=this.indexes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.indexes[i];
            items.push(item.toJson());
        }
        result['indexes'] = items;
        items = [];
        var i, i_len=this.documents.length, item;
        for (i=0; i<i_len; i++) {
            item = this.documents[i];
            items.push(item.toJson());
        }
        result['documents'] = items;
    }
    table.prototype.toXml = function(xw) {
        xw.startElement('table');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    table.prototype.toXmlProperties = function(xw) {
        md.rdbmsitem.prototype.toXmlProperties.call(this, xw);
        xw.writeAttribute("label", this.label);
        xw.writeAttribute("namePlural", this.namePlural);
        xw.writeAttribute("labelPlural", this.labelPlural);
        xw.writeAttribute("description", this.description);
    }
    table.prototype.toXmlChildren = function(xw) {
        md.rdbmsitem.prototype.toXmlChildren.call(this, xw);
        xw.startElement('tableColumns');
        var i, i_len=this.tableColumns.length, item;
        for (i=0; i<i_len; i++) {
            item = this.tableColumns[i];
            item.toXml(xw);
        }
        xw.endElement();
        xw.startElement('indexes');
        var i, i_len=this.indexes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.indexes[i];
            item.toXml(xw);
        }
        xw.endElement();
        xw.startElement('documents');
        var i, i_len=this.documents.length, item;
        for (i=0; i<i_len; i++) {
            item = this.documents[i];
            item.toXml(xw);
        }
        xw.endElement();
    }
    table.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == 'c') {
            if (name === 'c') {
                return this.wzLoadToChildColl(child, _md.tableColumn, this.tableColumns);
            }
        }
        if (_l == 3 && _ch == 'n') {
            if (name === 'ndx') {
                return this.wzLoadToChildColl(child, _md.index, this.indexes);
            }
        }
        if (_l == 5 && _ch == 'l') {
            if (name === 'label') {
                this.label = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'p') {
            if (name === 'plural') {
                this.namePlural = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'd') {
            if (name === 'document') {
                return this.wzLoadToChildColl(child, _md.document, this.documents);
            }
        }
        if (_l == 11 && _ch == 'd') {
            if (name === 'description') {
                this.description = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 'l') {
            if (name === 'label-plural') {
                this.labelPlural = child.v; return true;
            }
            else if (name === 'label_plural') {
                this.labelPlural = child.v; return true;
            }
        }
        ok = _md.rdbmsitem.prototype.loadChild.call(this, child);
        return ok;
    }
    table.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.rdbmsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    table.prototype.wzVerify = function(ctx) {
        var i, i_len=this.tableColumns.length, item;
        for (i=0; i<i_len; i++) {
            item = this.tableColumns[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.indexes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.indexes[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.documents.length, item;
        for (i=0; i<i_len; i++) {
            item = this.documents[i];
            item.wzVerify(ctx);
        }
        _md.rdbmsitem.prototype.wzVerify.call(this, ctx);
    }
    table.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.tableColumns.length, item;
        for (i=0; i<i_len; i++) {
            item = this.tableColumns[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.indexes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.indexes[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.documents.length, item;
        for (i=0; i<i_len; i++) {
            item = this.documents[i];
            item.wzInitialize(ctx);
        }
        var name = this.wzName;
        this.name = name.toLowerCase();
        this.nameCap = inflection.capitalize(name);
        this.sqlName = isEmpty(this.sqlName) ? name : this.sqlName;
        this.label = isEmpty(this.label) ? this.wzName : this.label;
        this.namePlural = isEmpty(this.namePlural) ? inflection.pluralize(name) : this.namePlural.toLowerCase();
        this.namePluralCap = inflection.capitalize(this.namePlural);
        this.labelPlural = isEmpty(this.labelPlural) ? inflection.pluralize(this.wzName) : this.labelPlural;
        _md.rdbmsitem.prototype.wzInitialize.call(this, ctx);
    }
    table.prototype.primaryKey = function() {
        return _.find(this.indexes,function(item){ return item.isPrimary; });
    }
    table.prototype.keyColumns = function() {
        var pk = this.primaryKey();
        if (pk) {
            var memo = [];
            var i, i_len=pk.indexColumns.length, item;
            for (i=0; i<i_len; i++) {
                item = pk.indexColumns[i];
                memo.push(item.tableColumn);
            }
            return memo;
        }
        else {
            return [];
        }
    }
    table.prototype.keyName = function() {
        var kcols = this.keyColumns();
        return kcols && kcols.length == 1 ? kcols[0].wzName : 'Unknown';
    }
    table.prototype.notKeyColumns = function() {
        var keycols = this.keyColumns();
        return _.filter(this.tableColumns, function(item) {
                return keycols.indexOf(item) < 0;
            })
        ;
    }
    table.prototype.insertColumns = function() {
        return _.filter(this.tableColumns, function(item) {
                return item.canInsert() == true;
            })
        ;
    }
    table.prototype.insertParameters = function() {
        return _.filter(this.tableColumns, function(item) {
                return (item.isInsertParam === true || item.isKey()) && item.canInsert();
            })
        ;
    }
    table.prototype.updateSetColumns = function() {
        return _.filter(this.notKeyColumns(), function(item){ return item.canUpdate(); });
    }
    table.prototype.updateWhereColumns = function() {
        return _.filter(this.tableColumns, function(item) {
                return item.canUpdate();
            })
        ;
    }
    table.prototype.textColumns = function() {
        return _.filter(this.tableColumns, function(item) {
                return item.domain == 'string';
            })
        ;
    }
    table.prototype.proxyColumns = function() {
        return _.filter(this.tableColumns, function(item) {
                return item.isProxy;
            })
        ;
    }
    table.prototype.lookUps = function() {
        var memo = [];
        var i, i_len=this.tableColumns.length, item;
        for (i=0; i<i_len; i++) {
            item = this.tableColumns[i];
            var j, j_len=item.lookUps.length, l;
            for (j=0; j<j_len; j++) {
                l = item.lookUps[j];
                memo.push(l);
            }
        }
        return memo;
    }
    table.prototype.enumReferences = function() {
        var memo = [];
        var i, i_len=this.tableColumns.length, item;
        for (i=0; i<i_len; i++) {
            item = this.tableColumns[i];
            if (item.enumReference != null) {
                memo.push(item);
            }
        }
        return memo;
    }
    table.prototype.tableColumnArguments = function() {
        return tableHelper.ArgumentsToString(this.tableColumns);
    }
    table.prototype.keyArguments = function() {
        return tableHelper.ArgumentsToString(this.keyColumns());
    }
    table.prototype.keyParameters = function() {
        return tableHelper.ParametersToString(this.keyColumns());
    }
    table.prototype.keyParametersToStringTrace = function() {
        return tableHelper.ParametersToStringTrace(this.keyColumns());
    }
    table.prototype.keyTestValues = function(separator) {
        return tableHelper.TestValuesToString(this.keyColumns(), separator);
    }
    table.prototype.keyParametersInstance = function(instance) {
        return tableHelper.ParametersToStringInstance(this.keyColumns(), instance);
    }
    table.prototype.keyParametersInstanceToStringTrace = function(instance) {
        return tableHelper.ParametersInstanceToStringTrace(this.keyColumns(), instance);
    }
    table.prototype.oneRelations = function() {
        var memo = [];
        var i, i_len=this.wzParent.relations.length, item;
        for (i=0; i<i_len; i++) {
            item = this.wzParent.relations[i];
            if (item.manyTableName === this.wzName) {
                memo.push(item);
            }
        }
        return memo;
    }
    table.prototype.oneRelationsUnique = function() {
        var memo = [];
        var i, i_len=this.wzParent.relations.length, item;
        for (i=0; i<i_len; i++) {
            item = this.wzParent.relations[i];
            if (item.manyTableName === this.wzName &&_.find(memo, function(item2) { item2.oneTable.wzName === item.oneTable.wzName }) == null) {
                memo.push(item);
            }
        }
        return memo;
    }
    table.prototype.oneRelationsProxy = function() {
        return _.filter(this.oneRelations(), function(item) { return item.parentIsProxy; } );
    }
    table.prototype.oneKeys = function() {
        return ['oneKeys_TODO'];
    }
    table.prototype.manyRelations = function() {
        var memo = [];
        var i, i_len=this.wzParent.relations.length, item;
        for (i=0; i<i_len; i++) {
            item = this.wzParent.relations[i];
            if (item.oneTableName === this.wzName && item.manyTable() != null) {
                memo.push(item);
            }
        }
        return memo;
    }
    table.prototype.childProxyRelations = function() {
        var memo = [];
        var i, i_len=this.wzParent.relations.length, item;
        for (i=0; i<i_len; i++) {
            item = this.wzParent.relations[i];
            if (item.oneTableName === this.wzName && item.parentIsProxy) {
                memo.push(item);
            }
        }
        return memo;
    }
    table.prototype.oneTables = function() {
        var memo = [];
        var i, i_len=this.oneRelations().length, item;
        for (i=0; i<i_len; i++) {
            item = this.oneRelations()[i];
            memo.push(this.wzParent.getTable(item.oneTableName));
        }
        return memo;
    }
    table.prototype.manyTables = function() {
        var memo = [];
        var i, i_len=this.manyRelations().length, item;
        for (i=0; i<i_len; i++) {
            item = this.manyRelations()[i];
            if (item.manyTable()) {
                memo.push(item.manyTable());
            }
        }
        return memo;
    }
    table.prototype.hasOneTables = function() {
        return this.oneRelations().length > 0;
    }
    table.prototype.hasManyTables = function() {
        return this.manyRelations().length > 0;
    }
    table.prototype.keySqlColumnsToString = function(separator, quoted) {
        return tableHelper.SqlColumnsToString(this.keyColumns(), separator, quoted);
    }
    table.prototype.keyPropertiesToString = function(separator, prefix) {
        return tableHelper.PropertiesToString(this.keyColumns(), separator, prefix);
    }
    table.prototype.sqlColumnsToString = function(separator, quoted) {
        return tableHelper.SqlColumnsToString(this.tableColumns, separator, quoted);
    }
    table.prototype.keyFieldsToString = function(separator) {
        return tableHelper.FieldsToString(this.keyColumns(), separator);
    }
    table.prototype.insertFieldsToString = function(separator) {
        return tableHelper.FieldsToString(this.insertColumns(), separator);
    }
    table.prototype.updateWhereFieldsToString = function(separator) {
        return tableHelper.FieldsToString(this.updateWhereColumns(), separator);
    }
    table.prototype.updateSetSqlColumnsToString = function(separator, quoted) {
        return tableHelper.SqlColumnsToString(this.updateSetColumns(), separator, quoted);
    }
    table.prototype.updateWhereSqlColumnsToString = function(separator, quoted) {
        return tableHelper.SqlColumnsToString(this.updateWhereColumns(), separator, quoted);
    }
    table.prototype.textColumnsParametersInstance = function(instance) {
        return tableHelper.ParametersToStringInstance(this.textColumns(), instance);
    }
    table.prototype.concatTextColumns = function(instance, separator) {
        return tableHelper.ConcatTextInstance(this.textColumns(), instance, separator);
    }
    table.prototype.columnsTestValues = function(separator) {
        return tableHelper.TestValuesToString(this.tableColumns, separator);
    }
    table.prototype.insertFieldsTestValues = function(separator) {
        return tableHelper.TestValuesToString(this.insertColumns(), separator);
    }
    table.prototype.updateWhereTestValues = function(separator) {
        return tableHelper.TestValuesToString(this.updateWhereColumns(), separator);
    }
    table.prototype.getTableColumnByName = function(name, caseSensitive) {
        var name = caseSensitive ? name : name.toLowerCase();
        var i, i_len=this.tableColumns.length, item;
        for (i=0; i<i_len; i++) {
            item = this.tableColumns[i];
            if (caseSensitive ? item.wzName === name : item.wzName.toLowerCase() === name) {
                return item;
            }
        }
        return null;
    }
    table.prototype.keyColumnsToAndCondition = function(columntemplate, booloperator, values) {
        return tableHelper.ColumnsToAndCondition(this.keyColumns(), booloperator, columntemplate, values);
    }
    table.prototype.cmbLabel = function() {
        var i, i_len=this.labels.length, item;
        for (i=0; i<i_len; i++) {
            item = this.labels[i];
            if (item.wzName.toLowerCase() === "cmb") {
                return item;
            }
        }
        return null;
    }
    table.prototype.hasCmbLabel = function() {
        return this.cmbLabel() != null;
    }
    table.prototype.testInfo = function(ctx) {
        ctx.primaryKey = this.primaryKey();
        ctx.keyColumns = this.keyColumns();
        ctx.keyName = this.keyName();
        ctx.notKeyColumns = this.notKeyColumns();
        ctx.insertParameters = this.insertParameters();
        ctx.updateSetColumns = this.updateSetColumns();
        ctx.updateWhereColumns = this.updateWhereColumns();
        ctx.textColumns = this.textColumns();
        ctx.proxyColumns = this.proxyColumns();
        ctx.tableColumnArguments = this.tableColumnArguments();
        ctx.keyArguments = this.keyArguments();
        ctx.keyParameters = this.keyParameters();
        ctx.keyParametersToStringTrace = this.keyParametersToStringTrace();
        ctx.keyTestValues = this.keyTestValues();
        ctx.keyParametersInstance = this.keyParametersInstance("instance");
        ctx.keyParametersInstanceToStringTrace = this.keyParametersInstanceToStringTrace('instance');
        ctx.oneRelations = this.oneRelations();
        ctx.oneRelationsUnique = this.oneRelationsUnique();
        ctx.oneRelationsProxy = this.oneRelationsProxy;
        ctx.oneKeys = this.oneKeys();
        ctx.manyRelations = this.manyRelations();
        ctx.childProxyRelations = this.childProxyRelations();
        ctx.oneTables = this.oneTables();
        ctx.manyTables = this.manyTables();
        ctx.hasOneTables = this.hasOneTables;
        ctx.hasManyTables = this.hasManyTables();
        ctx.keySqlColumnsToString = this.keySqlColumnsToString(' - ', true);
        ctx.keyPropertiesToString = this.keyPropertiesToString(' - ', 'k');
        ctx.sqlColumnsToString = this.sqlColumnsToString(',', true);
        ctx.keyFieldsToString = this.keyFieldsToString();
        ctx.insertFieldsToString = this.insertFieldsToString('-');
        ctx.updateWhereFieldsToString = this.updateWhereFieldsToString(';');
        ctx.updateSetSqlColumnsToString = this.updateSetSqlColumnsToString(';', true);
        ctx.updateWhereSqlColumnsToString = this.updateWhereSqlColumnsToString(',', true);
        ctx.textColumnsParametersInstance = this.textColumnsParametersInstance('instance');
        ctx.concatTextColumns = this.concatTextColumns('instance', ',');
        ctx.columnsTestValues = this.columnsTestValues(';');
        ctx.insertFieldsTestValues = this.insertFieldsTestValues(',');
        ctx.updateWhereTestValues = this.updateWhereTestValues(';');
    }
    return table;
})(rdbmsitem);

_md.table = table;
/**
    element tableColumn
     A table column.
     The wzName is the ddl/sql name.
     TODO r enum/s
     TODO r lookUp/s
*/
var tableColumn = (function (rdbmsitem) {
    _inherits(tableColumn, rdbmsitem);
    function tableColumn(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(tableColumn.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, tableColumn);
        this.allowedDOMAINS = [ "string", "boolean", "integer", "float", "date", "document"];
        this.DOMAIN_STRING = "string";
        this.DOMAIN_XBOOLEAN = "boolean";
        this.DOMAIN_INTEGER = "integer";
        this.DOMAIN_XFLOAT = "float";
        this.DOMAIN_DATE = "date";
        this.DOMAIN_DOCUMENT = "document";
        this.allowedFORMATS = [ "none", "password", "datetime", "datetime-local", "date", "month", "time", "week", "number", "email", "url", "search", "tel", "color", "hcheckboxes", "vcheckboxes"];
        this.FORMAT_NONE = "none";
        this.FORMAT_PASSWORD = "password";
        this.FORMAT_DATETIME = "datetime";
        this.FORMAT_DATETIME_LOCAL = "datetime-local";
        this.FORMAT_DATE = "date";
        this.FORMAT_MONTH = "month";
        this.FORMAT_TIME = "time";
        this.FORMAT_WEEK = "week";
        this.FORMAT_NUMBER = "number";
        this.FORMAT_EMAIL = "email";
        this.FORMAT_URL = "url";
        this.FORMAT_SEARCH = "search";
        this.FORMAT_TEL = "tel";
        this.FORMAT_COLOR = "color";
        this.FORMAT_HCHECKBOXES = "hcheckboxes";
        this.FORMAT_VCHECKBOXES = "vcheckboxes";
        this.wzElement = "tableColumn";
        // The column data type
        this.domain = "string";
        /**
             A description of the column.
             Is used in forms as an help-block
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.description = null
        // The column default value
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.defaultValue = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.idGenerator = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.idSeed = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.idStep = null
        /**
             The DDL sql name of the column
             Optional. The default is the wzName.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.sqlName = null
        /**
             A text used on views to label the column.
             Is used in forms as a placeholder.
             Optional. The default is the wzName.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.label = null
        /**
             A text used on list views as column heading when the column is on the many side of the relation.
             Optional. The default is the label.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.referenceLabel = null
        /**
             A text used on list views as column heading.
             Optional. The default is the wzName.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.listHeading = null
        /**
             Insert this column in a sintetic view of a table row. Used for view-lists.
             Optional. The default is false.
        */
        this.isProxy = false;
        /**
             Add this column to the parameters of the (api) insert method of a row.
             The default parameters of the insert method are the primaryKey columns.
             Optional. The default is false.
        */
        this.isInsertParam = false;
        // The column display format used on forms
        this.format = "none";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.enumReference = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.calculatedOnInsert = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.calculatedOnUpdate = null
        // relation validation
        // Table column validation rules.
        this.validations = [];
    }
    tableColumn.DOMAIN_STRING = "string";
    tableColumn.DOMAIN_XBOOLEAN = "boolean";
    tableColumn.DOMAIN_INTEGER = "integer";
    tableColumn.DOMAIN_XFLOAT = "float";
    tableColumn.DOMAIN_DATE = "date";
    tableColumn.DOMAIN_DOCUMENT = "document";
    tableColumn.FORMAT_NONE = "none";
    tableColumn.FORMAT_PASSWORD = "password";
    tableColumn.FORMAT_DATETIME = "datetime";
    tableColumn.FORMAT_DATETIME_LOCAL = "datetime-local";
    tableColumn.FORMAT_DATE = "date";
    tableColumn.FORMAT_MONTH = "month";
    tableColumn.FORMAT_TIME = "time";
    tableColumn.FORMAT_WEEK = "week";
    tableColumn.FORMAT_NUMBER = "number";
    tableColumn.FORMAT_EMAIL = "email";
    tableColumn.FORMAT_URL = "url";
    tableColumn.FORMAT_SEARCH = "search";
    tableColumn.FORMAT_TEL = "tel";
    tableColumn.FORMAT_COLOR = "color";
    tableColumn.FORMAT_HCHECKBOXES = "hcheckboxes";
    tableColumn.FORMAT_VCHECKBOXES = "vcheckboxes";
    // w("public tsi.DataTypes.DataType {attribute.wzId}DataType { get; set; }");
    tableColumn.prototype.getValidation = function(name) {
        var found = null;
        this.validations.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    tableColumn.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    tableColumn.prototype.toJsonProperties = function(result) {
        _md.rdbmsitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.domain)) {
            result["domain"] = this.domain;
        }
        if (!isEmpty(this.description)) {
            result["description"] = this.description;
        }
        if (!isEmpty(this.defaultValue)) {
            result["defaultValue"] = this.defaultValue;
        }
        if (!isEmpty(this.idGenerator)) {
            result["idGenerator"] = this.idGenerator;
        }
        if (!isEmpty(this.idSeed)) {
            result["idSeed"] = this.idSeed;
        }
        if (!isEmpty(this.idStep)) {
            result["idStep"] = this.idStep;
        }
        if (!isEmpty(this.sqlName)) {
            result["sqlName"] = this.sqlName;
        }
        if (!isEmpty(this.label)) {
            result["label"] = this.label;
        }
        if (!isEmpty(this.referenceLabel)) {
            result["referenceLabel"] = this.referenceLabel;
        }
        if (!isEmpty(this.listHeading)) {
            result["listHeading"] = this.listHeading;
        }
        result["isProxy"] = this.isProxy;
        result["isInsertParam"] = this.isInsertParam;
        if (!isEmpty(this.format)) {
            result["format"] = this.format;
        }
        if (!isEmpty(this.enumReference)) {
            result["enumReference"] = this.enumReference;
        }
        if (!isEmpty(this.calculatedOnInsert)) {
            result["calculatedOnInsert"] = this.calculatedOnInsert;
        }
        if (!isEmpty(this.calculatedOnUpdate)) {
            result["calculatedOnUpdate"] = this.calculatedOnUpdate;
        }
    }
    tableColumn.prototype.toJsonChildren = function(result) {
        _md.rdbmsitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.validations.length, item;
        for (i=0; i<i_len; i++) {
            item = this.validations[i];
            items.push(item.toJson());
        }
        result['validations'] = items;
    }
    tableColumn.prototype.toXml = function(xw) {
        xw.startElement('tableColumn');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    tableColumn.prototype.toXmlProperties = function(xw) {
        md.rdbmsitem.prototype.toXmlProperties.call(this, xw);
        xw.writeAttribute("domain", this.domain);
        xw.writeAttribute("description", this.description);
        xw.writeAttribute("defaultValue", this.defaultValue);
        xw.writeAttribute("idGenerator", this.idGenerator);
        xw.writeAttribute("idSeed", this.idSeed);
        xw.writeAttribute("idStep", this.idStep);
        xw.writeAttribute("sqlName", this.sqlName);
        xw.writeAttribute("label", this.label);
        xw.writeAttribute("referenceLabel", this.referenceLabel);
        xw.writeAttribute("listHeading", this.listHeading);
        xw.writeAttribute("isProxy", this.isProxy);
        xw.writeAttribute("isInsertParam", this.isInsertParam);
        xw.writeAttribute("format", this.format);
        xw.writeAttribute("enumReference", this.enumReference);
        xw.writeAttribute("calculatedOnInsert", this.calculatedOnInsert);
        xw.writeAttribute("calculatedOnUpdate", this.calculatedOnUpdate);
    }
    tableColumn.prototype.toXmlChildren = function(xw) {
        md.rdbmsitem.prototype.toXmlChildren.call(this, xw);
        xw.startElement('validations');
        var i, i_len=this.validations.length, item;
        for (i=0; i<i_len; i++) {
            item = this.validations[i];
            item.toXml(xw);
        }
        xw.endElement();
    }
    tableColumn.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'l') {
            if (name === 'label') {
                this.label = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'm') {
            if (name === 'match') {
                return this.wzLoadToChildColl(child, _md.match, this.validations);
            }
        }
        if (_l == 6 && _ch == 'd') {
            if (name === 'domain') {
                this.domain = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'f') {
            if (name === 'format') {
                this.format = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'r') {
            if (name === 'regexp') {
                return this.wzLoadToChildColl(child, _md.regexp, this.validations);
            }
        }
        if (_l == 7 && _ch == 'd') {
            if (name === 'default') {
                this.defaultValue = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'i') {
            if (name === 'id-seed') {
                this.idSeed = child.v; return true;
            }
            else if (name === 'id_seed') {
                this.idSeed = child.v; return true;
            }
            else if (name === 'id-step') {
                this.idStep = child.v; return true;
            }
            else if (name === 'id_step') {
                this.idStep = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'i') {
            if (name === 'is-proxy') {
                this.isProxy = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_proxy') {
                this.isProxy = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 8 && _ch == 'm') {
            if (name === 'minvalue') {
                return this.wzLoadToChildColl(child, _md.minValue, this.validations);
            }
            else if (name === 'maxvalue') {
                return this.wzLoadToChildColl(child, _md.maxValue, this.validations);
            }
        }
        if (_l == 8 && _ch == 'r') {
            if (name === 'required') {
                return this.wzLoadToChildColl(child, _md.required, this.validations);
            }
            else if (name === 'restrict') {
                return this.wzLoadToChildColl(child, _md.restrict, this.validations);
            }
        }
        if (_l == 8 && _ch == 's') {
            if (name === 'sql-name') {
                this.sqlName = child.v; return true;
            }
            else if (name === 'sql_name') {
                this.sqlName = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'm') {
            if (name === 'min-value') {
                return this.wzLoadToChildColl(child, _md.minValue, this.validations);
            }
            else if (name === 'max-value') {
                return this.wzLoadToChildColl(child, _md.maxValue, this.validations);
            }
            else if (name === 'minlength') {
                return this.wzLoadToChildColl(child, _md.minLength, this.validations);
            }
            else if (name === 'maxlength') {
                return this.wzLoadToChildColl(child, _md.maxLength, this.validations);
            }
        }
        if (_l == 9 && _ch == 'o') {
            if (name === 'on-insert') {
                this.calculatedOnInsert = child.v; return true;
            }
            else if (name === 'on_insert') {
                this.calculatedOnInsert = child.v; return true;
            }
            else if (name === 'on-update') {
                this.calculatedOnUpdate = child.v; return true;
            }
            else if (name === 'on_update') {
                this.calculatedOnUpdate = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'm') {
            if (name === 'min-length') {
                return this.wzLoadToChildColl(child, _md.minLength, this.validations);
            }
            else if (name === 'max-length') {
                return this.wzLoadToChildColl(child, _md.maxLength, this.validations);
            }
        }
        if (_l == 11 && _ch == 'd') {
            if (name === 'description') {
                this.description = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 'i') {
            if (name === 'id-generator') {
                this.idGenerator = child.v; return true;
            }
            else if (name === 'id_generator') {
                this.idGenerator = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 'l') {
            if (name === 'list-heading') {
                this.listHeading = child.v; return true;
            }
            else if (name === 'list_heading') {
                this.listHeading = child.v; return true;
            }
        }
        if (_l == 14 && _ch == 'e') {
            if (name === 'enum-reference') {
                this.enumReference = child.v; return true;
            }
            else if (name === 'enum_reference') {
                this.enumReference = child.v; return true;
            }
        }
        if (_l == 15 && _ch == 'i') {
            if (name === 'is-insert-param') {
                this.isInsertParam = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_insert_param') {
                this.isInsertParam = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 15 && _ch == 'r') {
            if (name === 'reference-label') {
                this.referenceLabel = child.v; return true;
            }
            else if (name === 'reference_label') {
                this.referenceLabel = child.v; return true;
            }
        }
        ok = _md.rdbmsitem.prototype.loadChild.call(this, child);
        return ok;
    }
    tableColumn.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.rdbmsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    tableColumn.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("tableColumn", "domain", this.domain, this.allowedDOMAINS, this);
        ctx.verifyEnum("tableColumn", "format", this.format, this.allowedFORMATS, this);
        var i, i_len=this.validations.length, item;
        for (i=0; i<i_len; i++) {
            item = this.validations[i];
            item.wzVerify(ctx);
        }
        _md.rdbmsitem.prototype.wzVerify.call(this, ctx);
    }
    tableColumn.prototype.wzInitialize = function(ctx) {
        // TODO set domainDataType = this.getTypeSystem().CreateDataType(domain)
        var i, i_len=this.validations.length, item;
        for (i=0; i<i_len; i++) {
            item = this.validations[i];
            item.wzInitialize(ctx);
        }
        this.table = this.wzParent;
        var name = this.wzName;
        this.name = this.wzName;
        this.sqlName = isEmpty(this.sqlName) ? this.wzName : this.sqlName;
        this.label = isEmpty(this.label) ? this.wzName : this.label;
        this.referenceLabel = isEmpty(this.referenceLabel) ? this.label : this.referenceLabel;
        this.listHeading = isEmpty(this.listHeading) ? this.label : this.listHeading;
        this.argumentName = this.wzName.substr(0, 1).toLowerCase() + this.wzName.substr(1);
        this.fieldName = "_" + this.wzName.substr(0, 1) + this.wzName.substr(1);
        _md.rdbmsitem.prototype.wzInitialize.call(this, ctx);
    }
    tableColumn.prototype.isKey = function() {
        if (this.table.primaryKey()) {
            var i, i_len=this.table.primaryKey().indexColumns.length, item;
            for (i=0; i<i_len; i++) {
                item = this.table.primaryKey().indexColumns[i];
                if (item.wzName === this.wzName) {
                    return true;
                }
            }
        }
        return false;
    }
    tableColumn.prototype.isListProxyItem = function() {
        return this.isProxy || this.isKey() || this.isReference() || this.nameLower == "name";
    }
    tableColumn.prototype.referenceTable = function() {
        var i, i_len=this.table.oneRelations.length, r;
        for (i=0; i<i_len; i++) {
            r = this.table.oneRelations[i];
            var j, j_len=r.relationColumns.length, rc;
            for (j=0; j<j_len; j++) {
                rc = r.relationColumns[j];
                if (rc.manyColumnName == this.wzName) {
                    return r.oneTable();
                }
            }
        }
        return null;
    }
    tableColumn.prototype.isReference = function() {
        return this.referenceTable() != null;
    }
    tableColumn.prototype.isIdentity = function() {
        return this.idGenerator != null && this.idGenerator.toLowerCase() === NameTable.Identity; // TODO;
    }
    tableColumn.prototype.isAutomaticOnUpdate = function() {
        return this.calculatedValueOnUpdate != null || this.idGenerator != null || this.canUpdate == false;
    }
    tableColumn.prototype.hasDefaultValue = function() {
        return this.defaultValue != null;
    }
    tableColumn.prototype.isRequired = function() {
        return _.find(this.validations, function(item){ return item.wzTag === 'required'; });
    }
    tableColumn.prototype.setIsRequired = function() {
        if (this.isRequired()) {
            return ;
        }
        var item = new md.Required(null, this.wzSourceLineInfo);
        item.wzTag = "required";
        item.wzParent = this;
        this.validations.Add(item);
    }
    tableColumn.prototype.isViewIndexProxy = function() {
        if (this.isProxy) {
            return true;
        }
        if (this.wzName != null && (this.nameLower == "name" || this.nameLower == "id")) {
            return true;
        }
        if (this.table.hasCmbLabel() && this.table.cmbLabel().gettableColumnByName(this.wzName) != null) {
            return true;
        }
        return false;
    }
    tableColumn.prototype.jsDefaultValue = function() {
        if (isEmpty(this.defaultValue)) {
            if (this.domain === 'integer' || this.domain === 'float') {
                return "0";
            }
            else if (this.domain === 'boolean') {
                return "false";
            }
            else {
                return "null";
            }
        }
        else {
            if (this.domain === 'string') {
                return '"' + this.defaultValue + '"';
            }
            else if (this.domain === 'boolean') {
                return this.defaultValue == null ? "false" : this.defaultValue.ToLowerCase();
            }
            else if (this.domain === 'date' && this.defaultValue.toLowerCase() === "today") {
                return "new Date().getTime()";
            }
            else {
                return this.defaultValue;
            }
        }
    }
    tableColumn.prototype.listEditControlName = function() {
        return "fc_" + this.table.nameLower + "Edit_" + this.nameLower;
    }
    tableColumn.prototype.canUpdate = function() {
        return this.isKey == false &&isEmpty(this.idGenerator) &&isEmpty(this.calculatedOnInsert) &&isEmpty(this.calculatedOnUpdate);
    }
    tableColumn.prototype.canInsert = function() {
        return isEmpty(this.idGenerator) &&isEmpty(this.calculatedOnInsert);
    }
    return tableColumn;
})(rdbmsitem);

_md.tableColumn = tableColumn;
/**
    element index
     A table index
     The wzName is the ddl/sql name.
*/
var index = (function (rdbmsitem) {
    _inherits(index, rdbmsitem);
    function index(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(index.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, index);
        this.wzElement = "index";
        this.isPrimary = false;
        this.isUnique = false;
        // relation indexColumn
        this.indexColumns = [];
    }
    index.prototype.addIndexColumn = function(name, sourceLineInfo) {
        var retval = new _md.indexColumn(name, sourceLineInfo);
        retval.wzParent = this;
        this.indexColumns.push(retval);
        return retval;
    }
    index.prototype.getIndexColumn = function(name) {
        var found = null;
        this.indexColumns.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    index.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    index.prototype.toJsonProperties = function(result) {
        _md.rdbmsitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        result["isPrimary"] = this.isPrimary;
        result["isUnique"] = this.isUnique;
    }
    index.prototype.toJsonChildren = function(result) {
        _md.rdbmsitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.indexColumns.length, item;
        for (i=0; i<i_len; i++) {
            item = this.indexColumns[i];
            items.push(item.toJson());
        }
        result['indexColumns'] = items;
    }
    index.prototype.toXml = function(xw) {
        xw.startElement('index');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    index.prototype.toXmlProperties = function(xw) {
        md.rdbmsitem.prototype.toXmlProperties.call(this, xw);
        xw.writeAttribute("isPrimary", this.isPrimary);
        xw.writeAttribute("isUnique", this.isUnique);
    }
    index.prototype.toXmlChildren = function(xw) {
        md.rdbmsitem.prototype.toXmlChildren.call(this, xw);
        xw.startElement('indexColumns');
        var i, i_len=this.indexColumns.length, item;
        for (i=0; i<i_len; i++) {
            item = this.indexColumns[i];
            item.toXml(xw);
        }
        xw.endElement();
    }
    index.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == 'c') {
            if (name === 'c') {
                return this.wzLoadToChildColl(child, _md.indexColumn, this.indexColumns);
            }
        }
        if (_l == 9 && _ch == 'i') {
            if (name === 'is-unique') {
                this.isUnique = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_unique') {
                this.isUnique = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 10 && _ch == 'i') {
            if (name === 'is-primary') {
                this.isPrimary = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_primary') {
                this.isPrimary = parseboolean(child.v, true, child); return true;
            }
        }
        ok = _md.rdbmsitem.prototype.loadChild.call(this, child);
        return ok;
    }
    index.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.rdbmsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    index.prototype.wzVerify = function(ctx) {
        var i, i_len=this.indexColumns.length, item;
        for (i=0; i<i_len; i++) {
            item = this.indexColumns[i];
            item.wzVerify(ctx);
        }
        _md.rdbmsitem.prototype.wzVerify.call(this, ctx);
    }
    index.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.indexColumns.length, item;
        for (i=0; i<i_len; i++) {
            item = this.indexColumns[i];
            item.wzInitialize(ctx);
        }
        this.table = this.wzParent;
        var i, i_len=this.indexColumns.length, item;
        for (i=0; i<i_len; i++) {
            item = this.indexColumns[i];
            item.tableColumn = this.table.getTableColumn(item.wzName);
        }
        _md.rdbmsitem.prototype.wzInitialize.call(this, ctx);
    }
    return index;
})(rdbmsitem);

_md.index = index;
/**
    element indexColumn
     An index column
     The wzName is the ddl/sql name.
*/
var indexColumn = (function (rdbmsitem) {
    _inherits(indexColumn, rdbmsitem);
    function indexColumn(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(indexColumn.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, indexColumn);
        this.allowedSORTS = [ "asc", "desc"];
        this.SORT_ASC = "asc";
        this.SORT_DESC = "desc";
        this.wzElement = "indexColumn";
        this.sort = "asc";
    }
    indexColumn.SORT_ASC = "asc";
    indexColumn.SORT_DESC = "desc";
    indexColumn.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    indexColumn.prototype.toJsonProperties = function(result) {
        _md.rdbmsitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.sort)) {
            result["sort"] = this.sort;
        }
    }
    indexColumn.prototype.toJsonChildren = function(result) {
        _md.rdbmsitem.prototype.toJsonChildren.call(this, result);
    }
    indexColumn.prototype.toXml = function(xw) {
        xw.startElement('indexColumn');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    indexColumn.prototype.toXmlProperties = function(xw) {
        md.rdbmsitem.prototype.toXmlProperties.call(this, xw);
        xw.writeAttribute("sort", this.sort);
    }
    indexColumn.prototype.toXmlChildren = function(xw) {
        md.rdbmsitem.prototype.toXmlChildren.call(this, xw);
    }
    indexColumn.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 's') {
            if (name === 'sort') {
                this.sort = child.v; return true;
            }
        }
        ok = _md.rdbmsitem.prototype.loadChild.call(this, child);
        return ok;
    }
    indexColumn.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.rdbmsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    indexColumn.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("indexColumn", "sort", this.sort, this.allowedSORTS, this);
        _md.rdbmsitem.prototype.wzVerify.call(this, ctx);
    }
    return indexColumn;
})(rdbmsitem);

_md.indexColumn = indexColumn;
/**
    element validationError
     A schema level default error message for a validation rule
     The wzName references the wzElement of the rule.
*/
var validationError = (function (rdbmsitem) {
    _inherits(validationError, rdbmsitem);
    function validationError(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(validationError.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, validationError);
        this.wzElement = "validationError";
        /**
             The text of the message. May contain {param} strings for
             parameter substitution.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.message = null
        // relation param
        this.params = [];
    }
    validationError.prototype.addParam = function(name, sourceLineInfo) {
        var retval = new _md.param(name, sourceLineInfo);
        retval.wzParent = this;
        this.params.push(retval);
        return retval;
    }
    validationError.prototype.getParam = function(name) {
        var found = null;
        this.params.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    validationError.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    validationError.prototype.toJsonProperties = function(result) {
        _md.rdbmsitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.message)) {
            result["message"] = this.message;
        }
    }
    validationError.prototype.toJsonChildren = function(result) {
        _md.rdbmsitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            items.push(item.toJson());
        }
        result['params'] = items;
    }
    validationError.prototype.toXml = function(xw) {
        xw.startElement('validationError');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    validationError.prototype.toXmlProperties = function(xw) {
        md.rdbmsitem.prototype.toXmlProperties.call(this, xw);
        xw.writeAttribute("message", this.message);
    }
    validationError.prototype.toXmlChildren = function(xw) {
        md.rdbmsitem.prototype.toXmlChildren.call(this, xw);
        xw.startElement('params');
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.toXml(xw);
        }
        xw.endElement();
    }
    validationError.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'p') {
            if (name === 'param') {
                return this.wzLoadToChildColl(child, _md.param, this.params);
            }
        }
        if (_l == 7 && _ch == 'm') {
            if (name === 'message') {
                this.message = child.v; return true;
            }
        }
        ok = _md.rdbmsitem.prototype.loadChild.call(this, child);
        return ok;
    }
    validationError.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.rdbmsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    validationError.prototype.wzVerify = function(ctx) {
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzVerify(ctx);
        }
        _md.rdbmsitem.prototype.wzVerify.call(this, ctx);
    }
    validationError.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.params.length, item;
        for (i=0; i<i_len; i++) {
            item = this.params[i];
            item.wzInitialize(ctx);
        }
        _md.rdbmsitem.prototype.wzInitialize.call(this, ctx);
    }
    return validationError;
})(rdbmsitem);

_md.validationError = validationError;
/**
    element validation
     The base element for a table column validation rule.
*/
var validation = (function (rdbmsitem) {
    _inherits(validation, rdbmsitem);
    function validation(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(validation.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, validation);
        this.wzElement = "validation";
        // Overrides the default validation-error message of the rule.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.message = null
    }
    validation.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    validation.prototype.toJsonProperties = function(result) {
        _md.rdbmsitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.message)) {
            result["message"] = this.message;
        }
    }
    validation.prototype.toJsonChildren = function(result) {
        _md.rdbmsitem.prototype.toJsonChildren.call(this, result);
    }
    validation.prototype.toXml = function(xw) {
        xw.startElement('validation');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    validation.prototype.toXmlProperties = function(xw) {
        md.rdbmsitem.prototype.toXmlProperties.call(this, xw);
        xw.writeAttribute("message", this.message);
    }
    validation.prototype.toXmlChildren = function(xw) {
        md.rdbmsitem.prototype.toXmlChildren.call(this, xw);
    }
    validation.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 7 && _ch == 'm') {
            if (name === 'message') {
                this.message = child.v; return true;
            }
        }
        ok = _md.rdbmsitem.prototype.loadChild.call(this, child);
        return ok;
    }
    validation.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.rdbmsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return validation;
})(rdbmsitem);

_md.validation = validation;
/**
    element required
     A value is required
*/
var required = (function (validation) {
    _inherits(required, validation);
    function required(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(required.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, required);
        this.wzElement = "required";
    }
    required.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    required.prototype.toJsonProperties = function(result) {
        _md.validation.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    required.prototype.toJsonChildren = function(result) {
        _md.validation.prototype.toJsonChildren.call(this, result);
    }
    required.prototype.toXml = function(xw) {
        xw.startElement('required');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    required.prototype.toXmlProperties = function(xw) {
        md.validation.prototype.toXmlProperties.call(this, xw);
    }
    required.prototype.toXmlChildren = function(xw) {
        md.validation.prototype.toXmlChildren.call(this, xw);
    }
    return required;
})(validation);

_md.required = required;
// element minValue
var minValue = (function (validation) {
    _inherits(minValue, validation);
    function minValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(minValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, minValue);
        this.wzElement = "minValue";
    }
    minValue.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    minValue.prototype.toJsonProperties = function(result) {
        _md.validation.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    minValue.prototype.toJsonChildren = function(result) {
        _md.validation.prototype.toJsonChildren.call(this, result);
    }
    minValue.prototype.toXml = function(xw) {
        xw.startElement('minValue');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    minValue.prototype.toXmlProperties = function(xw) {
        md.validation.prototype.toXmlProperties.call(this, xw);
    }
    minValue.prototype.toXmlChildren = function(xw) {
        md.validation.prototype.toXmlChildren.call(this, xw);
    }
    return minValue;
})(validation);

_md.minValue = minValue;
// element maxValue
var maxValue = (function (validation) {
    _inherits(maxValue, validation);
    function maxValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(maxValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, maxValue);
        this.wzElement = "maxValue";
    }
    maxValue.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    maxValue.prototype.toJsonProperties = function(result) {
        _md.validation.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    maxValue.prototype.toJsonChildren = function(result) {
        _md.validation.prototype.toJsonChildren.call(this, result);
    }
    maxValue.prototype.toXml = function(xw) {
        xw.startElement('maxValue');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    maxValue.prototype.toXmlProperties = function(xw) {
        md.validation.prototype.toXmlProperties.call(this, xw);
    }
    maxValue.prototype.toXmlChildren = function(xw) {
        md.validation.prototype.toXmlChildren.call(this, xw);
    }
    return maxValue;
})(validation);

_md.maxValue = maxValue;
// element minLength
var minLength = (function (validation) {
    _inherits(minLength, validation);
    function minLength(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(minLength.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, minLength);
        this.wzElement = "minLength";
    }
    minLength.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    minLength.prototype.toJsonProperties = function(result) {
        _md.validation.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    minLength.prototype.toJsonChildren = function(result) {
        _md.validation.prototype.toJsonChildren.call(this, result);
    }
    minLength.prototype.toXml = function(xw) {
        xw.startElement('minLength');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    minLength.prototype.toXmlProperties = function(xw) {
        md.validation.prototype.toXmlProperties.call(this, xw);
    }
    minLength.prototype.toXmlChildren = function(xw) {
        md.validation.prototype.toXmlChildren.call(this, xw);
    }
    return minLength;
})(validation);

_md.minLength = minLength;
// element maxLength
var maxLength = (function (validation) {
    _inherits(maxLength, validation);
    function maxLength(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(maxLength.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, maxLength);
        this.wzElement = "maxLength";
    }
    maxLength.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    maxLength.prototype.toJsonProperties = function(result) {
        _md.validation.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    maxLength.prototype.toJsonChildren = function(result) {
        _md.validation.prototype.toJsonChildren.call(this, result);
    }
    maxLength.prototype.toXml = function(xw) {
        xw.startElement('maxLength');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    maxLength.prototype.toXmlProperties = function(xw) {
        md.validation.prototype.toXmlProperties.call(this, xw);
    }
    maxLength.prototype.toXmlChildren = function(xw) {
        md.validation.prototype.toXmlChildren.call(this, xw);
    }
    return maxLength;
})(validation);

_md.maxLength = maxLength;
// element regexp
var regexp = (function (validation) {
    _inherits(regexp, validation);
    function regexp(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(regexp.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, regexp);
        this.wzElement = "regexp";
    }
    regexp.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    regexp.prototype.toJsonProperties = function(result) {
        _md.validation.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    regexp.prototype.toJsonChildren = function(result) {
        _md.validation.prototype.toJsonChildren.call(this, result);
    }
    regexp.prototype.toXml = function(xw) {
        xw.startElement('regexp');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    regexp.prototype.toXmlProperties = function(xw) {
        md.validation.prototype.toXmlProperties.call(this, xw);
    }
    regexp.prototype.toXmlChildren = function(xw) {
        md.validation.prototype.toXmlChildren.call(this, xw);
    }
    return regexp;
})(validation);

_md.regexp = regexp;
/**
    element match
     The column value must match the value of the column
     indicated by the wzName
*/
var match = (function (validation) {
    _inherits(match, validation);
    function match(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(match.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, match);
        this.wzElement = "match";
    }
    match.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    match.prototype.toJsonProperties = function(result) {
        _md.validation.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    match.prototype.toJsonChildren = function(result) {
        _md.validation.prototype.toJsonChildren.call(this, result);
    }
    match.prototype.toXml = function(xw) {
        xw.startElement('match');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    match.prototype.toXmlProperties = function(xw) {
        md.validation.prototype.toXmlProperties.call(this, xw);
    }
    match.prototype.toXmlChildren = function(xw) {
        md.validation.prototype.toXmlChildren.call(this, xw);
    }
    return match;
})(validation);

_md.match = match;
/**
    element restrict
     The column value must be one of an enumeration of valid values.
*/
var restrict = (function (validation) {
    _inherits(restrict, validation);
    function restrict(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(restrict.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, restrict);
        this.wzElement = "restrict";
        // relation zenum
        // Enumeration of allowed values
        this.zenums = [];
    }
    restrict.prototype.addZenum = function(name, sourceLineInfo) {
        var retval = new _md.zenum(name, sourceLineInfo);
        retval.wzParent = this;
        this.zenums.push(retval);
        return retval;
    }
    restrict.prototype.getZenum = function(name) {
        var found = null;
        this.zenums.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    restrict.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    restrict.prototype.toJsonProperties = function(result) {
        _md.validation.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    restrict.prototype.toJsonChildren = function(result) {
        _md.validation.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.zenums.length, item;
        for (i=0; i<i_len; i++) {
            item = this.zenums[i];
            items.push(item.toJson());
        }
        result['zenums'] = items;
    }
    restrict.prototype.toXml = function(xw) {
        xw.startElement('restrict');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    restrict.prototype.toXmlProperties = function(xw) {
        md.validation.prototype.toXmlProperties.call(this, xw);
    }
    restrict.prototype.toXmlChildren = function(xw) {
        md.validation.prototype.toXmlChildren.call(this, xw);
        xw.startElement('zenums');
        var i, i_len=this.zenums.length, item;
        for (i=0; i<i_len; i++) {
            item = this.zenums[i];
            item.toXml(xw);
        }
        xw.endElement();
    }
    restrict.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'e') {
            if (name === 'enum') {
                return this.wzLoadToChildColl(child, _md.zenum, this.zenums);
            }
        }
        ok = _md.validation.prototype.loadChild.call(this, child);
        return ok;
    }
    restrict.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.rdbmsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    restrict.prototype.wzVerify = function(ctx) {
        var i, i_len=this.zenums.length, item;
        for (i=0; i<i_len; i++) {
            item = this.zenums[i];
            item.wzVerify(ctx);
        }
        _md.validation.prototype.wzVerify.call(this, ctx);
    }
    restrict.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.zenums.length, item;
        for (i=0; i<i_len; i++) {
            item = this.zenums[i];
            item.wzInitialize(ctx);
        }
        _md.validation.prototype.wzInitialize.call(this, ctx);
    }
    return restrict;
})(validation);

_md.restrict = restrict;
/**
    element zenum
     An allowed value in a restrict validation rule.
*/
var zenum = (function (rdbmsitem) {
    _inherits(zenum, rdbmsitem);
    function zenum(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(zenum.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, zenum);
        this.wzElement = "zenum";
    }
    zenum.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    zenum.prototype.toJsonProperties = function(result) {
        _md.rdbmsitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    zenum.prototype.toJsonChildren = function(result) {
        _md.rdbmsitem.prototype.toJsonChildren.call(this, result);
    }
    zenum.prototype.toXml = function(xw) {
        xw.startElement('zenum');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    zenum.prototype.toXmlProperties = function(xw) {
        md.rdbmsitem.prototype.toXmlProperties.call(this, xw);
    }
    zenum.prototype.toXmlChildren = function(xw) {
        md.rdbmsitem.prototype.toXmlChildren.call(this, xw);
    }
    return zenum;
})(rdbmsitem);

_md.zenum = zenum;
// element relation
var relation = (function (rdbmsitem) {
    _inherits(relation, rdbmsitem);
    function relation(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(relation.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, relation);
        this.allowedCARDINALITIES = [ "one-to-many", "one-to-one"];
        this.CARDINALITY_ONE_TO_MANY = "one-to-many";
        this.CARDINALITY_ONE_TO_ONE = "one-to-one";
        this.allowedONPARENTINSERTS = [ "none", "restrict", "cascade"];
        this.ONPARENTINSERT_NONE = "none";
        this.ONPARENTINSERT_RESTRICT = "restrict";
        this.ONPARENTINSERT_CASCADE = "cascade";
        this.allowedONPARENTUPDATES = [ "none", "restrict", "cascade"];
        this.ONPARENTUPDATE_NONE = "none";
        this.ONPARENTUPDATE_RESTRICT = "restrict";
        this.ONPARENTUPDATE_CASCADE = "cascade";
        this.allowedONPARENTDELETES = [ "none", "restrict", "cascade"];
        this.ONPARENTDELETE_NONE = "none";
        this.ONPARENTDELETE_RESTRICT = "restrict";
        this.ONPARENTDELETE_CASCADE = "cascade";
        this.allowedONCHILDINSERTS = [ "none", "restrict", "cascade"];
        this.ONCHILDINSERT_NONE = "none";
        this.ONCHILDINSERT_RESTRICT = "restrict";
        this.ONCHILDINSERT_CASCADE = "cascade";
        this.allowedONCHILDUPDATES = [ "none", "restrict", "cascade"];
        this.ONCHILDUPDATE_NONE = "none";
        this.ONCHILDUPDATE_RESTRICT = "restrict";
        this.ONCHILDUPDATE_CASCADE = "cascade";
        this.allowedONCHILDDELETES = [ "none", "restrict", "cascade"];
        this.ONCHILDDELETE_NONE = "none";
        this.ONCHILDDELETE_RESTRICT = "restrict";
        this.ONCHILDDELETE_CASCADE = "cascade";
        this.wzElement = "relation";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.oneTableName = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.oneRoleInternal = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.manyTableName = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.manyRoleInternal = null
        this.cardinality = "one-to-many";
        this.manyTableIsDocument = false;
        this.parentIsProxy = false;
        this.OnParentInsert = "none";
        this.OnParentUpdate = "restrict";
        this.OnParentDelete = "restrict";
        this.OnChildInsert = "restrict";
        this.OnChildUpdate = "restrict";
        this.OnChildDelete = "restrict";
        // relation relationColumn
        this.relationColumns = [];
    }
    relation.CARDINALITY_ONE_TO_MANY = "one-to-many";
    relation.CARDINALITY_ONE_TO_ONE = "one-to-one";
    relation.ONPARENTINSERT_NONE = "none";
    relation.ONPARENTINSERT_RESTRICT = "restrict";
    relation.ONPARENTINSERT_CASCADE = "cascade";
    relation.ONPARENTUPDATE_NONE = "none";
    relation.ONPARENTUPDATE_RESTRICT = "restrict";
    relation.ONPARENTUPDATE_CASCADE = "cascade";
    relation.ONPARENTDELETE_NONE = "none";
    relation.ONPARENTDELETE_RESTRICT = "restrict";
    relation.ONPARENTDELETE_CASCADE = "cascade";
    relation.ONCHILDINSERT_NONE = "none";
    relation.ONCHILDINSERT_RESTRICT = "restrict";
    relation.ONCHILDINSERT_CASCADE = "cascade";
    relation.ONCHILDUPDATE_NONE = "none";
    relation.ONCHILDUPDATE_RESTRICT = "restrict";
    relation.ONCHILDUPDATE_CASCADE = "cascade";
    relation.ONCHILDDELETE_NONE = "none";
    relation.ONCHILDDELETE_RESTRICT = "restrict";
    relation.ONCHILDDELETE_CASCADE = "cascade";
    relation.prototype.addRelationColumn = function(name, sourceLineInfo) {
        var retval = new _md.relationColumn(name, sourceLineInfo);
        retval.wzParent = this;
        this.relationColumns.push(retval);
        return retval;
    }
    relation.prototype.getRelationColumn = function(name) {
        var found = null;
        this.relationColumns.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    relation.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    relation.prototype.toJsonProperties = function(result) {
        _md.rdbmsitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.oneTableName)) {
            result["oneTableName"] = this.oneTableName;
        }
        if (!isEmpty(this.oneRoleInternal)) {
            result["oneRoleInternal"] = this.oneRoleInternal;
        }
        if (!isEmpty(this.manyTableName)) {
            result["manyTableName"] = this.manyTableName;
        }
        if (!isEmpty(this.manyRoleInternal)) {
            result["manyRoleInternal"] = this.manyRoleInternal;
        }
        if (!isEmpty(this.cardinality)) {
            result["cardinality"] = this.cardinality;
        }
        result["manyTableIsDocument"] = this.manyTableIsDocument;
        result["parentIsProxy"] = this.parentIsProxy;
        if (!isEmpty(this.OnParentInsert)) {
            result["OnParentInsert"] = this.OnParentInsert;
        }
        if (!isEmpty(this.OnParentUpdate)) {
            result["OnParentUpdate"] = this.OnParentUpdate;
        }
        if (!isEmpty(this.OnParentDelete)) {
            result["OnParentDelete"] = this.OnParentDelete;
        }
        if (!isEmpty(this.OnChildInsert)) {
            result["OnChildInsert"] = this.OnChildInsert;
        }
        if (!isEmpty(this.OnChildUpdate)) {
            result["OnChildUpdate"] = this.OnChildUpdate;
        }
        if (!isEmpty(this.OnChildDelete)) {
            result["OnChildDelete"] = this.OnChildDelete;
        }
    }
    relation.prototype.toJsonChildren = function(result) {
        _md.rdbmsitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.relationColumns.length, item;
        for (i=0; i<i_len; i++) {
            item = this.relationColumns[i];
            items.push(item.toJson());
        }
        result['relationColumns'] = items;
    }
    relation.prototype.toXml = function(xw) {
        xw.startElement('relation');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    relation.prototype.toXmlProperties = function(xw) {
        md.rdbmsitem.prototype.toXmlProperties.call(this, xw);
        xw.writeAttribute("oneTableName", this.oneTableName);
        xw.writeAttribute("oneRoleInternal", this.oneRoleInternal);
        xw.writeAttribute("manyTableName", this.manyTableName);
        xw.writeAttribute("manyRoleInternal", this.manyRoleInternal);
        xw.writeAttribute("cardinality", this.cardinality);
        xw.writeAttribute("manyTableIsDocument", this.manyTableIsDocument);
        xw.writeAttribute("parentIsProxy", this.parentIsProxy);
        xw.writeAttribute("OnParentInsert", this.OnParentInsert);
        xw.writeAttribute("OnParentUpdate", this.OnParentUpdate);
        xw.writeAttribute("OnParentDelete", this.OnParentDelete);
        xw.writeAttribute("OnChildInsert", this.OnChildInsert);
        xw.writeAttribute("OnChildUpdate", this.OnChildUpdate);
        xw.writeAttribute("OnChildDelete", this.OnChildDelete);
    }
    relation.prototype.toXmlChildren = function(xw) {
        md.rdbmsitem.prototype.toXmlChildren.call(this, xw);
        xw.startElement('relationColumns');
        var i, i_len=this.relationColumns.length, item;
        for (i=0; i<i_len; i++) {
            item = this.relationColumns[i];
            item.toXml(xw);
        }
        xw.endElement();
    }
    relation.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == 'c') {
            if (name === 'c') {
                return this.wzLoadToChildColl(child, _md.relationColumn, this.relationColumns);
            }
        }
        if (_l == 3 && _ch == 'o') {
            if (name === 'one') {
                this.oneTableName = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'm') {
            if (name === 'many') {
                this.manyTableName = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'o') {
            if (name === 'one-role') {
                this.oneRoleInternal = child.v; return true;
            }
            else if (name === 'one_role') {
                this.oneRoleInternal = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'm') {
            if (name === 'many-role') {
                this.manyRoleInternal = child.v; return true;
            }
            else if (name === 'many_role') {
                this.manyRoleInternal = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'c') {
            if (name === 'cardinality') {
                this.cardinality = child.v; return true;
            }
        }
        if (_l == 15 && _ch == 'o') {
            if (name === 'on-child-insert') {
                this.OnChildInsert = child.v; return true;
            }
            else if (name === 'on_child_insert') {
                this.OnChildInsert = child.v; return true;
            }
            else if (name === 'on-child-update') {
                this.OnChildUpdate = child.v; return true;
            }
            else if (name === 'on_child_update') {
                this.OnChildUpdate = child.v; return true;
            }
            else if (name === 'on-child-delete') {
                this.OnChildDelete = child.v; return true;
            }
            else if (name === 'on_child_delete') {
                this.OnChildDelete = child.v; return true;
            }
        }
        if (_l == 15 && _ch == 'p') {
            if (name === 'parent-is-proxy') {
                this.parentIsProxy = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'parent_is_proxy') {
                this.parentIsProxy = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 16 && _ch == 'm') {
            if (name === 'many-is-document') {
                this.manyTableIsDocument = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'many_is_document') {
                this.manyTableIsDocument = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 16 && _ch == 'o') {
            if (name === 'on-parent-insert') {
                this.OnParentInsert = child.v; return true;
            }
            else if (name === 'on_parent_insert') {
                this.OnParentInsert = child.v; return true;
            }
            else if (name === 'on-parent-update') {
                this.OnParentUpdate = child.v; return true;
            }
            else if (name === 'on_parent_update') {
                this.OnParentUpdate = child.v; return true;
            }
            else if (name === 'on-parent-delete') {
                this.OnParentDelete = child.v; return true;
            }
            else if (name === 'on_parent_delete') {
                this.OnParentDelete = child.v; return true;
            }
        }
        ok = _md.rdbmsitem.prototype.loadChild.call(this, child);
        return ok;
    }
    relation.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.rdbmsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    relation.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("relation", "cardinality", this.cardinality, this.allowedCARDINALITIES, this);
        ctx.verifyEnum("relation", "OnParentInsert", this.OnParentInsert, this.allowedONPARENTINSERTS, this);
        ctx.verifyEnum("relation", "OnParentUpdate", this.OnParentUpdate, this.allowedONPARENTUPDATES, this);
        ctx.verifyEnum("relation", "OnParentDelete", this.OnParentDelete, this.allowedONPARENTDELETES, this);
        ctx.verifyEnum("relation", "OnChildInsert", this.OnChildInsert, this.allowedONCHILDINSERTS, this);
        ctx.verifyEnum("relation", "OnChildUpdate", this.OnChildUpdate, this.allowedONCHILDUPDATES, this);
        ctx.verifyEnum("relation", "OnChildDelete", this.OnChildDelete, this.allowedONCHILDDELETES, this);
        var i, i_len=this.relationColumns.length, item;
        for (i=0; i<i_len; i++) {
            item = this.relationColumns[i];
            item.wzVerify(ctx);
        }
        if (!this.oneTable()) {
            ctx.addError('In relation ' + this.wzName + ' oneTable not found: ' + this.oneTableName);
        }
        if (!this.manyTableIsDocument) {
            if (!this.manyTable()) {
                ctx.addError('In relation ' + this.wzName + ' manyTable not found: ' + this.manyTableName);
            }
        }
        _md.rdbmsitem.prototype.wzVerify.call(this, ctx);
    }
    relation.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.relationColumns.length, item;
        for (i=0; i<i_len; i++) {
            item = this.relationColumns[i];
            item.wzInitialize(ctx);
        }
        _md.rdbmsitem.prototype.wzInitialize.call(this, ctx);
    }
    relation.prototype.oneRole = function() {
        return isEmpty(this.oneRoleInternal) ? this.oneTable().wzName : this.oneRoleInternal;
    }
    relation.prototype.manyRole = function() {
        return isEmpty(this.manyRoleInternal) ? this.oneTable().namePlural : this.manyRoleInternal;
    }
    relation.prototype.oneTable = function() {
        return this.wzParent.getTable(this.oneTableName);
    }
    relation.prototype.manyTable = function() {
        return this.wzParent.getTable(this.manyTableName);
    }
    relation.prototype.oneColumns = function() {
        var memo = [];
        var i, i_len=this.relationColumns.length, item;
        for (i=0; i<i_len; i++) {
            item = this.relationColumns[i];
            var tc = this.oneTable().getTableColumnByName(item.oneColumnName);
            if (tc == null) {
                this.error("Column " + item.oneColumnName + " not found in table " + this.oneTable().wzName + " in relation " + this.wzName);
            }
            memo.push(tc);
        }
        return memo;
    }
    relation.prototype.manyColumns = function() {
        var memo = [];
        var i, i_len=this.relationColumns.length, item;
        for (i=0; i<i_len; i++) {
            item = this.relationColumns[i];
            var tc = this.manyTable().getTableColumnByName(item.manyColumnName);
            if (tc == null) {
                this.error("Column " + item.manyColumnName + " not found in table " + this.manyTable().wzName + " in relation " + this.wzName);
            }
            memo.push(tc);
        }
        return memo;
    }
    relation.prototype.manyArguments = function() {
        return tableHelper.ArgumentsToString(manyColumns);
    }
    relation.prototype.manyParameters = function() {
        return tableHelper.ParametersToString(manyColumns);
    }
    relation.prototype.childParameters_aka_Properties = function() {
        return tableHelper.ParametersToString_aka_Properties(manyColumns);
    }
    relation.prototype.childParametersToStringInstance = function(instance) {
        return tableHelper.ParametersToStringInstance(manyColumns, instance);
    }
    relation.prototype.filterChild = function(instance) {
        var memo = [];
        var i, i_len=this.relationColumns.length, item;
        for (i=0; i<i_len; i++) {
            item = this.relationColumns[i];
            if (memo.length > 0) {
                memo.push(' && ');
            }
            memo.push(instance + "." + item.manyColumnName + " == " + item.manyTableColumn.argumentName);
        }
        return memo;
    }
    relation.prototype.oneManyKeys = function() {
        var ret = [], check = {};
        var i, i_len=this.oneTable().keyColumns().length, item;
        for (i=0; i<i_len; i++) {
            item = this.oneTable().keyColumns()[i];
            ret.push(item);
            check[item.wzName] = true;
        }
        var i, i_len=this.manyTable().keyColumns().length, item;
        for (i=0; i<i_len; i++) {
            item = this.manyTable().keyColumns()[i];
            if (!check[item.wzName]) {
                ret.push(item);
                check[item.wzName] = true;
            }
        }
        return ret;
    }
    return relation;
})(rdbmsitem);

_md.relation = relation;
// element relationColumn
var relationColumn = (function (rdbmsitem) {
    _inherits(relationColumn, rdbmsitem);
    function relationColumn(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(relationColumn.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, relationColumn);
        this.wzElement = "relationColumn";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.oneColumnName = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.manyColumnName = null
    }
    relationColumn.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    relationColumn.prototype.toJsonProperties = function(result) {
        _md.rdbmsitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.oneColumnName)) {
            result["oneColumnName"] = this.oneColumnName;
        }
        if (!isEmpty(this.manyColumnName)) {
            result["manyColumnName"] = this.manyColumnName;
        }
    }
    relationColumn.prototype.toJsonChildren = function(result) {
        _md.rdbmsitem.prototype.toJsonChildren.call(this, result);
    }
    relationColumn.prototype.toXml = function(xw) {
        xw.startElement('relationColumn');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    relationColumn.prototype.toXmlProperties = function(xw) {
        md.rdbmsitem.prototype.toXmlProperties.call(this, xw);
        xw.writeAttribute("oneColumnName", this.oneColumnName);
        xw.writeAttribute("manyColumnName", this.manyColumnName);
    }
    relationColumn.prototype.toXmlChildren = function(xw) {
        md.rdbmsitem.prototype.toXmlChildren.call(this, xw);
    }
    relationColumn.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'o') {
            if (name === 'one') {
                this.oneColumnName = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'm') {
            if (name === 'many') {
                this.manyColumnName = child.v; return true;
            }
        }
        ok = _md.rdbmsitem.prototype.loadChild.call(this, child);
        return ok;
    }
    relationColumn.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.rdbmsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    relationColumn.prototype.wzVerify = function(ctx) {
        if (!this.oneColumn()) {
            ctx.addError('In relation ' + this.wzParent.wzName + ' oneColumn not found in oneTable: ' + this.oneColumnName);
        }
        if (!this.relation.manyTableIsDocument) {
            if (!this.manyColumn()) {
                ctx.addError('In relation ' + this.wzParent.wzName + ' manyColumn not found in manyTable: ' + this.manyColumnName);
            }
        }
        _md.rdbmsitem.prototype.wzVerify.call(this, ctx);
    }
    relationColumn.prototype.wzInitialize = function(ctx) {
        this.relation = this.wzParent;
        _md.rdbmsitem.prototype.wzInitialize.call(this, ctx);
    }
    relationColumn.prototype.oneColumn = function() {
        if (this.wzParent.oneTable()) {
            return this.wzParent.oneTable().getTableColumn(this.oneColumnName);
        }
        else {
            return null;
        }
    }
    relationColumn.prototype.manyColumn = function() {
        if (this.wzParent.manyTable()) {
            return this.wzParent.manyTable().getTableColumn(this.manyColumnName);
        }
        else {
            return null;
        }
    }
    return relationColumn;
})(rdbmsitem);

_md.relationColumn = relationColumn;
/**
    element document
     In a json model a table row can be
     . a branch node containing data for node leafs and
     related nodes or
     . a leaf node containing a text content
     Metadata for a leaf node may be stored in the parent branch node.
*/
var document = (function (rdbmsitem) {
    _inherits(document, rdbmsitem);
    function document(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(document.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, document);
        this.allowedKINDS = [ "json-meta-data", "ittf", "text-content"];
        this.KIND_JSON_META_DATA = "json-meta-data";
        this.KIND_ITTF = "ittf";
        this.KIND_TEXT_CONTENT = "text-content";
        this.wzElement = "document";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.kind = null
        // relation path
        this.paths = [];
        // relation metaField
        this.metaFields = [];
    }
    document.KIND_JSON_META_DATA = "json-meta-data";
    document.KIND_ITTF = "ittf";
    document.KIND_TEXT_CONTENT = "text-content";
    document.prototype.addPath = function(name, sourceLineInfo) {
        var retval = new _md.path(name, sourceLineInfo);
        retval.wzParent = this;
        this.paths.push(retval);
        return retval;
    }
    document.prototype.getPath = function(name) {
        var found = null;
        this.paths.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    document.prototype.addMetaField = function(name, sourceLineInfo) {
        var retval = new _md.metaField(name, sourceLineInfo);
        retval.wzParent = this;
        this.metaFields.push(retval);
        return retval;
    }
    document.prototype.getMetaField = function(name) {
        var found = null;
        this.metaFields.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    document.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    document.prototype.toJsonProperties = function(result) {
        _md.rdbmsitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.kind)) {
            result["kind"] = this.kind;
        }
    }
    document.prototype.toJsonChildren = function(result) {
        _md.rdbmsitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.paths.length, item;
        for (i=0; i<i_len; i++) {
            item = this.paths[i];
            items.push(item.toJson());
        }
        result['paths'] = items;
        items = [];
        var i, i_len=this.metaFields.length, item;
        for (i=0; i<i_len; i++) {
            item = this.metaFields[i];
            items.push(item.toJson());
        }
        result['metaFields'] = items;
    }
    document.prototype.toXml = function(xw) {
        xw.startElement('document');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    document.prototype.toXmlProperties = function(xw) {
        md.rdbmsitem.prototype.toXmlProperties.call(this, xw);
        xw.writeAttribute("kind", this.kind);
    }
    document.prototype.toXmlChildren = function(xw) {
        md.rdbmsitem.prototype.toXmlChildren.call(this, xw);
        xw.startElement('paths');
        var i, i_len=this.paths.length, item;
        for (i=0; i<i_len; i++) {
            item = this.paths[i];
            item.toXml(xw);
        }
        xw.endElement();
        xw.startElement('metaFields');
        var i, i_len=this.metaFields.length, item;
        for (i=0; i<i_len; i++) {
            item = this.metaFields[i];
            item.toXml(xw);
        }
        xw.endElement();
    }
    document.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'k') {
            if (name === 'kind') {
                this.kind = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'p') {
            if (name === 'path') {
                return this.wzLoadToChildColl(child, _md.path, this.paths);
            }
        }
        if (_l == 9 && _ch == 'm') {
            if (name === 'metafield') {
                return this.wzLoadToChildColl(child, _md.metaField, this.metaFields);
            }
        }
        if (_l == 10 && _ch == 'm') {
            if (name === 'meta-field') {
                return this.wzLoadToChildColl(child, _md.metaField, this.metaFields);
            }
        }
        ok = _md.rdbmsitem.prototype.loadChild.call(this, child);
        return ok;
    }
    document.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.rdbmsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    document.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("document", "kind", this.kind, this.allowedKINDS, this);
        var i, i_len=this.paths.length, item;
        for (i=0; i<i_len; i++) {
            item = this.paths[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.metaFields.length, item;
        for (i=0; i<i_len; i++) {
            item = this.metaFields[i];
            item.wzVerify(ctx);
        }
        _md.rdbmsitem.prototype.wzVerify.call(this, ctx);
    }
    document.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.paths.length, item;
        for (i=0; i<i_len; i++) {
            item = this.paths[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.metaFields.length, item;
        for (i=0; i<i_len; i++) {
            item = this.metaFields[i];
            item.wzInitialize(ctx);
        }
        _md.rdbmsitem.prototype.wzInitialize.call(this, ctx);
    }
    return document;
})(rdbmsitem);

_md.document = document;
// element path
var path = (function (rdbmsitem) {
    _inherits(path, rdbmsitem);
    function path(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(path.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, path);
        this.wzElement = "path";
        // relation pathSegment
        this.pathSegments = [];
    }
    path.prototype.addPathSegment = function(name, sourceLineInfo) {
        var retval = new _md.pathSegment(name, sourceLineInfo);
        retval.wzParent = this;
        this.pathSegments.push(retval);
        return retval;
    }
    path.prototype.getPathSegment = function(name) {
        var found = null;
        this.pathSegments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    path.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    path.prototype.toJsonProperties = function(result) {
        _md.rdbmsitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    path.prototype.toJsonChildren = function(result) {
        _md.rdbmsitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.pathSegments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.pathSegments[i];
            items.push(item.toJson());
        }
        result['pathSegments'] = items;
    }
    path.prototype.toXml = function(xw) {
        xw.startElement('path');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    path.prototype.toXmlProperties = function(xw) {
        md.rdbmsitem.prototype.toXmlProperties.call(this, xw);
    }
    path.prototype.toXmlChildren = function(xw) {
        md.rdbmsitem.prototype.toXmlChildren.call(this, xw);
        xw.startElement('pathSegments');
        var i, i_len=this.pathSegments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.pathSegments[i];
            item.toXml(xw);
        }
        xw.endElement();
    }
    path.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 7 && _ch == 's') {
            if (name === 'segment') {
                return this.wzLoadToChildColl(child, _md.pathSegment, this.pathSegments);
            }
        }
        ok = _md.rdbmsitem.prototype.loadChild.call(this, child);
        return ok;
    }
    path.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.rdbmsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    path.prototype.wzVerify = function(ctx) {
        var i, i_len=this.pathSegments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.pathSegments[i];
            item.wzVerify(ctx);
        }
        _md.rdbmsitem.prototype.wzVerify.call(this, ctx);
    }
    path.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.pathSegments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.pathSegments[i];
            item.wzInitialize(ctx);
        }
        _md.rdbmsitem.prototype.wzInitialize.call(this, ctx);
    }
    return path;
})(rdbmsitem);

_md.path = path;
// element pathSegment
var pathSegment = (function (rdbmsitem) {
    _inherits(pathSegment, rdbmsitem);
    function pathSegment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(pathSegment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, pathSegment);
        this.wzElement = "pathSegment";
    }
    pathSegment.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    pathSegment.prototype.toJsonProperties = function(result) {
        _md.rdbmsitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    pathSegment.prototype.toJsonChildren = function(result) {
        _md.rdbmsitem.prototype.toJsonChildren.call(this, result);
    }
    pathSegment.prototype.toXml = function(xw) {
        xw.startElement('pathSegment');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    pathSegment.prototype.toXmlProperties = function(xw) {
        md.rdbmsitem.prototype.toXmlProperties.call(this, xw);
    }
    pathSegment.prototype.toXmlChildren = function(xw) {
        md.rdbmsitem.prototype.toXmlChildren.call(this, xw);
    }
    return pathSegment;
})(rdbmsitem);

_md.pathSegment = pathSegment;
// element metaField
var metaField = (function (rdbmsitem) {
    _inherits(metaField, rdbmsitem);
    function metaField(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(metaField.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, metaField);
        this.allowedTYPES = [ "string", "boolean", "integer", "float", "date"];
        this.TYPE_STRING = "string";
        this.TYPE_XBOOLEAN = "boolean";
        this.TYPE_INTEGER = "integer";
        this.TYPE_XFLOAT = "float";
        this.TYPE_DATE = "date";
        this.wzElement = "metaField";
        // The metaField data type
        this.type = "string";
    }
    metaField.TYPE_STRING = "string";
    metaField.TYPE_XBOOLEAN = "boolean";
    metaField.TYPE_INTEGER = "integer";
    metaField.TYPE_XFLOAT = "float";
    metaField.TYPE_DATE = "date";
    metaField.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    metaField.prototype.toJsonProperties = function(result) {
        _md.rdbmsitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
    }
    metaField.prototype.toJsonChildren = function(result) {
        _md.rdbmsitem.prototype.toJsonChildren.call(this, result);
    }
    metaField.prototype.toXml = function(xw) {
        xw.startElement('metaField');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    metaField.prototype.toXmlProperties = function(xw) {
        md.rdbmsitem.prototype.toXmlProperties.call(this, xw);
        xw.writeAttribute("type", this.type);
    }
    metaField.prototype.toXmlChildren = function(xw) {
        md.rdbmsitem.prototype.toXmlChildren.call(this, xw);
    }
    metaField.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 't') {
            if (name === 'type') {
                this.type = child.v; return true;
            }
        }
        ok = _md.rdbmsitem.prototype.loadChild.call(this, child);
        return ok;
    }
    metaField.prototype.loadFromNode = function(node) {
        var loaded = false;
        // TODO VIA after transition to node.children
        var children = node.children;
        var i, i_len=children.length, item;
        for (i=0; i<i_len; i++) {
            item = children[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.rdbmsModelException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    metaField.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("metaField", "type", this.type, this.allowedTYPES, this);
        _md.rdbmsitem.prototype.wzVerify.call(this, ctx);
    }
    return metaField;
})(rdbmsitem);

_md.metaField = metaField;
/**
    element param
     A parameter passed to a function.
     The wzName is the parameter name.
*/
var param = (function (rdbmsBase) {
    _inherits(param, rdbmsBase);
    function param(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(param.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, param);
        this.wzElement = "param";
    }
    param.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    param.prototype.toJsonProperties = function(result) {
        _md.rdbmsBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    param.prototype.toJsonChildren = function(result) {
        _md.rdbmsBase.prototype.toJsonChildren.call(this, result);
    }
    param.prototype.toXml = function(xw) {
        xw.startElement('param');
        this.toXmlProperties(xw);
        this.toXmlChildren(xw);
        xw.endElement();
    }
    param.prototype.toXmlProperties = function(xw) {
        md.rdbmsBase.prototype.toXmlProperties.call(this, xw);
    }
    param.prototype.toXmlChildren = function(xw) {
        md.rdbmsBase.prototype.toXmlChildren.call(this, xw);
    }
    return param;
})(rdbmsBase);

_md.param = param;
_md.__tagElementMapping = { 'r': 'relation', 'validation-error': 'validationError', 'validationerror': 'validationError', '#': 'comment', 'c': 'tableColumn', 'ndx': 'index', 'min-value': 'minValue', 'minvalue': 'minValue', 'max-value': 'maxValue', 'maxvalue': 'maxValue', 'min-length': 'minLength', 'minlength': 'minLength', 'max-length': 'maxLength', 'maxlength': 'maxLength', 'enum': 'zenum', 'meta-field': 'metaField', 'metafield': 'metaField', 'segment': 'pathSegment' };
// model/replaceUnknownElement( )
var rdbmsModelException = (function () {
    function rdbmsModelException(message, node, instance) {
        _classCallCheck(this, rdbmsModelException);
        // TODO node seems superflous
        if (node && instance) {
            this.message = message + ', wzElement: ' + node.wzElement + ', wzName:' + (node.wzName || '') + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        console.log('message', this.message);
        this.stack = (new Error()).stack;
        this.node = node;
    }
    return rdbmsModelException;
})();

_md.rdbmsModelException = rdbmsModelException;
var rdbmsContext = (function () {
    function rdbmsContext() {
        _classCallCheck(this, rdbmsContext);
        this.validationErrors = [];
    }
    rdbmsContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    rdbmsContext.prototype.addError = function(message, node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at);
    }
    rdbmsContext.prototype.verifyEnum = function(valueType, valueName, value, allowed, node) {
        if (value && allowed.indexOf(value) < 0) {
            var allowedStr = 'allowed: ' + allowed.join(', ');
            this.validationErrors.push(valueType + ' ' + valueName + ' has an invalid value: ' + value + ' ' + allowedStr + '. At ' + (node.wzSourceLineInfo ? node.wzSourceLineInfo.toString(node) : 'location unavailable'));
        }
    }
    return rdbmsContext;
})();

_md.rdbmsContext = rdbmsContext;
function parsestring(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}
function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}
function format() {
    var result = '';
    var format = arguments[0];
    for (var i = 0;;) {
        var open = format.indexOf('{', i);
        var close = format.indexOf('}', i);
        if ((open < 0) && (close < 0)) {
            result += format.slice(i);
            break;
        }
        if ((close > 0) && ((close < open) || (open < 0))) {
            if (format.charAt((close + 1)) !== '}') {
                throw new Error('format stringFormatBraceMismatch');
            }
            result += format.slice(i, close + 1);
            i = close + 2;
            continue;
        }
        result += format.slice(i, open);
        i = open + 1;
        if (format.charAt(i) === '{') {
            result += '{';
            i++;
            continue;
        }
        if (close < 0) {
            throw new Error('format stringFormatBraceMismatch');
        }
        var brace = format.substring(i, close);
        var colonIndex = brace.indexOf(':');
        var argNumber = parseInt(colonIndex < 0 ? brace : brace.substring(0, colonIndex), 10) + 1;
        if (isNaN(argNumber)) {
            throw new Error('format stringFormatInvalid');
        }
        var argFormat = colonIndex < 0 ? '' : brace.substring((colonIndex + 1));
        var arg = arguments[argNumber];
        if ((typeof (arg) === "undefined") || (arg === null)) {
            arg = '';
        }
        if (arg.toFormattedString) {
            result += arg.toFormattedString(argFormat);
        }
        else if (arg.format) {
            result += arg.format(argFormat);
        }
        else {
            result += arg.toString();
        }
        i = close + 1;
    }
    return result;
}
function parseboolean(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    if (!isBoolean(value)) {
        throw new rdbmsModelException('Must be a boolean value (\"true\" or \"false\"), got:' + value, node);
    }
    return value === 'true' ? true : false;
}
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isBoolean(value) {
    return value === 'true' || value === 'false';
}

