module
	kind jsfile
	var path = require('path')
	var wizzi = require('wizzi-core').wizzi
	var site = require('wizzi-lab-site')
	set module.exports
		function
			param root
			param routePath
			param options
			if !root
				throw new TypeError('root path required')
			if typeof root !== 'string'
				throw new TypeError('root path must be a string')
			if !routePath
				throw new TypeError('routePath required')
			if typeof routePath !== 'string'
				throw new TypeError('routePath must be a string')
			log 'middleware.ittf.root', root
			
			return
	
				function
					param req
					param res
					param next
					if req.method !== 'GET' && req.method !== 'HEAD'
						return next()
    
					var pathname = req._parsedUrl.pathname.substr(routePath.length)
					var filePath = path.join(root, pathname);
			
					log 'ittf.pathname, pathname, filePath', req._parsedUrl.pathname, pathname, filePath 
			
					if wizzi.file.exists(filePath) === false
						return next()
			
					if wizzi.file.isFile(filePath) === false
						return next()
			
					if filePath.substr(-10, 10) === '.html.ittf'
						_ site.htmlDocument
							@ filePath
							{
								@ req req
							function
								param err
								param rendered
								if err
									_ return res.send(err)
								return res.send(rendered)
			
					elif filePath.substr(-8, 8) === '.js.ittf'
						_ site.jsModule
							@ filePath
							{
								@ req req
								@ __data  $$ becomes -> genWriter.options.data
									{
										@ jsResources options.jsResources
							function
								param err
								param rendered
								if err
									_ return res.send(err)
								_ res.setHeader('content-type', 'text/javascript')
								return res.send(rendered)
			
					elif filePath.substr(-10, 10) === '.json.ittf'
						_ site.jsonDocument
							@ filePath
							{
								@ req req
							function
								param err
								param rendered
								if err
									_ return res.send(err)
								_ res.setHeader('content-type', 'application/json')
								return res.send(rendered)
			
					elif filePath.substr(-9, 9) === '.css.ittf'
						_ site.cssDocument
							@ filePath
							{
								@ req req
								@ __data  $$ becomes -> genWriter.options.data
									{
										@ cssResources options.cssResources
							function
								param err
								param rendered
								if err
									_ return res.send(err)
								_ res.setHeader('content-type', 'text/css')
								return res.send(rendered)
			
					elif filePath.substr(-5, 5) == '.html'
						var content = wizzi.file.read(filePath)
						_ res.end(content)
			
					elif filePath.substr(-3, 3) == '.js'
						var content = wizzi.file.read(filePath)
						_ res.setHeader('content-type', 'text/javascript')
						_ res.end(content)
			
					elif filePath.substr(-5, 5) == '.json'
						var content = wizzi.file.read(filePath)
						_ res.setHeader('content-type', 'application/json')
						_ res.end(content)
			
					elif filePath.substr(-4, 4) == '.css'
						var content = wizzi.file.read(filePath)
						_ res.setHeader('content-type', 'text/css')
						_ res.end(content)
			
					elif filePath.substr(-4, 4) == '.png' || filePath.substr(-4, 4) == '.jpg' || filePath.substr(-4, 4) == '.gif'
				
						_ wizzi.file.readFile
							@ filePath
							function
								param err
								param data
								if err 
									_ return res.end("Error reading " + filePath + " " + err)
								else
									_ res.setHeader('content-type', 'image/' + filePath.substr(-3, 3))
									_ res.setHeader('content-length', data.length)
									_ res.end(data)
			
					elif filePath.substr(-5, 5) == '.woff' || filePath.substr(-4, 4) == '.ttf'
				
						var ctype;
				
						if filePath.substr(-5, 5) == '.woff'
							set ctype = 'application/x-font-woff'
				
						if filePath.substr(-4, 4) == '.ttf'
							set ctype = 'application/x-font-ttf'
				
						_ wizzi.file.readFile
							@ filePath
							function
								param err
								param data
								if err 
									return res.end("Error reading " + filePath + " " + err)
								else
									_ res.setHeader('content-type', ctype)
									_ res.setHeader('content-length', data.length)
									_ res.end(data)
