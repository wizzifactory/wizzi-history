module
	kind react
	import AltContainer from 'alt-container'
	import React from 'react'
	import Notes from './Notes2.jsx';
	import NoteActions from '../actions/NoteActions';
	import NoteStore from '../stores/NoteStore';
	import LaneActions from '../actions/LaneActions';
	import Editable from './editable.jsx'
	import {DropTarget} from 'react-dnd'
	import ItemTypes from '../constants/itemTypes'
	const noteTarget
		{
			@ hover
				function
					param targetProps
					param monitor
					const targetId = targetProps.lane.id
					const sourceProps = monitor.getItem()
					const sourceId = sourceProps.id
					if !targetProps.lane.notes.length
						log 'source', sourceId, 'target', targetProps
  
	@_ DropTarget
		@ ItemTypes.NOTE
		@ noteTarget
		=>
			param connect
			(
				{
					@ connectDropTarget connect.dropTarget()
	export default
		class Lane
			super React.Component
			ctor
				param props
				base props
				const id = props.lane.id;
				set this.addNote = this.addNote.bind(this, id)
				set this.deleteNote = this.deleteNote.bind(this, id)
			m render
				const {connectDropTarget, lane, ...props} = this.props
				return
					_ connectDropTarget
						div
							@ {...props}
							div
								@ className "lane-header"
								< Editable
									@ className "lane-name"
									@ value {lane.name}
									@ onEdit {this.editName}
								div
									@ className "lane-add-note"
									button +
										@ onClick {this.addNote}
							< AltContainer
								@ stores {[NoteStore]}
								@ inject {{items: () => NoteStore.get(lane.notes)}}
								< Notes
									@ onEdit {this.editNote}
									@ onDelete {this.deleteNote}
			m editName
				param laneId
				param name
				log 'edited lane name', laneId, name
		
			m addNote
				param laneId
				_ NoteActions.create({task: 'New task'})
				_ LaneActions.attachToLane({laneId})
		
			m editNote
				param noteId
				param task
				log 'editNote', noteId, task
				_ NoteActions.update({noteId, task})
			m deleteNote
				param laneId
				param noteId
				_ LaneActions.detachFromLane({laneId, noteId})
				_ NoteActions.delete(id)
