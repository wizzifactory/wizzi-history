module
	kind react
	import uuid from 'node-uuid'
	import alt from '../libs/alt'
	import LaneActions from '../actions/LaneActions'
	import NoteStore from './NoteStore';
	class LaneStore
		ctor
			_ this.bindActions(LaneActions);
			set this.lanes = [];
		m create
			param lane
			const lanes = this.lanes
			set lane.id = uuid.v4()
			set lane.notes = lane.notes || []
			_ this.setState
				{
					@ lanes lanes.concat(lane)
		m attachToLane
			param {laneId, noteId}
			if !noteId
				_ this.waitFor(NoteStore)
				set noteId = NoteStore.getState().notes.slice(-1)[0].id
			const lanes = this.lanes
			const targetId = this.findLane(laneId)
			if targetId < 0
				return
			_ this.removeNote(noteId)
			const lane = lanes[targetId]
			if lane.notes.indexOf(noteId) === -1
				_ lane.notes.push(noteId)
				_ this.setState({lanes})
			else
				warn 'Already attached note to lane', lanes
		m detachFromLane
			param {laneId, noteId}
			const lanes = this.lanes
			const targetId = this.findLane(laneId)
			if targetId < 0
				return
			const lane = lanes[targetId]
			const notes = lane.notes
			const removeIndex = notes.indexOf(noteId);
			if removeIndex !== -1
				set lane.notes = notes.slice(0, removeIndex).concat(notes.slice(removeIndex + 1))
				_ this.setState({lanes})
			else
				warn 'Failed to remove note from a lane as it didn\'t exist', lanes
		m update
			param {id, task}
			let lanes = this.lanes
			const laneIndex = this.findLane(id)
			if laneIndex < 0
				return
			else 
				set lanes[laneIndex].task = task
			_ this.setState
				@ {lanes}
		m findLane
			param id
			const lanes = this.lanes
			const laneIndex = lanes.findIndex((lane) => lane.id === id)
			if laneIndex < 0
				warn 'Failed to find lane', lanes, id
			return laneIndex
 
		m delete
			param id
			const lanes = this.lanes
			const laneIndex = this.findLane(id)
			if laneIndex < 0
				return
			_ this.setState
				{
					@ lanes lanes.slice(0, laneIndex).concat(lanes.slice(laneIndex + 1))
		m move
			param {sourceId, targetId}
			# log 'source', sourceId, 'target', targetId
			const lanes = this.lanes
			
			const sourceLane
				_ lanes.filter
					=>
						param lane
						return lane.notes.indexOf(sourceId) >= 0
					.[ 0
			
			const targetLane
				_ lanes.filter
					=>
						param lane
						return lane.notes.indexOf(targetId) >= 0
					.[ 0
			const sourceNoteIndex = sourceLane.notes.indexOf(sourceId)
			const targetNoteIndex = targetLane.notes.indexOf(targetId)
			if sourceLane === targetLane
				# move at once to avoid complications
				set sourceLane.notes
					_ update
						@ sourceLane.notes
						{
							@ $splice
								[
									@ [sourceNoteIndex, 1]
									@ [targetNoteIndex, 0, sourceId]
			else
				# get rid of the source
				_ sourceLane.notes.splice(sourceNoteIndex, 1)
				# and move it to target
				_ targetLane.notes.splice(targetNoteIndex, 0, sourceId)
			_ this.setState({lanes})
		m removeNote
			param noteId
			const lanes = this.lanes
			const removeLane
				_ lanes.filter
					=>
						param lane
						return lane.notes.indexOf(noteId) >= 0
					.[ 0
			
			if !removeLane
				return
			const removeNoteIndex = removeLane.notes.indexOf(noteId)
			set removeLane.notes
				_ removeLane.notes.slice
					@ 0
					@ removeNoteIndex
					._ concat(removeLane.notes.slice(removeNoteIndex + 1))
  
	export default alt.createStore(LaneStore, 'LaneStore');
