/*
    artifact generator: /wizzi/lib/artifacts/js/module/gen/main.js
    primary source IttfDocument: C:\My\wizzi\v2\packages\wizzi-lab-spa\node_modules\wizzi\lib\artifacts\wizzischema\model\gen\ittf\wizzischema-model.js.ittf
    utc time: Tue, 11 Jul 2017 19:51:58 GMT
*/
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');

var md = module.exports = {};

var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row,col,sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();


md.wzSourceLineInfo = wzSourceLineInfo;
var spaBase = (function () {
    function spaBase(name,sourceLineInfo) {
        _classCallCheck(this, spaBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    spaBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    spaBase.prototype.wzSourceFilepath = function(sourceKey) {
        return this.wzRoot().loadContext.getIttfDocumentUri(sourceKey);
    }
    spaBase.prototype.wzVerify = function() {
    }
    spaBase.prototype.wzInitialize = function() {
    }
    spaBase.prototype.wzInitializeAsync = function(ctx,callback) {
        callback(null);
    }
    spaBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    spaBase.prototype.wzLoadToChildColl = function(child,type,coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    spaBase.prototype.wzLoadToChildren = function(child,type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    spaBase.prototype.wzLoadOneToOne = function(child,type,fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    spaBase.prototype.error = function(message,node) {
        throw new md.spaException(message, node, this);
    }
    spaBase.prototype.toJsonProperties = function(result) {
        result.wzTag = this.wzTag;
        result.wzName = this.wzName;
    }
    spaBase.prototype.toJsonChildren = function(result) {
        if (this.wzChildren.length > 0) {
            var children = [];
            var i, i_len=this.wzChildren.length, item;
            for (i=0; i<i_len; i++) {
                item = this.wzChildren[i];
                children.push(item.toJson());
            }
            result.wzChildren = children;
        }
    }
    return spaBase;
})();


md.spaBase = spaBase;

// element spaitem
var spaitem = (function (spaBase) {
    _inherits(spaitem, spaBase);
    function spaitem(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(spaitem.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, spaitem);
        this.wzElement = "spaitem";
        // relation property
        this.properties = [];
        // relation comment
        this.comments = [];
    }
    spaitem.prototype.addProperty = function(name,sourceLineInfo) {
        var retval = new md.property(name, sourceLineInfo);
        retval.wzParent = this;
        this.properties.push(retval);
        return retval;
    }
    spaitem.prototype.getProperty = function(name) {
        var found = null;
        this.properties.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    spaitem.prototype.addComment = function(name,sourceLineInfo) {
        var retval = new md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    spaitem.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    spaitem.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    spaitem.prototype.toJsonProperties = function(result) {
        md.spaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    spaitem.prototype.toJsonChildren = function(result) {
        md.spaBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            items.push(item.toJson());
        }
        result['properties'] = items;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    spaitem.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, md.comment, this.comments);
            }
        }
        if (_l == 8 && _ch == 'p') {
            if (name === 'property') {
                return this.wzLoadToChildColl(child, md.property, this.properties);
            }
        }
        return ok;
    }
    spaitem.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    spaitem.prototype.wzVerify = function(ctx) {
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        md.spaBase.prototype.wzVerify.call(this, ctx);
    }
    spaitem.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        md.spaBase.prototype.wzInitialize.call(this, ctx);
    }
    spaitem.prototype.propertyOfCategory = function(categoryName) {
        var ret = [];
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            if (item.category === categoryName) {
                ret.push(item);
            }
        }
        return ret;
    }
    return spaitem;
})(spaBase);


md.spaitem = spaitem;
// element comment
var comment = (function (spaitem) {
    _inherits(comment, spaitem);
    function comment(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(comment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, comment);
        this.wzElement = "comment";
    }
    comment.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    comment.prototype.toJsonProperties = function(result) {
        md.spaitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    comment.prototype.toJsonChildren = function(result) {
        md.spaitem.prototype.toJsonChildren.call(this, result);
    }
    return comment;
})(spaitem);


md.comment = comment;
// element property
var property = (function (spaitem) {
    _inherits(property, spaitem);
    function property(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(property.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, property);
        this.wzElement = "property";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.category = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.name = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.value = null
    }
    property.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    property.prototype.toJsonProperties = function(result) {
        md.spaitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.category)) {
            result["category"] = this.category;
        }
        if (!isEmpty(this.name)) {
            result["name"] = this.name;
        }
        if (!isEmpty(this.value)) {
            result["value"] = this.value;
        }
    }
    property.prototype.toJsonChildren = function(result) {
        md.spaitem.prototype.toJsonChildren.call(this, result);
    }
    property.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'n') {
            if (name === 'name') {
                this.name = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                this.value = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'c') {
            if (name === 'category') {
                this.category = child.v; return true;
            }
        }
        ok = md.spaitem.prototype.loadChild.call(this, child);
        return ok;
    }
    property.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    property.prototype.wzInitialize = function(ctx) {
        this.name = this.wzName;
        md.spaitem.prototype.wzInitialize.call(this, ctx);
    }
    return property;
})(spaitem);


md.property = property;
/**
    element spa
     The root element
*/
var spa = (function (spaitem) {
    _inherits(spa, spaitem);
    function spa(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(spa.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, spa);
        this.wzElement = "spa";
        // relation babel
        this.babel = null;
        // relation react
        this.react = null;
        // relation browserify
        this.browserify = null;
        // relation xpath
        this.xpaths = [];
        // relation server
        this.servers = [];
        // relation xpackage
        this.package = null;
        // relation travis
        this.travis = null;
    }
    spa.prototype.addXpath = function(name,sourceLineInfo) {
        var retval = new md.xpath(name, sourceLineInfo);
        retval.wzParent = this;
        this.xpaths.push(retval);
        return retval;
    }
    spa.prototype.getXpath = function(name) {
        var found = null;
        this.xpaths.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    spa.prototype.addServer = function(name,sourceLineInfo) {
        var retval = new md.server(name, sourceLineInfo);
        retval.wzParent = this;
        this.servers.push(retval);
        return retval;
    }
    spa.prototype.getServer = function(name) {
        var found = null;
        this.servers.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    spa.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    spa.prototype.toJsonProperties = function(result) {
        md.spaitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    spa.prototype.toJsonChildren = function(result) {
        md.spaitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.babel != null) {
            result['babel'] = this.babel.toJson();
        }
        else {
            result['babel'] = null;
        }
        if (this.react != null) {
            result['react'] = this.react.toJson();
        }
        else {
            result['react'] = null;
        }
        if (this.browserify != null) {
            result['browserify'] = this.browserify.toJson();
        }
        else {
            result['browserify'] = null;
        }
        items = [];
        var i, i_len=this.xpaths.length, item;
        for (i=0; i<i_len; i++) {
            item = this.xpaths[i];
            items.push(item.toJson());
        }
        result['xpaths'] = items;
        items = [];
        var i, i_len=this.servers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.servers[i];
            items.push(item.toJson());
        }
        result['servers'] = items;
        if (this.package != null) {
            result['package'] = this.package.toJson();
        }
        else {
            result['package'] = null;
        }
        if (this.travis != null) {
            result['travis'] = this.travis.toJson();
        }
        else {
            result['travis'] = null;
        }
    }
    spa.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'b') {
            if (name === 'babel') {
                return this.wzLoadOneToOne(child, md.babel, 'babel');
            }
        }
        if (_l == 5 && _ch == 'r') {
            if (name === 'react') {
                return this.wzLoadOneToOne(child, md.react, 'react');
            }
        }
        if (_l == 5 && _ch == 'x') {
            if (name === 'xpath') {
                return this.wzLoadToChildColl(child, md.xpath, this.xpaths);
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'server') {
                return this.wzLoadToChildColl(child, md.server, this.servers);
            }
        }
        if (_l == 6 && _ch == 't') {
            if (name === 'travis') {
                return this.wzLoadOneToOne(child, md.travis, 'travis');
            }
        }
        if (_l == 7 && _ch == 'p') {
            if (name === 'package') {
                return this.wzLoadOneToOne(child, md.xpackage, 'package');
            }
        }
        if (_l == 10 && _ch == 'b') {
            if (name === 'browserify') {
                return this.wzLoadOneToOne(child, md.browserify, 'browserify');
            }
        }
        ok = md.spaitem.prototype.loadChild.call(this, child);
        return ok;
    }
    spa.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    spa.prototype.wzVerify = function(ctx) {
        if (this.babel != null) {
            this.babel.wzVerify(ctx);
        }
        if (this.react != null) {
            this.react.wzVerify(ctx);
        }
        if (this.browserify != null) {
            this.browserify.wzVerify(ctx);
        }
        var i, i_len=this.xpaths.length, item;
        for (i=0; i<i_len; i++) {
            item = this.xpaths[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.servers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.servers[i];
            item.wzVerify(ctx);
        }
        if (this.package != null) {
            this.package.wzVerify(ctx);
        }
        if (this.travis != null) {
            this.travis.wzVerify(ctx);
        }
        md.spaitem.prototype.wzVerify.call(this, ctx);
    }
    spa.prototype.wzInitialize = function(ctx) {
        if (this.babel != null) {
            this.babel.wzInitialize(ctx);
        }
        if (this.react != null) {
            this.react.wzInitialize(ctx);
        }
        if (this.browserify != null) {
            this.browserify.wzInitialize(ctx);
        }
        var i, i_len=this.xpaths.length, item;
        for (i=0; i<i_len; i++) {
            item = this.xpaths[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.servers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.servers[i];
            item.wzInitialize(ctx);
        }
        if (this.package != null) {
            this.package.wzInitialize(ctx);
        }
        if (this.travis != null) {
            this.travis.wzInitialize(ctx);
        }
        if (this.webpack) {
            var wp = this.webpack;
            if (wp.webpackLoaders.length > 0) {
                this.bundler = 'webpack';
            }
            if (wp.webpackEntry == null) {
                wp.webpackEntry = {
                    wzName: 'undefined', 
                    kind: 'string'
                };
            }
            if (wp.webpackOutput == null) {
                wp.webpackOutput = {
                    wzName: 'undefined', 
                    filename: 'undefined', 
                    path: 'undefined'
                };
            }
            var presets = [];
            var plugins = [];
            var i, i_len=wp.webpackLoaders.length, l;
            for (i=0; i<i_len; i++) {
                l = wp.webpackLoaders[i];
                var j, j_len=l.babelPresets.length, p;
                for (j=0; j<j_len; j++) {
                    p = l.babelPresets[j];
                    presets.push(p.wzName);
                }
                var j, j_len=l.babelPlugins.length, p;
                for (j=0; j<j_len; j++) {
                    p = l.babelPlugins[j];
                    plugins.push(p.wzName);
                }
            }
            console.log('*** presets', presets);
            console.log('*** plugins', plugins);
            if (presets.length > 0) {
                this.useBabel = true;
                this.babelPresets = this.babelPresets || [];
                this.babelPresets = _.union(this.babelPresets, presets);
                console.log('*** babelPresets', this.babelPresets);
            }
            if (plugins.length > 0) {
                this.useBabel = true;
                this.babelPlugins = this.babelPlugins || [];
                this.babelPlugins = _.union(this.babelPlugins, plugins);
                console.log('*** babelPlugins', this.babelPlugins);
            }
        }
        this.devServer = {
            wzName: 'webpack', 
            port: 3000
        };
        var i, i_len=this.servers.length, s;
        for (i=0; i<i_len; i++) {
            s = this.servers[i];
            if (s.env === 'dev') {
                this.devServer = s;
            }
            else {
                this.prodServer = s;
            }
        }
        this.paths = [];
        var i, i_len=this.xpaths.length, xpath;
        for (i=0; i<i_len; i++) {
            xpath = this.xpaths[i];
            this.paths.push(xpath);
        }
        md.spaitem.prototype.wzInitialize.call(this, ctx);
    }
    return spa;
})(spaitem);


md.spa = spa;
// element feature
var feature = (function (spaitem) {
    _inherits(feature, spaitem);
    function feature(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(feature.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feature);
        this.wzElement = "feature";
    }
    feature.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feature.prototype.toJsonProperties = function(result) {
        md.spaitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feature.prototype.toJsonChildren = function(result) {
        md.spaitem.prototype.toJsonChildren.call(this, result);
    }
    return feature;
})(spaitem);


md.feature = feature;
// element item
var item = (function (spaitem) {
    _inherits(item, spaitem);
    function item(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(item.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, item);
        this.wzElement = "item";
    }
    item.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    item.prototype.toJsonProperties = function(result) {
        md.spaitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    item.prototype.toJsonChildren = function(result) {
        md.spaitem.prototype.toJsonChildren.call(this, result);
    }
    return item;
})(spaitem);


md.item = item;
// element xpath
var xpath = (function (spaitem) {
    _inherits(xpath, spaitem);
    function xpath(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(xpath.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xpath);
        this.wzElement = "xpath";
    }
    xpath.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    xpath.prototype.toJsonProperties = function(result) {
        md.spaitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    xpath.prototype.toJsonChildren = function(result) {
        md.spaitem.prototype.toJsonChildren.call(this, result);
    }
    xpath.prototype.wzInitialize = function(ctx) {
        var nv = wizzi.lineParser.parseNameValueRaw(this.wzName);
        this.pathName = nv.name();
        this.pathValue = nv.value();
        md.spaitem.prototype.wzInitialize.call(this, ctx);
    }
    return xpath;
})(spaitem);


md.xpath = xpath;
// element file
var file = (function (spaitem) {
    _inherits(file, spaitem);
    function file(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(file.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, file);
        this.wzElement = "file";
    }
    file.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    file.prototype.toJsonProperties = function(result) {
        md.spaitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    file.prototype.toJsonChildren = function(result) {
        md.spaitem.prototype.toJsonChildren.call(this, result);
    }
    return file;
})(spaitem);


md.file = file;
// element glob
var glob = (function (spaitem) {
    _inherits(glob, spaitem);
    function glob(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(glob.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, glob);
        this.wzElement = "glob";
    }
    glob.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    glob.prototype.toJsonProperties = function(result) {
        md.spaitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    glob.prototype.toJsonChildren = function(result) {
        md.spaitem.prototype.toJsonChildren.call(this, result);
    }
    return glob;
})(spaitem);


md.glob = glob;
// element test
var test = (function (spaitem) {
    _inherits(test, spaitem);
    function test(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(test.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, test);
        this.wzElement = "test";
        // relation file
        this.files = [];
        // relation glob
        this.globs = [];
    }
    test.prototype.addFile = function(name,sourceLineInfo) {
        var retval = new md.file(name, sourceLineInfo);
        retval.wzParent = this;
        this.files.push(retval);
        return retval;
    }
    test.prototype.getFile = function(name) {
        var found = null;
        this.files.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    test.prototype.addGlob = function(name,sourceLineInfo) {
        var retval = new md.glob(name, sourceLineInfo);
        retval.wzParent = this;
        this.globs.push(retval);
        return retval;
    }
    test.prototype.getGlob = function(name) {
        var found = null;
        this.globs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    test.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    test.prototype.toJsonProperties = function(result) {
        md.spaitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    test.prototype.toJsonChildren = function(result) {
        md.spaitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.files.length, item;
        for (i=0; i<i_len; i++) {
            item = this.files[i];
            items.push(item.toJson());
        }
        result['files'] = items;
        items = [];
        var i, i_len=this.globs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.globs[i];
            items.push(item.toJson());
        }
        result['globs'] = items;
    }
    test.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'f') {
            if (name === 'file') {
                return this.wzLoadToChildColl(child, md.file, this.files);
            }
        }
        if (_l == 4 && _ch == 'g') {
            if (name === 'glob') {
                return this.wzLoadToChildColl(child, md.glob, this.globs);
            }
        }
        ok = md.spaitem.prototype.loadChild.call(this, child);
        return ok;
    }
    test.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    test.prototype.wzVerify = function(ctx) {
        var i, i_len=this.files.length, item;
        for (i=0; i<i_len; i++) {
            item = this.files[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.globs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.globs[i];
            item.wzVerify(ctx);
        }
        md.spaitem.prototype.wzVerify.call(this, ctx);
    }
    test.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.files.length, item;
        for (i=0; i<i_len; i++) {
            item = this.files[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.globs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.globs[i];
            item.wzInitialize(ctx);
        }
        this.fileItems = [];
        this.globItems = [];
        var i, i_len=this.entries.length, entry;
        for (i=0; i<i_len; i++) {
            entry = this.entries[i];
            if (entry.files.length > 0) {
                var j, j_len=entry.files.length, file;
                for (j=0; j<j_len; j++) {
                    file = entry.files[j];
                    this.fileItems.push(this._fullPath(file.wzName));
                    console.log('file entry', this._fullPath(file.wzName));
                }
            }
            if (entry.globs.length > 0) {
                var j, j_len=entry.globs.length, glob;
                for (j=0; j<j_len; j++) {
                    glob = entry.globs[j];
                    this.globItems.push(this._fullPath(glob.wzName));
                    console.log('glob entry', this._fullPath(glob.wzName));
                }
            }
            if (entry.files.length == 0 && entry.globs.length == 0) {
                if (isEmpty(entry.wzName) == false) {
                    this.fileItems.push(this._fullPath(entry.wzName));
                    console.log('file entry', this._fullPath(entry.wzName));
                }
            }
            this.allItems = _.concat(this.fileItems, this.globItems);
        }
        md.spaitem.prototype.wzInitialize.call(this, ctx);
    }
    return test;
})(spaitem);


md.test = test;
/**
    element browserlist
     https://github.com/ai/browserslist
*/
var browserlist = (function (spaitem) {
    _inherits(browserlist, spaitem);
    function browserlist(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(browserlist.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, browserlist);
        this.wzElement = "browserlist";
        // relation item
        this.items = [];
    }
    browserlist.prototype.addItem = function(name,sourceLineInfo) {
        var retval = new md.item(name, sourceLineInfo);
        retval.wzParent = this;
        this.items.push(retval);
        return retval;
    }
    browserlist.prototype.getItem = function(name) {
        var found = null;
        this.items.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    browserlist.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    browserlist.prototype.toJsonProperties = function(result) {
        md.spaitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    browserlist.prototype.toJsonChildren = function(result) {
        md.spaitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            items.push(item.toJson());
        }
        result['items'] = items;
    }
    browserlist.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'i') {
            if (name === 'item') {
                return this.wzLoadToChildColl(child, md.item, this.items);
            }
        }
        ok = md.spaitem.prototype.loadChild.call(this, child);
        return ok;
    }
    browserlist.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    browserlist.prototype.wzVerify = function(ctx) {
        var i, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            item.wzVerify(ctx);
        }
        md.spaitem.prototype.wzVerify.call(this, ctx);
    }
    browserlist.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            item.wzInitialize(ctx);
        }
        md.spaitem.prototype.wzInitialize.call(this, ctx);
    }
    return browserlist;
})(spaitem);


md.browserlist = browserlist;
// element entry
var entry = (function (spaitem) {
    _inherits(entry, spaitem);
    function entry(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(entry.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, entry);
        this.allowedKINDS = [ "none", "object"];
        this.KIND_NONE = "none";
        this.KIND_OBJECT = "object";
        this.wzElement = "entry";
        this.watch = false;
        this.kind = "none";
        // relation file
        this.files = [];
        // relation glob
        this.globs = [];
        // relation entryChunk
        this.entryChunks = [];
    }
    entry.KIND_NONE = "none";
    entry.KIND_OBJECT = "object";
    entry.prototype.addFile = function(name,sourceLineInfo) {
        var retval = new md.file(name, sourceLineInfo);
        retval.wzParent = this;
        this.files.push(retval);
        return retval;
    }
    entry.prototype.getFile = function(name) {
        var found = null;
        this.files.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    entry.prototype.addGlob = function(name,sourceLineInfo) {
        var retval = new md.glob(name, sourceLineInfo);
        retval.wzParent = this;
        this.globs.push(retval);
        return retval;
    }
    entry.prototype.getGlob = function(name) {
        var found = null;
        this.globs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    entry.prototype.addEntryChunk = function(name,sourceLineInfo) {
        var retval = new md.entryChunk(name, sourceLineInfo);
        retval.wzParent = this;
        this.entryChunks.push(retval);
        return retval;
    }
    entry.prototype.getEntryChunk = function(name) {
        var found = null;
        this.entryChunks.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    entry.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    entry.prototype.toJsonProperties = function(result) {
        md.spaitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        result["watch"] = this.watch;
        if (!isEmpty(this.kind)) {
            result["kind"] = this.kind;
        }
    }
    entry.prototype.toJsonChildren = function(result) {
        md.spaitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.files.length, item;
        for (i=0; i<i_len; i++) {
            item = this.files[i];
            items.push(item.toJson());
        }
        result['files'] = items;
        items = [];
        var i, i_len=this.globs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.globs[i];
            items.push(item.toJson());
        }
        result['globs'] = items;
        items = [];
        var i, i_len=this.entryChunks.length, item;
        for (i=0; i<i_len; i++) {
            item = this.entryChunks[i];
            items.push(item.toJson());
        }
        result['entryChunks'] = items;
    }
    entry.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'f') {
            if (name === 'file') {
                return this.wzLoadToChildColl(child, md.file, this.files);
            }
        }
        if (_l == 4 && _ch == 'g') {
            if (name === 'glob') {
                return this.wzLoadToChildColl(child, md.glob, this.globs);
            }
        }
        if (_l == 4 && _ch == 'k') {
            if (name === 'kind') {
                this.kind = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'c') {
            if (name === 'chunk') {
                return this.wzLoadToChildColl(child, md.entryChunk, this.entryChunks);
            }
        }
        if (_l == 5 && _ch == 'w') {
            if (name === 'watch') {
                this.watch = parseboolean(child.v, true, child); return true;
            }
        }
        ok = md.spaitem.prototype.loadChild.call(this, child);
        return ok;
    }
    entry.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    entry.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("entry", "kind", this.kind, this.allowedKINDS, this);
        var i, i_len=this.files.length, item;
        for (i=0; i<i_len; i++) {
            item = this.files[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.globs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.globs[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.entryChunks.length, item;
        for (i=0; i<i_len; i++) {
            item = this.entryChunks[i];
            item.wzVerify(ctx);
        }
        md.spaitem.prototype.wzVerify.call(this, ctx);
    }
    entry.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.files.length, item;
        for (i=0; i<i_len; i++) {
            item = this.files[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.globs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.globs[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.entryChunks.length, item;
        for (i=0; i<i_len; i++) {
            item = this.entryChunks[i];
            item.wzInitialize(ctx);
        }
        if (this.entryChunks.length > 0) {
            this.kind = 'object';
        }
        if (this.files.length > 0) {
            this.kind = 'array';
        }
        md.spaitem.prototype.wzInitialize.call(this, ctx);
    }
    return entry;
})(spaitem);


md.entry = entry;
/**
    element entryChunk
     https://webpack.js.org/concepts/entry-points/
*/
var entryChunk = (function (spaBase) {
    _inherits(entryChunk, spaBase);
    function entryChunk(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(entryChunk.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, entryChunk);
        this.wzElement = "entryChunk";
        // relation file
        this.files = [];
    }
    entryChunk.prototype.addFile = function(name,sourceLineInfo) {
        var retval = new md.file(name, sourceLineInfo);
        retval.wzParent = this;
        this.files.push(retval);
        return retval;
    }
    entryChunk.prototype.getFile = function(name) {
        var found = null;
        this.files.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    entryChunk.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    entryChunk.prototype.toJsonProperties = function(result) {
        md.spaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    entryChunk.prototype.toJsonChildren = function(result) {
        md.spaBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.files.length, item;
        for (i=0; i<i_len; i++) {
            item = this.files[i];
            items.push(item.toJson());
        }
        result['files'] = items;
    }
    entryChunk.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'f') {
            if (name === 'file') {
                return this.wzLoadToChildColl(child, md.file, this.files);
            }
        }
        return ok;
    }
    entryChunk.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    entryChunk.prototype.wzVerify = function(ctx) {
        var i, i_len=this.files.length, item;
        for (i=0; i<i_len; i++) {
            item = this.files[i];
            item.wzVerify(ctx);
        }
        md.spaBase.prototype.wzVerify.call(this, ctx);
    }
    entryChunk.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.files.length, item;
        for (i=0; i<i_len; i++) {
            item = this.files[i];
            item.wzInitialize(ctx);
        }
        md.spaBase.prototype.wzInitialize.call(this, ctx);
    }
    return entryChunk;
})(spaBase);


md.entryChunk = entryChunk;
// element jsObject
var jsObject = (function (spaitem) {
    _inherits(jsObject, spaitem);
    function jsObject(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(jsObject.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsObject);
        this.wzElement = "jsObject";
        // relation jsProp
        this.jsProps = [];
    }
    jsObject.prototype.addJsProp = function(name,sourceLineInfo) {
        var retval = new md.jsProp(name, sourceLineInfo);
        retval.wzParent = this;
        this.jsProps.push(retval);
        return retval;
    }
    jsObject.prototype.getJsProp = function(name) {
        var found = null;
        this.jsProps.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    jsObject.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    jsObject.prototype.toJsonProperties = function(result) {
        md.spaitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    jsObject.prototype.toJsonChildren = function(result) {
        md.spaitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.jsProps.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsProps[i];
            items.push(item.toJson());
        }
        result['jsProps'] = items;
    }
    jsObject.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, md.jsProp, this.jsProps);
            }
        }
        ok = md.spaitem.prototype.loadChild.call(this, child);
        return ok;
    }
    jsObject.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    jsObject.prototype.wzVerify = function(ctx) {
        var i, i_len=this.jsProps.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsProps[i];
            item.wzVerify(ctx);
        }
        md.spaitem.prototype.wzVerify.call(this, ctx);
    }
    jsObject.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.jsProps.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsProps[i];
            item.wzInitialize(ctx);
        }
        md.spaitem.prototype.wzInitialize.call(this, ctx);
    }
    return jsObject;
})(spaitem);


md.jsObject = jsObject;
// element jsArray
var jsArray = (function (spaitem) {
    _inherits(jsArray, spaitem);
    function jsArray(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(jsArray.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsArray);
        this.wzElement = "jsArray";
        // relation spaitem
        this.spaitems = [];
    }
    jsArray.prototype.addSpaitem = function(name,sourceLineInfo) {
        var retval = new md.spaitem(name, sourceLineInfo);
        retval.wzParent = this;
        this.spaitems.push(retval);
        return retval;
    }
    jsArray.prototype.getSpaitem = function(name) {
        var found = null;
        this.spaitems.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    jsArray.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    jsArray.prototype.toJsonProperties = function(result) {
        md.spaitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    jsArray.prototype.toJsonChildren = function(result) {
        md.spaitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.spaitems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.spaitems[i];
            items.push(item.toJson());
        }
        result['spaitems'] = items;
    }
    jsArray.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, md.comment, this.spaitems);
            }
        }
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, md.jsProp, this.spaitems);
            }
        }
        if (_l == 1 && _ch == '[') {
            if (name === '[') {
                return this.wzLoadToChildColl(child, md.jsArray, this.spaitems);
            }
        }
        if (_l == 1 && _ch == '{') {
            if (name === '{') {
                return this.wzLoadToChildColl(child, md.jsObject, this.spaitems);
            }
        }
        if (_l == 3 && _ch == 's') {
            if (name === 'spa') {
                return this.wzLoadToChildColl(child, md.spa, this.spaitems);
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'file') {
                return this.wzLoadToChildColl(child, md.file, this.spaitems);
            }
        }
        if (_l == 4 && _ch == 'g') {
            if (name === 'glob') {
                return this.wzLoadToChildColl(child, md.glob, this.spaitems);
            }
        }
        if (_l == 4 && _ch == 'i') {
            if (name === 'item') {
                return this.wzLoadToChildColl(child, md.item, this.spaitems);
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'test') {
                return this.wzLoadToChildColl(child, md.test, this.spaitems);
            }
        }
        if (_l == 5 && _ch == 'b') {
            if (name === 'babel') {
                return this.wzLoadToChildColl(child, md.babel, this.spaitems);
            }
        }
        if (_l == 5 && _ch == 'e') {
            if (name === 'entry') {
                return this.wzLoadToChildColl(child, md.entry, this.spaitems);
            }
        }
        if (_l == 5 && _ch == 'r') {
            if (name === 'react') {
                return this.wzLoadToChildColl(child, md.react, this.spaitems);
            }
        }
        if (_l == 5 && _ch == 'x') {
            if (name === 'xpath') {
                return this.wzLoadToChildColl(child, md.xpath, this.spaitems);
            }
        }
        if (_l == 6 && _ch == 'p') {
            if (name === 'preset') {
                return this.wzLoadToChildColl(child, md.babelPreset, this.spaitems);
            }
            else if (name === 'plugin') {
                return this.wzLoadToChildColl(child, md.babelPlugin, this.spaitems);
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'server') {
                return this.wzLoadToChildColl(child, md.server, this.spaitems);
            }
        }
        if (_l == 6 && _ch == 't') {
            if (name === 'travis') {
                return this.wzLoadToChildColl(child, md.travis, this.spaitems);
            }
        }
        if (_l == 7 && _ch == 'f') {
            if (name === 'feature') {
                return this.wzLoadToChildColl(child, md.feature, this.spaitems);
            }
        }
        if (_l == 7 && _ch == 's') {
            if (name === 'spaitem') {
                return this.wzLoadToChildColl(child, md.spaitem, this.spaitems);
            }
        }
        if (_l == 8 && _ch == 'p') {
            if (name === 'property') {
                return this.wzLoadToChildColl(child, md.property, this.spaitems);
            }
        }
        if (_l == 10 && _ch == 'b') {
            if (name === 'browserify') {
                return this.wzLoadToChildColl(child, md.browserify, this.spaitems);
            }
        }
        if (_l == 11 && _ch == 'b') {
            if (name === 'browserlist') {
                return this.wzLoadToChildColl(child, md.browserlist, this.spaitems);
            }
        }
        ok = md.spaitem.prototype.loadChild.call(this, child);
        return ok;
    }
    jsArray.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    jsArray.prototype.wzVerify = function(ctx) {
        var i, i_len=this.spaitems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.spaitems[i];
            item.wzVerify(ctx);
        }
        md.spaitem.prototype.wzVerify.call(this, ctx);
    }
    jsArray.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.spaitems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.spaitems[i];
            item.wzInitialize(ctx);
        }
        md.spaitem.prototype.wzInitialize.call(this, ctx);
    }
    return jsArray;
})(spaitem);


md.jsArray = jsArray;
// element jsProp
var jsProp = (function (spaitem) {
    _inherits(jsProp, spaitem);
    function jsProp(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(jsProp.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsProp);
        this.wzElement = "jsProp";
        // relation spaitem
        this.spaitems = [];
    }
    jsProp.prototype.addSpaitem = function(name,sourceLineInfo) {
        var retval = new md.spaitem(name, sourceLineInfo);
        retval.wzParent = this;
        this.spaitems.push(retval);
        return retval;
    }
    jsProp.prototype.getSpaitem = function(name) {
        var found = null;
        this.spaitems.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    jsProp.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    jsProp.prototype.toJsonProperties = function(result) {
        md.spaitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    jsProp.prototype.toJsonChildren = function(result) {
        md.spaitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.spaitems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.spaitems[i];
            items.push(item.toJson());
        }
        result['spaitems'] = items;
    }
    jsProp.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, md.comment, this.spaitems);
            }
        }
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, md.jsProp, this.spaitems);
            }
        }
        if (_l == 1 && _ch == '[') {
            if (name === '[') {
                return this.wzLoadToChildColl(child, md.jsArray, this.spaitems);
            }
        }
        if (_l == 1 && _ch == '{') {
            if (name === '{') {
                return this.wzLoadToChildColl(child, md.jsObject, this.spaitems);
            }
        }
        if (_l == 3 && _ch == 's') {
            if (name === 'spa') {
                return this.wzLoadToChildColl(child, md.spa, this.spaitems);
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'file') {
                return this.wzLoadToChildColl(child, md.file, this.spaitems);
            }
        }
        if (_l == 4 && _ch == 'g') {
            if (name === 'glob') {
                return this.wzLoadToChildColl(child, md.glob, this.spaitems);
            }
        }
        if (_l == 4 && _ch == 'i') {
            if (name === 'item') {
                return this.wzLoadToChildColl(child, md.item, this.spaitems);
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'test') {
                return this.wzLoadToChildColl(child, md.test, this.spaitems);
            }
        }
        if (_l == 5 && _ch == 'b') {
            if (name === 'babel') {
                return this.wzLoadToChildColl(child, md.babel, this.spaitems);
            }
        }
        if (_l == 5 && _ch == 'e') {
            if (name === 'entry') {
                return this.wzLoadToChildColl(child, md.entry, this.spaitems);
            }
        }
        if (_l == 5 && _ch == 'r') {
            if (name === 'react') {
                return this.wzLoadToChildColl(child, md.react, this.spaitems);
            }
        }
        if (_l == 5 && _ch == 'x') {
            if (name === 'xpath') {
                return this.wzLoadToChildColl(child, md.xpath, this.spaitems);
            }
        }
        if (_l == 6 && _ch == 'p') {
            if (name === 'preset') {
                return this.wzLoadToChildColl(child, md.babelPreset, this.spaitems);
            }
            else if (name === 'plugin') {
                return this.wzLoadToChildColl(child, md.babelPlugin, this.spaitems);
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'server') {
                return this.wzLoadToChildColl(child, md.server, this.spaitems);
            }
        }
        if (_l == 6 && _ch == 't') {
            if (name === 'travis') {
                return this.wzLoadToChildColl(child, md.travis, this.spaitems);
            }
        }
        if (_l == 7 && _ch == 'f') {
            if (name === 'feature') {
                return this.wzLoadToChildColl(child, md.feature, this.spaitems);
            }
        }
        if (_l == 7 && _ch == 's') {
            if (name === 'spaitem') {
                return this.wzLoadToChildColl(child, md.spaitem, this.spaitems);
            }
        }
        if (_l == 8 && _ch == 'p') {
            if (name === 'property') {
                return this.wzLoadToChildColl(child, md.property, this.spaitems);
            }
        }
        if (_l == 10 && _ch == 'b') {
            if (name === 'browserify') {
                return this.wzLoadToChildColl(child, md.browserify, this.spaitems);
            }
        }
        if (_l == 11 && _ch == 'b') {
            if (name === 'browserlist') {
                return this.wzLoadToChildColl(child, md.browserlist, this.spaitems);
            }
        }
        ok = md.spaitem.prototype.loadChild.call(this, child);
        return ok;
    }
    jsProp.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    jsProp.prototype.wzVerify = function(ctx) {
        var i, i_len=this.spaitems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.spaitems[i];
            item.wzVerify(ctx);
        }
        md.spaitem.prototype.wzVerify.call(this, ctx);
    }
    jsProp.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.spaitems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.spaitems[i];
            item.wzInitialize(ctx);
        }
        if (this.spaitems.length == 0) {
            var nv = wizzi.lineParser.parseNameValueRaw(this.wzName);
            this.name = nv.name();
            this.value = nv.value();
        }
        md.spaitem.prototype.wzInitialize.call(this, ctx);
    }
    return jsProp;
})(spaitem);


md.jsProp = jsProp;
// element babel
var babel = (function (spaitem) {
    _inherits(babel, spaitem);
    function babel(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(babel.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, babel);
        this.wzElement = "babel";
        // relation babelPreset
        this.babelPresets = [];
        // relation babelPlugin
        this.babelPlugins = [];
    }
    babel.prototype.addBabelPreset = function(name,sourceLineInfo) {
        var retval = new md.babelPreset(name, sourceLineInfo);
        retval.wzParent = this;
        this.babelPresets.push(retval);
        return retval;
    }
    babel.prototype.getBabelPreset = function(name) {
        var found = null;
        this.babelPresets.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    babel.prototype.addBabelPlugin = function(name,sourceLineInfo) {
        var retval = new md.babelPlugin(name, sourceLineInfo);
        retval.wzParent = this;
        this.babelPlugins.push(retval);
        return retval;
    }
    babel.prototype.getBabelPlugin = function(name) {
        var found = null;
        this.babelPlugins.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    babel.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    babel.prototype.toJsonProperties = function(result) {
        md.spaitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    babel.prototype.toJsonChildren = function(result) {
        md.spaitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.babelPresets.length, item;
        for (i=0; i<i_len; i++) {
            item = this.babelPresets[i];
            items.push(item.toJson());
        }
        result['babelPresets'] = items;
        items = [];
        var i, i_len=this.babelPlugins.length, item;
        for (i=0; i<i_len; i++) {
            item = this.babelPlugins[i];
            items.push(item.toJson());
        }
        result['babelPlugins'] = items;
    }
    babel.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 6 && _ch == 'p') {
            if (name === 'preset') {
                return this.wzLoadToChildColl(child, md.babelPreset, this.babelPresets);
            }
            else if (name === 'plugin') {
                return this.wzLoadToChildColl(child, md.babelPlugin, this.babelPlugins);
            }
        }
        ok = md.spaitem.prototype.loadChild.call(this, child);
        return ok;
    }
    babel.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    babel.prototype.wzVerify = function(ctx) {
        var i, i_len=this.babelPresets.length, item;
        for (i=0; i<i_len; i++) {
            item = this.babelPresets[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.babelPlugins.length, item;
        for (i=0; i<i_len; i++) {
            item = this.babelPlugins[i];
            item.wzVerify(ctx);
        }
        md.spaitem.prototype.wzVerify.call(this, ctx);
    }
    babel.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.babelPresets.length, item;
        for (i=0; i<i_len; i++) {
            item = this.babelPresets[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.babelPlugins.length, item;
        for (i=0; i<i_len; i++) {
            item = this.babelPlugins[i];
            item.wzInitialize(ctx);
        }
        md.spaitem.prototype.wzInitialize.call(this, ctx);
    }
    return babel;
})(spaitem);


md.babel = babel;
/**
    element babelPreset
     babel preset
*/
var babelPreset = (function (spaitem) {
    _inherits(babelPreset, spaitem);
    function babelPreset(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(babelPreset.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, babelPreset);
        this.allowedNames = [ "env", "es2017", "es2016", "es2015", "react"];
        this.wzElement = "babelPreset";
    }
    babelPreset.NAME_ENV = "env";
    babelPreset.NAME_ES2017 = "es2017";
    babelPreset.NAME_ES2016 = "es2016";
    babelPreset.NAME_ES2015 = "es2015";
    babelPreset.NAME_REACT = "react";
    babelPreset.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    babelPreset.prototype.toJsonProperties = function(result) {
        md.spaitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    babelPreset.prototype.toJsonChildren = function(result) {
        md.spaitem.prototype.toJsonChildren.call(this, result);
    }
    babelPreset.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("babelPreset", "Name", this.wzName, this.allowedNames, this);
        md.spaitem.prototype.wzVerify.call(this, ctx);
    }
    return babelPreset;
})(spaitem);


md.babelPreset = babelPreset;
/**
    element babelPlugin
     babel plugin
*/
var babelPlugin = (function (spaitem) {
    _inherits(babelPlugin, spaitem);
    function babelPlugin(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(babelPlugin.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, babelPlugin);
        this.wzElement = "babelPlugin";
    }
    babelPlugin.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    babelPlugin.prototype.toJsonProperties = function(result) {
        md.spaitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    babelPlugin.prototype.toJsonChildren = function(result) {
        md.spaitem.prototype.toJsonChildren.call(this, result);
    }
    return babelPlugin;
})(spaitem);


md.babelPlugin = babelPlugin;
// element browserify
var browserify = (function (spaitem) {
    _inherits(browserify, spaitem);
    function browserify(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(browserify.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, browserify);
        this.wzElement = "browserify";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.basePath = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.sourceBaseName = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.destFolder = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.sourceMapFolder = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.standalone = null
        // relation entry
        this.entries = [];
    }
    browserify.prototype.addEntry = function(name,sourceLineInfo) {
        var retval = new md.entry(name, sourceLineInfo);
        retval.wzParent = this;
        this.entries.push(retval);
        return retval;
    }
    browserify.prototype.getEntry = function(name) {
        var found = null;
        this.entries.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    browserify.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    browserify.prototype.toJsonProperties = function(result) {
        md.spaitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.basePath)) {
            result["basePath"] = this.basePath;
        }
        if (!isEmpty(this.sourceBaseName)) {
            result["sourceBaseName"] = this.sourceBaseName;
        }
        if (!isEmpty(this.destFolder)) {
            result["destFolder"] = this.destFolder;
        }
        if (!isEmpty(this.sourceMapFolder)) {
            result["sourceMapFolder"] = this.sourceMapFolder;
        }
        if (!isEmpty(this.standalone)) {
            result["standalone"] = this.standalone;
        }
    }
    browserify.prototype.toJsonChildren = function(result) {
        md.spaitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.entries.length, item;
        for (i=0; i<i_len; i++) {
            item = this.entries[i];
            items.push(item.toJson());
        }
        result['entries'] = items;
    }
    browserify.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'e') {
            if (name === 'entry') {
                return this.wzLoadToChildColl(child, md.entry, this.entries);
            }
        }
        if (_l == 9 && _ch == 'b') {
            if (name === 'base-path') {
                this.basePath = child.v; return true;
            }
            else if (name === 'base_path') {
                this.basePath = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 's') {
            if (name === 'standalone') {
                this.standalone = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'd') {
            if (name === 'dest-folder') {
                this.destFolder = child.v; return true;
            }
            else if (name === 'dest_folder') {
                this.destFolder = child.v; return true;
            }
        }
        if (_l == 16 && _ch == 's') {
            if (name === 'source-base-name') {
                this.sourceBaseName = child.v; return true;
            }
            else if (name === 'source_base_name') {
                this.sourceBaseName = child.v; return true;
            }
        }
        if (_l == 17 && _ch == 's') {
            if (name === 'source-map-folder') {
                this.sourceMapFolder = child.v; return true;
            }
            else if (name === 'source_map_folder') {
                this.sourceMapFolder = child.v; return true;
            }
        }
        ok = md.spaitem.prototype.loadChild.call(this, child);
        return ok;
    }
    browserify.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    browserify.prototype.wzVerify = function(ctx) {
        var i, i_len=this.entries.length, item;
        for (i=0; i<i_len; i++) {
            item = this.entries[i];
            item.wzVerify(ctx);
        }
        md.spaitem.prototype.wzVerify.call(this, ctx);
    }
    browserify.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.entries.length, item;
        for (i=0; i<i_len; i++) {
            item = this.entries[i];
            item.wzInitialize(ctx);
        }
        this.fileItems = [];
        this.globItems = [];
        var i, i_len=this.entries.length, entry;
        for (i=0; i<i_len; i++) {
            entry = this.entries[i];
            if (entry.files.length > 0) {
                var j, j_len=entry.files.length, file;
                for (j=0; j<j_len; j++) {
                    file = entry.files[j];
                    this.fileItems.push({
                        path: this._fullPath(file.wzName), 
                        watch: entry.watch
                    });
                    console.log('file entry', this._fullPath(file.wzName));
                }
            }
            if (entry.globs.length > 0) {
                var j, j_len=entry.globs.length, glob;
                for (j=0; j<j_len; j++) {
                    glob = entry.globs[j];
                    this.globItems.push({
                        path: this._fullPath(glob.wzName), 
                        watch: entry.watch
                    });
                    console.log('glob entry', this._fullPath(glob.wzName));
                }
            }
            if (entry.files.length == 0 && entry.globs.length == 0) {
                if (isEmpty(entry.wzName) == false) {
                    this.fileItems.push({
                        path: this._fullPath(entry.wzName), 
                        watch: entry.watch
                    });
                    console.log('file entry', this._fullPath(entry.wzName));
                }
            }
            this.allItems = _.concat(this.fileItems, this.globItems);
        }
        md.spaitem.prototype.wzInitialize.call(this, ctx);
    }
    browserify.prototype._fullPath = function(filePath) {
        if (path.isAbsolute(filePath)) {
            return filePath;
        }
        if (isEmpty(this.basePath) == false) {
            return path.join(this.basePath, filePath)
            ;
        }
        return filePath;
    }
    return browserify;
})(spaitem);


md.browserify = browserify;
// element server
var server = (function (spaitem) {
    _inherits(server, spaitem);
    function server(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(server.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, server);
        this.allowedNames = [ "webpack", "express"];
        this.allowedENVS = [ "dev", "production"];
        this.ENV_DEV = "dev";
        this.ENV_PRODUCTION = "production";
        this.wzElement = "server";
        this.env = "dev";
        this.port = "3000";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.contentBase = null
        this.historyApiFallback = false;
        this.hot = false;
        this.true = false;
        this.inline = false;
        this.progress = false;
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.host = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.port = null
    }
    server.NAME_WEBPACK = "webpack";
    server.NAME_EXPRESS = "express";
    server.ENV_DEV = "dev";
    server.ENV_PRODUCTION = "production";
    server.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    server.prototype.toJsonProperties = function(result) {
        md.spaitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.env)) {
            result["env"] = this.env;
        }
        if (!isEmpty(this.port)) {
            result["port"] = this.port;
        }
        if (!isEmpty(this.contentBase)) {
            result["contentBase"] = this.contentBase;
        }
        result["historyApiFallback"] = this.historyApiFallback;
        result["hot"] = this.hot;
        result["true"] = this.true;
        result["inline"] = this.inline;
        result["progress"] = this.progress;
        if (!isEmpty(this.host)) {
            result["host"] = this.host;
        }
        if (!isEmpty(this.port)) {
            result["port"] = this.port;
        }
    }
    server.prototype.toJsonChildren = function(result) {
        md.spaitem.prototype.toJsonChildren.call(this, result);
    }
    server.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'e') {
            if (name === 'env') {
                this.env = child.v; return true;
            }
        }
        if (_l == 3 && _ch == 'h') {
            if (name === 'hot') {
                this.hot = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 4 && _ch == 'h') {
            if (name === 'host') {
                this.host = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'p') {
            if (name === 'port') {
                this.port = child.v; return true;
            }
            else if (name === 'port') {
                this.port = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'true') {
                this.true = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 6 && _ch == 'i') {
            if (name === 'inline') {
                this.inline = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 8 && _ch == 'p') {
            if (name === 'progress') {
                this.progress = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 12 && _ch == 'c') {
            if (name === 'content-base') {
                this.contentBase = child.v; return true;
            }
            else if (name === 'content_base') {
                this.contentBase = child.v; return true;
            }
        }
        if (_l == 20 && _ch == 'h') {
            if (name === 'history-api-fallback') {
                this.historyApiFallback = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'history_api_fallback') {
                this.historyApiFallback = parseboolean(child.v, true, child); return true;
            }
        }
        ok = md.spaitem.prototype.loadChild.call(this, child);
        return ok;
    }
    server.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    server.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("server", "Name", this.wzName, this.allowedNames, this);
        ctx.verifyEnum("server", "env", this.env, this.allowedENVS, this);
        md.spaitem.prototype.wzVerify.call(this, ctx);
    }
    return server;
})(spaitem);


md.server = server;
/**
    element xpackage
     The root element of the wfpackage schema.
     The wzName is the package name.
     The most important things in your package.json are the name and version fields.
     Those are actually required, and your package won't install without them.
     The name and version together form an identifier that is assumed to be completely unique.
     Changes to the package should come along with changes to the version.
     The name is what your thing is called.
*/
var xpackage = (function (spaBase) {
    _inherits(xpackage, spaBase);
    function xpackage(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(xpackage.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xpackage);
        this.wzElement = "xpackage";
        /**
             Version must be parseable by node-semver, which is bundled with npm as a dependency.
             (npm install semver to use it yourself.)
        */
        this.version = "0.0.1";
        /**
             Put a description in it. It's a string.
             This helps people discover your package, as it's listed in npm search.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.description = null
        /**
             Put keywords in it. It's an array of strings.
             This helps people discover your package as it's listed in npm search.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.keywords = null
        // You should specify a license for your package so that people know how they are permitted to use it, and any restrictions you're placing on it.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.license = null
        /**
             The url to the project homepage.
             NOTE: This is not the same as "url". If you put a "url" field, then the registry will think it's a redirection to your package that has been published somewhere else, and spit at you.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.homepage = null
        /**
             If your package is primarily a command-line application that should be installed globally, then set this value to true to provide a warning if it is installed locally.
             It doesn't actually prevent users from installing it locally, but it does help prevent some confusion if it doesn't work as expected.
        */
        this.preferGlobal = false;
        /**
             The main field is a module ID that is the primary entry point to your program. That is, if your package is named foo, and a user installs it, and then does require("foo"), then your main module's exports object will be returned.
             This should be a module ID relative to the root of your package folder.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.main = null
        // Consider also setting "private": true to prevent accidental publication.
        this.private = false;
        // relation bugs
        this.bugs = null;
        // relation author
        this.author = null;
        // relation contributor
        this.contributors = [];
        // relation file
        this.files = [];
        // relation repository
        this.repository = null;
        // relation script
        this.scripts = [];
        // relation config
        this.configs = [];
        // relation publishConfig
        this.publishConfigs = [];
        // relation dependency
        this.dependencies = [];
        // relation devDependency
        this.devDependencies = [];
        // relation peerDependency
        this.peerDependencies = [];
        // relation bundledDependency
        this.bundledDependencies = [];
        // relation optionalDependency
        this.optionalDependencies = [];
        // relation engine
        this.engine = null;
        // relation os
        this.oses = [];
        // relation cpu
        this.cpus = [];
    }
    xpackage.prototype.addContributor = function(name,sourceLineInfo) {
        var retval = new md.contributor(name, sourceLineInfo);
        retval.wzParent = this;
        this.contributors.push(retval);
        return retval;
    }
    xpackage.prototype.getContributor = function(name) {
        var found = null;
        this.contributors.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xpackage.prototype.addFile = function(name,sourceLineInfo) {
        var retval = new md.file(name, sourceLineInfo);
        retval.wzParent = this;
        this.files.push(retval);
        return retval;
    }
    xpackage.prototype.getFile = function(name) {
        var found = null;
        this.files.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xpackage.prototype.addScript = function(name,sourceLineInfo) {
        var retval = new md.script(name, sourceLineInfo);
        retval.wzParent = this;
        this.scripts.push(retval);
        return retval;
    }
    xpackage.prototype.getScript = function(name) {
        var found = null;
        this.scripts.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xpackage.prototype.addConfig = function(name,sourceLineInfo) {
        var retval = new md.config(name, sourceLineInfo);
        retval.wzParent = this;
        this.configs.push(retval);
        return retval;
    }
    xpackage.prototype.getConfig = function(name) {
        var found = null;
        this.configs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xpackage.prototype.addPublishConfig = function(name,sourceLineInfo) {
        var retval = new md.publishConfig(name, sourceLineInfo);
        retval.wzParent = this;
        this.publishConfigs.push(retval);
        return retval;
    }
    xpackage.prototype.getPublishConfig = function(name) {
        var found = null;
        this.publishConfigs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xpackage.prototype.addDependency = function(name,sourceLineInfo) {
        var retval = new md.dependency(name, sourceLineInfo);
        retval.wzParent = this;
        this.dependencies.push(retval);
        return retval;
    }
    xpackage.prototype.getDependency = function(name) {
        var found = null;
        this.dependencies.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xpackage.prototype.addDevDependency = function(name,sourceLineInfo) {
        var retval = new md.devDependency(name, sourceLineInfo);
        retval.wzParent = this;
        this.devDependencies.push(retval);
        return retval;
    }
    xpackage.prototype.getDevDependency = function(name) {
        var found = null;
        this.devDependencies.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xpackage.prototype.addPeerDependency = function(name,sourceLineInfo) {
        var retval = new md.peerDependency(name, sourceLineInfo);
        retval.wzParent = this;
        this.peerDependencies.push(retval);
        return retval;
    }
    xpackage.prototype.getPeerDependency = function(name) {
        var found = null;
        this.peerDependencies.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xpackage.prototype.addBundledDependency = function(name,sourceLineInfo) {
        var retval = new md.bundledDependency(name, sourceLineInfo);
        retval.wzParent = this;
        this.bundledDependencies.push(retval);
        return retval;
    }
    xpackage.prototype.getBundledDependency = function(name) {
        var found = null;
        this.bundledDependencies.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xpackage.prototype.addOptionalDependency = function(name,sourceLineInfo) {
        var retval = new md.optionalDependency(name, sourceLineInfo);
        retval.wzParent = this;
        this.optionalDependencies.push(retval);
        return retval;
    }
    xpackage.prototype.getOptionalDependency = function(name) {
        var found = null;
        this.optionalDependencies.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xpackage.prototype.addOs = function(name,sourceLineInfo) {
        var retval = new md.os(name, sourceLineInfo);
        retval.wzParent = this;
        this.oses.push(retval);
        return retval;
    }
    xpackage.prototype.getOs = function(name) {
        var found = null;
        this.oses.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xpackage.prototype.addCpu = function(name,sourceLineInfo) {
        var retval = new md.cpu(name, sourceLineInfo);
        retval.wzParent = this;
        this.cpus.push(retval);
        return retval;
    }
    xpackage.prototype.getCpu = function(name) {
        var found = null;
        this.cpus.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xpackage.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    xpackage.prototype.toJsonProperties = function(result) {
        md.spaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.version)) {
            result["version"] = this.version;
        }
        if (!isEmpty(this.description)) {
            result["description"] = this.description;
        }
        if (!isEmpty(this.keywords)) {
            result["keywords"] = this.keywords;
        }
        if (!isEmpty(this.license)) {
            result["license"] = this.license;
        }
        if (!isEmpty(this.homepage)) {
            result["homepage"] = this.homepage;
        }
        result["preferGlobal"] = this.preferGlobal;
        if (!isEmpty(this.main)) {
            result["main"] = this.main;
        }
        result["private"] = this.private;
    }
    xpackage.prototype.toJsonChildren = function(result) {
        md.spaBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.bugs != null) {
            result['bugs'] = this.bugs.toJson();
        }
        else {
            result['bugs'] = null;
        }
        if (this.author != null) {
            result['author'] = this.author.toJson();
        }
        else {
            result['author'] = null;
        }
        items = [];
        var i, i_len=this.contributors.length, item;
        for (i=0; i<i_len; i++) {
            item = this.contributors[i];
            items.push(item.toJson());
        }
        result['contributors'] = items;
        items = [];
        var i, i_len=this.files.length, item;
        for (i=0; i<i_len; i++) {
            item = this.files[i];
            items.push(item.toJson());
        }
        result['files'] = items;
        if (this.repository != null) {
            result['repository'] = this.repository.toJson();
        }
        else {
            result['repository'] = null;
        }
        items = [];
        var i, i_len=this.scripts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.scripts[i];
            items.push(item.toJson());
        }
        result['scripts'] = items;
        items = [];
        var i, i_len=this.configs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.configs[i];
            items.push(item.toJson());
        }
        result['configs'] = items;
        items = [];
        var i, i_len=this.publishConfigs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.publishConfigs[i];
            items.push(item.toJson());
        }
        result['publishConfigs'] = items;
        items = [];
        var i, i_len=this.dependencies.length, item;
        for (i=0; i<i_len; i++) {
            item = this.dependencies[i];
            items.push(item.toJson());
        }
        result['dependencies'] = items;
        items = [];
        var i, i_len=this.devDependencies.length, item;
        for (i=0; i<i_len; i++) {
            item = this.devDependencies[i];
            items.push(item.toJson());
        }
        result['devDependencies'] = items;
        items = [];
        var i, i_len=this.peerDependencies.length, item;
        for (i=0; i<i_len; i++) {
            item = this.peerDependencies[i];
            items.push(item.toJson());
        }
        result['peerDependencies'] = items;
        items = [];
        var i, i_len=this.bundledDependencies.length, item;
        for (i=0; i<i_len; i++) {
            item = this.bundledDependencies[i];
            items.push(item.toJson());
        }
        result['bundledDependencies'] = items;
        items = [];
        var i, i_len=this.optionalDependencies.length, item;
        for (i=0; i<i_len; i++) {
            item = this.optionalDependencies[i];
            items.push(item.toJson());
        }
        result['optionalDependencies'] = items;
        if (this.engine != null) {
            result['engine'] = this.engine.toJson();
        }
        else {
            result['engine'] = null;
        }
        items = [];
        var i, i_len=this.oses.length, item;
        for (i=0; i<i_len; i++) {
            item = this.oses[i];
            items.push(item.toJson());
        }
        result['oses'] = items;
        items = [];
        var i, i_len=this.cpus.length, item;
        for (i=0; i<i_len; i++) {
            item = this.cpus[i];
            items.push(item.toJson());
        }
        result['cpus'] = items;
    }
    xpackage.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 2 && _ch == 'o') {
            if (name === 'os') {
                return this.wzLoadToChildColl(child, md.os, this.oses);
            }
        }
        if (_l == 3 && _ch == 'c') {
            if (name === 'cpu') {
                return this.wzLoadToChildColl(child, md.cpu, this.cpus);
            }
        }
        if (_l == 4 && _ch == 'b') {
            if (name === 'bugs') {
                return this.wzLoadOneToOne(child, md.bugs, 'bugs');
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'file') {
                return this.wzLoadToChildColl(child, md.file, this.files);
            }
        }
        if (_l == 4 && _ch == 'm') {
            if (name === 'main') {
                this.main = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'a') {
            if (name === 'author') {
                return this.wzLoadOneToOne(child, md.author, 'author');
            }
        }
        if (_l == 6 && _ch == 'c') {
            if (name === 'config') {
                return this.wzLoadToChildColl(child, md.config, this.configs);
            }
        }
        if (_l == 6 && _ch == 'd') {
            if (name === 'depend') {
                return this.wzLoadToChildColl(child, md.dependency, this.dependencies);
            }
        }
        if (_l == 6 && _ch == 'e') {
            if (name === 'engine') {
                return this.wzLoadOneToOne(child, md.engine, 'engine');
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'script') {
                return this.wzLoadToChildColl(child, md.script, this.scripts);
            }
        }
        if (_l == 7 && _ch == 'l') {
            if (name === 'license') {
                this.license = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'p') {
            if (name === 'private') {
                this.private = parseboolean(child.v, null, child); return true;
            }
        }
        if (_l == 7 && _ch == 'v') {
            if (name === 'version') {
                this.version = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'h') {
            if (name === 'homepage') {
                this.homepage = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'k') {
            if (name === 'keywords') {
                this.keywords = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'd') {
            if (name === 'devdepend') {
                return this.wzLoadToChildColl(child, md.devDependency, this.dependencies);
            }
            else if (name === 'devdepend') {
                return this.wzLoadToChildColl(child, md.devDependency, this.devDependencies);
            }
        }
        if (_l == 10 && _ch == 'd') {
            if (name === 'dev-depend') {
                return this.wzLoadToChildColl(child, md.devDependency, this.dependencies);
            }
            else if (name === 'dev-depend') {
                return this.wzLoadToChildColl(child, md.devDependency, this.devDependencies);
            }
        }
        if (_l == 10 && _ch == 'p') {
            if (name === 'peerdepend') {
                return this.wzLoadToChildColl(child, md.peerDependency, this.dependencies);
            }
            else if (name === 'peerdepend') {
                return this.wzLoadToChildColl(child, md.peerDependency, this.peerDependencies);
            }
        }
        if (_l == 10 && _ch == 'r') {
            if (name === 'repository') {
                return this.wzLoadOneToOne(child, md.repository, 'repository');
            }
        }
        if (_l == 11 && _ch == 'c') {
            if (name === 'contributor') {
                return this.wzLoadToChildColl(child, md.contributor, this.contributors);
            }
        }
        if (_l == 11 && _ch == 'd') {
            if (name === 'description') {
                this.description = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'p') {
            if (name === 'peer-depend') {
                return this.wzLoadToChildColl(child, md.peerDependency, this.dependencies);
            }
            else if (name === 'peer-depend') {
                return this.wzLoadToChildColl(child, md.peerDependency, this.peerDependencies);
            }
        }
        if (_l == 12 && _ch == 'p') {
            if (name === 'preferglobal') {
                this.preferGlobal = parseboolean(child.v, null, child); return true;
            }
        }
        if (_l == 13 && _ch == 'b') {
            if (name === 'bundleddepend') {
                return this.wzLoadToChildColl(child, md.bundledDependency, this.dependencies);
            }
            else if (name === 'bundleddepend') {
                return this.wzLoadToChildColl(child, md.bundledDependency, this.bundledDependencies);
            }
        }
        if (_l == 13 && _ch == 'p') {
            if (name === 'publishconfig') {
                return this.wzLoadToChildColl(child, md.publishConfig, this.publishConfigs);
            }
        }
        if (_l == 14 && _ch == 'b') {
            if (name === 'bundled-depend') {
                return this.wzLoadToChildColl(child, md.bundledDependency, this.dependencies);
            }
            else if (name === 'bundled-depend') {
                return this.wzLoadToChildColl(child, md.bundledDependency, this.bundledDependencies);
            }
        }
        if (_l == 14 && _ch == 'o') {
            if (name === 'optionaldepend') {
                return this.wzLoadToChildColl(child, md.optionalDependency, this.dependencies);
            }
            else if (name === 'optionaldepend') {
                return this.wzLoadToChildColl(child, md.optionalDependency, this.optionalDependencies);
            }
        }
        if (_l == 14 && _ch == 'p') {
            if (name === 'publish-config') {
                return this.wzLoadToChildColl(child, md.publishConfig, this.publishConfigs);
            }
        }
        if (_l == 15 && _ch == 'o') {
            if (name === 'optional-depend') {
                return this.wzLoadToChildColl(child, md.optionalDependency, this.dependencies);
            }
            else if (name === 'optional-depend') {
                return this.wzLoadToChildColl(child, md.optionalDependency, this.optionalDependencies);
            }
        }
        return ok;
    }
    xpackage.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    xpackage.prototype.wzVerify = function(ctx) {
        if (this.bugs != null) {
            this.bugs.wzVerify(ctx);
        }
        if (this.author != null) {
            this.author.wzVerify(ctx);
        }
        var i, i_len=this.contributors.length, item;
        for (i=0; i<i_len; i++) {
            item = this.contributors[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.files.length, item;
        for (i=0; i<i_len; i++) {
            item = this.files[i];
            item.wzVerify(ctx);
        }
        if (this.repository != null) {
            this.repository.wzVerify(ctx);
        }
        var i, i_len=this.scripts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.scripts[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.configs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.configs[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.publishConfigs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.publishConfigs[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.dependencies.length, item;
        for (i=0; i<i_len; i++) {
            item = this.dependencies[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.devDependencies.length, item;
        for (i=0; i<i_len; i++) {
            item = this.devDependencies[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.peerDependencies.length, item;
        for (i=0; i<i_len; i++) {
            item = this.peerDependencies[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.bundledDependencies.length, item;
        for (i=0; i<i_len; i++) {
            item = this.bundledDependencies[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.optionalDependencies.length, item;
        for (i=0; i<i_len; i++) {
            item = this.optionalDependencies[i];
            item.wzVerify(ctx);
        }
        if (this.engine != null) {
            this.engine.wzVerify(ctx);
        }
        var i, i_len=this.oses.length, item;
        for (i=0; i<i_len; i++) {
            item = this.oses[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.cpus.length, item;
        for (i=0; i<i_len; i++) {
            item = this.cpus[i];
            item.wzVerify(ctx);
        }
        md.spaBase.prototype.wzVerify.call(this, ctx);
    }
    xpackage.prototype.wzInitialize = function(ctx) {
        if (this.bugs != null) {
            this.bugs.wzInitialize(ctx);
        }
        if (this.author != null) {
            this.author.wzInitialize(ctx);
        }
        var i, i_len=this.contributors.length, item;
        for (i=0; i<i_len; i++) {
            item = this.contributors[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.files.length, item;
        for (i=0; i<i_len; i++) {
            item = this.files[i];
            item.wzInitialize(ctx);
        }
        if (this.repository != null) {
            this.repository.wzInitialize(ctx);
        }
        var i, i_len=this.scripts.length, item;
        for (i=0; i<i_len; i++) {
            item = this.scripts[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.configs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.configs[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.publishConfigs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.publishConfigs[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.dependencies.length, item;
        for (i=0; i<i_len; i++) {
            item = this.dependencies[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.devDependencies.length, item;
        for (i=0; i<i_len; i++) {
            item = this.devDependencies[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.peerDependencies.length, item;
        for (i=0; i<i_len; i++) {
            item = this.peerDependencies[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.bundledDependencies.length, item;
        for (i=0; i<i_len; i++) {
            item = this.bundledDependencies[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.optionalDependencies.length, item;
        for (i=0; i<i_len; i++) {
            item = this.optionalDependencies[i];
            item.wzInitialize(ctx);
        }
        if (this.engine != null) {
            this.engine.wzInitialize(ctx);
        }
        var i, i_len=this.oses.length, item;
        for (i=0; i<i_len; i++) {
            item = this.oses[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.cpus.length, item;
        for (i=0; i<i_len; i++) {
            item = this.cpus[i];
            item.wzInitialize(ctx);
        }
        if (_.isEmpty(this.wzName)) {
            this.wzName = 'MyProject';
        }
        md.spaBase.prototype.wzInitialize.call(this, ctx);
    }
    xpackage.prototype.addUniqueDependency = function(name,version) {
        if (this.getDependency(name)) {
            return ;
        }
        else {
            var dep = this.addDependency(name);
            dep.version = version;
        }
    }
    xpackage.prototype.addUniqueDevDependency = function(name,version) {
        if (this.getDevDependency(name)) {
            return ;
        }
        else {
            var dep = this.addDevDependency(name);
            dep.version = version;
        }
    }
    xpackage.prototype.addUniqueScript = function(name,command) {
        if (this.getScript(name)) {
            return ;
        }
        else {
            var s = this.addScript(name);
            s.command = command;
        }
    }
    return xpackage;
})(spaBase);


md.xpackage = xpackage;
/**
    element bugs
     The url to your project's issue tracker and / or the email address to which issues should be reported. These are helpful for people who encounter issues with your package.
     The wzName is the url.
*/
var bugs = (function (spaBase) {
    _inherits(bugs, spaBase);
    function bugs(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(bugs.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, bugs);
        this.wzElement = "bugs";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.email = null
    }
    bugs.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    bugs.prototype.toJsonProperties = function(result) {
        md.spaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.email)) {
            result["email"] = this.email;
        }
    }
    bugs.prototype.toJsonChildren = function(result) {
        md.spaBase.prototype.toJsonChildren.call(this, result);
    }
    bugs.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'e') {
            if (name === 'email') {
                this.email = child.v; return true;
            }
        }
        return ok;
    }
    bugs.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return bugs;
})(spaBase);


md.bugs = bugs;
// element person
var person = (function (spaBase) {
    _inherits(person, spaBase);
    function person(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(person.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, person);
        this.wzElement = "person";
    }
    person.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    person.prototype.toJsonProperties = function(result) {
        md.spaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    person.prototype.toJsonChildren = function(result) {
        md.spaBase.prototype.toJsonChildren.call(this, result);
    }
    person.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        return ok;
    }
    person.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return person;
})(spaBase);


md.person = person;
// element person
var person = (function (spaBase) {
    _inherits(person, spaBase);
    function person(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(person.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, person);
        this.wzElement = "person";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.name = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.email = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.url = null
    }
    person.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    person.prototype.toJsonProperties = function(result) {
        md.spaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.name)) {
            result["name"] = this.name;
        }
        if (!isEmpty(this.email)) {
            result["email"] = this.email;
        }
        if (!isEmpty(this.url)) {
            result["url"] = this.url;
        }
    }
    person.prototype.toJsonChildren = function(result) {
        md.spaBase.prototype.toJsonChildren.call(this, result);
    }
    person.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'u') {
            if (name === 'url') {
                this.url = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'n') {
            if (name === 'name') {
                this.name = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'e') {
            if (name === 'email') {
                this.email = child.v; return true;
            }
        }
        return ok;
    }
    person.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return person;
})(spaBase);


md.person = person;
// element author
var author = (function (person) {
    _inherits(author, person);
    function author(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(author.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, author);
        this.wzElement = "author";
    }
    author.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    author.prototype.toJsonProperties = function(result) {
        md.person.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    author.prototype.toJsonChildren = function(result) {
        md.person.prototype.toJsonChildren.call(this, result);
    }
    return author;
})(person);


md.author = author;
// element contributor
var contributor = (function (person) {
    _inherits(contributor, person);
    function contributor(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(contributor.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, contributor);
        this.wzElement = "contributor";
    }
    contributor.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    contributor.prototype.toJsonProperties = function(result) {
        md.person.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    contributor.prototype.toJsonChildren = function(result) {
        md.person.prototype.toJsonChildren.call(this, result);
    }
    return contributor;
})(person);


md.contributor = contributor;
/**
    element file
     Certain files are always included, regardless of settings
     Conversely, some files are always ignored
*/
var file = (function (spaBase) {
    _inherits(file, spaBase);
    function file(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(file.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, file);
        this.wzElement = "file";
    }
    file.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    file.prototype.toJsonProperties = function(result) {
        md.spaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    file.prototype.toJsonChildren = function(result) {
        md.spaBase.prototype.toJsonChildren.call(this, result);
    }
    return file;
})(spaBase);


md.file = file;
/**
    element bin
     A lot of packages have one or more executable files that they'd like to install into the PATH. npm makes this pretty easy (in fact, it uses this feature to install the "npm" executable.)
     To use this, supply a bin field in your package.json which is a map of command name to local file name.
     On install, npm will symlink that file into prefix/bin for global installs, or ./node_modules/.bin/ for local installs.
     The wzName is the command name
*/
var bin = (function (spaBase) {
    _inherits(bin, spaBase);
    function bin(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(bin.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, bin);
        this.wzElement = "bin";
        // The path to a local file name
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.path = null
    }
    bin.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    bin.prototype.toJsonProperties = function(result) {
        md.spaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.path)) {
            result["path"] = this.path;
        }
    }
    bin.prototype.toJsonChildren = function(result) {
        md.spaBase.prototype.toJsonChildren.call(this, result);
    }
    bin.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'p') {
            if (name === 'path') {
                this.path = child.v; return true;
            }
        }
        return ok;
    }
    bin.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return bin;
})(spaBase);


md.bin = bin;
/**
    element repository
     Specify the place where your code lives. This is helpful for people who want to contribute.
     If the git repo is on GitHub, then the npm docs command will be able to find you.
     The wzName is the repository type (example: git)
*/
var repository = (function (spaBase) {
    _inherits(repository, spaBase);
    function repository(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(repository.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, repository);
        this.wzElement = "repository";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.url = null
    }
    repository.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    repository.prototype.toJsonProperties = function(result) {
        md.spaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.url)) {
            result["url"] = this.url;
        }
    }
    repository.prototype.toJsonChildren = function(result) {
        md.spaBase.prototype.toJsonChildren.call(this, result);
    }
    repository.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'u') {
            if (name === 'url') {
                this.url = child.v; return true;
            }
        }
        return ok;
    }
    repository.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return repository;
})(spaBase);


md.repository = repository;
/**
    element script
     The "scripts" property is a dictionary containing script commands that are run at various times in the lifecycle of your package. The key is the lifecycle event, and the value is the command to run at that point.
     The wzName is the script name
*/
var script = (function (spaBase) {
    _inherits(script, spaBase);
    function script(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(script.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, script);
        this.wzElement = "script";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.command = null
    }
    script.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    script.prototype.toJsonProperties = function(result) {
        md.spaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.command)) {
            result["command"] = this.command;
        }
    }
    script.prototype.toJsonChildren = function(result) {
        md.spaBase.prototype.toJsonChildren.call(this, result);
    }
    script.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 7 && _ch == 'c') {
            if (name === 'command') {
                this.command = child.v; return true;
            }
        }
        return ok;
    }
    script.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return script;
})(spaBase);


md.script = script;
/**
    element config
     A "config" object can be used to set configuration parameters used in package scripts that persist across upgrades.
     See npm-config(7) and npm-scripts(7) for more on package configs.
*/
var config = (function (spaBase) {
    _inherits(config, spaBase);
    function config(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(config.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, config);
        this.wzElement = "config";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.value = null
    }
    config.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    config.prototype.toJsonProperties = function(result) {
        md.spaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.value)) {
            result["value"] = this.value;
        }
    }
    config.prototype.toJsonChildren = function(result) {
        md.spaBase.prototype.toJsonChildren.call(this, result);
    }
    config.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                this.value = child.v; return true;
            }
        }
        return ok;
    }
    config.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return config;
})(spaBase);


md.config = config;
/**
    element publishConfig
     This is a set of config values that will be used at publish-time.
     It's especially handy if you want to set the tag, registry or access, so that you can ensure that a given package is not tagged with "latest",
     published to the global public registry or that a scoped module is private by default.
     Any config values can be overridden, but of course only "tag", "registry" and "access" probably matter for the purposes of publishing.
     See npm-config(7) to see the list of config options that can be overridden.
*/
var publishConfig = (function (spaBase) {
    _inherits(publishConfig, spaBase);
    function publishConfig(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(publishConfig.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, publishConfig);
        this.wzElement = "publishConfig";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.value = null
    }
    publishConfig.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    publishConfig.prototype.toJsonProperties = function(result) {
        md.spaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.value)) {
            result["value"] = this.value;
        }
    }
    publishConfig.prototype.toJsonChildren = function(result) {
        md.spaBase.prototype.toJsonChildren.call(this, result);
    }
    publishConfig.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                this.value = child.v; return true;
            }
        }
        return ok;
    }
    publishConfig.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return publishConfig;
})(spaBase);


md.publishConfig = publishConfig;
/**
    element dependency
     Dependencies are specified in a simple object that maps a package name to a version range.
     Git URLs as Dependencies
     Git urls can be of the form:
     git://github.com/user/project.git#commit-ish
     git+ssh://user@hostname:project.git#commit-ish
     git+ssh://user@hostname/project.git#commit-ish
     git+http://user@hostname/project/blah.git#commit-ish
     git+https://user@hostname/project/blah.git#commit-ish
     The commit-ish can be any tag, sha, or branch which can be supplied as an argument to git checkout. The default is master.
    
     GitHub URLs
     As of version 1.1.65, you can refer to GitHub urls as just "foo": "user/foo-project". Just as with git URLs, a commit-ish suffix can be included.
     For example:
     {
     "name": "foo",
     "version": "0.0.0",
     "dependencies": {
     "express": "visionmedia/express",
     "mocha": "visionmedia/mocha#4727d357ea"
     }
     }
    
     Local Paths
     As of version 2.0.0 you can provide a path to a local directory that contains a package.
     Local paths can be saved using npm install --save, using any of these forms:
     ../foo/bar
     ~/foo/bar
     ./foo/bar
     /foo/bar
     in which case they will be normalized to a relative path and added to your package.json.
     For example:
     {
     "name": "baz",
     "dependencies": {
     "bar": "file:../foo/bar"
     }
     }
     This feature is helpful for local offline development and creating tests that require npm installing
     where you don't want to hit an external server, but should not be used when publishing packages to the public registry.
*/
var dependency = (function (spaBase) {
    _inherits(dependency, spaBase);
    function dependency(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(dependency.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, dependency);
        this.wzElement = "dependency";
        /**
             The version range is a string which has one or more space-separated descriptors.
             Dependencies can also be identified with a tarball or git URL.
             See semver(7) for more details about specifying version ranges.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.version = null
    }
    dependency.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    dependency.prototype.toJsonProperties = function(result) {
        md.spaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.version)) {
            result["version"] = this.version;
        }
    }
    dependency.prototype.toJsonChildren = function(result) {
        md.spaBase.prototype.toJsonChildren.call(this, result);
    }
    dependency.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 7 && _ch == 'v') {
            if (name === 'version') {
                this.version = child.v; return true;
            }
        }
        return ok;
    }
    dependency.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return dependency;
})(spaBase);


md.dependency = dependency;
/**
    element devDependency
     If someone is planning on downloading and using your module in their program, then they probably don't want or need to download and build the external test or documentation framework that you use.
     In this case, it's best to map these additional items in a devDependencies object.
     These things will be installed when doing npm link or npm install from the root of a package, and can be managed like any other npm configuration param. See npm-config(7) for more on the topic.
     For build steps that are not platform-specific, such as compiling CoffeeScript or other languages to JavaScript, use the prepublish script to do this, and make the required package a devDependency.
     For example:
     {
     "name": "ethopia-waza",
     "description": "a delightfully fruity coffee varietal",
     "version": "1.2.3",
     "devDependencies": {
     "coffee-script": "~1.6.3"
     },
     "scripts": {
     "prepublish": "coffee -o lib/ -c src/waza.coffee"
     },
     "main": "lib/waza.js"
     }
     The prepublish script will be run before publishing, so that users can consume the functionality without requiring them to compile it themselves. In dev mode (ie, locally running npm install), it'll run this script as well, so that you can test it easily.
*/
var devDependency = (function (dependency) {
    _inherits(devDependency, dependency);
    function devDependency(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(devDependency.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, devDependency);
        this.wzElement = "devDependency";
    }
    devDependency.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    devDependency.prototype.toJsonProperties = function(result) {
        md.dependency.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    devDependency.prototype.toJsonChildren = function(result) {
        md.dependency.prototype.toJsonChildren.call(this, result);
    }
    return devDependency;
})(dependency);


md.devDependency = devDependency;
/**
    element peerDependency
     In some cases, you want to express the compatibility of your package with a host tool or library, while not necessarily doing a require of this host. This is usually referred to as a plugin. Notably, your module may be exposing a specific interface, expected and specified by the host documentation.
     For example:
     {
     "name": "tea-latte",
     "version": "1.3.5",
     "peerDependencies": {
     "tea": "2.x"
     }
     }
     This ensures your package tea-latte can be installed along with the second major version of the host package tea only. npm install tea-latte could possibly yield the following dependency graph:
     ├── tea-latte@1.3.5
     └── tea@2.2.0
     NOTE: npm versions 1 and 2 will automatically install peerDependencies if they are not explicitly depended upon higher in the dependency tree. In the next major version of npm (npm@3), this will no longer be the case. You will receive a warning that the peerDependency is not installed instead. The behavior in npms 1 & 2 was frequently confusing and could easily put you into dependency hell, a situation that npm is designed to avoid as much as possible.
     Trying to install another plugin with a conflicting requirement will cause an error. For this reason, make sure your plugin requirement is as broad as possible, and not to lock it down to specific patch versions.
     Assuming the host complies with semver, only changes in the host package's major version will break your plugin. Thus, if you've worked with every 1.x version of the host package, use "^1.0" or "1.x" to express this. If you depend on features introduced in 1.5.2, use ">= 1.5.2 < 2".
*/
var peerDependency = (function (dependency) {
    _inherits(peerDependency, dependency);
    function peerDependency(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(peerDependency.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, peerDependency);
        this.wzElement = "peerDependency";
    }
    peerDependency.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    peerDependency.prototype.toJsonProperties = function(result) {
        md.dependency.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    peerDependency.prototype.toJsonChildren = function(result) {
        md.dependency.prototype.toJsonChildren.call(this, result);
    }
    return peerDependency;
})(dependency);


md.peerDependency = peerDependency;
/**
    element bundledDependency
     Array of package names that will be bundled when publishing the package.
     If this is spelled "bundleDependencies", then that is also honored.
*/
var bundledDependency = (function (dependency) {
    _inherits(bundledDependency, dependency);
    function bundledDependency(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(bundledDependency.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, bundledDependency);
        this.wzElement = "bundledDependency";
    }
    bundledDependency.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    bundledDependency.prototype.toJsonProperties = function(result) {
        md.dependency.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    bundledDependency.prototype.toJsonChildren = function(result) {
        md.dependency.prototype.toJsonChildren.call(this, result);
    }
    return bundledDependency;
})(dependency);


md.bundledDependency = bundledDependency;
/**
    element optionalDependency
     If a dependency can be used, but you would like npm to proceed if it cannot be found or fails to install, then you may put it in the optionalDependencies object. This is a map of package name to version or url, just like the dependencies object. The difference is that build failures do not cause installation to fail.
     It is still your program's responsibility to handle the lack of the dependency. For example, something like this:
*/
var optionalDependency = (function (dependency) {
    _inherits(optionalDependency, dependency);
    function optionalDependency(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(optionalDependency.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, optionalDependency);
        this.wzElement = "optionalDependency";
    }
    optionalDependency.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    optionalDependency.prototype.toJsonProperties = function(result) {
        md.dependency.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    optionalDependency.prototype.toJsonChildren = function(result) {
        md.dependency.prototype.toJsonChildren.call(this, result);
    }
    return optionalDependency;
})(dependency);


md.optionalDependency = optionalDependency;
/**
    element engine
     You can specify the version of node that your stuff works on
     If you specify an "engines" field, then npm will require that "node" be somewhere on that list.
     If "engines" is omitted, then npm will just assume that it works on node.
     Note that, unless the user has set the engine-strict config flag, this field is advisory only.
*/
var engine = (function (spaBase) {
    _inherits(engine, spaBase);
    function engine(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(engine.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, engine);
        this.wzElement = "engine";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.version = null
    }
    engine.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    engine.prototype.toJsonProperties = function(result) {
        md.spaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.version)) {
            result["version"] = this.version;
        }
    }
    engine.prototype.toJsonChildren = function(result) {
        md.spaBase.prototype.toJsonChildren.call(this, result);
    }
    engine.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 7 && _ch == 'v') {
            if (name === 'version') {
                this.version = child.v; return true;
            }
        }
        return ok;
    }
    engine.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return engine;
})(spaBase);


md.engine = engine;
/**
    element os
     You can specify which operating systems your module will run on: (example: darwin)
     You can also blacklist instead of whitelist operating systems, just prepend the blacklisted os with a '!': (example: !win32)
*/
var os = (function (spaBase) {
    _inherits(os, spaBase);
    function os(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(os.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, os);
        this.wzElement = "os";
    }
    os.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    os.prototype.toJsonProperties = function(result) {
        md.spaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    os.prototype.toJsonChildren = function(result) {
        md.spaBase.prototype.toJsonChildren.call(this, result);
    }
    return os;
})(spaBase);


md.os = os;
/**
    element cpu
     If your code only runs on certain cpu architectures, you can specify which ones.
     Like the os option, you can also blacklist architectures
*/
var cpu = (function (spaBase) {
    _inherits(cpu, spaBase);
    function cpu(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(cpu.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, cpu);
        this.wzElement = "cpu";
    }
    cpu.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    cpu.prototype.toJsonProperties = function(result) {
        md.spaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    cpu.prototype.toJsonChildren = function(result) {
        md.spaBase.prototype.toJsonChildren.call(this, result);
    }
    return cpu;
})(spaBase);


md.cpu = cpu;
// element travis
var travis = (function (spaitem) {
    _inherits(travis, spaitem);
    function travis(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(travis.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, travis);
        this.wzElement = "travis";
    }
    travis.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    travis.prototype.toJsonProperties = function(result) {
        md.spaitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    travis.prototype.toJsonChildren = function(result) {
        md.spaitem.prototype.toJsonChildren.call(this, result);
    }
    return travis;
})(spaitem);


md.travis = travis;
// element react
var react = (function (spaitem) {
    _inherits(react, spaitem);
    function react(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(react.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, react);
        this.wzElement = "react";
        // relation flux
        this.flux = null;
        // relation dnd
        this.dnd = null;
    }
    react.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    react.prototype.toJsonProperties = function(result) {
        md.spaitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    react.prototype.toJsonChildren = function(result) {
        md.spaitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.flux != null) {
            result['flux'] = this.flux.toJson();
        }
        else {
            result['flux'] = null;
        }
        if (this.dnd != null) {
            result['dnd'] = this.dnd.toJson();
        }
        else {
            result['dnd'] = null;
        }
    }
    react.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'd') {
            if (name === 'dnd') {
                return this.wzLoadOneToOne(child, md.dnd, 'dnd');
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'flux') {
                return this.wzLoadOneToOne(child, md.flux, 'flux');
            }
        }
        ok = md.spaitem.prototype.loadChild.call(this, child);
        return ok;
    }
    react.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    react.prototype.wzVerify = function(ctx) {
        if (this.flux != null) {
            this.flux.wzVerify(ctx);
        }
        if (this.dnd != null) {
            this.dnd.wzVerify(ctx);
        }
        md.spaitem.prototype.wzVerify.call(this, ctx);
    }
    react.prototype.wzInitialize = function(ctx) {
        if (this.flux != null) {
            this.flux.wzInitialize(ctx);
        }
        if (this.dnd != null) {
            this.dnd.wzInitialize(ctx);
        }
        md.spaitem.prototype.wzInitialize.call(this, ctx);
    }
    return react;
})(spaitem);


md.react = react;
/**
    element router
     https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/guides/quick-start.md
     https://www.themarketingtechnologist.co/react-router-an-introduction/
*/
var router = (function (spaBase) {
    _inherits(router, spaBase);
    function router(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(router.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, router);
        this.wzElement = "router";
    }
    router.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    router.prototype.toJsonProperties = function(result) {
        md.spaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    router.prototype.toJsonChildren = function(result) {
        md.spaBase.prototype.toJsonChildren.call(this, result);
    }
    return router;
})(spaBase);


md.router = router;
// element flux
var flux = (function (spaBase) {
    _inherits(flux, spaBase);
    function flux(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(flux.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, flux);
        this.wzElement = "flux";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.persist = null
    }
    flux.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    flux.prototype.toJsonProperties = function(result) {
        md.spaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.persist)) {
            result["persist"] = this.persist;
        }
    }
    flux.prototype.toJsonChildren = function(result) {
        md.spaBase.prototype.toJsonChildren.call(this, result);
    }
    flux.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 7 && _ch == 'p') {
            if (name === 'persist') {
                this.persist = child.v; return true;
            }
        }
        return ok;
    }
    flux.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.spaException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return flux;
})(spaBase);


md.flux = flux;
// element dnd
var dnd = (function (spaBase) {
    _inherits(dnd, spaBase);
    function dnd(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(dnd.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, dnd);
        this.wzElement = "dnd";
    }
    dnd.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    dnd.prototype.toJsonProperties = function(result) {
        md.spaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    dnd.prototype.toJsonChildren = function(result) {
        md.spaBase.prototype.toJsonChildren.call(this, result);
    }
    return dnd;
})(spaBase);


md.dnd = dnd;
md.__tagElementMapping = { '#': 'comment', 'package': 'xpackage', 'chunk': 'entryChunk', '@': 'jsProp', '{': 'jsObject', '[': 'jsArray', 'preset': 'babelPreset', 'plugin': 'babelPlugin', 'publish-config': 'publishConfig', 'publishconfig': 'publishConfig', 'depend': 'dependency', 'dev-depend': 'devDependency', 'devdepend': 'devDependency', 'peer-depend': 'peerDependency', 'peerdepend': 'peerDependency', 'bundled-depend': 'bundledDependency', 'bundleddepend': 'bundledDependency', 'optional-depend': 'optionalDependency', 'optionaldepend': 'optionalDependency' };
var spaException = (function () {
    function spaException(message,node,instance) {
        _classCallCheck(this, spaException);
        // TODO node seems superflous
        if (node && instance) {
            this.message = message + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        this.stack = new Error().stack;
        this.node = node;
    }
    return spaException;
})();


md.spaException = spaException;
var spaContext = (function () {
    function spaContext() {
        _classCallCheck(this, spaContext);
        this.validationErrors = [];
    }
    spaContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    spaContext.prototype.addError = function(message,node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at);
    }
    spaContext.prototype.verifyEnum = function(valueType,valueName,value,allowed,node) {
        if (value && allowed.indexOf(value) < 0) {
            var allowedStr = 'allowed: ' + allowed.join(', ');
            this.validationErrors.push(valueType + ' ' + valueName + ' has an invalid value: ' + value + ' ' + allowedStr + '. At ' + (node.wzSourceLineInfo ? node.wzSourceLineInfo.toString(node) : 'location unavailable'));
        }
    }
    return spaContext;
})();


md.spaContext = spaContext;
function parsestring(value,defaultValue,node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}

function parseboolean(value,defaultValue,node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    if (!isBoolean(value)) {
        throw new nodeException('Must be a boolean value (\"true\" or \"false\"), got:' + value, node);
    }
    return value === 'true' ? true : false;
}

function isBoolean(value) {
    return value === 'true' || value === 'false';
}

function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}

function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}


