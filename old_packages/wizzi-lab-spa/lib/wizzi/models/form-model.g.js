/*
    artifact generator: /wizzi/lib/artifacts/js/module/gen/main.js
    primary source IttfDocument: C:\My\wizzi\v2\packages\wizzi-lab-spa\node_modules\wizzi\lib\artifacts\wizzischema\model\gen\ittf\wizzischema-model.js.ittf
    utc time: Tue, 11 Jul 2017 19:51:58 GMT
*/
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');

var md = module.exports = {};

var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row,col,sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();


md.wzSourceLineInfo = wzSourceLineInfo;
var formBase = (function () {
    function formBase(name,sourceLineInfo) {
        _classCallCheck(this, formBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    formBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    formBase.prototype.wzSourceFilepath = function(sourceKey) {
        return this.wzRoot().loadContext.getIttfDocumentUri(sourceKey);
    }
    formBase.prototype.wzVerify = function() {
    }
    formBase.prototype.wzInitialize = function() {
    }
    formBase.prototype.wzInitializeAsync = function(ctx,callback) {
        callback(null);
    }
    formBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    formBase.prototype.wzLoadToChildColl = function(child,type,coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    formBase.prototype.wzLoadToChildren = function(child,type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    formBase.prototype.wzLoadOneToOne = function(child,type,fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    formBase.prototype.error = function(message,node) {
        throw new md.formException(message, node, this);
    }
    formBase.prototype.toJsonProperties = function(result) {
        result.wzTag = this.wzTag;
        result.wzName = this.wzName;
    }
    formBase.prototype.toJsonChildren = function(result) {
        if (this.wzChildren.length > 0) {
            var children = [];
            var i, i_len=this.wzChildren.length, item;
            for (i=0; i<i_len; i++) {
                item = this.wzChildren[i];
                children.push(item.toJson());
            }
            result.wzChildren = children;
        }
    }
    return formBase;
})();


md.formBase = formBase;

/**
    element item
     The abstract base node for all form nodes
*/
var item = (function (formBase) {
    _inherits(item, formBase);
    function item(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(item.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, item);
        this.allowedSIZES = [ "@@null", "small", "large", "medium"];
        this.SIZE___NULL = "@@null";
        this.SIZE_SMALL = "small";
        this.SIZE_LARGE = "large";
        this.SIZE_MEDIUM = "medium";
        this.wzElement = "item";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.name = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.label = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.description = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.size = null
        // relation comment
        this.comments = [];
        // relation item
        this.items = [];
    }
    item.SIZE___NULL = "@@null";
    item.SIZE_SMALL = "small";
    item.SIZE_LARGE = "large";
    item.SIZE_MEDIUM = "medium";
    item.prototype.addComment = function(name,sourceLineInfo) {
        var retval = new md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    item.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    item.prototype.getItem = function(name) {
        var found = null;
        this.items.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    item.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    item.prototype.toJsonProperties = function(result) {
        md.formBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.name)) {
            result["name"] = this.name;
        }
        if (!isEmpty(this.label)) {
            result["label"] = this.label;
        }
        if (!isEmpty(this.description)) {
            result["description"] = this.description;
        }
        if (!isEmpty(this.size)) {
            result["size"] = this.size;
        }
    }
    item.prototype.toJsonChildren = function(result) {
        md.formBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
        items = [];
        var i, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            items.push(item.toJson());
        }
        result['items'] = items;
    }
    item.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, md.comment, this.comments);
            }
            else if (name === '#') {
                return this.wzLoadToChildColl(child, md.comment, this.items);
            }
        }
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, md.jsProperty, this.items);
            }
        }
        if (_l == 1 && _ch == '[') {
            if (name === '[') {
                return this.wzLoadToChildColl(child, md.jsArray, this.items);
            }
        }
        if (_l == 1 && _ch == 'c') {
            if (name === 'c') {
                return this.wzLoadToChildColl(child, md.control, this.items);
            }
        }
        if (_l == 1 && _ch == '{') {
            if (name === '{') {
                return this.wzLoadToChildColl(child, md.jsObject, this.items);
            }
        }
        if (_l == 3 && _ch == 'a') {
            if (name === 'alt') {
                return this.wzLoadToChildColl(child, md.alternate, this.items);
            }
        }
        if (_l == 3 && _ch == 't') {
            if (name === 'tab') {
                return this.wzLoadToChildColl(child, md.tab, this.items);
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'form') {
                return this.wzLoadToChildColl(child, md.form, this.items);
            }
        }
        if (_l == 4 && _ch == 'h') {
            if (name === 'href') {
                return this.wzLoadToChildColl(child, md.href, this.items);
            }
        }
        if (_l == 4 && _ch == 'm') {
            if (name === 'mask') {
                return this.wzLoadToChildColl(child, md.mask, this.items);
            }
        }
        if (_l == 4 && _ch == 'n') {
            if (name === 'name') {
                this.name = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'p') {
            if (name === 'pane') {
                return this.wzLoadToChildColl(child, md.pane, this.items);
            }
        }
        if (_l == 4 && _ch == 's') {
            if (name === 'size') {
                this.size = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'l') {
            if (name === 'label') {
                this.label = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'p') {
            if (name === 'panel') {
                return this.wzLoadToChildColl(child, md.panel, this.items);
            }
        }
        if (_l == 6 && _ch == 'c') {
            if (name === 'choice') {
                return this.wzLoadToChildColl(child, md.choice, this.items);
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'source') {
                return this.wzLoadToChildColl(child, md.source, this.items);
            }
        }
        if (_l == 7 && _ch == 'o') {
            if (name === 'options') {
                return this.wzLoadToChildColl(child, md.options, this.items);
            }
        }
        if (_l == 8 && _ch == 'r') {
            if (name === 'required') {
                return this.wzLoadToChildColl(child, md.required, this.items);
            }
        }
        if (_l == 9 && _ch == 'a') {
            if (name === 'accordion') {
                return this.wzLoadToChildColl(child, md.accordion, this.items);
            }
        }
        if (_l == 9 && _ch == 'i') {
            if (name === 'itemgroup') {
                return this.wzLoadToChildColl(child, md.itemgroup, this.items);
            }
        }
        if (_l == 11 && _ch == 'd') {
            if (name === 'description') {
                this.description = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'i') {
            if (name === 'itemcontrol') {
                return this.wzLoadToChildColl(child, md.itemcontrol, this.items);
            }
        }
        if (_l == 12 && _ch == 't') {
            if (name === 'translations') {
                return this.wzLoadToChildColl(child, md.translations, this.items);
            }
        }
        return ok;
    }
    item.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.formException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    item.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("item", "size", this.size, this.allowedSIZES, this);
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            item.wzVerify(ctx);
        }
        md.formBase.prototype.wzVerify.call(this, ctx);
    }
    item.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.items.length, item;
        for (i=0; i<i_len; i++) {
            item = this.items[i];
            item.wzInitialize(ctx);
        }
        md.formBase.prototype.wzInitialize.call(this, ctx);
    }
    return item;
})(formBase);


md.item = item;
// element comment
var comment = (function (item) {
    _inherits(comment, item);
    function comment(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(comment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, comment);
        this.wzElement = "comment";
    }
    comment.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    comment.prototype.toJsonProperties = function(result) {
        md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    comment.prototype.toJsonChildren = function(result) {
        md.item.prototype.toJsonChildren.call(this, result);
    }
    return comment;
})(item);


md.comment = comment;
/**
    element form
     The root element of the form schema
     A WizziModel models one form
     The wzName is the HtmlElement id
*/
var form = (function (item) {
    _inherits(form, item);
    function form(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(form.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, form);
        this.allowedKINDS = [ "basic", "option", "bootstrap-horizontal"];
        this.KIND_BASIC = "basic";
        this.KIND_OPTION = "option";
        this.KIND_BOOTSTRAP_HORIZONTAL = "bootstrap-horizontal";
        this.allowedDATA_KINDS = [ "array", "object", "singlevalue"];
        this.DATA_KIND_ARRAY = "array";
        this.DATA_KIND_OBJECT = "object";
        this.DATA_KIND_SINGLEVALUE = "singlevalue";
        this.allowedSIZES = [ "@@null", "tiny", "small", "medium", "large", "big", "huge", "massive"];
        this.SIZE___NULL = "@@null";
        this.SIZE_TINY = "tiny";
        this.SIZE_SMALL = "small";
        this.SIZE_MEDIUM = "medium";
        this.SIZE_LARGE = "large";
        this.SIZE_BIG = "big";
        this.SIZE_HUGE = "huge";
        this.SIZE_MASSIVE = "massive";
        this.wzElement = "form";
        // The data name
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.name = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.title = null
        this.kind = "basic";
        this.data_kind = "object";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.validation_engine = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.size = null
    }
    form.KIND_BASIC = "basic";
    form.KIND_OPTION = "option";
    form.KIND_BOOTSTRAP_HORIZONTAL = "bootstrap-horizontal";
    form.DATA_KIND_ARRAY = "array";
    form.DATA_KIND_OBJECT = "object";
    form.DATA_KIND_SINGLEVALUE = "singlevalue";
    form.SIZE___NULL = "@@null";
    form.SIZE_TINY = "tiny";
    form.SIZE_SMALL = "small";
    form.SIZE_MEDIUM = "medium";
    form.SIZE_LARGE = "large";
    form.SIZE_BIG = "big";
    form.SIZE_HUGE = "huge";
    form.SIZE_MASSIVE = "massive";
    form.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    form.prototype.toJsonProperties = function(result) {
        md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.name)) {
            result["name"] = this.name;
        }
        if (!isEmpty(this.title)) {
            result["title"] = this.title;
        }
        if (!isEmpty(this.kind)) {
            result["kind"] = this.kind;
        }
        if (!isEmpty(this.data_kind)) {
            result["data_kind"] = this.data_kind;
        }
        if (!isEmpty(this.validation_engine)) {
            result["validation_engine"] = this.validation_engine;
        }
        if (!isEmpty(this.size)) {
            result["size"] = this.size;
        }
    }
    form.prototype.toJsonChildren = function(result) {
        md.item.prototype.toJsonChildren.call(this, result);
    }
    form.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'k') {
            if (name === 'kind') {
                this.kind = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'n') {
            if (name === 'name') {
                this.name = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 's') {
            if (name === 'size') {
                this.size = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 't') {
            if (name === 'title') {
                this.title = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'd') {
            if (name === 'data-kind') {
                this.data_kind = child.v; return true;
            }
            else if (name === 'data_kind') {
                this.data_kind = child.v; return true;
            }
        }
        if (_l == 17 && _ch == 'v') {
            if (name === 'validation-engine') {
                this.validation_engine = child.v; return true;
            }
            else if (name === 'validation_engine') {
                this.validation_engine = child.v; return true;
            }
        }
        ok = md.item.prototype.loadChild.call(this, child);
        return ok;
    }
    form.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.formException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    form.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("form", "kind", this.kind, this.allowedKINDS, this);
        ctx.verifyEnum("form", "data_kind", this.data_kind, this.allowedDATA_KINDS, this);
        ctx.verifyEnum("form", "size", this.size, this.allowedSIZES, this);
        md.item.prototype.wzVerify.call(this, ctx);
    }
    return form;
})(item);


md.form = form;
/**
    element href
     The wzName is the HtmlAttribute href
*/
var href = (function (item) {
    _inherits(href, item);
    function href(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(href.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, href);
        this.wzElement = "href";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.text = null
    }
    href.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    href.prototype.toJsonProperties = function(result) {
        md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.text)) {
            result["text"] = this.text;
        }
    }
    href.prototype.toJsonChildren = function(result) {
        md.item.prototype.toJsonChildren.call(this, result);
    }
    href.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 't') {
            if (name === 'text') {
                this.text = child.v; return true;
            }
        }
        ok = md.item.prototype.loadChild.call(this, child);
        return ok;
    }
    href.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.formException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return href;
})(item);


md.href = href;
/**
    element group
     The wzName is the HtmlElement id
*/
var group = (function (item) {
    _inherits(group, item);
    function group(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(group.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, group);
        this.allowedDATA_KINDS = [ "group", "array", "object", "value"];
        this.DATA_KIND_GROUP = "group";
        this.DATA_KIND_ARRAY = "array";
        this.DATA_KIND_OBJECT = "object";
        this.DATA_KIND_VALUE = "value";
        this.wzElement = "group";
        // The data name
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.name = null
        this.data_kind = "group";
    }
    group.DATA_KIND_GROUP = "group";
    group.DATA_KIND_ARRAY = "array";
    group.DATA_KIND_OBJECT = "object";
    group.DATA_KIND_VALUE = "value";
    group.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    group.prototype.toJsonProperties = function(result) {
        md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.name)) {
            result["name"] = this.name;
        }
        if (!isEmpty(this.data_kind)) {
            result["data_kind"] = this.data_kind;
        }
    }
    group.prototype.toJsonChildren = function(result) {
        md.item.prototype.toJsonChildren.call(this, result);
    }
    group.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'n') {
            if (name === 'name') {
                this.name = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'd') {
            if (name === 'data-kind') {
                this.data_kind = child.v; return true;
            }
            else if (name === 'data_kind') {
                this.data_kind = child.v; return true;
            }
        }
        ok = md.item.prototype.loadChild.call(this, child);
        return ok;
    }
    group.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.formException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    group.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("group", "data_kind", this.data_kind, this.allowedDATA_KINDS, this);
        md.item.prototype.wzVerify.call(this, ctx);
    }
    return group;
})(item);


md.group = group;
// element tab
var tab = (function (group) {
    _inherits(tab, group);
    function tab(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(tab.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, tab);
        this.wzElement = "tab";
    }
    tab.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    tab.prototype.toJsonProperties = function(result) {
        md.group.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    tab.prototype.toJsonChildren = function(result) {
        md.group.prototype.toJsonChildren.call(this, result);
    }
    return tab;
})(group);


md.tab = tab;
// element pane
var pane = (function (group) {
    _inherits(pane, group);
    function pane(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(pane.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, pane);
        this.wzElement = "pane";
        this.isPaneDefault = false;
    }
    pane.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    pane.prototype.toJsonProperties = function(result) {
        md.group.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        result["isPaneDefault"] = this.isPaneDefault;
    }
    pane.prototype.toJsonChildren = function(result) {
        md.group.prototype.toJsonChildren.call(this, result);
    }
    pane.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 10 && _ch == 'i') {
            if (name === 'is-default') {
                this.isPaneDefault = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_default') {
                this.isPaneDefault = parseboolean(child.v, true, child); return true;
            }
        }
        ok = md.group.prototype.loadChild.call(this, child);
        return ok;
    }
    pane.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.formException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return pane;
})(group);


md.pane = pane;
// element accordion
var accordion = (function (group) {
    _inherits(accordion, group);
    function accordion(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(accordion.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, accordion);
        this.wzElement = "accordion";
    }
    accordion.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    accordion.prototype.toJsonProperties = function(result) {
        md.group.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    accordion.prototype.toJsonChildren = function(result) {
        md.group.prototype.toJsonChildren.call(this, result);
    }
    return accordion;
})(group);


md.accordion = accordion;
// element panel
var panel = (function (group) {
    _inherits(panel, group);
    function panel(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(panel.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, panel);
        this.wzElement = "panel";
    }
    panel.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    panel.prototype.toJsonProperties = function(result) {
        md.group.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    panel.prototype.toJsonChildren = function(result) {
        md.group.prototype.toJsonChildren.call(this, result);
    }
    return panel;
})(group);


md.panel = panel;
/**
    element control
     The wzName is the HtmlElement id
*/
var control = (function (item) {
    _inherits(control, item);
    function control(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(control.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, control);
        this.allowedKINDS = [ "text", "checkbox", "select", "number", "color", "date", "array", "choice", "spectrum", "typeahead", "select2", "slider", "alternate"];
        this.KIND_TEXT = "text";
        this.KIND_CHECKBOX = "checkbox";
        this.KIND_SELECT = "select";
        this.KIND_NUMBER = "number";
        this.KIND_COLOR = "color";
        this.KIND_DATE = "date";
        this.KIND_ARRAY = "array";
        this.KIND_CHOICE = "choice";
        this.KIND_SPECTRUM = "spectrum";
        this.KIND_TYPEAHEAD = "typeahead";
        this.KIND_SELECT2 = "select2";
        this.KIND_SLIDER = "slider";
        this.KIND_ALTERNATE = "alternate";
        this.wzElement = "control";
        this.kind = "text";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.datatype = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.format = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.default = null
        // relation validation
        this.validations = [];
    }
    control.KIND_TEXT = "text";
    control.KIND_CHECKBOX = "checkbox";
    control.KIND_SELECT = "select";
    control.KIND_NUMBER = "number";
    control.KIND_COLOR = "color";
    control.KIND_DATE = "date";
    control.KIND_ARRAY = "array";
    control.KIND_CHOICE = "choice";
    control.KIND_SPECTRUM = "spectrum";
    control.KIND_TYPEAHEAD = "typeahead";
    control.KIND_SELECT2 = "select2";
    control.KIND_SLIDER = "slider";
    control.KIND_ALTERNATE = "alternate";
    control.prototype.getValidation = function(name) {
        var found = null;
        this.validations.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    control.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    control.prototype.toJsonProperties = function(result) {
        md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.kind)) {
            result["kind"] = this.kind;
        }
        if (!isEmpty(this.datatype)) {
            result["datatype"] = this.datatype;
        }
        if (!isEmpty(this.format)) {
            result["format"] = this.format;
        }
        if (!isEmpty(this.default)) {
            result["default"] = this.default;
        }
    }
    control.prototype.toJsonChildren = function(result) {
        md.item.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.validations.length, item;
        for (i=0; i<i_len; i++) {
            item = this.validations[i];
            items.push(item.toJson());
        }
        result['validations'] = items;
    }
    control.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'k') {
            if (name === 'kind') {
                this.kind = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'f') {
            if (name === 'format') {
                this.format = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'd') {
            if (name === 'default') {
                this.default = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'd') {
            if (name === 'datatype') {
                this.datatype = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'r') {
            if (name === 'required') {
                return this.wzLoadToChildColl(child, md.required, this.validations);
            }
        }
        ok = md.item.prototype.loadChild.call(this, child);
        return ok;
    }
    control.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.formException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    control.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("control", "kind", this.kind, this.allowedKINDS, this);
        var i, i_len=this.validations.length, item;
        for (i=0; i<i_len; i++) {
            item = this.validations[i];
            item.wzVerify(ctx);
        }
        md.item.prototype.wzVerify.call(this, ctx);
    }
    control.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.validations.length, item;
        for (i=0; i<i_len; i++) {
            item = this.validations[i];
            item.wzInitialize(ctx);
        }
        md.item.prototype.wzInitialize.call(this, ctx);
    }
    return control;
})(item);


md.control = control;
/**
    element itemcontrol
     child of control when control.kind == 'array'
*/
var itemcontrol = (function (control) {
    _inherits(itemcontrol, control);
    function itemcontrol(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(itemcontrol.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, itemcontrol);
        this.wzElement = "itemcontrol";
    }
    itemcontrol.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    itemcontrol.prototype.toJsonProperties = function(result) {
        md.control.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    itemcontrol.prototype.toJsonChildren = function(result) {
        md.control.prototype.toJsonChildren.call(this, result);
    }
    return itemcontrol;
})(control);


md.itemcontrol = itemcontrol;
/**
    element itemgroup
     child of control when control.kind == 'array'
*/
var itemgroup = (function (group) {
    _inherits(itemgroup, group);
    function itemgroup(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(itemgroup.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, itemgroup);
        this.wzElement = "itemgroup";
    }
    itemgroup.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    itemgroup.prototype.toJsonProperties = function(result) {
        md.group.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    itemgroup.prototype.toJsonChildren = function(result) {
        md.group.prototype.toJsonChildren.call(this, result);
    }
    return itemgroup;
})(group);


md.itemgroup = itemgroup;
/**
    element choice
     child of control when control.kind == 'choice'
*/
var choice = (function (control) {
    _inherits(choice, control);
    function choice(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(choice.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, choice);
        this.wzElement = "choice";
        this.isChoiceDefault = false;
    }
    choice.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    choice.prototype.toJsonProperties = function(result) {
        md.control.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        result["isChoiceDefault"] = this.isChoiceDefault;
    }
    choice.prototype.toJsonChildren = function(result) {
        md.control.prototype.toJsonChildren.call(this, result);
    }
    choice.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 10 && _ch == 'i') {
            if (name === 'is-default') {
                this.isChoiceDefault = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'is_default') {
                this.isChoiceDefault = parseboolean(child.v, true, child); return true;
            }
        }
        ok = md.control.prototype.loadChild.call(this, child);
        return ok;
    }
    choice.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.formException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return choice;
})(control);


md.choice = choice;
/**
    element alternate
     child of control when control.kind == 'alternate'
*/
var alternate = (function (control) {
    _inherits(alternate, control);
    function alternate(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(alternate.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, alternate);
        this.wzElement = "alternate";
    }
    alternate.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    alternate.prototype.toJsonProperties = function(result) {
        md.control.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    alternate.prototype.toJsonChildren = function(result) {
        md.control.prototype.toJsonChildren.call(this, result);
    }
    return alternate;
})(control);


md.alternate = alternate;
// element mask
var mask = (function (item) {
    _inherits(mask, item);
    function mask(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(mask.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, mask);
        this.wzElement = "mask";
    }
    mask.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    mask.prototype.toJsonProperties = function(result) {
        md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    mask.prototype.toJsonChildren = function(result) {
        md.item.prototype.toJsonChildren.call(this, result);
    }
    return mask;
})(item);


md.mask = mask;
// element translations
var translations = (function (item) {
    _inherits(translations, item);
    function translations(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(translations.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, translations);
        this.wzElement = "translations";
    }
    translations.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    translations.prototype.toJsonProperties = function(result) {
        md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    translations.prototype.toJsonChildren = function(result) {
        md.item.prototype.toJsonChildren.call(this, result);
    }
    return translations;
})(item);


md.translations = translations;
// element validation
var validation = (function (item) {
    _inherits(validation, item);
    function validation(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(validation.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, validation);
        this.wzElement = "validation";
    }
    validation.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    validation.prototype.toJsonProperties = function(result) {
        md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    validation.prototype.toJsonChildren = function(result) {
        md.item.prototype.toJsonChildren.call(this, result);
    }
    validation.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        ok = md.item.prototype.loadChild.call(this, child);
        return ok;
    }
    validation.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.formException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return validation;
})(item);


md.validation = validation;
// element required
var required = (function (validation) {
    _inherits(required, validation);
    function required(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(required.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, required);
        this.wzElement = "required";
    }
    required.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    required.prototype.toJsonProperties = function(result) {
        md.validation.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    required.prototype.toJsonChildren = function(result) {
        md.validation.prototype.toJsonChildren.call(this, result);
    }
    return required;
})(validation);


md.required = required;
// element source
var source = (function (item) {
    _inherits(source, item);
    function source(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(source.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, source);
        this.wzElement = "source";
    }
    source.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    source.prototype.toJsonProperties = function(result) {
        md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    source.prototype.toJsonChildren = function(result) {
        md.item.prototype.toJsonChildren.call(this, result);
    }
    return source;
})(item);


md.source = source;
// element options
var options = (function (item) {
    _inherits(options, item);
    function options(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(options.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, options);
        this.wzElement = "options";
    }
    options.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    options.prototype.toJsonProperties = function(result) {
        md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    options.prototype.toJsonChildren = function(result) {
        md.item.prototype.toJsonChildren.call(this, result);
    }
    return options;
})(item);


md.options = options;
// element jsObject
var jsObject = (function (item) {
    _inherits(jsObject, item);
    function jsObject(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(jsObject.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsObject);
        this.wzElement = "jsObject";
    }
    jsObject.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    jsObject.prototype.toJsonProperties = function(result) {
        md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    jsObject.prototype.toJsonChildren = function(result) {
        md.item.prototype.toJsonChildren.call(this, result);
    }
    return jsObject;
})(item);


md.jsObject = jsObject;
// element jsArray
var jsArray = (function (item) {
    _inherits(jsArray, item);
    function jsArray(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(jsArray.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsArray);
        this.wzElement = "jsArray";
    }
    jsArray.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    jsArray.prototype.toJsonProperties = function(result) {
        md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    jsArray.prototype.toJsonChildren = function(result) {
        md.item.prototype.toJsonChildren.call(this, result);
    }
    return jsArray;
})(item);


md.jsArray = jsArray;
// element jsProperty
var jsProperty = (function (item) {
    _inherits(jsProperty, item);
    function jsProperty(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(jsProperty.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsProperty);
        this.wzElement = "jsProperty";
    }
    jsProperty.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    jsProperty.prototype.toJsonProperties = function(result) {
        md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    jsProperty.prototype.toJsonChildren = function(result) {
        md.item.prototype.toJsonChildren.call(this, result);
    }
    return jsProperty;
})(item);


md.jsProperty = jsProperty;
md.__tagElementMapping = { '#': 'comment', 'c': 'control', 'alt': 'alternate', '{': 'jsObject', '[': 'jsArray', '@': 'jsProperty' };
var formException = (function () {
    function formException(message,node,instance) {
        _classCallCheck(this, formException);
        // TODO node seems superflous
        if (node && instance) {
            this.message = message + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        this.stack = new Error().stack;
        this.node = node;
    }
    return formException;
})();


md.formException = formException;
var formContext = (function () {
    function formContext() {
        _classCallCheck(this, formContext);
        this.validationErrors = [];
    }
    formContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    formContext.prototype.addError = function(message,node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at);
    }
    formContext.prototype.verifyEnum = function(valueType,valueName,value,allowed,node) {
        if (value && allowed.indexOf(value) < 0) {
            var allowedStr = 'allowed: ' + allowed.join(', ');
            this.validationErrors.push(valueType + ' ' + valueName + ' has an invalid value: ' + value + ' ' + allowedStr + '. At ' + (node.wzSourceLineInfo ? node.wzSourceLineInfo.toString(node) : 'location unavailable'));
        }
    }
    return formContext;
})();


md.formContext = formContext;
function parsestring(value,defaultValue,node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}

function parseboolean(value,defaultValue,node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    if (!isBoolean(value)) {
        throw new nodeException('Must be a boolean value (\"true\" or \"false\"), got:' + value, node);
    }
    return value === 'true' ? true : false;
}

function isBoolean(value) {
    return value === 'true' || value === 'false';
}

function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}

function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}


