/*
    artifact generator: /wizzi/lib/artifacts/js/module/gen/main.js
    primary source IttfDocument: C:\My\wizzi\v2\packages\wizzi-lab-spa\node_modules\wizzi\lib\artifacts\wizzischema\model\gen\ittf\wizzischema-model.js.ittf
    utc time: Tue, 11 Jul 2017 19:51:59 GMT
*/
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var wizzi = require('wizzi');

var md = module.exports = {};

var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row,col,sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();


md.wzSourceLineInfo = wzSourceLineInfo;
var webpackBase = (function () {
    function webpackBase(name,sourceLineInfo) {
        _classCallCheck(this, webpackBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    webpackBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    webpackBase.prototype.wzSourceFilepath = function(sourceKey) {
        return this.wzRoot().loadContext.getIttfDocumentUri(sourceKey);
    }
    webpackBase.prototype.wzVerify = function() {
    }
    webpackBase.prototype.wzInitialize = function() {
    }
    webpackBase.prototype.wzInitializeAsync = function(ctx,callback) {
        callback(null);
    }
    webpackBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    webpackBase.prototype.wzLoadToChildColl = function(child,type,coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    webpackBase.prototype.wzLoadToChildren = function(child,type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    webpackBase.prototype.wzLoadOneToOne = function(child,type,fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    webpackBase.prototype.error = function(message,node) {
        throw new md.webpackException(message, node, this);
    }
    webpackBase.prototype.toJsonProperties = function(result) {
        result.wzTag = this.wzTag;
        result.wzName = this.wzName;
    }
    webpackBase.prototype.toJsonChildren = function(result) {
        if (this.wzChildren.length > 0) {
            var children = [];
            var i, i_len=this.wzChildren.length, item;
            for (i=0; i<i_len; i++) {
                item = this.wzChildren[i];
                children.push(item.toJson());
            }
            result.wzChildren = children;
        }
    }
    return webpackBase;
})();


md.webpackBase = webpackBase;

// element webpackitem
var webpackitem = (function (webpackBase) {
    _inherits(webpackitem, webpackBase);
    function webpackitem(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(webpackitem.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, webpackitem);
        this.wzElement = "webpackitem";
        // relation property
        this.properties = [];
        // relation comment
        this.comments = [];
    }
    webpackitem.prototype.addProperty = function(name,sourceLineInfo) {
        var retval = new md.property(name, sourceLineInfo);
        retval.wzParent = this;
        this.properties.push(retval);
        return retval;
    }
    webpackitem.prototype.getProperty = function(name) {
        var found = null;
        this.properties.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    webpackitem.prototype.addComment = function(name,sourceLineInfo) {
        var retval = new md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    webpackitem.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    webpackitem.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    webpackitem.prototype.toJsonProperties = function(result) {
        md.webpackBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    webpackitem.prototype.toJsonChildren = function(result) {
        md.webpackBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            items.push(item.toJson());
        }
        result['properties'] = items;
        items = [];
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            items.push(item.toJson());
        }
        result['comments'] = items;
    }
    webpackitem.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, md.comment, this.comments);
            }
        }
        if (_l == 8 && _ch == 'p') {
            if (name === 'property') {
                return this.wzLoadToChildColl(child, md.property, this.properties);
            }
        }
        return ok;
    }
    webpackitem.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.webpackException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    webpackitem.prototype.wzVerify = function(ctx) {
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzVerify(ctx);
        }
        md.webpackBase.prototype.wzVerify.call(this, ctx);
    }
    webpackitem.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.comments.length, item;
        for (i=0; i<i_len; i++) {
            item = this.comments[i];
            item.wzInitialize(ctx);
        }
        md.webpackBase.prototype.wzInitialize.call(this, ctx);
    }
    webpackitem.prototype.propertyOfCategory = function(categoryName) {
        var ret = [];
        var i, i_len=this.properties.length, item;
        for (i=0; i<i_len; i++) {
            item = this.properties[i];
            if (item.category === categoryName) {
                ret.push(item);
            }
        }
        return ret;
    }
    return webpackitem;
})(webpackBase);


md.webpackitem = webpackitem;
// element comment
var comment = (function (webpackitem) {
    _inherits(comment, webpackitem);
    function comment(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(comment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, comment);
        this.wzElement = "comment";
    }
    comment.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    comment.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    comment.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
    }
    return comment;
})(webpackitem);


md.comment = comment;
// element property
var property = (function (webpackitem) {
    _inherits(property, webpackitem);
    function property(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(property.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, property);
        this.wzElement = "property";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.category = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.name = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.value = null
    }
    property.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    property.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.category)) {
            result["category"] = this.category;
        }
        if (!isEmpty(this.name)) {
            result["name"] = this.name;
        }
        if (!isEmpty(this.value)) {
            result["value"] = this.value;
        }
    }
    property.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
    }
    property.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'n') {
            if (name === 'name') {
                this.name = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'v') {
            if (name === 'value') {
                this.value = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'c') {
            if (name === 'category') {
                this.category = child.v; return true;
            }
        }
        ok = md.webpackitem.prototype.loadChild.call(this, child);
        return ok;
    }
    property.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.webpackException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    property.prototype.wzInitialize = function(ctx) {
        this.name = this.wzName;
        md.webpackitem.prototype.wzInitialize.call(this, ctx);
    }
    return property;
})(webpackitem);


md.property = property;
// element webpack
var webpack = (function (webpackitem) {
    _inherits(webpack, webpackitem);
    function webpack(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(webpack.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, webpack);
        this.allowedBUILDS = [ "development", "production"];
        this.BUILD_DEVELOPMENT = "development";
        this.BUILD_PRODUCTION = "production";
        this.allowedCONFIGS = [ "none", "react"];
        this.CONFIG_NONE = "none";
        this.CONFIG_REACT = "react";
        this.allowedTARGETS = [ "async-node", "electron-main", "electron-renderer", "node", "node-webkit", "web", "webworker"];
        this.TARGET_ASYNC_NODE = "async-node";
        this.TARGET_ELECTRON_MAIN = "electron-main";
        this.TARGET_ELECTRON_RENDERER = "electron-renderer";
        this.TARGET_NODE = "node";
        this.TARGET_NODE_WEBKIT = "node-webkit";
        this.TARGET_WEB = "web";
        this.TARGET_WEBWORKER = "webworker";
        this.allowedDEVTOOLS = [ "eval", "cheap-eval-source-map", "cheap-source-map", "cheap-module-eval-source-map", "cheap-module-source-map", "eval-source-map", "source-map", "nosources-source-map"];
        this.DEVTOOL_XEVAL = "eval";
        this.DEVTOOL_CHEAP_EVAL_SOURCE_MAP = "cheap-eval-source-map";
        this.DEVTOOL_CHEAP_SOURCE_MAP = "cheap-source-map";
        this.DEVTOOL_CHEAP_MODULE_EVAL_SOURCE_MAP = "cheap-module-eval-source-map";
        this.DEVTOOL_CHEAP_MODULE_SOURCE_MAP = "cheap-module-source-map";
        this.DEVTOOL_EVAL_SOURCE_MAP = "eval-source-map";
        this.DEVTOOL_SOURCE_MAP = "source-map";
        this.DEVTOOL_NOSOURCES_SOURCE_MAP = "nosources-source-map";
        this.wzElement = "webpack";
        this.build = "development";
        this.config = "none";
        // https://webpack.js.org/configuration/target/
        this.target = "web";
        /**
             The context is an absolute string to the directory that contains the entry files.
             The base directory, an absolute path, for resolving entry points and loaders from configuration.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.context = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.devtool = null
        // relation entry
        this.entry = null;
        // relation output
        this.output = null;
        // relation resolve
        this.resolve = null;
        // relation module
        this.module = null;
        // relation plugin
        this.plugins = [];
        // relation external
        this.externals = [];
        // relation devServer
        this.devServer = null;
        // relation watch
        this.watch = null;
        // relation watchOptions
        this.watchOptions = null;
        // relation feature
        this.features = [];
    }
    webpack.BUILD_DEVELOPMENT = "development";
    webpack.BUILD_PRODUCTION = "production";
    webpack.CONFIG_NONE = "none";
    webpack.CONFIG_REACT = "react";
    webpack.TARGET_ASYNC_NODE = "async-node";
    webpack.TARGET_ELECTRON_MAIN = "electron-main";
    webpack.TARGET_ELECTRON_RENDERER = "electron-renderer";
    webpack.TARGET_NODE = "node";
    webpack.TARGET_NODE_WEBKIT = "node-webkit";
    webpack.TARGET_WEB = "web";
    webpack.TARGET_WEBWORKER = "webworker";
    webpack.DEVTOOL_XEVAL = "eval";
    webpack.DEVTOOL_CHEAP_EVAL_SOURCE_MAP = "cheap-eval-source-map";
    webpack.DEVTOOL_CHEAP_SOURCE_MAP = "cheap-source-map";
    webpack.DEVTOOL_CHEAP_MODULE_EVAL_SOURCE_MAP = "cheap-module-eval-source-map";
    webpack.DEVTOOL_CHEAP_MODULE_SOURCE_MAP = "cheap-module-source-map";
    webpack.DEVTOOL_EVAL_SOURCE_MAP = "eval-source-map";
    webpack.DEVTOOL_SOURCE_MAP = "source-map";
    webpack.DEVTOOL_NOSOURCES_SOURCE_MAP = "nosources-source-map";
    webpack.prototype.addPlugin = function(name,sourceLineInfo) {
        var retval = new md.plugin(name, sourceLineInfo);
        retval.wzParent = this;
        this.plugins.push(retval);
        return retval;
    }
    webpack.prototype.getPlugin = function(name) {
        var found = null;
        this.plugins.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    webpack.prototype.addExternal = function(name,sourceLineInfo) {
        var retval = new md.external(name, sourceLineInfo);
        retval.wzParent = this;
        this.externals.push(retval);
        return retval;
    }
    webpack.prototype.getExternal = function(name) {
        var found = null;
        this.externals.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    webpack.prototype.addFeature = function(name,sourceLineInfo) {
        var retval = new md.feature(name, sourceLineInfo);
        retval.wzParent = this;
        this.features.push(retval);
        return retval;
    }
    webpack.prototype.getFeature = function(name) {
        var found = null;
        this.features.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    webpack.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    webpack.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.build)) {
            result["build"] = this.build;
        }
        if (!isEmpty(this.config)) {
            result["config"] = this.config;
        }
        if (!isEmpty(this.target)) {
            result["target"] = this.target;
        }
        if (!isEmpty(this.context)) {
            result["context"] = this.context;
        }
        if (!isEmpty(this.devtool)) {
            result["devtool"] = this.devtool;
        }
    }
    webpack.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.entry != null) {
            result['entry'] = this.entry.toJson();
        }
        else {
            result['entry'] = null;
        }
        if (this.output != null) {
            result['output'] = this.output.toJson();
        }
        else {
            result['output'] = null;
        }
        if (this.resolve != null) {
            result['resolve'] = this.resolve.toJson();
        }
        else {
            result['resolve'] = null;
        }
        if (this.module != null) {
            result['module'] = this.module.toJson();
        }
        else {
            result['module'] = null;
        }
        items = [];
        var i, i_len=this.plugins.length, item;
        for (i=0; i<i_len; i++) {
            item = this.plugins[i];
            items.push(item.toJson());
        }
        result['plugins'] = items;
        items = [];
        var i, i_len=this.externals.length, item;
        for (i=0; i<i_len; i++) {
            item = this.externals[i];
            items.push(item.toJson());
        }
        result['externals'] = items;
        if (this.devServer != null) {
            result['devServer'] = this.devServer.toJson();
        }
        else {
            result['devServer'] = null;
        }
        if (this.watch != null) {
            result['watch'] = this.watch.toJson();
        }
        else {
            result['watch'] = null;
        }
        if (this.watchOptions != null) {
            result['watchOptions'] = this.watchOptions.toJson();
        }
        else {
            result['watchOptions'] = null;
        }
        items = [];
        var i, i_len=this.features.length, item;
        for (i=0; i<i_len; i++) {
            item = this.features[i];
            items.push(item.toJson());
        }
        result['features'] = items;
    }
    webpack.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'b') {
            if (name === 'build') {
                this.build = child.v; return true;
            }
        }
        if (_l == 5 && _ch == 'e') {
            if (name === 'entry') {
                return this.wzLoadOneToOne(child, md.entry, 'entry');
            }
        }
        if (_l == 5 && _ch == 'w') {
            if (name === 'watch') {
                return this.wzLoadOneToOne(child, md.watch, 'watch');
            }
        }
        if (_l == 6 && _ch == 'c') {
            if (name === 'config') {
                this.config = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 'm') {
            if (name === 'module') {
                return this.wzLoadOneToOne(child, md.module, 'module');
            }
        }
        if (_l == 6 && _ch == 'o') {
            if (name === 'output') {
                return this.wzLoadOneToOne(child, md.output, 'output');
            }
        }
        if (_l == 6 && _ch == 'p') {
            if (name === 'plugin') {
                return this.wzLoadToChildColl(child, md.plugin, this.plugins);
            }
        }
        if (_l == 6 && _ch == 't') {
            if (name === 'target') {
                this.target = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'c') {
            if (name === 'context') {
                this.context = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'd') {
            if (name === 'devtool') {
                this.devtool = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'f') {
            if (name === 'feature') {
                return this.wzLoadToChildColl(child, md.feature, this.features);
            }
        }
        if (_l == 7 && _ch == 'r') {
            if (name === 'resolve') {
                return this.wzLoadOneToOne(child, md.resolve, 'resolve');
            }
        }
        if (_l == 8 && _ch == 'e') {
            if (name === 'external') {
                return this.wzLoadToChildColl(child, md.external, this.externals);
            }
        }
        if (_l == 9 && _ch == 'd') {
            if (name === 'devserver') {
                return this.wzLoadOneToOne(child, md.devServer, 'devServer');
            }
        }
        if (_l == 12 && _ch == 'w') {
            if (name === 'watchoptions') {
                return this.wzLoadOneToOne(child, md.watchOptions, 'watchOptions');
            }
        }
        if (_l == 13 && _ch == 'w') {
            if (name === 'watch-options') {
                return this.wzLoadOneToOne(child, md.watchOptions, 'watchOptions');
            }
        }
        ok = md.webpackitem.prototype.loadChild.call(this, child);
        return ok;
    }
    webpack.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.webpackException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    webpack.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("webpack", "build", this.build, this.allowedBUILDS, this);
        ctx.verifyEnum("webpack", "config", this.config, this.allowedCONFIGS, this);
        ctx.verifyEnum("webpack", "target", this.target, this.allowedTARGETS, this);
        ctx.verifyEnum("webpack", "devtool", this.devtool, this.allowedDEVTOOLS, this);
        if (this.entry != null) {
            this.entry.wzVerify(ctx);
        }
        if (this.output != null) {
            this.output.wzVerify(ctx);
        }
        if (this.resolve != null) {
            this.resolve.wzVerify(ctx);
        }
        if (this.module != null) {
            this.module.wzVerify(ctx);
        }
        var i, i_len=this.plugins.length, item;
        for (i=0; i<i_len; i++) {
            item = this.plugins[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.externals.length, item;
        for (i=0; i<i_len; i++) {
            item = this.externals[i];
            item.wzVerify(ctx);
        }
        if (this.devServer != null) {
            this.devServer.wzVerify(ctx);
        }
        if (this.watch != null) {
            this.watch.wzVerify(ctx);
        }
        if (this.watchOptions != null) {
            this.watchOptions.wzVerify(ctx);
        }
        var i, i_len=this.features.length, item;
        for (i=0; i<i_len; i++) {
            item = this.features[i];
            item.wzVerify(ctx);
        }
        md.webpackitem.prototype.wzVerify.call(this, ctx);
    }
    webpack.prototype.wzInitialize = function(ctx) {
        if (this.entry != null) {
            this.entry.wzInitialize(ctx);
        }
        if (this.output != null) {
            this.output.wzInitialize(ctx);
        }
        if (this.resolve != null) {
            this.resolve.wzInitialize(ctx);
        }
        if (this.module != null) {
            this.module.wzInitialize(ctx);
        }
        var i, i_len=this.plugins.length, item;
        for (i=0; i<i_len; i++) {
            item = this.plugins[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.externals.length, item;
        for (i=0; i<i_len; i++) {
            item = this.externals[i];
            item.wzInitialize(ctx);
        }
        if (this.devServer != null) {
            this.devServer.wzInitialize(ctx);
        }
        if (this.watch != null) {
            this.watch.wzInitialize(ctx);
        }
        if (this.watchOptions != null) {
            this.watchOptions.wzInitialize(ctx);
        }
        var i, i_len=this.features.length, item;
        for (i=0; i<i_len; i++) {
            item = this.features[i];
            item.wzInitialize(ctx);
        }
        if (this.config === 'react') {
            this.setReactConfig();
        }
        this.facets = [];
        if (this.context && this.context.length > 0) {
            this.facets.push({
                name: 'context', 
                value: "'" + this.context + "'"
            });
        }
        if (this.target && this.target.length > 0) {
            this.facets.push({
                name: 'target', 
                value: "'" + this.target + "'"
            });
        }
        if (this.devtool && this.devtool.length > 0) {
            this.facets.push({
                name: 'devtool', 
                value: "'" + this.devtool + "'"
            });
        }
        md.webpackitem.prototype.wzInitialize.call(this, ctx);
    }
    webpack.prototype.setReactConfig = function() {
    }
    return webpack;
})(webpackitem);


md.webpack = webpack;
// element feature
var feature = (function (webpackitem) {
    _inherits(feature, webpackitem);
    function feature(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(feature.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feature);
        this.wzElement = "feature";
    }
    feature.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feature.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feature.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
    }
    return feature;
})(webpackitem);


md.feature = feature;
// element file
var file = (function (webpackitem) {
    _inherits(file, webpackitem);
    function file(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(file.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, file);
        this.wzElement = "file";
    }
    file.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    file.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    file.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
    }
    return file;
})(webpackitem);


md.file = file;
/**
    element entry
     https://webpack.js.org/configuration/entry/
*/
var entry = (function (webpackitem) {
    _inherits(entry, webpackitem);
    function entry(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(entry.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, entry);
        this.wzElement = "entry";
        this.watch = false;
        // relation file
        this.files = [];
        // relation entryChunk
        this.entryChunks = [];
    }
    entry.prototype.addFile = function(name,sourceLineInfo) {
        var retval = new md.file(name, sourceLineInfo);
        retval.wzParent = this;
        this.files.push(retval);
        return retval;
    }
    entry.prototype.getFile = function(name) {
        var found = null;
        this.files.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    entry.prototype.addEntryChunk = function(name,sourceLineInfo) {
        var retval = new md.entryChunk(name, sourceLineInfo);
        retval.wzParent = this;
        this.entryChunks.push(retval);
        return retval;
    }
    entry.prototype.getEntryChunk = function(name) {
        var found = null;
        this.entryChunks.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    entry.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    entry.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        result["watch"] = this.watch;
    }
    entry.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.files.length, item;
        for (i=0; i<i_len; i++) {
            item = this.files[i];
            items.push(item.toJson());
        }
        result['files'] = items;
        items = [];
        var i, i_len=this.entryChunks.length, item;
        for (i=0; i<i_len; i++) {
            item = this.entryChunks[i];
            items.push(item.toJson());
        }
        result['entryChunks'] = items;
    }
    entry.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'f') {
            if (name === 'file') {
                return this.wzLoadToChildColl(child, md.file, this.files);
            }
        }
        if (_l == 5 && _ch == 'c') {
            if (name === 'chunk') {
                return this.wzLoadToChildColl(child, md.entryChunk, this.entryChunks);
            }
        }
        if (_l == 5 && _ch == 'w') {
            if (name === 'watch') {
                this.watch = parseboolean(child.v, true, child); return true;
            }
        }
        ok = md.webpackitem.prototype.loadChild.call(this, child);
        return ok;
    }
    entry.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.webpackException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    entry.prototype.wzVerify = function(ctx) {
        var i, i_len=this.files.length, item;
        for (i=0; i<i_len; i++) {
            item = this.files[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.entryChunks.length, item;
        for (i=0; i<i_len; i++) {
            item = this.entryChunks[i];
            item.wzVerify(ctx);
        }
        md.webpackitem.prototype.wzVerify.call(this, ctx);
    }
    entry.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.files.length, item;
        for (i=0; i<i_len; i++) {
            item = this.files[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.entryChunks.length, item;
        for (i=0; i<i_len; i++) {
            item = this.entryChunks[i];
            item.wzInitialize(ctx);
        }
        if (this.entryChunks.length == 0) {
            this.value = "'" + this.wzName + "'";
            if (this.files.length > 0) {
                this.value = '[ ' + this.files.join(', ') + ' ]';
            }
        }
        md.webpackitem.prototype.wzInitialize.call(this, ctx);
    }
    return entry;
})(webpackitem);


md.entry = entry;
/**
    element entryChunk
     https://webpack.js.org/concepts/entry-points/
*/
var entryChunk = (function (webpackBase) {
    _inherits(entryChunk, webpackBase);
    function entryChunk(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(entryChunk.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, entryChunk);
        this.wzElement = "entryChunk";
        // relation file
        this.files = [];
    }
    entryChunk.prototype.addFile = function(name,sourceLineInfo) {
        var retval = new md.file(name, sourceLineInfo);
        retval.wzParent = this;
        this.files.push(retval);
        return retval;
    }
    entryChunk.prototype.getFile = function(name) {
        var found = null;
        this.files.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    entryChunk.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    entryChunk.prototype.toJsonProperties = function(result) {
        md.webpackBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    entryChunk.prototype.toJsonChildren = function(result) {
        md.webpackBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.files.length, item;
        for (i=0; i<i_len; i++) {
            item = this.files[i];
            items.push(item.toJson());
        }
        result['files'] = items;
    }
    entryChunk.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'f') {
            if (name === 'file') {
                return this.wzLoadToChildColl(child, md.file, this.files);
            }
        }
        return ok;
    }
    entryChunk.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.webpackException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    entryChunk.prototype.wzVerify = function(ctx) {
        var i, i_len=this.files.length, item;
        for (i=0; i<i_len; i++) {
            item = this.files[i];
            item.wzVerify(ctx);
        }
        md.webpackBase.prototype.wzVerify.call(this, ctx);
    }
    entryChunk.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.files.length, item;
        for (i=0; i<i_len; i++) {
            item = this.files[i];
            item.wzInitialize(ctx);
        }
        if (this.files.length == 1) {
            this.value = "'" + this.wzName + "'";
        }
        else if (this.files.length > 1) {
            value = '[ ' + this.files.join(', ') + ' ]';
        }
        md.webpackBase.prototype.wzInitialize.call(this, ctx);
    }
    return entryChunk;
})(webpackBase);


md.entryChunk = entryChunk;
/**
    element output
     https://webpack.js.org/configuration/output/
*/
var output = (function (webpackitem) {
    _inherits(output, webpackitem);
    function output(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(output.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, output);
        this.allowedCROSSORIGINLOADINGS = [ "false", "anonymous", "use-credentials"];
        this.CROSSORIGINLOADING_XFALSE = "false";
        this.CROSSORIGINLOADING_ANONYMOUS = "anonymous";
        this.CROSSORIGINLOADING_USE_CREDENTIALS = "use-credentials";
        this.allowedLIBRARYTARGETS = [ "var", "this", "window", "global", "commonjs", "commonjs2", "commonjs-module", "amd", "umd", "assign", "jsonp"];
        this.LIBRARYTARGET_XVAR = "var";
        this.LIBRARYTARGET_XTHIS = "this";
        this.LIBRARYTARGET_WINDOW = "window";
        this.LIBRARYTARGET_GLOBAL = "global";
        this.LIBRARYTARGET_COMMONJS = "commonjs";
        this.LIBRARYTARGET_COMMONJS2 = "commonjs2";
        this.LIBRARYTARGET_COMMONJS_MODULE = "commonjs-module";
        this.LIBRARYTARGET_AMD = "amd";
        this.LIBRARYTARGET_UMD = "umd";
        this.LIBRARYTARGET_ASSIGN = "assign";
        this.LIBRARYTARGET_JSONP = "jsonp";
        this.wzElement = "output";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.path = null
        // The output directory as an absolute path.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.pathExpr = null
        /**
             Tell webpack to include comments in bundles with information about the contained modules.
             This option defaults to false and should not be used in production,
             but it's very useful in development when reading the generated code.
        */
        this.pathInfo = false;
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.chunkFilename = null
        /**
             Only used when target is web, which uses JSONP for loading on-demand chunks,
             by adding script tags.
        */
        this.crossOriginLoading = "false";
        /**
             The hashing algorithm to use, defaults to 'md5'.
             All functions from Node.JS' crypto.createHash are supported.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.hashFunction = null
        /**
             The hashing algorithm to use, defaults to 'hex'.
             All functions from Node.JS' hash.digest are supported.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.hashDigest = null
        // The prefix length of the hash digest to use, defaults to 20.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.hashDigestLength = null
        // An optional salt to update the hash via Node.JS' hash.update.
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.hashSalt = null
        this.filename = "bundle.js";
        /**
             This is an important option when using on-demand-loading or loading external resources like images, files, etc. If an incorrect value is specified you'll receive 404 errors while loading these resources.
             This option specifies the public URL of the output directory when referenced in a browser. A relative URL is resolved relative to the HTML page (or <base> tag). Server-relative URLs, protocol-relative URLs or absolute URLs are also possible and sometimes required, i. e. when hosting assets on a CDN.
            
             The value of the option is prefixed to every URL created by the runtime or loaders. Because of this the value of this option ends with / in most cases.
             The default value is an empty string "".
            
             Simple rule: The URL of your output.path from the view of the HTML page.
             path: path.resolve(__dirname, "public/assets"),
             publicPath: "https://cdn.example.com/assets/"
            
             For this configuration:
             publicPath: "/assets/",
             chunkFilename: "[id].chunk.js"
             A request to a chunk will look like /assets/4.chunk.js.
            
             A loader outputting HTML might emit something like this:
             <link href="/assets/spinner.gif" />
            
             or when loading an image in CSS:
             background-image: url(/assets/spinner.gif);
            
             The webpack-dev-server also takes a hint from publicPath, using it to determine where to serve the output files from.
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.publicPath = null
        // https://webpack.js.org/guides/author-libraries/
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.library = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.libraryTarget = null
    }
    output.CROSSORIGINLOADING_XFALSE = "false";
    output.CROSSORIGINLOADING_ANONYMOUS = "anonymous";
    output.CROSSORIGINLOADING_USE_CREDENTIALS = "use-credentials";
    output.LIBRARYTARGET_XVAR = "var";
    output.LIBRARYTARGET_XTHIS = "this";
    output.LIBRARYTARGET_WINDOW = "window";
    output.LIBRARYTARGET_GLOBAL = "global";
    output.LIBRARYTARGET_COMMONJS = "commonjs";
    output.LIBRARYTARGET_COMMONJS2 = "commonjs2";
    output.LIBRARYTARGET_COMMONJS_MODULE = "commonjs-module";
    output.LIBRARYTARGET_AMD = "amd";
    output.LIBRARYTARGET_UMD = "umd";
    output.LIBRARYTARGET_ASSIGN = "assign";
    output.LIBRARYTARGET_JSONP = "jsonp";
    output.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    output.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.path)) {
            result["path"] = this.path;
        }
        if (!isEmpty(this.pathExpr)) {
            result["pathExpr"] = this.pathExpr;
        }
        result["pathInfo"] = this.pathInfo;
        if (!isEmpty(this.chunkFilename)) {
            result["chunkFilename"] = this.chunkFilename;
        }
        if (!isEmpty(this.crossOriginLoading)) {
            result["crossOriginLoading"] = this.crossOriginLoading;
        }
        if (!isEmpty(this.hashFunction)) {
            result["hashFunction"] = this.hashFunction;
        }
        if (!isEmpty(this.hashDigest)) {
            result["hashDigest"] = this.hashDigest;
        }
        if (!isEmpty(this.hashDigestLength)) {
            result["hashDigestLength"] = this.hashDigestLength;
        }
        if (!isEmpty(this.hashSalt)) {
            result["hashSalt"] = this.hashSalt;
        }
        if (!isEmpty(this.filename)) {
            result["filename"] = this.filename;
        }
        if (!isEmpty(this.publicPath)) {
            result["publicPath"] = this.publicPath;
        }
        if (!isEmpty(this.library)) {
            result["library"] = this.library;
        }
        if (!isEmpty(this.libraryTarget)) {
            result["libraryTarget"] = this.libraryTarget;
        }
    }
    output.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
    }
    output.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'p') {
            if (name === 'path') {
                this.path = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'l') {
            if (name === 'library') {
                this.library = child.v; return true;
            }
        }
        if (_l == 8 && _ch == 'f') {
            if (name === 'filename') {
                this.filename = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'h') {
            if (name === 'hash-salt') {
                this.hashSalt = child.v; return true;
            }
            else if (name === 'hash_salt') {
                this.hashSalt = child.v; return true;
            }
        }
        if (_l == 9 && _ch == 'p') {
            if (name === 'path-expr') {
                this.pathExpr = child.v; return true;
            }
            else if (name === 'path_expr') {
                this.pathExpr = child.v; return true;
            }
            else if (name === 'path-info') {
                this.pathInfo = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'path_info') {
                this.pathInfo = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 11 && _ch == 'h') {
            if (name === 'hash-digest') {
                this.hashDigest = child.v; return true;
            }
            else if (name === 'hash_digest') {
                this.hashDigest = child.v; return true;
            }
        }
        if (_l == 11 && _ch == 'p') {
            if (name === 'public-path') {
                this.publicPath = child.v; return true;
            }
            else if (name === 'public_path') {
                this.publicPath = child.v; return true;
            }
        }
        if (_l == 13 && _ch == 'h') {
            if (name === 'hash-function') {
                this.hashFunction = child.v; return true;
            }
            else if (name === 'hash_function') {
                this.hashFunction = child.v; return true;
            }
        }
        if (_l == 14 && _ch == 'c') {
            if (name === 'chunk-filename') {
                this.chunkFilename = child.v; return true;
            }
            else if (name === 'chunk_filename') {
                this.chunkFilename = child.v; return true;
            }
        }
        if (_l == 14 && _ch == 'l') {
            if (name === 'library-target') {
                this.libraryTarget = child.v; return true;
            }
            else if (name === 'library_target') {
                this.libraryTarget = child.v; return true;
            }
        }
        if (_l == 18 && _ch == 'h') {
            if (name === 'hash-digest-length') {
                this.hashDigestLength = child.v; return true;
            }
            else if (name === 'hash_digest_length') {
                this.hashDigestLength = child.v; return true;
            }
        }
        if (_l == 20 && _ch == 'c') {
            if (name === 'cross-origin-loading') {
                this.crossOriginLoading = child.v; return true;
            }
            else if (name === 'cross_origin_loading') {
                this.crossOriginLoading = child.v; return true;
            }
        }
        ok = md.webpackitem.prototype.loadChild.call(this, child);
        return ok;
    }
    output.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.webpackException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    output.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("output", "crossOriginLoading", this.crossOriginLoading, this.allowedCROSSORIGINLOADINGS, this);
        ctx.verifyEnum("output", "libraryTarget", this.libraryTarget, this.allowedLIBRARYTARGETS, this);
        md.webpackitem.prototype.wzVerify.call(this, ctx);
    }
    output.prototype.wzInitialize = function(ctx) {
        this.facets = [];
        if (this.path && this.path.length > 0) {
            this.facets.push({
                name: 'path', 
                value: "'" + this.path + "'"
            });
        }
        if (this.pathExpr && this.pathExpr.length > 0) {
            this.facets.push({
                name: 'path', 
                value: this.pathExpr
            });
        }
        if (this.chunkFilename && this.chunkFilename.length > 0) {
            this.facets.push({
                name: 'chunkFilename', 
                value: "'" + this.chunkFilename + "'"
            });
        }
        if (this.filename && this.filename.length > 0) {
            this.facets.push({
                name: 'filename', 
                value: "'" + this.filename + "'"
            });
        }
        if (this.publicPath && this.publicPath.length > 0) {
            this.facets.push({
                name: 'publicPath', 
                value: "'" + this.publicPath + "'"
            });
        }
        if (this.library && this.library.length > 0) {
            this.facets.push({
                name: 'library', 
                value: "'" + this.library + "'"
            });
        }
        if (this.libraryTarget && this.libraryTarget.length > 0) {
            this.facets.push({
                name: 'libraryTarget', 
                value: "'" + this.libraryTarget + "'"
            });
        }
        md.webpackitem.prototype.wzInitialize.call(this, ctx);
    }
    return output;
})(webpackitem);


md.output = output;
/**
    element resolve
     https://webpack.js.org/configuration/resolve/
*/
var resolve = (function (webpackitem) {
    _inherits(resolve, webpackitem);
    function resolve(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(resolve.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, resolve);
        this.wzElement = "resolve";
        // relation resolveAlias
        this.resolveAliases = [];
        // relation resolveExtension
        this.resolveExtensions = [];
        // relation resolveMainField
        this.resolveMainFields = [];
        // relation resolveMainFile
        this.resolveMainFiles = [];
        // relation resolveModule
        this.resolveModules = [];
        // relation resolvePlugin
        this.resolvePlugins = [];
    }
    resolve.prototype.addResolveAlias = function(name,sourceLineInfo) {
        var retval = new md.resolveAlias(name, sourceLineInfo);
        retval.wzParent = this;
        this.resolveAliases.push(retval);
        return retval;
    }
    resolve.prototype.getResolveAlias = function(name) {
        var found = null;
        this.resolveAliases.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    resolve.prototype.addResolveExtension = function(name,sourceLineInfo) {
        var retval = new md.resolveExtension(name, sourceLineInfo);
        retval.wzParent = this;
        this.resolveExtensions.push(retval);
        return retval;
    }
    resolve.prototype.getResolveExtension = function(name) {
        var found = null;
        this.resolveExtensions.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    resolve.prototype.addResolveMainField = function(name,sourceLineInfo) {
        var retval = new md.resolveMainField(name, sourceLineInfo);
        retval.wzParent = this;
        this.resolveMainFields.push(retval);
        return retval;
    }
    resolve.prototype.getResolveMainField = function(name) {
        var found = null;
        this.resolveMainFields.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    resolve.prototype.addResolveMainFile = function(name,sourceLineInfo) {
        var retval = new md.resolveMainFile(name, sourceLineInfo);
        retval.wzParent = this;
        this.resolveMainFiles.push(retval);
        return retval;
    }
    resolve.prototype.getResolveMainFile = function(name) {
        var found = null;
        this.resolveMainFiles.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    resolve.prototype.addResolveModule = function(name,sourceLineInfo) {
        var retval = new md.resolveModule(name, sourceLineInfo);
        retval.wzParent = this;
        this.resolveModules.push(retval);
        return retval;
    }
    resolve.prototype.getResolveModule = function(name) {
        var found = null;
        this.resolveModules.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    resolve.prototype.addResolvePlugin = function(name,sourceLineInfo) {
        var retval = new md.resolvePlugin(name, sourceLineInfo);
        retval.wzParent = this;
        this.resolvePlugins.push(retval);
        return retval;
    }
    resolve.prototype.getResolvePlugin = function(name) {
        var found = null;
        this.resolvePlugins.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    resolve.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    resolve.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    resolve.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.resolveAliases.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resolveAliases[i];
            items.push(item.toJson());
        }
        result['resolveAliases'] = items;
        items = [];
        var i, i_len=this.resolveExtensions.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resolveExtensions[i];
            items.push(item.toJson());
        }
        result['resolveExtensions'] = items;
        items = [];
        var i, i_len=this.resolveMainFields.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resolveMainFields[i];
            items.push(item.toJson());
        }
        result['resolveMainFields'] = items;
        items = [];
        var i, i_len=this.resolveMainFiles.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resolveMainFiles[i];
            items.push(item.toJson());
        }
        result['resolveMainFiles'] = items;
        items = [];
        var i, i_len=this.resolveModules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resolveModules[i];
            items.push(item.toJson());
        }
        result['resolveModules'] = items;
        items = [];
        var i, i_len=this.resolvePlugins.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resolvePlugins[i];
            items.push(item.toJson());
        }
        result['resolvePlugins'] = items;
    }
    resolve.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'a') {
            if (name === 'alias') {
                return this.wzLoadToChildColl(child, md.resolveAlias, this.resolveAliases);
            }
        }
        if (_l == 6 && _ch == 'm') {
            if (name === 'module') {
                return this.wzLoadToChildColl(child, md.resolveModule, this.resolveModules);
            }
        }
        if (_l == 6 && _ch == 'p') {
            if (name === 'plugin') {
                return this.wzLoadToChildColl(child, md.resolvePlugin, this.resolvePlugins);
            }
        }
        if (_l == 8 && _ch == 'm') {
            if (name === 'mainfile') {
                return this.wzLoadToChildColl(child, md.resolveMainFile, this.resolveMainFiles);
            }
        }
        if (_l == 9 && _ch == 'e') {
            if (name === 'extension') {
                return this.wzLoadToChildColl(child, md.resolveExtension, this.resolveExtensions);
            }
        }
        if (_l == 9 && _ch == 'm') {
            if (name === 'mainfield') {
                return this.wzLoadToChildColl(child, md.resolveMainField, this.resolveMainFields);
            }
            else if (name === 'main-file') {
                return this.wzLoadToChildColl(child, md.resolveMainFile, this.resolveMainFiles);
            }
        }
        if (_l == 10 && _ch == 'm') {
            if (name === 'main-field') {
                return this.wzLoadToChildColl(child, md.resolveMainField, this.resolveMainFields);
            }
        }
        ok = md.webpackitem.prototype.loadChild.call(this, child);
        return ok;
    }
    resolve.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.webpackException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    resolve.prototype.wzVerify = function(ctx) {
        var i, i_len=this.resolveAliases.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resolveAliases[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.resolveExtensions.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resolveExtensions[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.resolveMainFields.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resolveMainFields[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.resolveMainFiles.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resolveMainFiles[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.resolveModules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resolveModules[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.resolvePlugins.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resolvePlugins[i];
            item.wzVerify(ctx);
        }
        md.webpackitem.prototype.wzVerify.call(this, ctx);
    }
    resolve.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.resolveAliases.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resolveAliases[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.resolveExtensions.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resolveExtensions[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.resolveMainFields.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resolveMainFields[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.resolveMainFiles.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resolveMainFiles[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.resolveModules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resolveModules[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.resolvePlugins.length, item;
        for (i=0; i<i_len; i++) {
            item = this.resolvePlugins[i];
            item.wzInitialize(ctx);
        }
        this.mainFieldsOut = stringifyArrayValue(this.resolveMainFields);
        this.mainFiles = stringifyArrayValue(this.resolveMainFiles);
        this.extensionsOut = stringifyArrayValue(this.resolveExtensions);
        md.webpackitem.prototype.wzInitialize.call(this, ctx);
    }
    return resolve;
})(webpackitem);


md.resolve = resolve;
// element resolveAlias
var resolveAlias = (function (webpackitem) {
    _inherits(resolveAlias, webpackitem);
    function resolveAlias(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(resolveAlias.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, resolveAlias);
        this.wzElement = "resolveAlias";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.path = null
    }
    resolveAlias.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    resolveAlias.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.path)) {
            result["path"] = this.path;
        }
    }
    resolveAlias.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
    }
    resolveAlias.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'p') {
            if (name === 'path') {
                this.path = child.v; return true;
            }
        }
        ok = md.webpackitem.prototype.loadChild.call(this, child);
        return ok;
    }
    resolveAlias.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.webpackException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return resolveAlias;
})(webpackitem);


md.resolveAlias = resolveAlias;
/**
    element resolveMainField
     When importing from an npm package, e.g. import * as D3 from "d3",
     this option will determine which fields in it's package.json are checked.
     The default values will vary based upon the target specified in your webpack configuration.
*/
var resolveMainField = (function (webpackitem) {
    _inherits(resolveMainField, webpackitem);
    function resolveMainField(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(resolveMainField.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, resolveMainField);
        this.wzElement = "resolveMainField";
    }
    resolveMainField.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    resolveMainField.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    resolveMainField.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
    }
    return resolveMainField;
})(webpackitem);


md.resolveMainField = resolveMainField;
// element resolveMainFile
var resolveMainFile = (function (webpackitem) {
    _inherits(resolveMainFile, webpackitem);
    function resolveMainFile(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(resolveMainFile.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, resolveMainFile);
        this.wzElement = "resolveMainFile";
    }
    resolveMainFile.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    resolveMainFile.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    resolveMainFile.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
    }
    return resolveMainFile;
})(webpackitem);


md.resolveMainFile = resolveMainFile;
// element resolveModule
var resolveModule = (function (webpackitem) {
    _inherits(resolveModule, webpackitem);
    function resolveModule(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(resolveModule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, resolveModule);
        this.wzElement = "resolveModule";
    }
    resolveModule.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    resolveModule.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    resolveModule.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
    }
    return resolveModule;
})(webpackitem);


md.resolveModule = resolveModule;
// element resolvePlugin
var resolvePlugin = (function (webpackitem) {
    _inherits(resolvePlugin, webpackitem);
    function resolvePlugin(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(resolvePlugin.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, resolvePlugin);
        this.wzElement = "resolvePlugin";
    }
    resolvePlugin.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    resolvePlugin.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    resolvePlugin.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
    }
    return resolvePlugin;
})(webpackitem);


md.resolvePlugin = resolvePlugin;
// element resolveExtension
var resolveExtension = (function (webpackitem) {
    _inherits(resolveExtension, webpackitem);
    function resolveExtension(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(resolveExtension.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, resolveExtension);
        this.wzElement = "resolveExtension";
    }
    resolveExtension.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    resolveExtension.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    resolveExtension.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
    }
    return resolveExtension;
})(webpackitem);


md.resolveExtension = resolveExtension;
/**
    element module
     https://webpack.js.org/configuration/module/
*/
var module = (function (webpackitem) {
    _inherits(module, webpackitem);
    function module(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(module.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, module);
        this.wzElement = "module";
        /**
             Prevent webpack from parsing any files matching the given regular expression(s).
             Ignored files should not have calls to import, require, define or any other importing mechanism.
             This can boost build performance when ignoring large libraries.
             Example
             noParse: /jquery|lodash/
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.noParse = null
        // relation ruleParser
        this.ruleParser = null;
        // relation moduleRule
        this.moduleRules = [];
    }
    module.prototype.addModuleRule = function(name,sourceLineInfo) {
        var retval = new md.moduleRule(name, sourceLineInfo);
        retval.wzParent = this;
        this.moduleRules.push(retval);
        return retval;
    }
    module.prototype.getModuleRule = function(name) {
        var found = null;
        this.moduleRules.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    module.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    module.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        result["noParse"] = this.noParse;
    }
    module.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.ruleParser != null) {
            result['ruleParser'] = this.ruleParser.toJson();
        }
        else {
            result['ruleParser'] = null;
        }
        items = [];
        var i, i_len=this.moduleRules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.moduleRules[i];
            items.push(item.toJson());
        }
        result['moduleRules'] = items;
    }
    module.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'r') {
            if (name === 'rule') {
                return this.wzLoadToChildColl(child, md.moduleRule, this.moduleRules);
            }
        }
        if (_l == 6 && _ch == 'p') {
            if (name === 'parser') {
                return this.wzLoadOneToOne(child, md.ruleParser, 'ruleParser');
            }
        }
        if (_l == 8 && _ch == 'n') {
            if (name === 'no-parse') {
                this.noParse = parseregexp(child.v, null, child); return true;
            }
            else if (name === 'no_parse') {
                this.noParse = parseregexp(child.v, null, child); return true;
            }
        }
        ok = md.webpackitem.prototype.loadChild.call(this, child);
        return ok;
    }
    module.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.webpackException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    module.prototype.wzVerify = function(ctx) {
        if (this.ruleParser != null) {
            this.ruleParser.wzVerify(ctx);
        }
        var i, i_len=this.moduleRules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.moduleRules[i];
            item.wzVerify(ctx);
        }
        md.webpackitem.prototype.wzVerify.call(this, ctx);
    }
    module.prototype.wzInitialize = function(ctx) {
        if (this.ruleParser != null) {
            this.ruleParser.wzInitialize(ctx);
        }
        var i, i_len=this.moduleRules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.moduleRules[i];
            item.wzInitialize(ctx);
        }
        md.webpackitem.prototype.wzInitialize.call(this, ctx);
    }
    return module;
})(webpackitem);


md.module = module;
/**
    element ruleParser
     TODO node property to customize nodejs
*/
var ruleParser = (function (webpackitem) {
    _inherits(ruleParser, webpackitem);
    function ruleParser(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(ruleParser.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ruleParser);
        this.wzElement = "ruleParser";
        this.amd = true;
        this.commonjs = true;
        this.system = true;
        this.harmony = true;
        this.requireInclude = true;
        this.requireEnsure = true;
        this.requireContext = true;
        this.browserify = true;
        this.requireJs = true;
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.node = null
    }
    ruleParser.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    ruleParser.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        result["amd"] = this.amd;
        result["commonjs"] = this.commonjs;
        result["system"] = this.system;
        result["harmony"] = this.harmony;
        result["requireInclude"] = this.requireInclude;
        result["requireEnsure"] = this.requireEnsure;
        result["requireContext"] = this.requireContext;
        result["browserify"] = this.browserify;
        result["requireJs"] = this.requireJs;
        if (!isEmpty(this.node)) {
            result["node"] = this.node;
        }
    }
    ruleParser.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
    }
    ruleParser.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'a') {
            if (name === 'amd') {
                this.amd = parseboolean(child.v, null, child); return true;
            }
        }
        if (_l == 4 && _ch == 'n') {
            if (name === 'node') {
                this.node = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'system') {
                this.system = parseboolean(child.v, null, child); return true;
            }
        }
        if (_l == 7 && _ch == 'h') {
            if (name === 'harmony') {
                this.harmony = parseboolean(child.v, null, child); return true;
            }
        }
        if (_l == 8 && _ch == 'c') {
            if (name === 'commonjs') {
                this.commonjs = parseboolean(child.v, null, child); return true;
            }
        }
        if (_l == 9 && _ch == 'r') {
            if (name === 'requirejs') {
                this.requireJs = parseboolean(child.v, null, child); return true;
            }
        }
        if (_l == 10 && _ch == 'b') {
            if (name === 'browserify') {
                this.browserify = parseboolean(child.v, null, child); return true;
            }
        }
        if (_l == 13 && _ch == 'r') {
            if (name === 'requireensure') {
                this.requireEnsure = parseboolean(child.v, null, child); return true;
            }
        }
        if (_l == 14 && _ch == 'r') {
            if (name === 'requireinclude') {
                this.requireInclude = parseboolean(child.v, null, child); return true;
            }
            else if (name === 'requirecontext') {
                this.requireContext = parseboolean(child.v, null, child); return true;
            }
        }
        ok = md.webpackitem.prototype.loadChild.call(this, child);
        return ok;
    }
    ruleParser.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.webpackException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    return ruleParser;
})(webpackitem);


md.ruleParser = ruleParser;
/**
    element moduleRule
     In a Rule the properties test, include, exclude and resource are matched with the resource and the property issuer is matched with the issuer.
*/
var moduleRule = (function (webpackitem) {
    _inherits(moduleRule, webpackitem);
    function moduleRule(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(moduleRule.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, moduleRule);
        this.wzElement = "moduleRule";
        // relation moduleRuleTest
        this.moduleRuleTests = [];
        // relation moduleRuleInclude
        this.moduleRuleIncludes = [];
        // relation moduleRuleExclude
        this.moduleRuleExcludes = [];
        // relation moduleRuleUse
        this.moduleRuleUses = [];
    }
    moduleRule.prototype.addModuleRuleTest = function(name,sourceLineInfo) {
        var retval = new md.moduleRuleTest(name, sourceLineInfo);
        retval.wzParent = this;
        this.moduleRuleTests.push(retval);
        return retval;
    }
    moduleRule.prototype.getModuleRuleTest = function(name) {
        var found = null;
        this.moduleRuleTests.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    moduleRule.prototype.addModuleRuleInclude = function(name,sourceLineInfo) {
        var retval = new md.moduleRuleInclude(name, sourceLineInfo);
        retval.wzParent = this;
        this.moduleRuleIncludes.push(retval);
        return retval;
    }
    moduleRule.prototype.getModuleRuleInclude = function(name) {
        var found = null;
        this.moduleRuleIncludes.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    moduleRule.prototype.addModuleRuleExclude = function(name,sourceLineInfo) {
        var retval = new md.moduleRuleExclude(name, sourceLineInfo);
        retval.wzParent = this;
        this.moduleRuleExcludes.push(retval);
        return retval;
    }
    moduleRule.prototype.getModuleRuleExclude = function(name) {
        var found = null;
        this.moduleRuleExcludes.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    moduleRule.prototype.addModuleRuleUse = function(name,sourceLineInfo) {
        var retval = new md.moduleRuleUse(name, sourceLineInfo);
        retval.wzParent = this;
        this.moduleRuleUses.push(retval);
        return retval;
    }
    moduleRule.prototype.getModuleRuleUse = function(name) {
        var found = null;
        this.moduleRuleUses.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    moduleRule.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    moduleRule.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    moduleRule.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.moduleRuleTests.length, item;
        for (i=0; i<i_len; i++) {
            item = this.moduleRuleTests[i];
            items.push(item.toJson());
        }
        result['moduleRuleTests'] = items;
        items = [];
        var i, i_len=this.moduleRuleIncludes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.moduleRuleIncludes[i];
            items.push(item.toJson());
        }
        result['moduleRuleIncludes'] = items;
        items = [];
        var i, i_len=this.moduleRuleExcludes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.moduleRuleExcludes[i];
            items.push(item.toJson());
        }
        result['moduleRuleExcludes'] = items;
        items = [];
        var i, i_len=this.moduleRuleUses.length, item;
        for (i=0; i<i_len; i++) {
            item = this.moduleRuleUses[i];
            items.push(item.toJson());
        }
        result['moduleRuleUses'] = items;
    }
    moduleRule.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'u') {
            if (name === 'use') {
                return this.wzLoadToChildColl(child, md.moduleRuleUse, this.moduleRuleUses);
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'test') {
                return this.wzLoadToChildColl(child, md.moduleRuleTest, this.moduleRuleTests);
            }
        }
        if (_l == 7 && _ch == 'e') {
            if (name === 'exclude') {
                return this.wzLoadToChildColl(child, md.moduleRuleExclude, this.moduleRuleExcludes);
            }
        }
        if (_l == 7 && _ch == 'i') {
            if (name === 'include') {
                return this.wzLoadToChildColl(child, md.moduleRuleInclude, this.moduleRuleIncludes);
            }
        }
        ok = md.webpackitem.prototype.loadChild.call(this, child);
        return ok;
    }
    moduleRule.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.webpackException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    moduleRule.prototype.wzVerify = function(ctx) {
        var i, i_len=this.moduleRuleTests.length, item;
        for (i=0; i<i_len; i++) {
            item = this.moduleRuleTests[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.moduleRuleIncludes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.moduleRuleIncludes[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.moduleRuleExcludes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.moduleRuleExcludes[i];
            item.wzVerify(ctx);
        }
        var i, i_len=this.moduleRuleUses.length, item;
        for (i=0; i<i_len; i++) {
            item = this.moduleRuleUses[i];
            item.wzVerify(ctx);
        }
        md.webpackitem.prototype.wzVerify.call(this, ctx);
    }
    moduleRule.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.moduleRuleTests.length, item;
        for (i=0; i<i_len; i++) {
            item = this.moduleRuleTests[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.moduleRuleIncludes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.moduleRuleIncludes[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.moduleRuleExcludes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.moduleRuleExcludes[i];
            item.wzInitialize(ctx);
        }
        var i, i_len=this.moduleRuleUses.length, item;
        for (i=0; i<i_len; i++) {
            item = this.moduleRuleUses[i];
            item.wzInitialize(ctx);
        }
        this.testOut = stringifyArrayValue(this.moduleRuleTests);
        this.includeOut = stringifyArrayValue(this.moduleRuleIncludes);
        this.excludeOut = stringifyArrayValue(this.moduleRuleExcludes);
        md.webpackitem.prototype.wzInitialize.call(this, ctx);
    }
    return moduleRule;
})(webpackitem);


md.moduleRule = moduleRule;
// element moduleRuleTest
var moduleRuleTest = (function (webpackitem) {
    _inherits(moduleRuleTest, webpackitem);
    function moduleRuleTest(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(moduleRuleTest.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, moduleRuleTest);
        this.wzElement = "moduleRuleTest";
    }
    moduleRuleTest.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    moduleRuleTest.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    moduleRuleTest.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
    }
    return moduleRuleTest;
})(webpackitem);


md.moduleRuleTest = moduleRuleTest;
// element moduleRuleInclude
var moduleRuleInclude = (function (webpackitem) {
    _inherits(moduleRuleInclude, webpackitem);
    function moduleRuleInclude(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(moduleRuleInclude.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, moduleRuleInclude);
        this.wzElement = "moduleRuleInclude";
    }
    moduleRuleInclude.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    moduleRuleInclude.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    moduleRuleInclude.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
    }
    return moduleRuleInclude;
})(webpackitem);


md.moduleRuleInclude = moduleRuleInclude;
// element moduleRuleExclude
var moduleRuleExclude = (function (webpackitem) {
    _inherits(moduleRuleExclude, webpackitem);
    function moduleRuleExclude(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(moduleRuleExclude.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, moduleRuleExclude);
        this.wzElement = "moduleRuleExclude";
    }
    moduleRuleExclude.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    moduleRuleExclude.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    moduleRuleExclude.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
    }
    return moduleRuleExclude;
})(webpackitem);


md.moduleRuleExclude = moduleRuleExclude;
/**
    element moduleRuleUse
     A list of UseEntries which are applied to modules.
     Each entry specifies a loader to be used.
*/
var moduleRuleUse = (function (webpackitem) {
    _inherits(moduleRuleUse, webpackitem);
    function moduleRuleUse(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(moduleRuleUse.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, moduleRuleUse);
        this.wzElement = "moduleRuleUse";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.loader = null
        // relation jsProp
        // properties of the 'option' property
        this.jsProps = [];
    }
    moduleRuleUse.prototype.addJsProp = function(name,sourceLineInfo) {
        var retval = new md.jsProp(name, sourceLineInfo);
        retval.wzParent = this;
        this.jsProps.push(retval);
        return retval;
    }
    moduleRuleUse.prototype.getJsProp = function(name) {
        var found = null;
        this.jsProps.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    moduleRuleUse.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    moduleRuleUse.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.loader)) {
            result["loader"] = this.loader;
        }
    }
    moduleRuleUse.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.jsProps.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsProps[i];
            items.push(item.toJson());
        }
        result['jsProps'] = items;
    }
    moduleRuleUse.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, md.jsProp, this.jsProps);
            }
        }
        if (_l == 6 && _ch == 'l') {
            if (name === 'loader') {
                this.loader = child.v; return true;
            }
        }
        ok = md.webpackitem.prototype.loadChild.call(this, child);
        return ok;
    }
    moduleRuleUse.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.webpackException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    moduleRuleUse.prototype.wzVerify = function(ctx) {
        var i, i_len=this.jsProps.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsProps[i];
            item.wzVerify(ctx);
        }
        md.webpackitem.prototype.wzVerify.call(this, ctx);
    }
    moduleRuleUse.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.jsProps.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsProps[i];
            item.wzInitialize(ctx);
        }
        md.webpackitem.prototype.wzInitialize.call(this, ctx);
    }
    return moduleRuleUse;
})(webpackitem);


md.moduleRuleUse = moduleRuleUse;
/**
    element plugin
     https://webpack.js.org/configuration/plugins/
*/
var plugin = (function (webpackitem) {
    _inherits(plugin, webpackitem);
    function plugin(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(plugin.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, plugin);
        this.wzElement = "plugin";
        // relation jsProp
        this.jsProps = [];
    }
    plugin.prototype.addJsProp = function(name,sourceLineInfo) {
        var retval = new md.jsProp(name, sourceLineInfo);
        retval.wzParent = this;
        this.jsProps.push(retval);
        return retval;
    }
    plugin.prototype.getJsProp = function(name) {
        var found = null;
        this.jsProps.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    plugin.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    plugin.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    plugin.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.jsProps.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsProps[i];
            items.push(item.toJson());
        }
        result['jsProps'] = items;
    }
    plugin.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, md.jsProp, this.jsProps);
            }
        }
        ok = md.webpackitem.prototype.loadChild.call(this, child);
        return ok;
    }
    plugin.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.webpackException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    plugin.prototype.wzVerify = function(ctx) {
        var i, i_len=this.jsProps.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsProps[i];
            item.wzVerify(ctx);
        }
        md.webpackitem.prototype.wzVerify.call(this, ctx);
    }
    plugin.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.jsProps.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsProps[i];
            item.wzInitialize(ctx);
        }
        this.name = this.getTypeName(this.wzName);
        md.webpackitem.prototype.wzInitialize.call(this, ctx);
    }
    plugin.prototype.getTypeName = function(name) {
        if (name === 'aggressive-merging') {
            return "AggressiveMergingPlugin";
        }
        else {
            return name;
        }
    }
    return plugin;
})(webpackitem);


md.plugin = plugin;
// element devServer
var devServer = (function (webpackitem) {
    _inherits(devServer, webpackitem);
    function devServer(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(devServer.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, devServer);
        this.allowedCLIENTLOGLEVELS = [ "none", "error", "warning", "info"];
        this.CLIENTLOGLEVEL_NONE = "none";
        this.CLIENTLOGLEVEL_ERROR = "error";
        this.CLIENTLOGLEVEL_WARNING = "warning";
        this.CLIENTLOGLEVEL_INFO = "info";
        this.wzElement = "devServer";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.contentBase = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.clientLogLevel = null
        this.compress = false;
        /**
             When using the HTML5 History API, the index.html page will likely have to be served in place of any 404 responses. Enable this by passing:
             historyApiFallback: true
        */
        this.historyApiFallback = false;
        /**
             Specify a host to use. By default this is localhost. If you want your server to be accessible externally, specify it like this:
             host: "0.0.0.0"
        */
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.host = null
        // Enable webpack's Hot Module Replacement feature:
        this.hot = false;
        // Enables Hot Module Replacement (see devServer.hot) without page refresh as fallback in case of build failures.
        this.hotOnly = false;
        // When lazy is enabled, the dev-server will only compile the bundle when it gets requested. This means that webpack will not watch any file changes. We call this lazy mode.
        this.lazy = false;
        this.inline = false;
        /**
             With noInfo enabled, messages like the webpack bundle information that is shown when starting up and after each save, will be hidden.
             Errors and warnings will still be shown.
        */
        this.noInfo = false;
        /**
             Shows a full-screen overlay in the browser when there are compiler errorss.
             Disabled by default. If you want to show only compiler errors:
        */
        this.overlayErrors = false;
        /**
             Shows a full-screen overlay in the browser when there are compiler warnings.
             Disabled by default.
        */
        this.overlayWarnings = false;
        this.port = 3000;
        this.progress = false;
        // relation devServerProxy
        this.devServerProxy = null;
        // relation stats
        this.stats = null;
    }
    devServer.CLIENTLOGLEVEL_NONE = "none";
    devServer.CLIENTLOGLEVEL_ERROR = "error";
    devServer.CLIENTLOGLEVEL_WARNING = "warning";
    devServer.CLIENTLOGLEVEL_INFO = "info";
    devServer.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    devServer.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        result["contentBase"] = this.contentBase;
        if (!isEmpty(this.clientLogLevel)) {
            result["clientLogLevel"] = this.clientLogLevel;
        }
        result["compress"] = this.compress;
        result["historyApiFallback"] = this.historyApiFallback;
        if (!isEmpty(this.host)) {
            result["host"] = this.host;
        }
        result["hot"] = this.hot;
        result["hotOnly"] = this.hotOnly;
        result["lazy"] = this.lazy;
        result["inline"] = this.inline;
        result["noInfo"] = this.noInfo;
        result["overlayErrors"] = this.overlayErrors;
        result["overlayWarnings"] = this.overlayWarnings;
        result["port"] = this.port;
        result["progress"] = this.progress;
    }
    devServer.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.devServerProxy != null) {
            result['devServerProxy'] = this.devServerProxy.toJson();
        }
        else {
            result['devServerProxy'] = null;
        }
        if (this.stats != null) {
            result['stats'] = this.stats.toJson();
        }
        else {
            result['stats'] = null;
        }
    }
    devServer.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 3 && _ch == 'h') {
            if (name === 'hot') {
                this.hot = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 4 && _ch == 'h') {
            if (name === 'host') {
                this.host = child.v; return true;
            }
        }
        if (_l == 4 && _ch == 'l') {
            if (name === 'lazy') {
                this.lazy = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 4 && _ch == 'p') {
            if (name === 'port') {
                this.port = parseinteger(child.v, null, child); return true;
            }
        }
        if (_l == 5 && _ch == 'p') {
            if (name === 'proxy') {
                return this.wzLoadOneToOne(child, md.devServerProxy, 'devServerProxy');
            }
        }
        if (_l == 5 && _ch == 's') {
            if (name === 'stats') {
                return this.wzLoadOneToOne(child, md.stats, 'stats');
            }
        }
        if (_l == 6 && _ch == 'i') {
            if (name === 'inline') {
                this.inline = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 7 && _ch == 'n') {
            if (name === 'no-info') {
                this.noInfo = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'no_info') {
                this.noInfo = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 8 && _ch == 'c') {
            if (name === 'compress') {
                this.compress = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 8 && _ch == 'h') {
            if (name === 'hot-only') {
                this.hotOnly = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'hot_only') {
                this.hotOnly = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 8 && _ch == 'p') {
            if (name === 'progress') {
                this.progress = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 9 && _ch == 'l') {
            if (name === 'log-level') {
                this.clientLogLevel = child.v; return true;
            }
            else if (name === 'log_level') {
                this.clientLogLevel = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 'c') {
            if (name === 'content-base') {
                this.contentBase = parsecode(child.v, null, child); return true;
            }
            else if (name === 'content_base') {
                this.contentBase = parsecode(child.v, null, child); return true;
            }
        }
        if (_l == 14 && _ch == 'o') {
            if (name === 'overlay-errors') {
                this.overlayErrors = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'overlay_errors') {
                this.overlayErrors = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 16 && _ch == 'o') {
            if (name === 'overlay-warnings') {
                this.overlayWarnings = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'overlay_warnings') {
                this.overlayWarnings = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 20 && _ch == 'h') {
            if (name === 'history-api-fallback') {
                this.historyApiFallback = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'history_api_fallback') {
                this.historyApiFallback = parseboolean(child.v, true, child); return true;
            }
        }
        ok = md.webpackitem.prototype.loadChild.call(this, child);
        return ok;
    }
    devServer.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.webpackException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    devServer.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("devServer", "clientLogLevel", this.clientLogLevel, this.allowedCLIENTLOGLEVELS, this);
        if (this.devServerProxy != null) {
            this.devServerProxy.wzVerify(ctx);
        }
        if (this.stats != null) {
            this.stats.wzVerify(ctx);
        }
        md.webpackitem.prototype.wzVerify.call(this, ctx);
    }
    devServer.prototype.wzInitialize = function(ctx) {
        if (this.devServerProxy != null) {
            this.devServerProxy.wzInitialize(ctx);
        }
        if (this.stats != null) {
            this.stats.wzInitialize(ctx);
        }
        this.facets = [];
        if (this.contentBase && this.contentBase.length > 0) {
            this.facets.push({
                name: 'contentBase', 
                value: "'" + this.contentBase + "'"
            });
        }
        if (this.clientLogLevel && this.clientLogLevel.length > 0) {
            this.facets.push({
                name: 'clientLogLevel', 
                value: this.clientLogLevel
            });
        }
        if (this.compress) {
            if (this.true && this.true.length > 0) {
                this.facets.push({
                    name: 'compress', 
                    value: this.true
                });
            }
        }
        if (this.historyApiFallback) {
            if (this.true && this.true.length > 0) {
                this.facets.push({
                    name: 'historyApiFallback', 
                    value: this.true
                });
            }
        }
        if (this.host && this.host.length > 0) {
            this.facets.push({
                name: 'host', 
                value: "'" + this.host + "'"
            });
        }
        if (this.hot) {
            if (this.true && this.true.length > 0) {
                this.facets.push({
                    name: 'hot', 
                    value: this.true
                });
            }
        }
        if (this.hotOnly) {
            if (this.true && this.true.length > 0) {
                this.facets.push({
                    name: 'hotOnly', 
                    value: this.true
                });
            }
        }
        if (this.lazy) {
            if (this.true && this.true.length > 0) {
                this.facets.push({
                    name: 'lazy', 
                    value: this.true
                });
            }
        }
        if (this.inline) {
            if (this.true && this.true.length > 0) {
                this.facets.push({
                    name: 'inline', 
                    value: this.true
                });
            }
        }
        if (this.noInfo) {
            if (this.true && this.true.length > 0) {
                this.facets.push({
                    name: 'noInfo', 
                    value: this.true
                });
            }
        }
        if (this.port && this.port.length > 0) {
            this.facets.push({
                name: 'port', 
                value: "'" + this.port + "'"
            });
        }
        if (this.progress) {
            if (this.true && this.true.length > 0) {
                this.facets.push({
                    name: 'progress', 
                    value: this.true
                });
            }
        }
        md.webpackitem.prototype.wzInitialize.call(this, ctx);
    }
    return devServer;
})(webpackitem);


md.devServer = devServer;
// element devServerProxy
var devServerProxy = (function (webpackitem) {
    _inherits(devServerProxy, webpackitem);
    function devServerProxy(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(devServerProxy.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, devServerProxy);
        this.wzElement = "devServerProxy";
        // relation jsProp
        this.jsProps = [];
    }
    devServerProxy.prototype.addJsProp = function(name,sourceLineInfo) {
        var retval = new md.jsProp(name, sourceLineInfo);
        retval.wzParent = this;
        this.jsProps.push(retval);
        return retval;
    }
    devServerProxy.prototype.getJsProp = function(name) {
        var found = null;
        this.jsProps.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    devServerProxy.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    devServerProxy.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    devServerProxy.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.jsProps.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsProps[i];
            items.push(item.toJson());
        }
        result['jsProps'] = items;
    }
    devServerProxy.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, md.jsProp, this.jsProps);
            }
        }
        ok = md.webpackitem.prototype.loadChild.call(this, child);
        return ok;
    }
    devServerProxy.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.webpackException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    devServerProxy.prototype.wzVerify = function(ctx) {
        var i, i_len=this.jsProps.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsProps[i];
            item.wzVerify(ctx);
        }
        md.webpackitem.prototype.wzVerify.call(this, ctx);
    }
    devServerProxy.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.jsProps.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsProps[i];
            item.wzInitialize(ctx);
        }
        md.webpackitem.prototype.wzInitialize.call(this, ctx);
    }
    return devServerProxy;
})(webpackitem);


md.devServerProxy = devServerProxy;
/**
    element external
     https://webpack.js.org/configuration/externals/
*/
var external = (function (webpackitem) {
    _inherits(external, webpackitem);
    function external(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(external.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, external);
        this.wzElement = "external";
        // relation jsProp
        this.jsProps = [];
    }
    external.prototype.addJsProp = function(name,sourceLineInfo) {
        var retval = new md.jsProp(name, sourceLineInfo);
        retval.wzParent = this;
        this.jsProps.push(retval);
        return retval;
    }
    external.prototype.getJsProp = function(name) {
        var found = null;
        this.jsProps.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    external.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    external.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    external.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.jsProps.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsProps[i];
            items.push(item.toJson());
        }
        result['jsProps'] = items;
    }
    external.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, md.jsProp, this.jsProps);
            }
        }
        ok = md.webpackitem.prototype.loadChild.call(this, child);
        return ok;
    }
    external.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.webpackException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    external.prototype.wzVerify = function(ctx) {
        var i, i_len=this.jsProps.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsProps[i];
            item.wzVerify(ctx);
        }
        md.webpackitem.prototype.wzVerify.call(this, ctx);
    }
    external.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.jsProps.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsProps[i];
            item.wzInitialize(ctx);
        }
        md.webpackitem.prototype.wzInitialize.call(this, ctx);
    }
    return external;
})(webpackitem);


md.external = external;
// element watch
var watch = (function (webpackitem) {
    _inherits(watch, webpackitem);
    function watch(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(watch.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, watch);
        this.wzElement = "watch";
    }
    watch.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    watch.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    watch.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
    }
    return watch;
})(webpackitem);


md.watch = watch;
// element watchOptions
var watchOptions = (function (webpackitem) {
    _inherits(watchOptions, webpackitem);
    function watchOptions(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(watchOptions.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, watchOptions);
        this.wzElement = "watchOptions";
    }
    watchOptions.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    watchOptions.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    watchOptions.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
    }
    return watchOptions;
})(webpackitem);


md.watchOptions = watchOptions;
/**
    element performance
     https://webpack.js.org/configuration/performance/
*/
var performance = (function (webpackitem) {
    _inherits(performance, webpackitem);
    function performance(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(performance.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, performance);
        this.allowedHINTS = [ "false", "warning", "error"];
        this.HINTS_XFALSE = "false";
        this.HINTS_WARNING = "warning";
        this.HINTS_ERROR = "error";
        this.wzElement = "performance";
        this.hints = "false";
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.maxEntrypointSize = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.maxAssetSize = null
    }
    performance.HINTS_XFALSE = "false";
    performance.HINTS_WARNING = "warning";
    performance.HINTS_ERROR = "error";
    performance.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    performance.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.hints)) {
            result["hints"] = this.hints;
        }
        result["maxEntrypointSize"] = this.maxEntrypointSize;
        result["maxAssetSize"] = this.maxAssetSize;
    }
    performance.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
    }
    performance.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 5 && _ch == 'h') {
            if (name === 'hints') {
                this.hints = child.v; return true;
            }
        }
        if (_l == 14 && _ch == 'm') {
            if (name === 'max-asset-size') {
                this.maxAssetSize = parseinteger(child.v, null, child); return true;
            }
            else if (name === 'max_asset_size') {
                this.maxAssetSize = parseinteger(child.v, null, child); return true;
            }
        }
        if (_l == 20 && _ch == 'm') {
            if (name === 'max-entry-point-size') {
                this.maxEntrypointSize = parseinteger(child.v, null, child); return true;
            }
            else if (name === 'max_entry_point_size') {
                this.maxEntrypointSize = parseinteger(child.v, null, child); return true;
            }
        }
        ok = md.webpackitem.prototype.loadChild.call(this, child);
        return ok;
    }
    performance.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.webpackException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    performance.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("performance", "hints", this.hints, this.allowedHINTS, this);
        md.webpackitem.prototype.wzVerify.call(this, ctx);
    }
    return performance;
})(webpackitem);


md.performance = performance;
/**
    element stats
     https://webpack.js.org/configuration/stats/
*/
var stats = (function (webpackitem) {
    _inherits(stats, webpackitem);
    function stats(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(stats.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, stats);
        this.allowedPRESETS = [ "none", "errors-only", "minimal", "false", "normal", "verbose"];
        this.PRESET_NONE = "none";
        this.PRESET_ERRORS_ONLY = "errors-only";
        this.PRESET_MINIMAL = "minimal";
        this.PRESET_XFALSE = "false";
        this.PRESET_NORMAL = "normal";
        this.PRESET_VERBOSE = "verbose";
        this.wzElement = "stats";
        this.preset = "none";
        this.assets = false;
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.assetsSort = null
        this.cached = false;
        this.children = false;
        this.chunks = false;
        this.chunkModules = false;
        this.chunkOrigins = false;
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.chunksSort = null
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.context = null
        this.colors = false;
        this.errors = false;
        this.errorDetails = false;
        this.hash = false;
        this.modules = false;
        // TODO avoid this declaration, attributes should be tested for undefined not null
        // set this.modulesSort = null
        this.publicPath = false;
        this.reasons = false;
        this.source = false;
        this.timings = false;
        this.version = false;
        this.warnings = false;
    }
    stats.PRESET_NONE = "none";
    stats.PRESET_ERRORS_ONLY = "errors-only";
    stats.PRESET_MINIMAL = "minimal";
    stats.PRESET_XFALSE = "false";
    stats.PRESET_NORMAL = "normal";
    stats.PRESET_VERBOSE = "verbose";
    stats.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    stats.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.preset)) {
            result["preset"] = this.preset;
        }
        result["assets"] = this.assets;
        if (!isEmpty(this.assetsSort)) {
            result["assetsSort"] = this.assetsSort;
        }
        result["cached"] = this.cached;
        result["children"] = this.children;
        result["chunks"] = this.chunks;
        result["chunkModules"] = this.chunkModules;
        result["chunkOrigins"] = this.chunkOrigins;
        if (!isEmpty(this.chunksSort)) {
            result["chunksSort"] = this.chunksSort;
        }
        if (!isEmpty(this.context)) {
            result["context"] = this.context;
        }
        result["colors"] = this.colors;
        result["errors"] = this.errors;
        result["errorDetails"] = this.errorDetails;
        result["hash"] = this.hash;
        result["modules"] = this.modules;
        if (!isEmpty(this.modulesSort)) {
            result["modulesSort"] = this.modulesSort;
        }
        result["publicPath"] = this.publicPath;
        result["reasons"] = this.reasons;
        result["source"] = this.source;
        result["timings"] = this.timings;
        result["version"] = this.version;
        result["warnings"] = this.warnings;
    }
    stats.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
    }
    stats.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 4 && _ch == 'h') {
            if (name === 'hash') {
                this.hash = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 6 && _ch == 'a') {
            if (name === 'assets') {
                this.assets = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 6 && _ch == 'c') {
            if (name === 'cached') {
                this.cached = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'chunks') {
                this.chunks = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'colors') {
                this.colors = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 6 && _ch == 'e') {
            if (name === 'errors') {
                this.errors = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 6 && _ch == 'p') {
            if (name === 'preset') {
                this.preset = child.v; return true;
            }
        }
        if (_l == 6 && _ch == 's') {
            if (name === 'source') {
                this.source = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 7 && _ch == 'c') {
            if (name === 'context') {
                this.context = child.v; return true;
            }
        }
        if (_l == 7 && _ch == 'm') {
            if (name === 'modules') {
                this.modules = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 7 && _ch == 'r') {
            if (name === 'reasons') {
                this.reasons = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 7 && _ch == 't') {
            if (name === 'timings') {
                this.timings = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 7 && _ch == 'v') {
            if (name === 'version') {
                this.version = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 8 && _ch == 'c') {
            if (name === 'children') {
                this.children = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 8 && _ch == 'w') {
            if (name === 'warnings') {
                this.warnings = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 10 && _ch == 'a') {
            if (name === 'assetssort') {
                this.assetsSort = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'c') {
            if (name === 'chunkssort') {
                this.chunksSort = child.v; return true;
            }
        }
        if (_l == 10 && _ch == 'p') {
            if (name === 'publicpath') {
                this.publicPath = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 11 && _ch == 'm') {
            if (name === 'modulessort') {
                this.modulesSort = child.v; return true;
            }
        }
        if (_l == 12 && _ch == 'c') {
            if (name === 'chunkmodules') {
                this.chunkModules = parseboolean(child.v, true, child); return true;
            }
            else if (name === 'chunkorigins') {
                this.chunkOrigins = parseboolean(child.v, true, child); return true;
            }
        }
        if (_l == 12 && _ch == 'e') {
            if (name === 'errordetails') {
                this.errorDetails = parseboolean(child.v, true, child); return true;
            }
        }
        ok = md.webpackitem.prototype.loadChild.call(this, child);
        return ok;
    }
    stats.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.webpackException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    stats.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("stats", "preset", this.preset, this.allowedPRESETS, this);
        md.webpackitem.prototype.wzVerify.call(this, ctx);
    }
    return stats;
})(webpackitem);


md.stats = stats;
// element jsObject
var jsObject = (function (webpackitem) {
    _inherits(jsObject, webpackitem);
    function jsObject(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(jsObject.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsObject);
        this.wzElement = "jsObject";
        // relation jsProp
        this.jsProps = [];
    }
    jsObject.prototype.addJsProp = function(name,sourceLineInfo) {
        var retval = new md.jsProp(name, sourceLineInfo);
        retval.wzParent = this;
        this.jsProps.push(retval);
        return retval;
    }
    jsObject.prototype.getJsProp = function(name) {
        var found = null;
        this.jsProps.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    jsObject.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    jsObject.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    jsObject.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.jsProps.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsProps[i];
            items.push(item.toJson());
        }
        result['jsProps'] = items;
    }
    jsObject.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, md.jsProp, this.jsProps);
            }
        }
        ok = md.webpackitem.prototype.loadChild.call(this, child);
        return ok;
    }
    jsObject.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.webpackException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    jsObject.prototype.wzVerify = function(ctx) {
        var i, i_len=this.jsProps.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsProps[i];
            item.wzVerify(ctx);
        }
        md.webpackitem.prototype.wzVerify.call(this, ctx);
    }
    jsObject.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.jsProps.length, item;
        for (i=0; i<i_len; i++) {
            item = this.jsProps[i];
            item.wzInitialize(ctx);
        }
        md.webpackitem.prototype.wzInitialize.call(this, ctx);
    }
    return jsObject;
})(webpackitem);


md.jsObject = jsObject;
// element jsArray
var jsArray = (function (webpackitem) {
    _inherits(jsArray, webpackitem);
    function jsArray(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(jsArray.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsArray);
        this.wzElement = "jsArray";
        // relation webpackitem
        this.webpackitems = [];
    }
    jsArray.prototype.addWebpackitem = function(name,sourceLineInfo) {
        var retval = new md.webpackitem(name, sourceLineInfo);
        retval.wzParent = this;
        this.webpackitems.push(retval);
        return retval;
    }
    jsArray.prototype.getWebpackitem = function(name) {
        var found = null;
        this.webpackitems.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    jsArray.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    jsArray.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    jsArray.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.webpackitems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.webpackitems[i];
            items.push(item.toJson());
        }
        result['webpackitems'] = items;
    }
    jsArray.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, md.comment, this.webpackitems);
            }
        }
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, md.jsProp, this.webpackitems);
            }
        }
        if (_l == 1 && _ch == '[') {
            if (name === '[') {
                return this.wzLoadToChildColl(child, md.jsArray, this.webpackitems);
            }
        }
        if (_l == 1 && _ch == '{') {
            if (name === '{') {
                return this.wzLoadToChildColl(child, md.jsObject, this.webpackitems);
            }
        }
        if (_l == 3 && _ch == 'u') {
            if (name === 'use') {
                return this.wzLoadToChildColl(child, md.moduleRuleUse, this.webpackitems);
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'file') {
                return this.wzLoadToChildColl(child, md.file, this.webpackitems);
            }
        }
        if (_l == 4 && _ch == 'r') {
            if (name === 'rule') {
                return this.wzLoadToChildColl(child, md.moduleRule, this.webpackitems);
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'test') {
                return this.wzLoadToChildColl(child, md.moduleRuleTest, this.webpackitems);
            }
        }
        if (_l == 5 && _ch == 'a') {
            if (name === 'alias') {
                return this.wzLoadToChildColl(child, md.resolveAlias, this.webpackitems);
            }
        }
        if (_l == 5 && _ch == 'e') {
            if (name === 'entry') {
                return this.wzLoadToChildColl(child, md.entry, this.webpackitems);
            }
        }
        if (_l == 5 && _ch == 'p') {
            if (name === 'proxy') {
                return this.wzLoadToChildColl(child, md.devServerProxy, this.webpackitems);
            }
        }
        if (_l == 5 && _ch == 's') {
            if (name === 'stats') {
                return this.wzLoadToChildColl(child, md.stats, this.webpackitems);
            }
        }
        if (_l == 5 && _ch == 'w') {
            if (name === 'watch') {
                return this.wzLoadToChildColl(child, md.watch, this.webpackitems);
            }
        }
        if (_l == 6 && _ch == 'm') {
            if (name === 'module') {
                return this.wzLoadToChildColl(child, md.resolveModule, this.webpackitems);
            }
            else if (name === 'module') {
                return this.wzLoadToChildColl(child, md.module, this.webpackitems);
            }
        }
        if (_l == 6 && _ch == 'o') {
            if (name === 'output') {
                return this.wzLoadToChildColl(child, md.output, this.webpackitems);
            }
        }
        if (_l == 6 && _ch == 'p') {
            if (name === 'plugin') {
                return this.wzLoadToChildColl(child, md.resolvePlugin, this.webpackitems);
            }
            else if (name === 'parser') {
                return this.wzLoadToChildColl(child, md.ruleParser, this.webpackitems);
            }
            else if (name === 'plugin') {
                return this.wzLoadToChildColl(child, md.plugin, this.webpackitems);
            }
        }
        if (_l == 7 && _ch == 'e') {
            if (name === 'exclude') {
                return this.wzLoadToChildColl(child, md.moduleRuleExclude, this.webpackitems);
            }
        }
        if (_l == 7 && _ch == 'f') {
            if (name === 'feature') {
                return this.wzLoadToChildColl(child, md.feature, this.webpackitems);
            }
        }
        if (_l == 7 && _ch == 'i') {
            if (name === 'include') {
                return this.wzLoadToChildColl(child, md.moduleRuleInclude, this.webpackitems);
            }
        }
        if (_l == 7 && _ch == 'r') {
            if (name === 'resolve') {
                return this.wzLoadToChildColl(child, md.resolve, this.webpackitems);
            }
        }
        if (_l == 7 && _ch == 'w') {
            if (name === 'webpack') {
                return this.wzLoadToChildColl(child, md.webpack, this.webpackitems);
            }
        }
        if (_l == 8 && _ch == 'e') {
            if (name === 'external') {
                return this.wzLoadToChildColl(child, md.external, this.webpackitems);
            }
        }
        if (_l == 8 && _ch == 'm') {
            if (name === 'mainfile') {
                return this.wzLoadToChildColl(child, md.resolveMainFile, this.webpackitems);
            }
        }
        if (_l == 8 && _ch == 'p') {
            if (name === 'property') {
                return this.wzLoadToChildColl(child, md.property, this.webpackitems);
            }
        }
        if (_l == 9 && _ch == 'd') {
            if (name === 'devserver') {
                return this.wzLoadToChildColl(child, md.devServer, this.webpackitems);
            }
        }
        if (_l == 9 && _ch == 'e') {
            if (name === 'extension') {
                return this.wzLoadToChildColl(child, md.resolveExtension, this.webpackitems);
            }
        }
        if (_l == 9 && _ch == 'm') {
            if (name === 'mainfield') {
                return this.wzLoadToChildColl(child, md.resolveMainField, this.webpackitems);
            }
            else if (name === 'main-file') {
                return this.wzLoadToChildColl(child, md.resolveMainFile, this.webpackitems);
            }
        }
        if (_l == 10 && _ch == 'm') {
            if (name === 'main-field') {
                return this.wzLoadToChildColl(child, md.resolveMainField, this.webpackitems);
            }
        }
        if (_l == 11 && _ch == 'p') {
            if (name === 'performance') {
                return this.wzLoadToChildColl(child, md.performance, this.webpackitems);
            }
        }
        if (_l == 11 && _ch == 'w') {
            if (name === 'webpackitem') {
                return this.wzLoadToChildColl(child, md.webpackitem, this.webpackitems);
            }
        }
        if (_l == 12 && _ch == 'w') {
            if (name === 'watchoptions') {
                return this.wzLoadToChildColl(child, md.watchOptions, this.webpackitems);
            }
        }
        if (_l == 13 && _ch == 'w') {
            if (name === 'watch-options') {
                return this.wzLoadToChildColl(child, md.watchOptions, this.webpackitems);
            }
        }
        ok = md.webpackitem.prototype.loadChild.call(this, child);
        return ok;
    }
    jsArray.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.webpackException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    jsArray.prototype.wzVerify = function(ctx) {
        var i, i_len=this.webpackitems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.webpackitems[i];
            item.wzVerify(ctx);
        }
        md.webpackitem.prototype.wzVerify.call(this, ctx);
    }
    jsArray.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.webpackitems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.webpackitems[i];
            item.wzInitialize(ctx);
        }
        md.webpackitem.prototype.wzInitialize.call(this, ctx);
    }
    return jsArray;
})(webpackitem);


md.jsArray = jsArray;
// element jsProp
var jsProp = (function (webpackitem) {
    _inherits(jsProp, webpackitem);
    function jsProp(name,sourceLineInfo) {
        _get(Object.getPrototypeOf(jsProp.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsProp);
        this.wzElement = "jsProp";
        // relation webpackitem
        this.webpackitems = [];
    }
    jsProp.prototype.addWebpackitem = function(name,sourceLineInfo) {
        var retval = new md.webpackitem(name, sourceLineInfo);
        retval.wzParent = this;
        this.webpackitems.push(retval);
        return retval;
    }
    jsProp.prototype.getWebpackitem = function(name) {
        var found = null;
        this.webpackitems.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    jsProp.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    jsProp.prototype.toJsonProperties = function(result) {
        md.webpackitem.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    jsProp.prototype.toJsonChildren = function(result) {
        md.webpackitem.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        var i, i_len=this.webpackitems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.webpackitems[i];
            items.push(item.toJson());
        }
        result['webpackitems'] = items;
    }
    jsProp.prototype.loadChild = function(child) {
        // Make test case insensitive
        var item,
            ok = false,
            name = child.n.toLowerCase(),
            _l = name.length,
            _ch = name[0];
        if (_l == 1 && _ch == '#') {
            if (name === '#') {
                return this.wzLoadToChildColl(child, md.comment, this.webpackitems);
            }
        }
        if (_l == 1 && _ch == '@') {
            if (name === '@') {
                return this.wzLoadToChildColl(child, md.jsProp, this.webpackitems);
            }
        }
        if (_l == 1 && _ch == '[') {
            if (name === '[') {
                return this.wzLoadToChildColl(child, md.jsArray, this.webpackitems);
            }
        }
        if (_l == 1 && _ch == '{') {
            if (name === '{') {
                return this.wzLoadToChildColl(child, md.jsObject, this.webpackitems);
            }
        }
        if (_l == 3 && _ch == 'u') {
            if (name === 'use') {
                return this.wzLoadToChildColl(child, md.moduleRuleUse, this.webpackitems);
            }
        }
        if (_l == 4 && _ch == 'f') {
            if (name === 'file') {
                return this.wzLoadToChildColl(child, md.file, this.webpackitems);
            }
        }
        if (_l == 4 && _ch == 'r') {
            if (name === 'rule') {
                return this.wzLoadToChildColl(child, md.moduleRule, this.webpackitems);
            }
        }
        if (_l == 4 && _ch == 't') {
            if (name === 'test') {
                return this.wzLoadToChildColl(child, md.moduleRuleTest, this.webpackitems);
            }
        }
        if (_l == 5 && _ch == 'a') {
            if (name === 'alias') {
                return this.wzLoadToChildColl(child, md.resolveAlias, this.webpackitems);
            }
        }
        if (_l == 5 && _ch == 'e') {
            if (name === 'entry') {
                return this.wzLoadToChildColl(child, md.entry, this.webpackitems);
            }
        }
        if (_l == 5 && _ch == 'p') {
            if (name === 'proxy') {
                return this.wzLoadToChildColl(child, md.devServerProxy, this.webpackitems);
            }
        }
        if (_l == 5 && _ch == 's') {
            if (name === 'stats') {
                return this.wzLoadToChildColl(child, md.stats, this.webpackitems);
            }
        }
        if (_l == 5 && _ch == 'w') {
            if (name === 'watch') {
                return this.wzLoadToChildColl(child, md.watch, this.webpackitems);
            }
        }
        if (_l == 6 && _ch == 'm') {
            if (name === 'module') {
                return this.wzLoadToChildColl(child, md.resolveModule, this.webpackitems);
            }
            else if (name === 'module') {
                return this.wzLoadToChildColl(child, md.module, this.webpackitems);
            }
        }
        if (_l == 6 && _ch == 'o') {
            if (name === 'output') {
                return this.wzLoadToChildColl(child, md.output, this.webpackitems);
            }
        }
        if (_l == 6 && _ch == 'p') {
            if (name === 'plugin') {
                return this.wzLoadToChildColl(child, md.resolvePlugin, this.webpackitems);
            }
            else if (name === 'parser') {
                return this.wzLoadToChildColl(child, md.ruleParser, this.webpackitems);
            }
            else if (name === 'plugin') {
                return this.wzLoadToChildColl(child, md.plugin, this.webpackitems);
            }
        }
        if (_l == 7 && _ch == 'e') {
            if (name === 'exclude') {
                return this.wzLoadToChildColl(child, md.moduleRuleExclude, this.webpackitems);
            }
        }
        if (_l == 7 && _ch == 'f') {
            if (name === 'feature') {
                return this.wzLoadToChildColl(child, md.feature, this.webpackitems);
            }
        }
        if (_l == 7 && _ch == 'i') {
            if (name === 'include') {
                return this.wzLoadToChildColl(child, md.moduleRuleInclude, this.webpackitems);
            }
        }
        if (_l == 7 && _ch == 'r') {
            if (name === 'resolve') {
                return this.wzLoadToChildColl(child, md.resolve, this.webpackitems);
            }
        }
        if (_l == 7 && _ch == 'w') {
            if (name === 'webpack') {
                return this.wzLoadToChildColl(child, md.webpack, this.webpackitems);
            }
        }
        if (_l == 8 && _ch == 'e') {
            if (name === 'external') {
                return this.wzLoadToChildColl(child, md.external, this.webpackitems);
            }
        }
        if (_l == 8 && _ch == 'm') {
            if (name === 'mainfile') {
                return this.wzLoadToChildColl(child, md.resolveMainFile, this.webpackitems);
            }
        }
        if (_l == 8 && _ch == 'p') {
            if (name === 'property') {
                return this.wzLoadToChildColl(child, md.property, this.webpackitems);
            }
        }
        if (_l == 9 && _ch == 'd') {
            if (name === 'devserver') {
                return this.wzLoadToChildColl(child, md.devServer, this.webpackitems);
            }
        }
        if (_l == 9 && _ch == 'e') {
            if (name === 'extension') {
                return this.wzLoadToChildColl(child, md.resolveExtension, this.webpackitems);
            }
        }
        if (_l == 9 && _ch == 'm') {
            if (name === 'mainfield') {
                return this.wzLoadToChildColl(child, md.resolveMainField, this.webpackitems);
            }
            else if (name === 'main-file') {
                return this.wzLoadToChildColl(child, md.resolveMainFile, this.webpackitems);
            }
        }
        if (_l == 10 && _ch == 'm') {
            if (name === 'main-field') {
                return this.wzLoadToChildColl(child, md.resolveMainField, this.webpackitems);
            }
        }
        if (_l == 11 && _ch == 'p') {
            if (name === 'performance') {
                return this.wzLoadToChildColl(child, md.performance, this.webpackitems);
            }
        }
        if (_l == 11 && _ch == 'w') {
            if (name === 'webpackitem') {
                return this.wzLoadToChildColl(child, md.webpackitem, this.webpackitems);
            }
        }
        if (_l == 12 && _ch == 'w') {
            if (name === 'watchoptions') {
                return this.wzLoadToChildColl(child, md.watchOptions, this.webpackitems);
            }
        }
        if (_l == 13 && _ch == 'w') {
            if (name === 'watch-options') {
                return this.wzLoadToChildColl(child, md.watchOptions, this.webpackitems);
            }
        }
        ok = md.webpackitem.prototype.loadChild.call(this, child);
        return ok;
    }
    jsProp.prototype.loadFromNode = function(node) {
        var loaded = false;
        var i, i_len=node.childs.length, item;
        for (i=0; i<i_len; i++) {
            item = node.childs[i];
            loaded = this.loadChild(item);
            if (!loaded) {
                throw new md.webpackException("Tag not recognized: " + item.n, item, this);
            }
        }
    }
    jsProp.prototype.wzVerify = function(ctx) {
        var i, i_len=this.webpackitems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.webpackitems[i];
            item.wzVerify(ctx);
        }
        md.webpackitem.prototype.wzVerify.call(this, ctx);
    }
    jsProp.prototype.wzInitialize = function(ctx) {
        var i, i_len=this.webpackitems.length, item;
        for (i=0; i<i_len; i++) {
            item = this.webpackitems[i];
            item.wzInitialize(ctx);
        }
        if (this.webpackitems.length == 0) {
            var nv = wizzi.lineParser.parseNameValueRaw(this.wzName);
            this.name = nv.name();
            this.value = nv.value();
        }
        md.webpackitem.prototype.wzInitialize.call(this, ctx);
    }
    return jsProp;
})(webpackitem);


md.jsProp = jsProp;
md.__tagElementMapping = { '#': 'comment', 'watch-options': 'watchOptions', 'watchoptions': 'watchOptions', 'chunk': 'entryChunk', 'alias': 'resolveAlias', 'extension': 'resolveExtension', 'main-field': 'resolveMainField', 'mainfield': 'resolveMainField', 'main-file': 'resolveMainFile', 'mainfile': 'resolveMainFile', 'module': 'resolveModule', 'plugin': 'resolvePlugin', 'parser': 'ruleParser', 'rule': 'moduleRule', 'test': 'moduleRuleTest', 'include': 'moduleRuleInclude', 'exclude': 'moduleRuleExclude', 'use': 'moduleRuleUse', '@': 'jsProp', 'proxy': 'devServerProxy', '{': 'jsObject', '[': 'jsArray' };
var webpackException = (function () {
    function webpackException(message,node,instance) {
        _classCallCheck(this, webpackException);
        // TODO node seems superflous
        if (node && instance) {
            this.message = message + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        this.stack = new Error().stack;
        this.node = node;
    }
    return webpackException;
})();


md.webpackException = webpackException;
var webpackContext = (function () {
    function webpackContext() {
        _classCallCheck(this, webpackContext);
        this.validationErrors = [];
    }
    webpackContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    webpackContext.prototype.addError = function(message,node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at);
    }
    webpackContext.prototype.verifyEnum = function(valueType,valueName,value,allowed,node) {
        if (value && allowed.indexOf(value) < 0) {
            var allowedStr = 'allowed: ' + allowed.join(', ');
            this.validationErrors.push(valueType + ' ' + valueName + ' has an invalid value: ' + value + ' ' + allowedStr + '. At ' + (node.wzSourceLineInfo ? node.wzSourceLineInfo.toString(node) : 'location unavailable'));
        }
    }
    return webpackContext;
})();


md.webpackContext = webpackContext;
function parsestring(value,defaultValue,node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}

function parseboolean(value,defaultValue,node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    if (!isBoolean(value)) {
        throw new nodeException('Must be a boolean value (\"true\" or \"false\"), got:' + value, node);
    }
    return value === 'true' ? true : false;
}

function isBoolean(value) {
    return value === 'true' || value === 'false';
}

function parseinteger(value,defaultValue,node) {
    if (isEmpty(value)) {
        return defaultValue;
    }
    if (!isInteger(value)) {
        throw new nodeException('Must be an int value, got:' + value, node);
    }
    return parseInt(value, 10);
}

function isInteger(value) {
    return isNumber( value );
}

function isNumber(value) {
    return !isArray( value ) && (value - parseFloat( value ) + 1) >= 0;
}

function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}

function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}

function isArray(value) {
    return Object.prototype.toString.call( value ) === '[object Array]';
}

function stringifyArrayValue(array,isString) {
    var quote = "";
    if (array.length == 0) {
        return null;
    }
    else if (array.length == 1) {
        quote = detectObjectFromText(array[0].wzName) ? '' : "'";
        return quote + array[0].wzName + quote;
    }
    else {
        var values = [];
        var i, i_len=array.length, item;
        for (i=0; i<i_len; i++) {
            item = array[i];
            quote = detectObjectFromText(item.wzName) ? '' : "'";
            values.push(quote + item.wzName + quote);
        }
        return '[' + values.join(', ') + ']';
    }
}

function detectObjectFromText(text) {
    if (text == null || text == undefined) {
        return false;
    }
    var ch,
        op = 0,
        cl = 0,
        pslash_1 = -1,
        pslash_2 = -1,
        i,
        len = text.length;
    text = text.trim();
    for (i=0; i<len; i++) {
        ch = text[i];
        if (ch == '(') {
            op++;
        }
        else if (ch == ')') {
            cl++;
        }
        else if (ch == '/') {
            if (pslash_1 == -1) {
                pslash_1 = i;
            }
            else if (pslash_1 >  -1) {
                pslash_2 = i;
            }
        }
    }
    return (op > 0 && cl == op) || (pslash_1 == 0 && (pslash_2 == len-1 || pslash_2 == len-2));
}


