$group

    wz-require chalk
	wz-require historyApiFallback
		from connect-history-api-fallback
	wz-require httpProxyMiddleware
		from http-proxy-middleware
    
	function onProxyError
        param proxy
        
		return
            function 
                param err
                param req
                param res
                
				var host = req.headers && req.headers.host
                log chalk.red('Proxy error:') + ' Could not proxy request ' + chalk.cyan(req.url) + ' from ' + chalk.cyan(host) + ' to ' + chalk.cyan(proxy) + '.'
                log 'See https://nodejs.org/api/errors.html#errors_common_system_errors for more information (' + chalk.cyan(err.code) + ').'
                log
                if res.writeHead && !res.headersSent
                    _ res.writeHead(500)
                _ res.end('Proxy error: Could not proxy request ' + req.url + ' from ' + host + ' to ' + proxy + ' (' + err.code + ').')
    
	wz-function addWebpackMiddleware
        param devServer
		param paths
            
		var proxy
            _ require
                @ paths.appPackageJson
                . proxy
            
		_ devServer.use
            _ historyApiFallback
                { 
                    @ disableDotRule true
                    @ htmlAcceptHeaders
                        iif proxy
                            then 
                                [ 
                                    @ 'text/html'
                            else 
                                [ 
                                    @ 'text/html'
                                    @ '*/*'
            
		if proxy
                
			if typeof (proxy) !== 'string'
                log chalk.red('When specified, "proxy" in package.json must be a string.'
                log chalk.red('Instead, the type of "proxy" was "' + typeof (proxy) + '".')
                log chalk.red('Either remove "proxy" from package.json, or make it a string.')
                _ process.exit(1)
                
			var mayProxy = /^(?!\/(index\.html$|.*\.hot-update\.json$|sockjs-node\/)).*$/
                
			var hpm
                _ httpProxyMiddleware
                    function 
                        param pathname
                        return mayProxy.test(pathname)
                    { 
                        @ target proxy
                        @ logLevel 'silent'
                        @ onProxyReq
                            function 
                                param proxyReq
                                if proxyReq.getHeader('origin')
                                    _ proxyReq.setHeader('origin', proxy)
                        @ onError onProxyError(proxy)
                        @ secure false
                        @ changeOrigin true
                        @ ws true
                        @ xfwd true
            
			_ devServer.use(mayProxy, hpm)
            
			_ devServer.listeningApp.on
                @ 'upgrade'
                @ hpm.upgrade
            
		_ devServer.use
            @ devServer.middleware
