module 
    kind jsfile
    
	var autoprefixer = require('autoprefixer')
    var webpack = require('webpack')
    var HtmlWebpackPlugin = require('html-webpack-plugin')
    var ExtractTextPlugin = require('extract-text-webpack-plugin')
    var ManifestPlugin = require('webpack-manifest-plugin')
    var InterpolateHtmlPlugin = require('react-dev-utils/InterpolateHtmlPlugin')
    var paths = require('./paths')
    var getClientEnvironment = require('./env')
    var publicPath = paths.servedPath
    var shouldUseRelativeAssetPaths = publicPath === './'
    var publicUrl = publicPath.slice(0, - (1))
    var env = getClientEnvironment(publicUrl)
    
	if env.stringified['process.env'].NODE_ENV !== '"production"'
        throw 
            new Error('Production builds must have NODE_ENV=production.')
    
	var cssFilename = 'static/css/[name].[contenthash:8].css'
    
	var extractTextPluginOptions
        iif shouldUseRelativeAssetPaths
            then 
                { 
                    @ publicPath
                        _ Array
                            _ cssFilename.split('/')
                                . length
                            ._ join('../')
            else 
                { 
    
	set module.exports =
        { 
            @ bail true
            @ devtool 'source-map'
            @ entry
                [ 
                    _ require.resolve
                        @ './polyfills'
                    @ paths.appIndexJs
            @ output
                { 
                    @ path paths.appBuild
                    @ filename 'static/js/[name].[chunkhash:8].js'
                    @ chunkFilename 'static/js/[name].[chunkhash:8].chunk.js'
                    @ publicPath publicPath
            @ resolve
                { 
                    @ modules
                        [ 
                            @ 'node_modules'
                            ._ concat
                                @ paths.nodePaths
                    @ extensions
                        [ 
                            @ '.js'
                            @ '.json'
                            @ '.jsx'
                    @ alias
                        { 
                            @ 'react-native' 'react-native-web'
            @ resolveLoader
                { 
                    @ modules
                        [ 
                            @ paths.ownNodeModules
                            @ paths.appNodeModules
            @ module
                { 
                    @ rules
                        [ 
                            { 
                                @ parser
                                    { 
                                        @ requireEnsure false
                            { 
                                @ test /\.(js|jsx)$/
                                @ enforce 'pre'
                                @ use
                                    [ 
                                        { 
                                            @ options
                                                { 
                                                    @ baseConfig
                                                        { 
                                                            @ extends
                                                                [ 
                                                                    @ 'react-app'
                                                    @ useEslintrc false
                                            @ loader 'eslint-loader'
                                @ include paths.appSrc
                            { 
                                @ exclude
                                    [ 
                                        @ /\.html$/
                                        @ /\.(js|jsx)$/
                                        @ /\.css$/
                                        @ /\.json$/
                                        @ /\.bmp$/
                                        @ /\.gif$/
                                        @ /\.jpe?g$/
                                        @ /\.png$/
                                @ loader 'file-loader'
                                @ options
                                    { 
                                        @ name 'static/media/[name].[hash:8].[ext]'
                            { 
                                @ test
                                    [ 
                                        @ /\.bmp$/
                                        @ /\.gif$/
                                        @ /\.jpe?g$/
                                        @ /\.png$/
                                @ loader 'url-loader'
                                @ options
                                    { 
                                        @ limit 10000
                                        @ name 'static/media/[name].[hash:8].[ext]'
                            { 
                                @ test /\.(js|jsx)$/
                                @ include paths.appSrc
                                @ loader 'babel-loader'
                                @ options
                                    { 
                                        @ babelrc false
                                        @ presets
                                            [ 
                                                _ require.resolve
                                                    @ 'babel-preset-react-app'
                            { 
                                @ test /\.css$/
                                @ loader
                                    _ ExtractTextPlugin.extract
                                        _ Object.assign
                                            { 
                                                @ fallback 'style-loader'
                                                @ use
                                                    [ 
                                                        { 
                                                            @ loader 'css-loader'
                                                            @ options
                                                                { 
                                                                    @ importLoaders 1
                                                        { 
                                                            @ loader 'postcss-loader'
                                                            @ options
                                                                { 
                                                                    @ ident 'postcss'
                                                                    @ plugins
                                                                        function 
                                                                            return 
                                                                                [ 
                                                                                    _ autoprefixer
                                                                                        { 
                                                                                            @ browsers
                                                                                                [ 
                                                                                                    @ '>1%'
                                                                                                    @ 'last 4 versions'
                                                                                                    @ 'Firefox ESR'
                                                                                                    @ 'not ie < 9'
                                            @ extractTextPluginOptions
            @ plugins
                [ 
                    new InterpolateHtmlPlugin
                        @ env.raw
                    new HtmlWebpackPlugin
                        { 
                            @ inject true
                            @ template paths.appHtml
                            @ minify
                                { 
                                    @ removeComments true
                                    @ collapseWhitespace true
                                    @ removeRedundantAttributes true
                                    @ useShortDoctype true
                                    @ removeEmptyAttributes true
                                    @ removeStyleLinkTypeAttributes true
                                    @ keepClosingSlash true
                                    @ minifyJS true
                                    @ minifyCSS true
                                    @ minifyURLs true
                    new webpack.DefinePlugin
                        @ env.stringified
                    new webpack.optimize.UglifyJsPlugin
                        { 
                            @ compress
                                { 
                                    @ screw_ie8 true
                                    @ warnings false
                            @ mangle
                                { 
                                    @ screw_ie8 true
                            @ output
                                { 
                                    @ comments false
                                    @ screw_ie8 true
                            @ sourceMap true
                    new ExtractTextPlugin
                        { 
                            @ filename cssFilename
                    new ManifestPlugin
                        { 
                            @ fileName 'asset-manifest.json'
            @ node
                { 
                    @ fs 'empty'
                    @ net 'empty'
                    @ tls 'empty'
