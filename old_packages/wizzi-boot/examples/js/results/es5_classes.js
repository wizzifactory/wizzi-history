/*
    artifact generator: /wizzi/lib/artifacts/js/module/gen/main.js
    primary source IttfDocument: C:\my\wizzi\v1\kernel\wizzi-boot\examples\js\ittf\es5_classes.js.ittf
    utc time: Tue, 11 Jul 2017 11:56:16 GMT
*/
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var animal = (function () {
    function animal(kind,numlegs) {
        _classCallCheck(this, animal);
        this.kind = kind;
        this.numlegs = numlegs;
    }
    return animal;
})();


var cat = (function (animal) {
    _inherits(cat, animal);
    function cat(name) {
        _get(Object.getPrototypeOf(cat.prototype), 'constructor', this).call(this, 'cat',4);
        _classCallCheck(this, cat);
        this.name = name;
    }
    cat.prototype.toString = function() {
        console.log(this.name, this.kind, this.numlegs);
    }
    return cat;
})(animal);


var miao = new cat('miao');
miao.toString();
