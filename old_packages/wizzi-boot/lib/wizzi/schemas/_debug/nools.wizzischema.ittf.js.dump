// 23/3/2017:20:48:47  by C:\My\wizzi\current\wizzi-npm\node_modules\wizzi\lib\ittf\evaluator.js
$.n(); // set the context state to NodeContext first
var $0 = {}; // the root node of the IttfModel buildup
var $1 = { n: "wizzischema", v: "nools", r: 1, c: 1, s: "f1", u: "f1",  }; //148
$.a($0, $1, 5);
var $2 = { n: "#", v: "Nools, the rule engine.", r: 2, c: 5, s: "f1", u: "f1",  }; //149
$.a($1, $2, 7);
var $3 = { n: "#", v: "When using nools you define Flow(s).", r: 3, c: 5, s: "f1", u: "f1",  }; //150
$.a($1, $3, 9);
var $4 = { n: "#", v: "A Flow acts as a container for Rule(s)", r: 4, c: 5, s: "f1", u: "f1",  }; //151
$.a($1, $4, 11);
var $5 = { n: "#", v: "that can later be used to get a Session.", r: 5, c: 5, s: "f1", u: "f1",  }; //152
$.a($1, $5, 13);
var $6 = { n: "e", v: "nools", r: 7, c: 5, s: "f1", u: "f1",  }; //153
$.a($1, $6, 15);
var $7 = { n: "#", v: "The root tag of the nools schema.", r: 8, c: 9, s: "f1", u: "f1",  }; //154
$.a($6, $7, 17);
var $8 = { n: "#", v: "A nools IttfDocument defines one Flow.", r: 9, c: 9, s: "f1", u: "f1",  }; //155
$.a($6, $8, 19);
var $9 = { n: "#", v: "A Flow is a container of Rule(s).", r: 10, c: 9, s: "f1", u: "f1",  }; //156
$.a($6, $9, 21);
var $10 = { n: "#", v: "In a Flow you declare Fact types and Rule(s).", r: 11, c: 9, s: "f1", u: "f1",  }; //157
$.a($6, $10, 23);
var $11 = { n: "#", v: "Instances of Flow(s) are called Session(s).", r: 12, c: 9, s: "f1", u: "f1",  }; //158
$.a($6, $11, 25);
var $12 = { n: "#", v: "In a Session instances of Facts are matched against Rule(s).", r: 13, c: 9, s: "f1", u: "f1",  }; //159
$.a($6, $12, 27);
var $13 = { n: "tag", v: "nools", r: 14, c: 9, s: "f1", u: "f1",  }; //160
$.a($6, $13, 29);
var $14 = { n: "r", v: "global/s", r: 16, c: 9, s: "f1", u: "f1",  }; //161
$.a($6, $14, 31);
var $15 = { n: "r", v: "fact/s", r: 17, c: 9, s: "f1", u: "f1",  }; //162
$.a($6, $15, 33);
var $16 = { n: "r", v: "rule/s", r: 18, c: 9, s: "f1", u: "f1",  }; //163
$.a($6, $16, 35);
var $17 = { n: "r", v: "agendaGroup/s", r: 19, c: 9, s: "f1", u: "f1",  }; //164
$.a($6, $17, 37);
var $18 = { n: "r", v: "function/s", r: 20, c: 9, s: "f1", u: "f1",  }; //165
$.a($6, $18, 39);
var $19 = { n: "e", v: "global", r: 22, c: 5, s: "f1", u: "f1",  }; //166
$.a($1, $19, 41);
var $20 = { n: "#", v: "Globals are accessible through the current working scope of rule facts in a dsl,", r: 23, c: 9, s: "f1", u: "f1",  }; //167
$.a($19, $20, 43);
var $21 = { n: "#", v: "very similar to using the scope option when compiling.", r: 24, c: 9, s: "f1", u: "f1",  }; //168
$.a($19, $21, 45);
var $22 = { n: "#", v: "Note: globals are not part of the working memory and therefore are not accessible", r: 25, c: 9, s: "f1", u: "f1",  }; //169
$.a($19, $22, 47);
var $23 = { n: "#", v: "in the LHS (when) of your rule.", r: 26, c: 9, s: "f1", u: "f1",  }; //170
$.a($19, $23, 49);
var $24 = { n: "e", v: "fact", r: 27, c: 5, s: "f1", u: "f1",  }; //171
$.a($1, $24, 51);
var $25 = { n: "#", v: "Declares a Fact type.", r: 28, c: 9, s: "f1", u: "f1",  }; //172
$.a($24, $25, 53);
var $26 = { n: "#", v: "A Fact type must be a String or a javascript Function.", r: 29, c: 9, s: "f1", u: "f1",  }; //173
$.a($24, $26, 55);
var $27 = { n: "#", v: "dsl > define 'type-name' {", r: 30, c: 9, s: "f1", u: "f1",  }; //174
$.a($24, $27, 57);
var $28 = { n: "#", v: "In a Session (an istance of a Flow) instances of Fact(s) can be:", r: 31, c: 9, s: "f1", u: "f1",  }; //175
$.a($24, $28, 59);
var $29 = { n: "#", v: ". asserted", r: 32, c: 9, s: "f1", u: "f1",  }; //176
$.a($24, $29, 61);
var $30 = { n: "#", v: ". retracted", r: 33, c: 9, s: "f1", u: "f1",  }; //177
$.a($24, $30, 63);
var $31 = { n: "#", v: ". modified", r: 34, c: 9, s: "f1", u: "f1",  }; //178
$.a($24, $31, 65);
var $32 = { n: "#", v: ". retrivied (all or by Type)", r: 35, c: 9, s: "f1", u: "f1",  }; //179
$.a($24, $32, 67);
var $33 = { n: "tag", v: "def", r: 36, c: 9, s: "f1", u: "f1",  }; //180
$.a($24, $33, 69);
var $34 = { n: "r", v: "propert-y/ies", r: 37, c: 9, s: "f1", u: "f1",  }; //181
$.a($24, $34, 71);
var $35 = { n: "r", v: "ctor", r: 38, c: 9, s: "f1", u: "f1",  }; //182
$.a($24, $35, 73);
var $36 = { n: "one-to-one", v: "", r: 39, c: 13, s: "f1", u: "f1",  }; //183
$.a($35, $36, 75);
var $37 = { n: "r", v: "function/s", r: 40, c: 9, s: "f1", u: "f1",  }; //184
$.a($24, $37, 77);
var $38 = { n: "e", v: "ctor", r: 41, c: 5, s: "f1", u: "f1",  }; //185
$.a($1, $38, 79);
var $39 = { n: "#", v: "Fact type constructor", r: 42, c: 9, s: "f1", u: "f1",  }; //186
$.a($38, $39, 81);
var $40 = { n: "r", v: "param/s", r: 44, c: 9, s: "f1", u: "f1",  }; //187
$.a($38, $40, 83);
var $41 = { n: "r", v: "codeline/s", r: 45, c: 9, s: "f1", u: "f1",  }; //188
$.a($38, $41, 85);
var $42 = { n: "m", v: "getParams", r: 46, c: 9, s: "f1", u: "f1",  }; //189
$.a($38, $42, 87);
var $43 = { n: "var", v: "ret = []", r: 47, c: 13, s: "f1", u: "f1",  }; //190
$.a($42, $43, 89);
var $44 = { n: "foreach", v: "item in this.params", r: 48, c: 13, s: "f1", u: "f1",  }; //191
$.a($42, $44, 91);
var $45 = { n: "_", v: "ret.push(item.wzName)", r: 49, c: 17, s: "f1", u: "f1",  }; //192
$.a($44, $45, 93);
var $46 = { n: "return", v: "ret", r: 50, c: 13, s: "f1", u: "f1",  }; //193
$.a($42, $46, 95);
var $47 = { n: "e", v: "property", r: 52, c: 5, s: "f1", u: "f1",  }; //194
$.a($1, $47, 97);
var $48 = { n: "tag", v: "@", r: 53, c: 9, s: "f1", u: "f1",  }; //195
$.a($47, $48, 99);
var $49 = { n: "r", v: "function/s", r: 54, c: 9, s: "f1", u: "f1",  }; //196
$.a($47, $49, 101);
var $50 = { n: "#", v: "==========================================================", r: 56, c: 5, s: "f1", u: "f1",  }; //197
$.a($1, $50, 103);
var $51 = { n: "#", v: "RULES", r: 57, c: 5, s: "f1", u: "f1",  }; //198
$.a($1, $51, 105);
var $52 = { n: "#", v: "----------------------------------------------------------", r: 58, c: 5, s: "f1", u: "f1",  }; //199
$.a($1, $52, 107);
var $53 = { n: "e", v: "agendaGroup", r: 59, c: 5, s: "f1", u: "f1",  }; //200
$.a($1, $53, 109);
var $54 = { n: "#", v: "Agenda groups allow for logical groups of rules within a flow.", r: 60, c: 9, s: "f1", u: "f1",  }; //201
$.a($53, $54, 111);
var $55 = { n: "#", v: "Rule(s) that do not have an agenda-group specified are placed into", r: 61, c: 9, s: "f1", u: "f1",  }; //202
$.a($53, $55, 113);
var $56 = { n: "#", v: "the main agenda-group.", r: 62, c: 9, s: "f1", u: "f1",  }; //203
$.a($53, $56, 115);
var $57 = { n: "tag", v: "group", r: 63, c: 9, s: "f1", u: "f1",  }; //204
$.a($53, $57, 117);
var $58 = { n: "r", v: "rule/s", r: 65, c: 9, s: "f1", u: "f1",  }; //205
$.a($53, $58, 119);
var $59 = { n: "e", v: "rule", r: 66, c: 5, s: "f1", u: "f1",  }; //206
$.a($1, $59, 121);
var $60 = { n: "#", v: "A Rule", r: 67, c: 9, s: "f1", u: "f1",  }; //207
$.a($59, $60, 123);
var $61 = { n: "#", v: ". applyies to a Fact type", r: 68, c: 9, s: "f1", u: "f1",  }; //208
$.a($59, $61, 125);
var $62 = { n: "#", v: ". has one or many Constraint(s)", r: 69, c: 9, s: "f1", u: "f1",  }; //209
$.a($59, $62, 127);
var $63 = { n: "#", v: ". describe an Action that is execute when the Fact instance", r: 70, c: 9, s: "f1", u: "f1",  }; //210
$.a($59, $63, 129);
var $64 = { n: "#", v: "matches the Constraint(s)", r: 71, c: 9, s: "f1", u: "f1",  }; //211
$.a($59, $64, 131);
var $65 = { n: "a", v: "agendaGroup", r: 72, c: 9, s: "f1", u: "f1",  }; //212
$.a($59, $65, 133);
var $66 = { n: "tag", v: "agenda-group", r: 73, c: 13, s: "f1", u: "f1",  }; //213
$.a($65, $66, 135);
var $67 = { n: "a", v: "autoFocus", r: 75, c: 9, s: "f1", u: "f1",  }; //214
$.a($59, $67, 137);
var $68 = { n: "tag", v: "auto-focus", r: 76, c: 13, s: "f1", u: "f1",  }; //215
$.a($67, $68, 139);
var $69 = { n: "a", v: "salience", r: 78, c: 9, s: "f1", u: "f1",  }; //216
$.a($59, $69, 141);
var $70 = { n: "#", v: "Salience is an option that can be specified on a rule", r: 79, c: 13, s: "f1", u: "f1",  }; //217
$.a($69, $70, 143);
var $71 = { n: "#", v: "giving it a priority and allowing the developer some control", r: 80, c: 13, s: "f1", u: "f1",  }; //218
$.a($69, $71, 145);
var $72 = { n: "#", v: "over conflict resolution of activations.", r: 81, c: 13, s: "f1", u: "f1",  }; //219
$.a($69, $72, 147);
var $73 = { n: "type", v: "integer", r: 83, c: 13, s: "f1", u: "f1",  }; //220
$.a($69, $73, 149);
var $74 = { n: "r", v: "option/s", r: 85, c: 9, s: "f1", u: "f1",  }; //221
$.a($59, $74, 151);
var $75 = { n: "r", v: "constraint/s", r: 86, c: 9, s: "f1", u: "f1",  }; //222
$.a($59, $75, 153);
var $76 = { n: "r", v: "action/s", r: 87, c: 9, s: "f1", u: "f1",  }; //223
$.a($59, $76, 155);
var $77 = { n: "e", v: "option", r: 89, c: 5, s: "f1", u: "f1",  }; //224
$.a($1, $77, 157);
var $78 = { n: "tag", v: "opt", r: 90, c: 9, s: "f1", u: "f1",  }; //225
$.a($77, $78, 159);
var $79 = { n: "e", v: "constraint", r: 92, c: 5, s: "f1", u: "f1",  }; //226
$.a($1, $79, 161);
var $80 = { n: "#", v: "Constraints define how a Rule should match Fact instances.", r: 93, c: 9, s: "f1", u: "f1",  }; //227
$.a($79, $80, 163);
var $81 = { n: "#", v: "A rule should have an array of at least one or many constraints.", r: 94, c: 9, s: "f1", u: "f1",  }; //228
$.a($79, $81, 165);
var $82 = { n: "is-abstract", v: "", r: 96, c: 9, s: "f1", u: "f1",  }; //229
$.a($79, $82, 167);
var $83 = { n: "r", v: "constraint/s", r: 97, c: 9, s: "f1", u: "f1",  }; //230
$.a($79, $83, 169);
var $84 = { n: "e", v: "when : constraint", r: 99, c: 5, s: "f1", u: "f1",  }; //231
$.a($1, $84, 171);
var $85 = { n: "e", v: "for : constraint", r: 101, c: 5, s: "f1", u: "f1",  }; //232
$.a($1, $85, 173);
var $86 = { n: "e", v: "and : constraint", r: 102, c: 5, s: "f1", u: "f1",  }; //233
$.a($1, $86, 175);
var $87 = { n: "e", v: "or : constraint", r: 103, c: 5, s: "f1", u: "f1",  }; //234
$.a($1, $87, 177);
var $88 = { n: "#", v: "The or constraint can be used to check for the existence of multiple facts.", r: 104, c: 9, s: "f1", u: "f1",  }; //235
$.a($87, $88, 179);
var $89 = { n: "e", v: "not : constraint", r: 105, c: 5, s: "f1", u: "f1",  }; //236
$.a($1, $89, 181);
var $90 = { n: "e", v: "is : constraint", r: 106, c: 5, s: "f1", u: "f1",  }; //237
$.a($1, $90, 183);
var $91 = { n: "e", v: "set : constraint", r: 108, c: 5, s: "f1", u: "f1",  }; //238
$.a($1, $91, 185);
var $92 = { n: "#", v: "example", r: 109, c: 9, s: "f1", u: "f1",  }; //239
$.a($91, $92, 187);
var $93 = { n: "#", v: "ittf: set name = value", r: 110, c: 9, s: "f1", u: "f1",  }; //240
$.a($91, $93, 189);
var $94 = { n: "#", v: "dsl : { name: value}", r: 111, c: 9, s: "f1", u: "f1",  }; //241
$.a($91, $94, 191);
var $95 = { n: "e", v: "exists : constraint", r: 113, c: 5, s: "f1", u: "f1",  }; //242
$.a($1, $95, 193);
var $96 = { n: "#", v: "exists is the logical inversion of a not constraint.", r: 114, c: 9, s: "f1", u: "f1",  }; //243
$.a($95, $96, 195);
var $97 = { n: "#", v: "It checks for the existence of a fact in memory.", r: 115, c: 9, s: "f1", u: "f1",  }; //244
$.a($95, $97, 197);
var $98 = { n: "e", v: "from : constraint", r: 116, c: 5, s: "f1", u: "f1",  }; //245
$.a($1, $98, 199);
var $99 = { n: "#", v: "The from modifier allows for the checking of facts that are not necessarily in the workingMemory.", r: 117, c: 9, s: "f1", u: "f1",  }; //246
$.a($98, $99, 201);
var $100 = { n: "#", v: "The from modifier can be used to access properties on a fact in workingMemory or you can use javascript expressions.", r: 118, c: 9, s: "f1", u: "f1",  }; //247
$.a($98, $100, 203);
var $101 = { n: "#", v: "", r: 120, c: 5, s: "f1", u: "f1",  }; //248
$.a($1, $101, 205);
var $102 = { n: "#", v: "ACTION", r: 121, c: 5, s: "f1", u: "f1",  }; //249
$.a($1, $102, 207);
var $103 = { n: "#", v: "", r: 122, c: 5, s: "f1", u: "f1",  }; //250
$.a($1, $103, 209);
var $104 = { n: "e", v: "action", r: 123, c: 5, s: "f1", u: "f1",  }; //251
$.a($1, $104, 211);
var $105 = { n: "#", v: "Defines the code of the Action of a Rule.", r: 124, c: 9, s: "f1", u: "f1",  }; //252
$.a($104, $105, 213);
var $106 = { n: "#", v: "An Action is a function that should be fired when all constraints in the rule match.", r: 125, c: 9, s: "f1", u: "f1",  }; //253
$.a($104, $106, 215);
var $107 = { n: "#", v: "The tag 'then' is for readability of the nools dsl source.", r: 126, c: 9, s: "f1", u: "f1",  }; //254
$.a($104, $107, 217);
var $108 = { n: "tag", v: "then", r: 127, c: 9, s: "f1", u: "f1",  }; //255
$.a($104, $108, 219);
var $109 = { n: "r", v: "codeline/s", r: 128, c: 9, s: "f1", u: "f1",  }; //256
$.a($104, $109, 221);
var $110 = { n: "#", v: "", r: 129, c: 5, s: "f1", u: "f1",  }; //257
$.a($1, $110, 223);
var $111 = { n: "#", v: "EVENTS", r: 130, c: 5, s: "f1", u: "f1",  }; //258
$.a($1, $111, 225);
var $112 = { n: "#", v: "", r: 131, c: 5, s: "f1", u: "f1",  }; //259
$.a($1, $112, 227);
var $113 = { n: "e", v: "event", r: 132, c: 9, s: "f1", u: "f1",  }; //260
$.a($112, $113, 229);
var $114 = { n: "#", v: "A Rule Action may also emit events using the sessions emit function.", r: 133, c: 9, s: "f1", u: "f1",  }; //261
$.a($112, $114, 231);
var $115 = { n: "#", v: "code -> session.emit('my custom event')", r: 134, c: 9, s: "f1", u: "f1",  }; //262
$.a($112, $115, 233);
var $116 = { n: "#", v: "dsl -> emit('my custom event')", r: 135, c: 9, s: "f1", u: "f1",  }; //263
$.a($112, $116, 235);
var $117 = { n: "r", v: "codeline/s", r: 137, c: 9, s: "f1", u: "f1",  }; //264
$.a($112, $117, 237);
var $118 = { n: "#", v: "", r: 138, c: 5, s: "f1", u: "f1",  }; //265
$.a($1, $118, 239);
var $119 = { n: "#", v: "SCOPE", r: 139, c: 5, s: "f1", u: "f1",  }; //266
$.a($1, $119, 241);
var $120 = { n: "#", v: "", r: 140, c: 5, s: "f1", u: "f1",  }; //267
$.a($1, $120, 243);
var $121 = { n: "e", v: "function", r: 141, c: 5, s: "f1", u: "f1",  }; //268
$.a($1, $121, 245);
var $122 = { n: "#", v: "You may define Function(s) that can be used (are in scope)", r: 142, c: 9, s: "f1", u: "f1",  }; //269
$.a($121, $122, 247);
var $123 = { n: "#", v: "inside a Rule.", r: 143, c: 9, s: "f1", u: "f1",  }; //270
$.a($121, $123, 249);
var $124 = { n: "r", v: "param/s", r: 145, c: 9, s: "f1", u: "f1",  }; //271
$.a($121, $124, 251);
var $125 = { n: "r", v: "codeline/s", r: 146, c: 9, s: "f1", u: "f1",  }; //272
$.a($121, $125, 253);
var $126 = { n: "m", v: "getParams", r: 147, c: 9, s: "f1", u: "f1",  }; //273
$.a($121, $126, 255);
var $127 = { n: "var", v: "ret = []", r: 148, c: 13, s: "f1", u: "f1",  }; //274
$.a($126, $127, 257);
var $128 = { n: "foreach", v: "item in this.params", r: 149, c: 13, s: "f1", u: "f1",  }; //275
$.a($126, $128, 259);
var $129 = { n: "_", v: "ret.push(item.wzName)", r: 150, c: 17, s: "f1", u: "f1",  }; //276
$.a($128, $129, 261);
var $130 = { n: "return", v: "ret", r: 151, c: 13, s: "f1", u: "f1",  }; //277
$.a($126, $130, 263);
var $131 = { n: "e", v: "param", r: 152, c: 5, s: "f1", u: "f1",  }; //278
$.a($1, $131, 265);
var $132 = { n: "#", v: "The parameter of a Function", r: 153, c: 9, s: "f1", u: "f1",  }; //279
$.a($131, $132, 267);
var $133 = { n: "e", v: "codeline", r: 154, c: 5, s: "f1", u: "f1",  }; //280
$.a($1, $133, 269);
var $134 = { n: "tag", v: "+", r: 155, c: 9, s: "f1", u: "f1",  }; //281
$.a($133, $134, 271);
var $135 = { n: "#", v: "", r: 157, c: 5, s: "f1", u: "f1",  }; //282
$.a($1, $135, 273);
var $136 = { n: "#", v: "CONFLICT RESOLUTION", r: 158, c: 5, s: "f1", u: "f1",  }; //283
$.a($1, $136, 275);
var $137 = { n: "#", v: "", r: 159, c: 5, s: "f1", u: "f1",  }; //284
$.a($1, $137, 277);
var $138 = { n: "e", v: "conflictResolution", r: 160, c: 5, s: "f1", u: "f1",  }; //285
$.a($1, $138, 279);
var $139 = { n: "tag", v: "conflict-resolution", r: 161, c: 9, s: "f1", u: "f1",  }; //286
$.a($138, $139, 281);
var $140 = { n: "r", v: "resolutionStrateg-y/ies", r: 162, c: 9, s: "f1", u: "f1",  }; //287
$.a($138, $140, 283);
var $141 = { n: "e", v: "resolutionStrategy", r: 164, c: 5, s: "f1", u: "f1",  }; //288
$.a($1, $141, 285);
var $142 = { n: "tag", v: "strategy", r: 165, c: 9, s: "f1", u: "f1",  }; //289
$.a($141, $142, 287);
var $143 = { n: "restrict", v: "", r: 166, c: 9, s: "f1", u: "f1",  }; //290
$.a($141, $143, 289);
var $144 = { n: "enum", v: "salience", r: 167, c: 13, s: "f1", u: "f1",  }; //291
$.a($143, $144, 291);
var $145 = { n: "enum", v: "activationRecency", r: 168, c: 13, s: "f1", u: "f1",  }; //292
$.a($143, $145, 293);
var $146 = { n: "enum", v: "factRecency", r: 169, c: 13, s: "f1", u: "f1",  }; //293
$.a($143, $146, 295);
var $147 = { n: "enum", v: "bucketCounter", r: 170, c: 13, s: "f1", u: "f1",  }; //294
$.a($143, $147, 297);