// generator: /wizzi-labs/wizzi-lab-site/ittf/lib/artifacts/js/module/gen/main.js, utc time: Thu, 23 Mar 2017 19:48:42 GMT
'use strict';
// generated by js.module.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var errors = require('./errors');
var f_verify = require('./functions/verify');
var ContextData = (function () {
    function ContextData(kind,modelKey) {
        _classCallCheck(this, ContextData);
        this.kind = kind;
        this.modelKey = modelKey;
        this.$freezed = false;
        this.clear();
    }
    ContextData.prototype.clear = function() {
        this.$freezed = false;
        this.functions = {};
        this.values = {};
        this.declares = {};
    }
    ContextData.prototype.$freeze = function() {
        this.$freezed = true;
    }
    ContextData.prototype.declare = function(name,init) {
        if (name == '$' && this.$freezed) {
            throw new errors.InvalidVariableNameError('The variable "$" cannot be declared on the global context after it has been freezed.');
        }
        this.declares[name] = true;
        if (typeof (init) !== 'undefined') {
            this.values[name] = init;
        }
        // TODO debug only
        if (f_verify.isObject(init) == false) {
            // log 'ContextData declare', name, init, 'kind', this.kind, this.modelKey
        }
    }
    ContextData.prototype.undeclare = function(name) {
        if (this.declares[name] == true) {
             delete this.declares[name]
        }
        if (this.values[name] == true) {
             delete this.values[name]
        }
    }
    ContextData.prototype.isDeclared = function(name) {
        // log 'isDeclared', name, this.declares[name]
        return this.declares[name] == true;
    }
    ContextData.prototype.setValue = function(name,value) {
        if (name == '$' && this.$freezed) {
            throw new errors.InvalidVariableNameError('The variable "$" cannot be set on the global context after it has been freezed.');
        }
        this.declare(name, value);
        // TODO debug only
        if (f_verify.isObject(value) == false) {
            // log 'ContextData setValue', name, value, 'kind', this.kind, this.modelKey
        }
    }
    ContextData.prototype.setValues = function(values) {
        values = (values || {});
        for (var k in values) {
            this.declare(k, values[k]);
        }
    }
    // Set value only if name is declared
    ContextData.prototype.put = function(name,value) {
        if (this.declares[name] === true) {
            this.values[name] = value;
            return true;
        }
        else {
            return false;
        }
    }
    ContextData.prototype.getValue = function(name) {
        if (this.declares[name] === true) {
            // log 'ContextData getValue found for', name, this.kind, this.modelKey
            return this.values[name];
        }
        else {
            // log 'ContextData getValue not found for', name, this.kind, this.modelKey
            return undefined;
        }
    }
    ContextData.prototype.getValues = function() {
        return this.values;
    }
    ContextData.prototype.getSettableValues = function() {
        var ret = {};
        for (var k in this.values) {
            if (k != '$') {
                ret[k] = this.values[k];
            }
        }
        return ret;
    }
    ContextData.prototype.declareFunction = function(name,fn) {
        this.functions[name] = fn;
    }
    ContextData.prototype.getFunction = function(name) {
        return this.functions[name];
    }
    ContextData.prototype.dumpValues = function() {
        console.log('Dump context value for debug', this.kind);
        for (var k in this.declares) {
            if (f_verify.isObject(this.values[k]) == false) {
                console.log(k, this.values[k]);
            }
        }
    }
    return ContextData;
})();


module.exports = ContextData;
