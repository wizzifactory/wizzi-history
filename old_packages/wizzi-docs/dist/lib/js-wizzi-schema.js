/*
    artifact generator: C:\My\wizzi\v4\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\v4\plugins\wizzi-docs\src\ittf\lib\js-wizzi-schema.js.ittf
    utc time: Mon, 23 Oct 2017 10:07:40 GMT
*/
'use strict';
// generated by wizzi.codegen.js.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var a;
var x = 1;
var y = {
    name: 'stefi', 
    age: 58
};
var fxDouble = function(x) {
    return x * 2;
};
var b,
    z = 1,
    t = {
        name: 'annie', 
        age: 58
    },
    fyHalve = function(y) {
        return y / 2;
    };
function sayHello(name, style) {
    if (style === 'bold') {
        return 'Hello <b>' + name + '</b>';
    }
    else {
        return 'Hello ' + name;
    }
}
// call statement
exec(argument, {
    property: 'hello'
}, [
    arrayItem1, 
    arrayItem2
], function() {
    // ... statements ...
}, retrieveValue(argument)
);
(function() {
    function($) {
        function high(element) {
            $(element).addClass('highlight');
        }
    }
    jQuery})()
;
function Animal(kind, legs, actionFunction) {
}
var obj = new Animal('dog', 4, function() {
    return 'I bark';
});
// if [ elif [ elif [ ... ]]] [ else ] node statements
if (condition) {
    // statements
}
else if (condition) {
    // statements
}
else {
    // statements
}

// while node statement
while (condition) {
    // statements
}

// do node statement
do {
    // statements
} while (condition)

// for node statement
for (js-for-expression) {
    // statements
}

// foreach node statement
var i, i_len=js-expression.length, item-var;
for (i=0; i<i_len; i++) {
    item-var = js-expression[i];
    // statements
}

// try/catch node statement
try {
    // statements
} catch (ex) {
    // statements
}
finally {
    // statements
}

// throw node statement
throw jsExpression;
var Animal = (function () {
    function Animal(kind, legs) {
        _classCallCheck(this, Animal);
        // ... statements ...
    }
    return Animal;
})();

var Dog = (function (Animal) {
    _inherits(Dog, Animal);
    function Dog(name) {
        _get(Object.getPrototypeOf(Dog.prototype), 'constructor', this).call(this, 'bark');
        _classCallCheck(this, Dog);
    }
    Dog.prototype.run = function(time, velocity) {
        // ... statements ...
    }
    Dog.prototype.getDistanceRun = function() {
        // ... statements ...
    }
    return Dog;
})(Animal);

console.log(chalk.green(commaSeparatedExpressionList))
