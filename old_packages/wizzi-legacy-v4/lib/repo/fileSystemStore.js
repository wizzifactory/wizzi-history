/*
    artifact generator: C:\My\wizzi\v4\node_modules\v4-wizzi-js\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\v4\kernel\wizzi-repo\src\ittf\lib\repo\filesystemstore.js.ittf
    utc time: Tue, 10 Oct 2017 15:38:08 GMT
*/
'use strict';
// generated by wizzi.codegen.js.es2015.module
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var verify = require('../util/verify');
var file = require('../util/fs/file');
var FileSystemStore = (function () {
    function FileSystemStore() {
        _classCallCheck(this, FileSystemStore);
        this.storeKind = 'filesystem';
    }
    FileSystemStore.prototype.documentExists = function(filepath, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'documentExists', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isNotEmpty(filepath) === false) {
            return callback(error(
                'InvalidArgument', 'documentExists', { parameter: 'filepath', message: 'The filepath parameter must be a string. Received: ' + filepath }
            ));
        }
        var documentExists;
        try {
            documentExists = file.isFile(filepath);
        } catch (ex) {
            return callback(error('RepoIOError', 'documentExists', 'Checking the existence of document: ' + filepath + '. Message: ' + ex.message, ex)
                )
            ;
        }
        callback(null, documentExists);
    }
    FileSystemStore.prototype.folderExistsSync = function(folderpath) {
        if (verify.isNotEmpty(folderpath) === false) {
            return error(
                'InvalidArgument', 'folderExistsSync', { parameter: 'folderpath', message: 'The folderpath parameter must be a string. Received: ' + folderpath }
            );
        }
        var folderExists;
        try {
            folderExists = file.isDirectory(folderpath);
        } catch (ex) {
            return error('RepoIOError', 'folderExistsSync', 'Checking the existence of folder: ' + folderpath + '. Message: ' + ex.message, ex)
            ;
        }
        return folderExists;
    }
    FileSystemStore.prototype.getFoldersSync = function(parentFolderPath, options) {
        if (verify.isNotEmpty(parentFolderPath) === false) {
            return error(
                'InvalidArgument', 'getFoldersSync', { parameter: 'parentFolderPath', message: 'The parentFolderPath parameter must be a string. Received: ' + parentFolderPath }
            );
        }
        if (verify.isObject(options) === false) {
            return error(
                'InvalidArgument', 'getFoldersSync', { parameter: 'options', message: 'The options parameter must be an object. Received: ' + options }
            );
        }
        var folders;
        try {
            folders = file.getFolders(parentFolderPath, options);
        } catch (ex) {
            return error('RepoIOError', 'getFoldersSync', 'Getting folder: ' + parentFolderPath + '. Message: ' + ex.message, ex)
            ;
        }
        return folders;
    }
    FileSystemStore.prototype.getModelContent = function(filepath, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'getModelContent', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isNotEmpty(filepath) === false) {
            return callback(error(
                'InvalidArgument', 'getModelContent', { parameter: 'filepath', message: 'The filepath parameter must be a string. Received: ' + filepath }
            ));
        }
        var content;
        try {
            content = file.read(filepath);
        } catch (ex) {
            return callback(error('RepoIOError', 'getModelContent', 'Reading filepath: ' + filepath + '. Message: ' + ex.message, ex)
                )
            ;
        }
        return callback(null, content);
    }
    return FileSystemStore;
})();

module.exports = FileSystemStore;
/**
  params
    string code
      # the error name or number
    string method
    string message
      # optional
    { innerError
      # optional
*/
function error(code, method, message, innerError) {
    var parameter = null;
    if (verify.isObject(message)) {
        parameter = message.parameter;
        message = message.message;
    }
    return verify.error(innerError, {
        name: ( verify.isNumber(code) ? 'Err-' + code : code ),
        method: 'wizzi-repo.fileSystemStore.' + method,
        parameter: parameter,
        sourcePath: __filename
    }, message || 'Error message unavailable');
}
